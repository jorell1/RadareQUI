

void sym.polar_range_fiddling.part.0(int64_t arg1, int64_t arg2)
{
    int32_t iVar1;
    uint64_t uVar2;
    int64_t iVar3;
    int64_t iVar4;
    uint64_t uVar5;
    undefined auVar6 [16];
    undefined auVar7 [16];
    
    uVar2 = _reloc..LC12;
    iVar1 = *(int32_t *)(arg1 + 0x1d0);
    iVar3 = (int64_t)*(int32_t *)(arg1 + 0x1cc) * 0x2a8;
    iVar4 = (int64_t)iVar1 * 0x2a8;
    auVar6 = maxsd(ZEXT816(*(uint64_t *)(reloc.parallel_axis_array + iVar3)), 
                   ZEXT816(*(uint64_t *)(reloc.store_and_update_range + iVar3) ^ _reloc..LC12));
    auVar7 = maxsd(ZEXT816(*(uint64_t *)(reloc.parallel_axis_array + iVar4)), 
                   ZEXT816(*(uint64_t *)(reloc.store_and_update_range + iVar4) ^ _reloc..LC12));
    auVar6 = maxsd(auVar6, auVar7);
    uVar5 = SUB168(auVar6, 0);
    if ((*(uint32_t *)(iVar3 + 0x8049e63) & 3) == 3) {
        *(uint64_t *)(reloc.parallel_axis_array + iVar3) = uVar5;
        *(uint64_t *)(reloc.store_and_update_range + iVar3) = uVar5 ^ uVar2;
    }
    iVar3 = (int64_t)iVar1 * 0x2a8;
    if ((*(uint32_t *)(iVar3 + 0x8049e63) & 3) != 3) {
        return;
    }
    *(uint64_t *)(reloc.parallel_axis_array + iVar3) = uVar5;
    *(uint64_t *)(reloc.store_and_update_range + iVar3) = uVar5 ^ uVar2;
    return;
}




















