/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/specfun.o @ 0x8000040 */
#include <stdint.h>
 
int64_t confrac (int64_t arg9, int64_t arg8, int64_t arg7) {
    int64_t var_8h;
    int64_t var_10h;
    int64_t var_18h;
    int64_t var_20h;
    int64_t var_28h;
    int64_t var_30h;
    int64_t var_38h;
    xmm2 = arg9;
    xmm1 = arg8;
    xmm0 = arg7;
    /* [01] -r-x section size 17151 named .text */
    *((rsp + 0x10)) = xmm2;
    __asm ("movapd xmm2, xmm0");
    __asm ("addsd xmm2, xmm1");
    *((rsp + 0x18)) = xmm0;
    *((rsp + 0x20)) = xmm1;
    __asm ("movapd xmm0, xmm2");
    *(rsp) = xmm2;
    lgamma ();
    xmm2 = *((rsp + 0x10));
    *((rsp + 8)) = xmm0;
    __asm ("movapd xmm0, xmm2");
    lgamma ();
    xmm2 = *((rsp + 0x10));
    xmm11 = .rodata.cst8;
    *((rsp + 0x38)) = xmm0;
    __asm ("movapd xmm1, xmm11");
    *((rsp + 0x30)) = xmm2;
    __asm ("subsd xmm1, xmm2");
    __asm ("movapd xmm0, xmm1");
    lgamma ();
    rax = .rodata.cst8;
    xmm10 = *((rsp + 0x18));
    *((rsp + 0x28)) = xmm0;
    xmm11 = rax;
    __asm ("movapd xmm1, xmm10");
    __asm ("addsd xmm1, xmm11");
    __asm ("movapd xmm0, xmm1");
    lgamma ();
    xmm1 = *((rsp + 0x20));
    *((rsp + 0x10)) = xmm0;
    __asm ("movapd xmm0, xmm1");
    lgamma ();
    xmm10 = *((rsp + 0x18));
    xmm3 = *((rsp + 0x38));
    xmm1 = *((rsp + 0x20));
    xmm4 = *((rsp + 0x28));
    __asm ("movapd xmm5, xmm0");
    __asm ("mulsd xmm3, xmm10");
    xmm0 = *((rsp + 8));
    __asm ("mulsd xmm4, xmm1");
    *((rsp + 8)) = xmm1;
    __asm ("addsd xmm0, xmm3");
    __asm ("addsd xmm0, xmm4");
    __asm ("subsd xmm0, qword [rsp + 0x10]");
    __asm ("subsd xmm0, xmm5");
    lgamma ();
    xmm14 = 0;
    eax = 1;
    rcx = .rodata.cst8;
    xmm1 = *((rsp + 8));
    __asm ("movapd xmm15, xmm0");
    __asm ("movapd xmm9, xmm14");
    xmm12 = *(loc..LC4);
    xmm2 = *((rsp + 0x30));
    xmm11 = rcx;
    xmm3 = rcx;
    xmm13 = *(loc..LC5);
    xmm10 = *((rsp + 0x18));
    xmm4 = rcx;
    while (eax <= 0xca) {
        __asm ("ucomisd xmm3, xmm14");
        __asm ("jp 0x8000199");
        if (? != ?) {
            __asm ("movapd xmm5, xmm0");
            __asm ("divsd xmm5, xmm3");
            __asm ("movapd xmm7, xmm5");
            __asm ("movapd xmm6, xmm5");
            __asm ("andpd xmm7, xmm12");
            __asm ("subsd xmm6, xmm15");
            __asm ("mulsd xmm7, xmm13");
            __asm ("andpd xmm6, xmm12");
            __asm ("comisd xmm7, xmm6");
            if (? > ?) {
                goto label_1;
            }
            __asm ("movapd xmm15, xmm5");
        }
        eax++;
        if (eax == 0xca) {
            goto label_2;
        }
label_0:
        xmm8 = 0;
        edx = rax - 1;
        xmm5 = 0;
        __asm ("cvtsi2sd xmm8, eax");
        __asm ("cvtsi2sd xmm5, edx");
        __asm ("movapd xmm7, xmm8");
        __asm ("addsd xmm7, xmm10");
        __asm ("movapd xmm6, xmm5");
        __asm ("addsd xmm6, xmm10");
        __asm ("xorpd xmm6, xmmword [loc..LC3]");
        __asm ("addsd xmm7, xmm5");
        __asm ("addsd xmm5, qword [rsp]");
        __asm ("mulsd xmm6, xmm5");
        __asm ("movapd xmm5, xmm7");
        __asm ("subsd xmm5, xmm11");
        __asm ("mulsd xmm6, xmm2");
        __asm ("divsd xmm6, xmm7");
        __asm ("divsd xmm6, xmm5");
        __asm ("movapd xmm5, xmm1");
        __asm ("subsd xmm5, xmm8");
        __asm ("mulsd xmm5, xmm8");
        __asm ("mulsd xmm5, xmm2");
        __asm ("divsd xmm5, xmm7");
        __asm ("addsd xmm7, xmm11");
        __asm ("mulsd xmm9, xmm6");
        __asm ("mulsd xmm4, xmm6");
        __asm ("addsd xmm9, xmm0");
        __asm ("addsd xmm4, xmm3");
        __asm ("divsd xmm5, xmm7");
        __asm ("mulsd xmm0, xmm5");
        __asm ("mulsd xmm5, xmm3");
        __asm ("addsd xmm0, xmm9");
        __asm ("movapd xmm3, xmm5");
        __asm ("addsd xmm3, xmm4");
        __asm ("movapd xmm5, xmm3");
        __asm ("andpd xmm5, xmm12");
        __asm ("comisd xmm13, xmm5");
    }
    eax++;
    __asm ("movapd xmm3, xmm14");
    if (eax != 0xca) {
        goto label_0;
    }
label_2:
    xmm5 = *(loc..LC2);
label_1:
    __asm ("movapd xmm0, xmm5");
    return rax;
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/specfun.o @ 0x80002b0 */
#include <stdint.h>
 
int64_t humlik (int64_t arg8, int64_t arg7) {
    int64_t var_8h;
    int64_t var_10h;
    int64_t var_18h;
    int64_t var_20h;
    int64_t var_28h;
    int64_t var_30h;
    int64_t var_38h;
    int64_t var_40h;
    int64_t var_48h;
    int64_t var_50h;
    int64_t var_58h;
    int64_t var_60h;
    int64_t var_68h;
    int64_t var_70h;
    int64_t var_78h;
    int64_t var_80h;
    int64_t var_88h;
    int64_t var_90h;
    int64_t var_98h;
    int64_t var_a0h;
    int64_t var_a8h;
    int64_t var_b0h;
    int64_t var_b8h;
    int64_t var_c0h;
    int64_t var_c8h;
    int64_t var_d0h;
    int64_t var_100h;
    int64_t var_130h;
    int64_t var_160h;
    int64_t var_190h;
    int64_t var_1c0h;
    int64_t var_1f0h;
    int64_t var_220h;
    int64_t var_258h;
    xmm1 = arg8;
    xmm0 = arg7;
    __asm ("movapd xmm3, xmm1");
    __asm ("movapd xmm4, xmm1");
    rax = *(fs:0x28);
    *((rsp + 0x258)) = rax;
    eax = 0;
    rax = .LC9;
    __asm ("mulsd xmm3, xmm1");
    __asm ("movapd xmm6, xmm0");
    __asm ("mulsd xmm6, xmm0");
    *((rsp + 0x48)) = rax;
    rax = *(loc..LC10);
    *((rsp + 0x50)) = rax;
    rax = *(loc..LC11);
    *((rsp + 0x58)) = rax;
    rax = *(loc..LC12);
    *((rsp + 0x60)) = rax;
    rax = *(loc..LC13);
    *((rsp + 0x68)) = rax;
    rax = *(loc..LC14);
    *((rsp + 0x78)) = rax;
    rax = *(loc..LC15);
    *((rsp + 0x80)) = rax;
    rax = *(loc..LC16);
    *((rsp + 0x88)) = rax;
    rax = *(loc..LC17);
    *((rsp + 0x90)) = rax;
    rax = *(loc..LC18);
    *((rsp + 0x98)) = rax;
    rax = *(loc..LC19);
    *((rsp + 0xa8)) = rax;
    rax = *(loc..LC20);
    *((rsp + 0xb0)) = rax;
    rax = *(loc..LC21);
    *((rsp + 0xb8)) = rax;
    rax = *(loc..LC22);
    *((rsp + 0xc0)) = rax;
    rax = *(loc..LC23);
    *((rsp + 0xc8)) = rax;
    __asm ("comisd xmm1, xmmword [loc..LC25]");
    xmm8 = *(loc..LC24);
    __asm ("mulsd xmm4, xmm8");
    while (? >= ?) {
        __asm ("addsd xmm3, xmm6");
        __asm ("divsd xmm4, xmm3");
        __asm ("movapd xmm0, xmm4");
label_0:
        rax = *((rsp + 0x258));
        rax ^= *(fs:0x28);
        if (? != ?) {
            goto label_4;
        }
        return rax;
        __asm ("movapd xmm2, xmm0");
        xmm0 = *(loc..LC26);
        xmm5 = *(loc..LC27);
        xmm7 = 0;
        __asm ("mulsd xmm0, xmm1");
        __asm ("subsd xmm5, xmm0");
        __asm ("mulsd xmm5, xmm1");
        __asm ("addsd xmm5, qword [loc..LC28]");
        __asm ("ucomisd xmm7, xmm5");
        __asm ("movapd xmm9, xmm5");
        __asm ("sqrtsd xmm9, xmm9");
        if (? > ?) {
            goto label_5;
        }
label_3:
        __asm ("comisd xmm1, xmmword [loc..LC29]");
        __asm ("movapd xmm10, xmm7");
        if (? < ?) {
            goto label_6;
        }
label_2:
        xmm0 = .LC33;
        __asm ("comisd xmm0, xmm1");
        if (? >= ?) {
            goto label_7;
        }
        xmm0 = *(loc..LC34);
        __asm ("subsd xmm0, xmm1");
label_1:
        __asm ("movapd xmm5, xmm2");
        __asm ("andpd xmm5, xmmword [loc..LC4]");
        __asm ("comisd xmm5, xmm9");
    }
    __asm ("comisd xmm5, xmm10");
    if (? >= ?) {
        goto label_8;
    }
    __asm ("comisd xmm5, xmm0");
    if (? <= ?) {
        xmm0 = .LC48;
        __asm ("mulsd xmm0, xmm1");
        __asm ("comisd xmm0, xmm5");
        if (? <= ?) {
            goto label_9;
        }
        xmm4 = *(loc..LC49);
        xmm7 = *(loc..LC50);
        xmm3 = *(loc..LC52);
        xmm0 = .LC56;
        __asm ("mulsd xmm4, xmm1");
        xmm2 = *(loc..LC51);
        __asm ("mulsd xmm7, xmm1");
        __asm ("mulsd xmm2, xmm1");
        __asm ("movapd xmm5, xmm4");
        __asm ("movapd xmm8, xmm7");
        __asm ("addsd xmm5, xmm0");
        __asm ("addsd xmm7, qword [loc..LC58]");
        __asm ("addsd xmm8, xmm3");
        __asm ("addsd xmm0, xmm1");
        __asm ("addsd xmm3, xmm4");
        __asm ("mulsd xmm5, xmm1");
        __asm ("mulsd xmm8, xmm1");
        __asm ("addsd xmm5, qword [loc..LC57]");
        __asm ("addsd xmm8, qword [loc..LC53]");
        __asm ("mulsd xmm3, xmm1");
        __asm ("mulsd xmm0, xmm1");
        __asm ("addsd xmm3, qword [loc..LC64]");
        __asm ("addsd xmm5, xmm6");
        __asm ("addsd xmm0, qword [loc..LC71]");
        __asm ("mulsd xmm8, xmm1");
        __asm ("addsd xmm8, qword [loc..LC54]");
        __asm ("mulsd xmm3, xmm1");
        __asm ("mulsd xmm5, xmm6");
        __asm ("addsd xmm3, qword [loc..LC65]");
        __asm ("mulsd xmm0, xmm1");
        __asm ("mulsd xmm8, xmm1");
        __asm ("addsd xmm0, qword [loc..LC72]");
        __asm ("addsd xmm8, qword [loc..LC55]");
        __asm ("mulsd xmm3, xmm1");
        __asm ("addsd xmm3, qword [loc..LC66]");
        __asm ("mulsd xmm0, xmm1");
        __asm ("addsd xmm8, xmm5");
        __asm ("movapd xmm5, xmm7");
        __asm ("addsd xmm0, qword [loc..LC73]");
        __asm ("mulsd xmm5, xmm1");
        __asm ("addsd xmm5, qword [loc..LC59]");
        __asm ("mulsd xmm3, xmm1");
        __asm ("mulsd xmm0, xmm1");
        __asm ("addsd xmm3, qword [loc..LC67]");
        __asm ("addsd xmm0, qword [loc..LC74]");
        __asm ("mulsd xmm8, xmm6");
        __asm ("mulsd xmm5, xmm1");
        __asm ("addsd xmm5, qword [loc..LC60]");
        __asm ("mulsd xmm3, xmm1");
        __asm ("mulsd xmm0, xmm1");
        __asm ("addsd xmm3, qword [loc..LC68]");
        __asm ("addsd xmm0, qword [loc..LC75]");
        __asm ("mulsd xmm5, xmm1");
        __asm ("addsd xmm5, qword [loc..LC61]");
        __asm ("mulsd xmm3, xmm1");
        __asm ("mulsd xmm0, xmm1");
        __asm ("addsd xmm3, qword [loc..LC69]");
        __asm ("addsd xmm0, qword [loc..LC76]");
        __asm ("mulsd xmm5, xmm1");
        __asm ("addsd xmm5, qword [loc..LC62]");
        __asm ("mulsd xmm3, xmm1");
        __asm ("mulsd xmm0, xmm1");
        __asm ("addsd xmm3, qword [loc..LC70]");
        __asm ("addsd xmm0, qword [loc..LC77]");
        __asm ("mulsd xmm5, xmm1");
        __asm ("addsd xmm5, qword [loc..LC63]");
        __asm ("mulsd xmm0, xmm1");
        __asm ("addsd xmm0, qword [loc..LC78]");
        __asm ("addsd xmm5, xmm8");
        __asm ("mulsd xmm0, xmm1");
        __asm ("mulsd xmm5, xmm6");
        __asm ("addsd xmm0, qword [loc..LC79]");
        __asm ("addsd xmm3, xmm5");
        __asm ("mulsd xmm3, xmm6");
        __asm ("addsd xmm3, xmm0");
        xmm0 = *(loc..LC80);
        xmm4 = *(loc..LC81);
        __asm ("mulsd xmm4, xmm1");
        __asm ("addsd xmm4, qword [loc..LC82]");
        __asm ("divsd xmm0, xmm3");
        xmm3 = *(loc..LC85);
        __asm ("addsd xmm3, xmm2");
        __asm ("addsd xmm2, qword [loc..LC100]");
        __asm ("mulsd xmm4, xmm1");
        __asm ("addsd xmm4, qword [loc..LC83]");
        __asm ("mulsd xmm3, xmm6");
        __asm ("mulsd xmm2, xmm1");
        __asm ("mulsd xmm4, xmm1");
        __asm ("addsd xmm2, qword [loc..LC101]");
        __asm ("subsd xmm4, qword [loc..LC84]");
        __asm ("mulsd xmm2, xmm1");
        __asm ("addsd xmm4, xmm3");
        __asm ("addsd xmm2, qword [loc..LC102]");
        __asm ("mulsd xmm4, xmm6");
        __asm ("mulsd xmm2, xmm1");
        __asm ("addsd xmm2, qword [loc..LC103]");
        __asm ("mulsd xmm2, xmm1");
        __asm ("movapd xmm3, xmm4");
        xmm4 = *(loc..LC86);
        __asm ("addsd xmm2, qword [loc..LC104]");
        __asm ("mulsd xmm4, xmm1");
        __asm ("addsd xmm4, qword [loc..LC87]");
        __asm ("mulsd xmm2, xmm1");
        __asm ("addsd xmm2, qword [loc..LC105]");
        __asm ("mulsd xmm4, xmm1");
        __asm ("addsd xmm4, qword [loc..LC88]");
        __asm ("mulsd xmm2, xmm1");
        __asm ("addsd xmm2, qword [loc..LC106]");
        __asm ("mulsd xmm4, xmm1");
        __asm ("addsd xmm4, qword [loc..LC89]");
        __asm ("mulsd xmm2, xmm1");
        __asm ("addsd xmm2, qword [loc..LC107]");
        __asm ("mulsd xmm4, xmm1");
        __asm ("addsd xmm4, qword [loc..LC90]");
        __asm ("mulsd xmm4, xmm1");
        __asm ("addsd xmm4, qword [loc..LC91]");
        __asm ("addsd xmm4, xmm3");
        xmm3 = *(loc..LC92);
        __asm ("mulsd xmm3, xmm1");
        __asm ("addsd xmm3, qword [loc..LC93]");
        __asm ("mulsd xmm4, xmm6");
        __asm ("mulsd xmm3, xmm1");
        __asm ("addsd xmm3, qword [loc..LC94]");
        __asm ("mulsd xmm3, xmm1");
        __asm ("addsd xmm3, qword [loc..LC95]");
        __asm ("mulsd xmm3, xmm1");
        __asm ("addsd xmm3, qword [loc..LC96]");
        __asm ("mulsd xmm3, xmm1");
        __asm ("addsd xmm3, qword [loc..LC97]");
        __asm ("mulsd xmm3, xmm1");
        __asm ("subsd xmm3, qword [loc..LC98]");
        __asm ("mulsd xmm3, xmm1");
        __asm ("subsd xmm3, qword [loc..LC99]");
        __asm ("mulsd xmm1, xmm2");
        __asm ("addsd xmm1, qword [loc..LC108]");
        __asm ("addsd xmm3, xmm4");
        __asm ("mulsd xmm6, xmm3");
        __asm ("addsd xmm6, xmm1");
        __asm ("mulsd xmm0, xmm6");
        goto label_0;
label_7:
        __asm ("movapd xmm0, xmm9");
        __asm ("movapd xmm10, xmm9");
        goto label_1;
    }
    xmm0 = *(loc..LC37);
    __asm ("movapd xmm5, xmm3");
    xmm4 = *(loc..LC36);
    __asm ("mulsd xmm5, xmm0");
    __asm ("movapd xmm7, xmm0");
    __asm ("mulsd xmm4, xmm3");
    __asm ("subsd xmm7, xmm5");
    xmm5 = *(loc..LC38);
    __asm ("movapd xmm2, xmm4");
    __asm ("addsd xmm4, xmm0");
    __asm ("subsd xmm2, xmm0");
    __asm ("movapd xmm9, xmm5");
    __asm ("addsd xmm0, xmm3");
    __asm ("mulsd xmm7, xmm3");
    __asm ("mulsd xmm4, xmm3");
    __asm ("mulsd xmm0, xmm3");
    __asm ("addsd xmm4, qword [loc..LC39]");
    __asm ("subsd xmm9, xmm7");
    __asm ("mulsd xmm4, xmm3");
    __asm ("movapd xmm7, xmm6");
    __asm ("addsd xmm7, xmm2");
    __asm ("mulsd xmm2, qword [loc..LC44]");
    __asm ("addsd xmm0, xmm5");
    __asm ("mulsd xmm7, xmm6");
    __asm ("mulsd xmm0, xmm3");
    __asm ("addsd xmm2, xmm6");
    __asm ("addsd xmm9, xmm7");
    xmm7 = *(loc..LC40);
    __asm ("mulsd xmm2, xmm6");
    __asm ("subsd xmm4, xmm7");
    __asm ("addsd xmm0, xmm7");
    __asm ("mulsd xmm9, xmm6");
    __asm ("mulsd xmm0, xmm3");
    __asm ("addsd xmm0, qword [loc..LC41]");
    __asm ("addsd xmm4, xmm9");
    __asm ("mulsd xmm4, xmm6");
    __asm ("addsd xmm0, xmm4");
    __asm ("divsd xmm8, xmm0");
    xmm0 = *(loc..LC42);
    __asm ("mulsd xmm0, xmm3");
    __asm ("addsd xmm0, qword [loc..LC0]");
    __asm ("mulsd xmm0, xmm3");
    __asm ("addsd xmm0, qword [loc..LC43]");
    __asm ("addsd xmm0, xmm2");
    __asm ("mulsd xmm0, xmm6");
    xmm6 = *(loc..LC45);
    __asm ("addsd xmm6, xmm3");
    __asm ("mulsd xmm6, xmm3");
    __asm ("addsd xmm6, qword [loc..LC46]");
    __asm ("mulsd xmm3, xmm6");
    __asm ("addsd xmm3, qword [loc..LC47]");
    __asm ("addsd xmm0, xmm3");
    __asm ("mulsd xmm1, xmm8");
    __asm ("mulsd xmm0, xmm1");
    goto label_0;
label_6:
    xmm5 = *(loc..LC30);
    xmm0 = *(loc..LC32);
    __asm ("mulsd xmm5, xmm1");
    __asm ("addsd xmm5, qword [loc..LC31]");
    __asm ("mulsd xmm5, xmm1");
    __asm ("subsd xmm0, xmm5");
    __asm ("ucomisd xmm7, xmm0");
    __asm ("movapd xmm10, xmm0");
    __asm ("sqrtsd xmm10, xmm10");
    if (? <= ?) {
        goto label_2;
    }
    *((rsp + 0x38)) = xmm1;
    *((rsp + 0x30)) = xmm2;
    *((rsp + 0x28)) = xmm9;
    *((rsp + 0x20)) = xmm6;
    *((rsp + 0x18)) = xmm4;
    *((rsp + 0x10)) = xmm3;
    *((rsp + 8)) = xmm10;
    lgamma ();
    rax = *(loc..LC24);
    xmm7 = 0;
    xmm1 = *((rsp + 0x38));
    xmm2 = *((rsp + 0x30));
    xmm9 = *((rsp + 0x28));
    xmm6 = *((rsp + 0x20));
    xmm4 = *((rsp + 0x18));
    xmm8 = rax;
    xmm3 = *((rsp + 0x10));
    xmm10 = *((rsp + 8));
    goto label_2;
label_8:
    __asm ("movapd xmm2, xmm3");
    xmm4 = *(loc..LC35);
    __asm ("addsd xmm2, xmm3");
    __asm ("subsd xmm2, qword [loc..LC0]");
    __asm ("addsd xmm4, xmm3");
    __asm ("addsd xmm2, xmm6");
    __asm ("movapd xmm0, xmm4");
    __asm ("mulsd xmm0, xmm4");
    __asm ("mulsd xmm2, xmm6");
    __asm ("addsd xmm6, xmm4");
    __asm ("addsd xmm2, xmm0");
    __asm ("movapd xmm0, xmm8");
    __asm ("divsd xmm0, xmm2");
    __asm ("mulsd xmm1, xmm0");
    __asm ("movapd xmm0, xmm6");
    __asm ("mulsd xmm0, xmm1");
    goto label_0;
label_9:
    xmm9 = *(loc..LC109);
    __asm ("movapd xmm3, xmm1");
    eax = 0;
    xmm4 = *(loc..LC6);
    r11 = rsp + 0x130;
    r9 = rsp + 0xd0;
    xmm8 = .rodata.cst8;
    __asm ("addsd xmm3, xmm9");
    rsi = rsp + 0x190;
    rdi = rsp + 0x1c0;
    r8 = rsp + 0x160;
    r10 = rsp + 0x100;
    rdx = rsp + 0x1f0;
    __asm ("movapd xmm10, xmm3");
    rcx = rsp + 0x220;
    __asm ("mulsd xmm10, xmm3");
    while (rax != 0x30) {
        xmm4 = *((rsp + rax + 0xa0));
        __asm ("movapd xmm11, xmm2");
        __asm ("movapd xmm12, xmm8");
        __asm ("movapd xmm13, xmm8");
        __asm ("subsd xmm11, xmm4");
        __asm ("addsd xmm4, xmm2");
        __asm ("movapd xmm0, xmm11");
        __asm ("mulsd xmm0, xmm11");
        *((r11 + rax)) = xmm0;
        __asm ("addsd xmm0, xmm10");
        __asm ("divsd xmm12, xmm0");
        __asm ("mulsd xmm11, xmm12");
        __asm ("movapd xmm0, xmm12");
        *((r9 + rax)) = xmm12;
        __asm ("mulsd xmm0, xmm3");
        *((rsi + rax)) = xmm11;
        *((rdi + rax)) = xmm0;
        __asm ("movapd xmm0, xmm4");
        __asm ("mulsd xmm0, xmm4");
        *((r8 + rax)) = xmm0;
        __asm ("addsd xmm0, xmm10");
        __asm ("divsd xmm13, xmm0");
        __asm ("mulsd xmm4, xmm13");
        __asm ("movapd xmm0, xmm13");
        *((r10 + rax)) = xmm13;
        __asm ("mulsd xmm0, xmm3");
        *((rdx + rax)) = xmm4;
        *((rcx + rax)) = xmm0;
        rax += 8;
    }
    xmm0 = *(loc..LC110);
    __asm ("mulsd xmm0, xmm1");
    __asm ("addsd xmm0, qword [loc..LC111]");
    __asm ("comisd xmm0, xmm5");
    if (rax < 0x30) {
        goto label_10;
    }
    xmm4 = *(loc..LC7);
    xmm3 = *(loc..LC8);
    eax = 0;
    __asm ("movapd xmm0, xmm7");
    while (rax != 0x30) {
        xmm3 = *((rsp + rax + 0x40));
        xmm4 = *((rsp + rax + 0x70));
        xmm1 = *((rdi + rax));
        xmm2 = *((rsi + rax));
        __asm ("addsd xmm1, qword [rcx + rax]");
        __asm ("subsd xmm2, qword [rdx + rax]");
        rax += 8;
        __asm ("mulsd xmm1, xmm3");
        __asm ("mulsd xmm2, xmm4");
        __asm ("subsd xmm1, xmm2");
        __asm ("addsd xmm0, xmm1");
    }
    goto label_0;
label_10:
    xmm5 = *(loc..LC42);
    __asm ("movapd xmm2, xmm7");
    eax = 0;
    xmm4 = *(loc..LC7);
    xmm10 = *(loc..LC8);
    xmm7 = *(loc..LC112);
    __asm ("addsd xmm5, xmm1");
    while (rax != 0x30) {
        xmm10 = *((rsp + rax + 0x40));
        xmm4 = *((rsp + rax + 0x70));
        xmm3 = *((r11 + rax));
        xmm0 = *((r9 + rax));
        __asm ("mulsd xmm4, xmm5");
        xmm11 = *((rdi + rax));
        xmm8 = *((r8 + rax));
        __asm ("mulsd xmm0, xmm3");
        __asm ("addsd xmm3, xmm7");
        __asm ("mulsd xmm11, xmm9");
        __asm ("subsd xmm0, xmm11");
        xmm11 = *((rsi + rax));
        __asm ("mulsd xmm11, xmm4");
        __asm ("mulsd xmm0, xmm10");
        __asm ("mulsd xmm4, qword [rdx + rax]");
        __asm ("addsd xmm0, xmm11");
        xmm11 = *((rcx + rax));
        __asm ("mulsd xmm11, xmm9");
        __asm ("divsd xmm0, xmm3");
        xmm3 = *((r10 + rax));
        rax += 8;
        __asm ("mulsd xmm3, xmm8");
        __asm ("addsd xmm8, xmm7");
        __asm ("subsd xmm3, xmm11");
        __asm ("mulsd xmm3, xmm10");
        __asm ("subsd xmm3, xmm4");
        __asm ("divsd xmm3, xmm8");
        __asm ("addsd xmm0, xmm3");
        __asm ("addsd xmm2, xmm0");
    }
    __asm ("mulsd xmm1, xmm2");
    __asm ("xorpd xmm6, xmmword [loc..LC3]");
    __asm ("movapd xmm0, xmm6");
    *((rsp + 8)) = xmm1;
    lgamma ();
    __asm ("addsd xmm0, qword [rsp + 8]");
    goto label_0;
label_4:
    lgamma ();
label_5:
    __asm ("movapd xmm0, xmm5");
    *((rsp + 0x30)) = xmm1;
    *((rsp + 0x28)) = xmm2;
    *((rsp + 0x20)) = xmm9;
    *((rsp + 0x18)) = xmm6;
    *((rsp + 0x10)) = xmm4;
    *((rsp + 8)) = xmm3;
    lgamma ();
    rax = *(loc..LC24);
    xmm7 = 0;
    xmm1 = *((rsp + 0x30));
    xmm2 = *((rsp + 0x28));
    xmm9 = *((rsp + 0x20));
    xmm6 = *((rsp + 0x18));
    xmm4 = *((rsp + 0x10));
    xmm8 = rax;
    xmm3 = *((rsp + 8));
    goto label_3;
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/specfun.o @ 0x8000cf0 */
#include <stdint.h>
 
uint64_t mtherr (int64_t arg1, int64_t arg2) {
    rdi = arg1;
    rsi = arg2;
    rdx = rdi;
    rbx = (int64_t) esi;
    edi = 1;
    rsi = "\n%s ";
    eax = 0;
    lgamma (rbx);
    rax = obj_ermsg_9884;
    edi = 1;
    rsi = "%s error\n";
    rdx = *((rax + rbx*8));
    eax = 0;
    eax = lgamma ();
    eax = 0;
    return rax;
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/specfun.o @ 0x8000d30 */
#include <stdint.h>
 
int64_t igamma (int64_t arg8) {
    int64_t var_8h;
    int64_t var_10h;
    int64_t var_18h;
    xmm1 = arg8;
    xmm7 = 0;
    __asm ("comisd xmm7, xmm1");
    if (? > ?) {
        goto label_3;
    }
    __asm ("comisd xmm7, xmm0");
    __asm ("movapd xmm2, xmm0");
    if (? >= ?) {
        goto label_3;
    }
    __asm ("ucomisd xmm1, xmm7");
    __asm ("jnp 0x8000d80");
    while (? != ?) {
        __asm ("comisd xmm1, xmmword [loc..LC115]");
        xmm4 = .rodata.cst8;
        *(rsp) = xmm2;
        if (? <= ?) {
            goto label_4;
        }
label_2:
        __asm ("movapd xmm0, xmm4");
        return;
label_3:
        xmm4 = *(loc..LC2);
        __asm ("movapd xmm0, xmm4");
        return;
    }
    __asm ("movapd xmm4, xmm7");
    __asm ("movapd xmm0, xmm4");
    return;
label_4:
    __asm ("movapd xmm0, xmm1");
    *((rsp + 0x10)) = xmm1;
    *((rsp + 0x18)) = xmm4;
    lgamma ();
    xmm2 = *(rsp);
    xmm4 = *((rsp + 0x18));
    *((rsp + 8)) = xmm0;
    __asm ("movapd xmm0, xmm2");
    __asm ("addsd xmm0, xmm4");
    lgamma ();
    xmm2 = *(rsp);
    xmm3 = *((rsp + 8));
    xmm1 = *((rsp + 0x10));
    __asm ("mulsd xmm3, xmm2");
    *((rsp + 8)) = xmm2;
    *(rsp) = xmm1;
    __asm ("subsd xmm3, xmm1");
    __asm ("subsd xmm3, xmm0");
    __asm ("movapd xmm0, xmm3");
    lgamma ();
    xmm1 = *(rsp);
    rax = .rodata.cst8;
    xmm2 = *((rsp + 8));
    *((rsp + 0x10)) = xmm0;
    xmm4 = rax;
    __asm ("comisd xmm1, xmm4");
    if (? <= ?) {
        goto label_5;
    }
    xmm14 = *(loc..LC116);
    __asm ("movapd xmm0, xmm2");
    __asm ("addsd xmm0, xmm14");
    __asm ("comisd xmm1, xmm0");
    if (? < ?) {
        goto label_5;
    }
    xmm8 = rax;
    __asm ("movapd xmm5, xmm1");
    __asm ("movapd xmm9, xmm1");
    xmm13 = *(loc..LC4);
    __asm ("subsd xmm8, xmm2");
    __asm ("movapd xmm10, xmm1");
    xmm15 = *(loc..LC5);
    xmm12 = *(loc..LC117);
    __asm ("addsd xmm10, xmm4");
    eax = 1;
    __asm ("movapd xmm3, xmm4");
    *(rsp) = xmm2;
    xmm7 = 0;
    __asm ("addsd xmm5, xmm8");
    __asm ("movapd xmm11, xmm10");
    __asm ("addsd xmm5, xmm4");
    __asm ("mulsd xmm9, xmm5");
    __asm ("divsd xmm11, xmm9");
    __asm ("movapd xmm6, xmm9");
    __asm ("movapd xmm9, xmm8");
    __asm ("movapd xmm8, xmm5");
    while (eax >= 0xc9) {
        __asm ("divsd xmm6, xmm12");
        __asm ("movapd xmm3, xmm10");
        __asm ("divsd xmm5, xmm12");
        __asm ("movapd xmm1, xmm6");
        __asm ("movapd xmm6, xmm0");
        __asm ("divsd xmm3, xmm12");
        __asm ("movapd xmm10, xmm5");
        __asm ("divsd xmm6, xmm12");
label_0:
        eax++;
        if (eax == 0xc9) {
            goto label_6;
        }
        xmm0 = 0;
        __asm ("addsd xmm9, xmm4");
        __asm ("addsd xmm8, xmm14");
        __asm ("cvtsi2sd xmm0, eax");
        __asm ("movapd xmm5, xmm8");
        __asm ("mulsd xmm5, xmm10");
        __asm ("mulsd xmm0, xmm9");
        __asm ("mulsd xmm3, xmm0");
        __asm ("mulsd xmm0, xmm1");
        __asm ("subsd xmm5, xmm3");
        __asm ("movapd xmm3, xmm8");
        __asm ("mulsd xmm3, xmm6");
        __asm ("subsd xmm3, xmm0");
        __asm ("ucomisd xmm3, xmm7");
        __asm ("movapd xmm0, xmm3");
        __asm ("jp 0x8000f2a");
        if (eax != 0xc9) {
            __asm ("movapd xmm1, xmm5");
            __asm ("movapd xmm2, xmm15");
            __asm ("divsd xmm1, xmm0");
            __asm ("movapd xmm3, xmm1");
            __asm ("subsd xmm11, xmm1");
            __asm ("mulsd xmm3, xmm15");
            __asm ("andpd xmm11, xmm13");
            __asm ("minsd xmm2, xmm3");
            __asm ("comisd xmm2, xmm11");
            if (eax >= 0xc9) {
                goto label_7;
            }
            __asm ("movapd xmm11, xmm1");
        }
        __asm ("movapd xmm1, xmm5");
        __asm ("andpd xmm1, xmm13");
        __asm ("comisd xmm1, xmm12");
    }
    __asm ("movapd xmm1, xmm6");
    __asm ("movapd xmm3, xmm10");
    __asm ("movapd xmm6, xmm0");
    __asm ("movapd xmm10, xmm5");
    goto label_0;
    do {
label_6:
        xmm4 = *(loc..LC2);
        __asm ("movapd xmm0, xmm4");
        return rax;
label_5:
        xmm6 = *(loc..LC5);
        eax = 0xc9;
        __asm ("movapd xmm3, xmm4");
        __asm ("movapd xmm0, xmm4");
        goto label_8;
label_1:
        eax--;
    } while (eax == 0);
label_8:
    __asm ("addsd xmm2, xmm4");
    __asm ("movapd xmm5, xmm1");
    __asm ("divsd xmm5, xmm2");
    __asm ("mulsd xmm0, xmm5");
    __asm ("addsd xmm3, xmm0");
    __asm ("movapd xmm5, xmm3");
    __asm ("mulsd xmm5, xmm6");
    __asm ("comisd xmm5, xmm0");
    if (eax <= 0) {
        goto label_1;
    }
    xmm4 = *((rsp + 0x10));
    __asm ("mulsd xmm4, xmm3");
    __asm ("movapd xmm0, xmm4");
    return rax;
label_7:
    __asm ("mulsd xmm1, qword [rsp + 0x10]");
    xmm2 = *(rsp);
    __asm ("mulsd xmm2, xmm1");
    __asm ("subsd xmm4, xmm2");
    goto label_2;
}




/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/specfun.o @ 0x8001700 */
#include <stdint.h>
 
int64_t f_normal (int64_t arg9) {
    int64_t var_8h;
    int64_t var_10h;
    int64_t var_28h;
    int64_t var_18h;
    xmm2 = arg9;
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x18)) = rax;
    eax = 0;
    rdi = rsp;
    rax = lgamma ();
    rdi = rax;
    lgamma ();
    __asm ("comisd xmm0, xmmword [loc..LC120]");
    if (? > ?) {
        goto label_4;
    }
    xmm0 = 0;
    do {
        xmm1 = 0;
        rdi = rbp;
        rax = lgamma ();
        rdi = rax;
        lgamma ();
        rax = *((rsp + 0x18));
        rax ^= *(fs:0x28);
        if (? != ?) {
            goto label_5;
        }
        return rax;
label_4:
        __asm ("mulsd xmm0, qword [loc..LC121]");
        __asm ("xorpd xmm0, xmmword [loc..LC3]");
        lgamma ();
        __asm ("mulsd xmm0, qword [loc..LC35]");
    } while (1);
label_5:
    rax = lgamma ();
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x28)) = rax;
    eax = 0;
    rbp = rsp + 0x10;
    rdi = rbp;
    rax = lgamma (rbx);
    rdi = rax;
    lgamma ();
    xmm5 = 0;
    __asm ("comisd xmm5, xmm0");
    if (? < ?) {
        __asm ("comisd xmm0, xmmword [loc..LC0]");
        if (? < ?) {
            goto label_6;
        }
    }
    xmm1 = 0;
    rdi = rbp;
    *(reloc.undefined) = 1;
    __asm ("movapd xmm0, xmm1");
    rax = lgamma ();
    rdi = rax;
    lgamma ();
label_0:
    rax = *((rsp + 0x28));
    rax ^= *(fs:0x28);
    if (? != ?) {
        goto label_7;
    }
    return rax;
label_6:
    __asm ("comisd xmm0, xmmword [loc..LC131]");
    ebx = 1;
    if (? > ?) {
        xmm6 = .rodata.cst8;
        ebx = 0;
        __asm ("subsd xmm6, xmm0");
        __asm ("movapd xmm0, xmm6");
    }
    __asm ("comisd xmm0, xmmword [loc..LC132]");
    if (? <= ?) {
        goto label_8;
    }
    __asm ("subsd xmm0, qword [loc..LC35]");
    rax = 0x08004b68;
    xmm2 = *(loc..LC122);
    xmm1 = *(loc..LC123);
    rdx = rax + 0x20;
    __asm ("movapd xmm3, xmm0");
    __asm ("mulsd xmm3, xmm0");
    while (rax != rdx) {
        xmm2 = *(rax);
        __asm ("mulsd xmm1, xmm3");
        rax += 8;
        __asm ("addsd xmm1, xmm2");
    }
    xmm2 = *(loc..LC133);
    rax = 0x08004b28;
    __asm ("mulsd xmm1, xmm3");
    xmm4 = *(loc..LC124);
    rdx = rax + 0x38;
    __asm ("addsd xmm2, xmm3");
    while (rax != rdx) {
        xmm4 = *(rax);
        __asm ("mulsd xmm2, xmm3");
        rax += 8;
        __asm ("addsd xmm2, xmm4");
    }
    __asm ("divsd xmm1, xmm2");
    __asm ("mulsd xmm1, xmm0");
    __asm ("addsd xmm0, xmm1");
    __asm ("mulsd xmm0, qword [loc..LC134]");
label_1:
    rdi = rbp;
    xmm1 = 0;
    rax = lgamma ();
    rdi = rax;
    lgamma ();
    goto label_0;
label_8:
    lgamma ();
    __asm ("mulsd xmm0, qword [loc..LC135]");
    xmm7 = 0;
    __asm ("ucomisd xmm7, xmm0");
    __asm ("movapd xmm2, xmm0");
    __asm ("sqrtsd xmm2, xmm2");
    if (rax > rdx) {
        goto label_9;
    }
label_3:
    __asm ("movapd xmm0, xmm2");
    *((rsp + 8)) = xmm2;
    lgamma ();
    xmm2 = *((rsp + 8));
    xmm3 = *(loc..LC136);
    xmm1 = .rodata.cst8;
    __asm ("divsd xmm0, xmm2");
    __asm ("comisd xmm3, xmm2");
    __asm ("movapd xmm7, xmm2");
    __asm ("divsd xmm1, xmm2");
    __asm ("subsd xmm7, xmm0");
    __asm ("movapd xmm0, xmm7");
    if (rax <= rdx) {
        goto label_10;
    }
    rax = 0x08004ac8;
    xmm3 = *(loc..LC125);
    xmm2 = *(loc..LC126);
    rdx = rax + 0x40;
    while (rax != rdx) {
        xmm3 = *(rax);
        __asm ("mulsd xmm2, xmm1");
        rax += 8;
        __asm ("addsd xmm2, xmm3");
    }
    xmm3 = *(loc..LC137);
    rax = 0x08004a88;
    __asm ("mulsd xmm2, xmm1");
    xmm4 = *(loc..LC127);
    rdx = rax + 0x38;
    __asm ("addsd xmm3, xmm1");
    while (rax != rdx) {
        xmm4 = *(rax);
        __asm ("mulsd xmm3, xmm1");
        rax += 8;
        __asm ("addsd xmm3, xmm4");
    }
label_2:
    __asm ("divsd xmm2, xmm3");
    __asm ("subsd xmm0, xmm2");
    if (ebx == 0) {
        goto label_1;
    }
    __asm ("xorpd xmm0, xmmword [loc..LC3]");
    goto label_1;
label_10:
    rax = 0x08004a28;
    xmm3 = *(loc..LC128);
    xmm2 = *(loc..LC129);
    rdx = rax + 0x40;
    while (rax != rdx) {
        xmm3 = *(rax);
        __asm ("mulsd xmm2, xmm1");
        rax += 8;
        __asm ("addsd xmm2, xmm3");
    }
    xmm3 = *(loc..LC138);
    rax = 0x080049e8;
    __asm ("mulsd xmm2, xmm1");
    xmm4 = *(loc..LC130);
    rdx = rax + 0x38;
    __asm ("addsd xmm3, xmm1");
    while (rax != rdx) {
        xmm4 = *(rax);
        __asm ("mulsd xmm3, xmm1");
        rax += 8;
        __asm ("addsd xmm3, xmm4");
    }
    goto label_2;
label_7:
    lgamma ();
label_9:
    *((rsp + 8)) = xmm2;
    lgamma ();
    xmm2 = *((rsp + 8));
    goto label_3;
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/specfun.o @ 0x8001a90 */
#include <stdint.h>
 
int64_t f_inverse_erf (int64_t arg11, int64_t arg7) {
    int64_t var_18h;
    int64_t var_20h;
    int64_t var_28h;
    int64_t var_30h;
    int64_t var_48h;
    xmm4 = arg11;
    xmm0 = arg7;
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x48)) = rax;
    eax = 0;
    rbp = rsp + 0x30;
    rdi = rbp;
    rax = lgamma ();
    rdi = rax;
    lgamma ();
    xmm3 = .rodata.cst8;
    __asm ("movapd xmm1, xmm0");
    __asm ("andpd xmm0, xmmword [loc..LC4]");
    __asm ("comisd xmm0, xmm3");
    if (? < ?) {
        goto label_3;
    }
    xmm1 = 0;
    rdi = rbp;
    *(reloc.undefined) = 1;
    __asm ("movapd xmm0, xmm1");
    rax = lgamma ();
    rdi = rax;
    lgamma ();
    do {
        rax = *((rsp + 0x48));
        rax ^= *(fs:0x28);
        if (? != ?) {
            goto label_4;
        }
        return rax;
label_3:
        xmm0 = *(loc..LC2);
        __asm ("comisd xmm0, xmm1");
        if (? <= ?) {
            __asm ("comisd xmm1, xmm3");
            if (? > ?) {
                goto label_5;
            }
            __asm ("ucomisd xmm1, xmm0");
            edx = 0;
            __asm ("setnp al");
            if (? != ?) {
                eax = edx;
            }
            if (al != 0) {
                goto label_6;
            }
            __asm ("ucomisd xmm1, xmm3");
            __asm ("setnp dl");
            if (al == 0) {
                eax = edx;
            }
            if (al != 0) {
                goto label_6;
            }
            __asm ("comisd xmm1, xmm0");
            xmm0 = "ffffff";
            if (al > 0) {
                __asm ("comisd xmm0, xmm1");
                if (al > 0) {
                    goto label_7;
                }
            }
            __asm ("comisd xmm1, xmm0");
            xmm0 = .LC148;
            if (al < 0) {
                goto label_8;
            }
            __asm ("comisd xmm0, xmm1");
            if (al < 0) {
                goto label_8;
            }
            __asm ("movapd xmm4, xmm1");
            xmm5 = .LC153;
            xmm2 = *(loc..LC149);
            *((rsp + 0x20)) = xmm1;
            __asm ("mulsd xmm4, xmm1");
            __asm ("mulsd xmm2, xmm4");
            __asm ("movapd xmm0, xmm4");
            __asm ("mulsd xmm0, xmm5");
            __asm ("addsd xmm2, qword [loc..LC150]");
            __asm ("mulsd xmm2, xmm4");
            __asm ("subsd xmm2, qword [loc..LC151]");
            __asm ("addsd xmm0, xmm5");
            __asm ("mulsd xmm2, xmm4");
            __asm ("mulsd xmm0, xmm4");
            __asm ("addsd xmm2, qword [loc..LC152]");
            __asm ("addsd xmm0, qword [loc..LC154]");
            __asm ("mulsd xmm2, xmm1");
            __asm ("mulsd xmm0, xmm4");
            __asm ("subsd xmm0, qword [loc..LC155]");
            __asm ("mulsd xmm0, xmm4");
            __asm ("addsd xmm3, xmm0");
            __asm ("divsd xmm2, xmm3");
            __asm ("movapd xmm0, xmm2");
            *((rsp + 0x18)) = xmm2;
            eax = lgamma ();
            xmm5 = .rodata.cst16;
            *(rsp) = xmm5;
            goto label_9;
        }
label_5:
        rsi = "inverse_error_func: The value out of the range of the function";
        edi = 1;
        eax = 0;
        lgamma ();
        rax = *(loc..LC2);
        xmm0 = rax;
        lgamma ();
label_0:
        rdi = rbp;
        xmm1 = 0;
        rax = lgamma ();
        rdi = rax;
        lgamma ();
    } while (1);
label_8:
    __asm ("comisd xmm1, xmm0");
    if (al > 0) {
        __asm ("comisd xmm3, xmm1");
        if (al > 0) {
            __asm ("movapd xmm0, xmm3");
            *((rsp + 0x18)) = xmm1;
            __asm ("subsd xmm0, xmm1");
            __asm ("mulsd xmm0, qword [loc..LC35]");
            lgamma ();
            xmm6 = .rodata.cst16;
            __asm ("ucomisd xmm0, qword [loc..LC139]");
            rax = .rodata.cst8;
            xmm1 = *((rsp + 0x18));
            *(rsp) = xmm6;
            __asm ("xorpd xmm6, xmm0");
            __asm ("movapd xmm4, xmm6");
            xmm3 = rax;
            __asm ("sqrtsd xmm4, xmm4");
            if (al > 0) {
                goto label_10;
            }
label_1:
            xmm2 = *(loc..LC142);
            xmm0 = .LC146;
            *((rsp + 0x20)) = xmm1;
            __asm ("mulsd xmm2, xmm4");
            __asm ("mulsd xmm0, xmm4");
            __asm ("addsd xmm2, qword [loc..LC143]");
            __asm ("addsd xmm0, qword [loc..LC147]");
            __asm ("mulsd xmm2, xmm4");
            __asm ("mulsd xmm0, xmm4");
            __asm ("subsd xmm2, qword [loc..LC144]");
            __asm ("mulsd xmm2, xmm4");
            __asm ("subsd xmm2, qword [loc..LC145]");
            __asm ("addsd xmm3, xmm0");
            __asm ("divsd xmm2, xmm3");
            __asm ("movapd xmm0, xmm2");
            *((rsp + 0x18)) = xmm2;
            lgamma ();
            __asm ("movapd xmm5, xmmword [rsp]");
label_9:
            xmm2 = *((rsp + 0x18));
            xmm1 = *((rsp + 0x20));
            __asm ("xorpd xmm5, xmm2");
            __asm ("movapd xmm4, xmm5");
            __asm ("mulsd xmm4, xmm2");
        }
    } else {
        xmm5 = .rodata.cst16;
        xmm0 = 0;
        xmm4 = *(loc..LC139);
        __asm ("movapd xmm2, xmm0");
        *(rsp) = xmm5;
    }
    do {
        __asm ("movapd xmm3, xmm0");
        __asm ("movapd xmm0, xmm4");
        *((rsp + 0x20)) = xmm1;
        __asm ("subsd xmm3, xmm1");
        *((rsp + 0x28)) = xmm2;
        *((rsp + 0x18)) = xmm3;
        lgamma ();
        __asm ("mulsd xmm0, qword [loc..LC156]");
        xmm3 = *((rsp + 0x18));
        xmm2 = *((rsp + 0x28));
        __asm ("divsd xmm3, xmm0");
        __asm ("subsd xmm2, xmm3");
        __asm ("movapd xmm0, xmm2");
        *((rsp + 0x18)) = xmm2;
        lgamma ();
        xmm2 = *((rsp + 0x18));
        __asm ("movapd xmm6, xmmword [rsp]");
        __asm ("movapd xmm3, xmm0");
        xmm1 = *((rsp + 0x20));
        __asm ("xorpd xmm6, xmm2");
        __asm ("movapd xmm0, xmm6");
        __asm ("subsd xmm3, xmm1");
        *((rsp + 0x28)) = xmm1;
        __asm ("mulsd xmm0, xmm2");
        *((rsp + 0x20)) = xmm3;
        lgamma ();
        __asm ("mulsd xmm0, qword [loc..LC156]");
        xmm3 = *((rsp + 0x20));
        xmm2 = *((rsp + 0x18));
        __asm ("divsd xmm3, xmm0");
        __asm ("subsd xmm2, xmm3");
        __asm ("movapd xmm0, xmm2");
        *((rsp + 0x18)) = xmm2;
        lgamma ();
        xmm2 = *((rsp + 0x18));
        __asm ("movapd xmm7, xmmword [rsp]");
        __asm ("movapd xmm3, xmm0");
        xmm1 = *((rsp + 0x28));
        __asm ("xorpd xmm7, xmm2");
        __asm ("movapd xmm0, xmm7");
        __asm ("subsd xmm3, xmm1");
        __asm ("mulsd xmm0, xmm2");
        *((rsp + 0x20)) = xmm3;
        lgamma ();
        __asm ("mulsd xmm0, qword [loc..LC156]");
        xmm3 = *((rsp + 0x20));
        xmm2 = *((rsp + 0x18));
        __asm ("divsd xmm3, xmm0");
        __asm ("subsd xmm2, xmm3");
        __asm ("movapd xmm0, xmm2");
        *((rsp + 0x20)) = xmm2;
        lgamma ();
        xmm1 = *((rsp + 0x28));
        xmm2 = *((rsp + 0x20));
        __asm ("movapd xmm7, xmmword [rsp]");
        __asm ("subsd xmm0, xmm1");
        *(rsp) = xmm2;
        __asm ("xorpd xmm7, xmm2");
        *((rsp + 0x18)) = xmm0;
        __asm ("movapd xmm0, xmm7");
        __asm ("mulsd xmm0, xmm2");
        lgamma ();
        xmm1 = *((rsp + 0x18));
        xmm2 = *(rsp);
        __asm ("mulsd xmm0, qword [loc..LC156]");
        __asm ("divsd xmm1, xmm0");
        __asm ("subsd xmm2, xmm1");
        __asm ("movapd xmm0, xmm2");
        goto label_0;
label_6:
        xmm0 = 0;
        *(rsp) = xmm1;
        lgamma ();
        xmm1 = *(rsp);
        __asm ("xorpd xmm1, xmmword [loc..LC3]");
        __asm ("movapd xmm2, xmm0");
        __asm ("movapd xmm0, xmm1");
        __asm ("mulsd xmm0, xmm2");
        goto label_0;
label_7:
        __asm ("movapd xmm0, xmm1");
        *((rsp + 0x18)) = xmm1;
        __asm ("addsd xmm0, xmm3");
        __asm ("mulsd xmm0, qword [loc..LC35]");
        lgamma ();
        xmm5 = .rodata.cst16;
        __asm ("ucomisd xmm0, qword [loc..LC139]");
        rax = .rodata.cst8;
        xmm1 = *((rsp + 0x18));
        *(rsp) = xmm5;
        __asm ("xorpd xmm5, xmm0");
        __asm ("movapd xmm4, xmm5");
        xmm3 = rax;
        __asm ("sqrtsd xmm4, xmm4");
        if (al > 0) {
            goto label_11;
        }
label_2:
        xmm0 = .LC146;
        xmm2 = *(loc..LC142);
        *((rsp + 0x20)) = xmm1;
        __asm ("mulsd xmm0, xmm4");
        __asm ("mulsd xmm2, xmm4");
        __asm ("addsd xmm0, qword [loc..LC147]");
        __asm ("addsd xmm2, qword [loc..LC143]");
        __asm ("mulsd xmm0, xmm4");
        __asm ("mulsd xmm2, xmm4");
        __asm ("subsd xmm2, qword [loc..LC144]");
        __asm ("addsd xmm3, xmm0");
        __asm ("mulsd xmm2, xmm4");
        __asm ("subsd xmm2, qword [loc..LC145]");
        __asm ("xorpd xmm2, xmmword [rsp]");
        __asm ("divsd xmm2, xmm3");
        __asm ("movapd xmm0, xmm2");
        *((rsp + 0x18)) = xmm2;
        lgamma ();
        xmm2 = *((rsp + 0x18));
        __asm ("movapd xmm6, xmmword [rsp]");
        xmm1 = *((rsp + 0x20));
        __asm ("xorpd xmm6, xmm2");
        __asm ("movapd xmm4, xmm6");
        __asm ("mulsd xmm4, xmm2");
    } while (1);
label_4:
    lgamma ();
label_10:
    __asm ("movapd xmm0, xmm6");
    *((rsp + 0x20)) = xmm4;
    lgamma ();
    rax = .rodata.cst8;
    xmm4 = *((rsp + 0x20));
    xmm1 = *((rsp + 0x18));
    xmm3 = rax;
    goto label_1;
label_11:
    __asm ("movapd xmm0, xmm5");
    *((rsp + 0x20)) = xmm4;
    lgamma ();
    rax = .rodata.cst8;
    xmm4 = *((rsp + 0x20));
    xmm1 = *((rsp + 0x18));
    xmm3 = rax;
    goto label_2;
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/specfun.o @ 0x8002050 */
#include <stdint.h>
 
int64_t f_lambertw (int64_t arg7) {
    int64_t var_8h;
    int64_t var_10h;
    int64_t var_28h;
    xmm0 = arg7;
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x28)) = rax;
    eax = 0;
    rbp = rsp + 0x10;
    rdi = rbp;
    rax = lgamma (rbx);
    rdi = rax;
    lgamma ();
    __asm ("movapd xmm4, xmm0");
    xmm0 = *(loc..LC157);
    __asm ("comisd xmm0, xmm4");
    if (? > ?) {
        goto label_4;
    }
    xmm5 = *(loc..LC4);
    xmm7 = *(loc..LC5);
    __asm ("movapd xmm0, xmm4");
    __asm ("andpd xmm0, xmm5");
    __asm ("comisd xmm7, xmm0");
    if (? >= ?) {
        goto label_5;
    }
    xmm7 = .rodata.cst8;
    __asm ("movapd xmm0, xmm4");
    __asm ("comisd xmm7, xmm4");
    if (? > ?) {
        goto label_6;
    }
    *(rsp) = xmm4;
    lgamma ();
    xmm3 = *(loc..LC42);
    xmm4 = *(rsp);
    __asm ("movapd xmm2, xmm0");
    __asm ("comisd xmm4, xmm3");
    if (? > ?) {
        goto label_7;
    }
label_2:
    ebx = 0x14;
    while (ebx <= 0) {
        ebx--;
        if (ebx == 0) {
            goto label_4;
        }
        __asm ("movapd xmm0, xmm2");
        *((rsp + 8)) = xmm4;
        *(rsp) = xmm2;
        lgamma ();
        xmm2 = *(rsp);
        xmm3 = *(loc..LC116);
        __asm ("movapd xmm1, xmm0");
        xmm4 = *((rsp + 8));
        xmm6 = .rodata.cst8;
        __asm ("mulsd xmm0, xmm2");
        __asm ("addsd xmm3, xmm2");
        xmm5 = *(loc..LC4);
        __asm ("mulsd xmm3, qword [loc..LC35]");
        __asm ("addsd xmm6, xmm2");
        __asm ("mulsd xmm1, xmm6");
        __asm ("subsd xmm0, xmm4");
        __asm ("mulsd xmm3, xmm0");
        __asm ("divsd xmm3, xmm6");
        __asm ("subsd xmm1, xmm3");
        __asm ("divsd xmm0, xmm1");
        __asm ("subsd xmm2, xmm0");
        __asm ("andpd xmm0, xmm5");
        __asm ("movapd xmm1, xmm2");
        __asm ("andpd xmm1, xmm5");
        __asm ("addsd xmm1, qword [loc..LC0]");
        __asm ("mulsd xmm1, qword [loc..LC5]");
        __asm ("comisd xmm1, xmm0");
    }
    xmm0 = *(loc..LC2);
    __asm ("comisd xmm0, xmm2");
    while (1) {
label_0:
        xmm1 = 0;
        __asm ("movapd xmm0, xmm2");
        rdi = rbp;
        rax = lgamma ();
        rdi = rax;
        lgamma ();
        rax = *((rsp + 0x28));
        rax ^= *(fs:0x28);
        if (ebx != 0) {
            goto label_8;
        }
        return rax;
label_4:
        xmm2 = *(loc..LC2);
label_1:
        *(reloc.undefined) = 1;
    }
label_5:
    xmm0 = *(loc..LC2);
    __asm ("movapd xmm2, xmm4");
    __asm ("comisd xmm0, xmm2");
    if (ebx < 0) {
        goto label_0;
    }
    goto label_1;
label_6:
    __asm ("mulsd xmm0, qword [loc..LC158]");
    xmm2 = 0;
    __asm ("addsd xmm0, xmm7");
    __asm ("addsd xmm0, xmm0");
    __asm ("ucomisd xmm2, xmm0");
    __asm ("movapd xmm1, xmm0");
    __asm ("sqrtsd xmm1, xmm1");
    if (ebx > 0) {
        goto label_9;
    }
label_3:
    __asm ("movapd xmm0, xmm1");
    xmm3 = *(loc..LC42);
    __asm ("movapd xmm2, xmm1");
    __asm ("subsd xmm2, qword [loc..LC0]");
    __asm ("mulsd xmm0, xmm1");
    __asm ("comisd xmm4, xmm3");
    __asm ("divsd xmm0, xmm3");
    __asm ("subsd xmm2, xmm0");
    __asm ("movapd xmm0, xmm2");
    xmm2 = *(loc..LC159);
    __asm ("mulsd xmm2, xmm1");
    __asm ("mulsd xmm2, xmm1");
    __asm ("mulsd xmm1, xmm2");
    __asm ("movapd xmm2, xmm0");
    __asm ("addsd xmm2, xmm1");
    if (ebx <= 0) {
        goto label_2;
    }
label_7:
    __asm ("movapd xmm0, xmm2");
    *((rsp + 8)) = xmm4;
    *(rsp) = xmm2;
    lgamma ();
    xmm2 = *(rsp);
    xmm4 = *((rsp + 8));
    __asm ("subsd xmm2, xmm0");
    goto label_2;
label_8:
    lgamma ();
label_9:
    *((rsp + 8)) = xmm1;
    *(rsp) = xmm4;
    lgamma ();
    xmm1 = *((rsp + 8));
    xmm4 = *(rsp);
    goto label_3;
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/specfun.o @ 0x80022d0 */
#include <stdint.h>
 
uint64_t airy (int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4) {
    int64_t var_8h;
    int64_t var_10h;
    int64_t var_18h;
    int64_t var_20h;
    int64_t var_28h;
    int64_t var_30h;
    int64_t var_38h;
    int64_t var_40h;
    int64_t var_48h;
    rdi = arg1;
    rsi = arg2;
    rdx = arg3;
    rcx = arg4;
    __asm ("endbr64");
    r13 = rdx;
    r12 = rdi;
    rbx = rsi;
    __asm ("comisd xmm0, xmmword [loc..LC160]");
    if (? > ?) {
        goto label_7;
    }
    __asm ("movapd xmm2, xmm0");
    xmm0 = *(loc..LC162);
    __asm ("comisd xmm0, xmm2");
    if (? > ?) {
        goto label_8;
    }
    __asm ("comisd xmm2, xmmword [loc..LC165]");
    if (? >= ?) {
        goto label_9;
    }
    xmm9 = *(loc..LC42);
    xmm4 = .rodata.cst8;
    eax = 0;
    edx = 0;
label_1:
    __asm ("movapd xmm8, xmm2");
    __asm ("movapd xmm10, xmm2");
    __asm ("movapd xmm1, xmm4");
    xmm7 = *(loc..LC4);
    __asm ("mulsd xmm8, xmm2");
    __asm ("movapd xmm3, xmm4");
    __asm ("movapd xmm11, xmm4");
    xmm6 = *(loc..LC168);
    __asm ("movapd xmm5, xmm8");
    __asm ("mulsd xmm5, xmm2");
    do {
        __asm ("mulsd xmm3, xmm5");
        __asm ("addsd xmm1, xmm4");
        __asm ("mulsd xmm2, xmm5");
        __asm ("divsd xmm3, xmm1");
        __asm ("addsd xmm1, xmm4");
        __asm ("divsd xmm2, xmm1");
        __asm ("divsd xmm3, xmm1");
        __asm ("addsd xmm1, xmm4");
        __asm ("divsd xmm2, xmm1");
        __asm ("addsd xmm11, xmm3");
        __asm ("movapd xmm0, xmm3");
        __asm ("divsd xmm0, xmm11");
        __asm ("addsd xmm10, xmm2");
        __asm ("andpd xmm0, xmm7");
        __asm ("comisd xmm0, xmm6");
    } while (? > ?);
    xmm12 = *(loc..LC169);
    __asm ("movapd xmm0, xmm11");
    xmm11 = *(loc..LC170);
    __asm ("mulsd xmm0, xmm12");
    __asm ("mulsd xmm10, xmm11");
    if (edx == 0) {
        goto label_10;
    }
label_0:
    __asm ("mulsd xmm8, qword [loc..LC35]");
    __asm ("movapd xmm1, xmm5");
    __asm ("addsd xmm0, xmm10");
    xmm10 = *(loc..LC171);
    __asm ("divsd xmm1, xmm9");
    __asm ("mulsd xmm0, xmm10");
    __asm ("movapd xmm2, xmm8");
    *(r13) = xmm0;
    xmm0 = *(loc..LC36);
    __asm ("divsd xmm2, xmm9");
    __asm ("movapd xmm3, xmm1");
    __asm ("addsd xmm3, xmm4");
    do {
        __asm ("mulsd xmm2, xmm5");
        __asm ("divsd xmm1, xmm0");
        __asm ("addsd xmm0, xmm4");
        __asm ("divsd xmm2, xmm0");
        __asm ("addsd xmm0, xmm4");
        __asm ("mulsd xmm1, xmm5");
        __asm ("divsd xmm1, xmm0");
        __asm ("addsd xmm8, xmm2");
        __asm ("divsd xmm2, xmm0");
        __asm ("addsd xmm0, xmm4");
        __asm ("addsd xmm3, xmm1");
        __asm ("movapd xmm9, xmm1");
        __asm ("divsd xmm9, xmm3");
        __asm ("andpd xmm9, xmm7");
        __asm ("comisd xmm9, xmm6");
    } while (edx > 0);
    __asm ("mulsd xmm8, xmm12");
    __asm ("mulsd xmm3, xmm11");
    while (1) {
        __asm ("addsd xmm3, xmm8");
        eax = 0;
        __asm ("mulsd xmm10, xmm3");
        *(rbp) = xmm10;
label_2:
        return eax;
        __asm ("movapd xmm0, xmm8");
        __asm ("subsd xmm0, xmm3");
        *(rbx) = xmm0;
    }
label_10:
    __asm ("movapd xmm1, xmm0");
    __asm ("subsd xmm1, xmm10");
    *(r12) = xmm1;
    goto label_0;
label_9:
    xmm6 = 0;
    __asm ("movapd xmm4, xmm2");
    __asm ("ucomisd xmm6, xmm2");
    __asm ("sqrtsd xmm4, xmm4");
    if (eax > 0) {
        goto label_11;
    }
label_5:
    __asm ("movapd xmm1, xmm2");
    *((rsp + 0x18)) = xmm2;
    xmm9 = *(loc..LC42);
    __asm ("addsd xmm1, xmm2");
    *((rsp + 0x10)) = xmm4;
    *((rsp + 8)) = xmm9;
    __asm ("mulsd xmm1, xmm4");
    __asm ("divsd xmm1, xmm9");
    __asm ("movapd xmm0, xmm1");
    *(rsp) = xmm1;
    lgamma ();
    xmm4 = *((rsp + 0x10));
    xmm6 = 0;
    xmm1 = *(rsp);
    xmm9 = *((rsp + 8));
    xmm2 = *((rsp + 0x18));
    __asm ("movapd xmm3, xmm0");
    __asm ("ucomisd xmm6, xmm4");
    __asm ("movapd xmm5, xmm4");
    __asm ("sqrtsd xmm5, xmm5");
    if (eax > 0) {
        goto label_12;
    }
label_6:
    __asm ("movapd xmm7, xmm5");
    xmm4 = .rodata.cst8;
    rax = 0x08004828;
    __asm ("addsd xmm7, xmm5");
    rdx = rax + 0x38;
    __asm ("movapd xmm0, xmm4");
    __asm ("divsd xmm0, xmm1");
    xmm1 = AN;
    __asm ("mulsd xmm7, xmm3");
    do {
        __asm ("mulsd xmm1, xmm0");
        rax += 8;
        __asm ("addsd xmm1, qword [rax - 8]");
    } while (rax != rdx);
    rax = 0x080047e8;
    xmm6 = AD;
    rdx = rax + 0x38;
    do {
        __asm ("mulsd xmm6, xmm0");
        rax += 8;
        __asm ("addsd xmm6, qword [rax - 8]");
    } while (rax != rdx);
    rax = 0x080047a8;
    rdx = rax + 0x38;
    __asm ("divsd xmm1, xmm6");
    xmm6 = *(loc..LC163);
    __asm ("mulsd xmm1, xmm6");
    __asm ("divsd xmm1, xmm7");
    *(r12) = xmm1;
    xmm1 = *(loc..LC166);
    __asm ("mulsd xmm1, xmm5");
    __asm ("divsd xmm1, xmm3");
    __asm ("movapd xmm8, xmm1");
    xmm1 = APN;
    do {
        __asm ("mulsd xmm1, xmm0");
        rax += 8;
        __asm ("addsd xmm1, qword [rax - 8]");
    } while (rax != rdx);
    rax = 0x08004768;
    xmm7 = APD;
    rdx = rax + 0x38;
    do {
        __asm ("mulsd xmm7, xmm0");
        rax += 8;
        __asm ("addsd xmm7, qword [rax - 8]");
    } while (rax != rdx);
    __asm ("divsd xmm1, xmm7");
    eax = 4;
    edx = 1;
    __asm ("comisd xmm2, xmmword [loc..LC167]");
    __asm ("mulsd xmm1, xmm8");
    *(rbx) = xmm1;
    if (rax <= rdx) {
        goto label_1;
    }
    rax = 0x08004728;
    xmm1 = BN16;
    rdx = rax + 0x20;
    do {
        __asm ("mulsd xmm1, xmm0");
        rax += 8;
        __asm ("addsd xmm1, qword [rax - 8]");
    } while (rax != rdx);
    xmm2 = BD16;
    __asm ("mulsd xmm1, xmm0");
    rax = 0x080046e8;
    rdx = rax + 0x20;
    __asm ("addsd xmm2, xmm0");
    do {
        __asm ("mulsd xmm2, xmm0");
        rax += 8;
        __asm ("addsd xmm2, qword [rax - 8]");
    } while (rax != rdx);
    __asm ("divsd xmm1, xmm2");
    rax = 0x080046a8;
    __asm ("mulsd xmm3, xmm6");
    rdx = rax + 0x20;
    __asm ("addsd xmm1, xmm4");
    __asm ("mulsd xmm1, xmm3");
    __asm ("divsd xmm1, xmm5");
    *(r13) = xmm1;
    xmm1 = BPPN;
    do {
        __asm ("mulsd xmm1, xmm0");
        rax += 8;
        __asm ("addsd xmm1, qword [rax - 8]");
    } while (rax != rdx);
    xmm2 = BPPD;
    __asm ("mulsd xmm1, xmm0");
    rax = 0x08004668;
    rdx = rax + 0x20;
    __asm ("addsd xmm2, xmm0");
    do {
        __asm ("mulsd xmm2, xmm0");
        rax += 8;
        __asm ("addsd xmm2, qword [rax - 8]");
    } while (rax != rdx);
    __asm ("divsd xmm1, xmm2");
    eax = 0;
    __asm ("mulsd xmm5, xmm3");
    __asm ("addsd xmm4, xmm1");
    __asm ("mulsd xmm5, xmm4");
    *(rbp) = xmm5;
    goto label_2;
label_8:
    xmm7 = .rodata.cst16;
    __asm ("movapd xmm0, xmm2");
    __asm ("ucomisd xmm2, qword [loc..LC139]");
    __asm ("xorpd xmm0, xmm7");
    __asm ("movapd xmm1, xmm0");
    __asm ("sqrtsd xmm1, xmm1");
    if (rax > rdx) {
        goto label_13;
    }
label_3:
    __asm ("mulsd xmm2, qword [loc..LC135]");
    xmm0 = 0;
    __asm ("movapd xmm8, xmm1");
    __asm ("ucomisd xmm0, xmm1");
    __asm ("sqrtsd xmm8, xmm8");
    __asm ("mulsd xmm2, xmm1");
    __asm ("divsd xmm2, qword [loc..LC42]");
    if (rax > rdx) {
        goto label_14;
    }
label_4:
    xmm4 = .rodata.cst8;
    xmm6 = *(loc..LC163);
    rax = 0x08004608;
    xmm0 = AFN;
    rdx = rax + 0x40;
    __asm ("movapd xmm5, xmm4");
    __asm ("movapd xmm9, xmm6");
    __asm ("divsd xmm5, xmm2");
    __asm ("divsd xmm9, xmm8");
    __asm ("movapd xmm1, xmm5");
    __asm ("mulsd xmm1, xmm5");
    do {
        __asm ("mulsd xmm0, xmm1");
        rax += 8;
        __asm ("addsd xmm0, qword [rax - 8]");
    } while (rax != rdx);
    __asm ("movapd xmm3, xmm0");
    xmm0 = AFD;
    rax = 0x080045a8;
    __asm ("mulsd xmm3, xmm1");
    rdx = rax + 0x40;
    __asm ("addsd xmm0, xmm1");
    do {
        __asm ("mulsd xmm0, xmm1");
        rax += 8;
        __asm ("addsd xmm0, qword [rax - 8]");
    } while (rax != rdx);
    rax = 0x08004548;
    rdx = rax + 0x50;
    __asm ("divsd xmm3, xmm0");
    xmm0 = AGN;
    __asm ("addsd xmm3, xmm4");
    do {
        __asm ("mulsd xmm0, xmm1");
        rax += 8;
        __asm ("addsd xmm0, qword [rax - 8]");
    } while (rax != rdx);
    xmm10 = AGD;
    __asm ("mulsd xmm0, xmm5");
    rax = 0x080044e8;
    rdx = rax + 0x48;
    __asm ("addsd xmm10, xmm1");
    do {
        __asm ("mulsd xmm10, xmm1");
        rax += 8;
        __asm ("addsd xmm10, qword [rax - 8]");
    } while (rax != rdx);
    __asm ("divsd xmm0, xmm10");
    rdi = rsp + 0x48;
    rsi = rsp + 0x40;
    *((rsp + 0x38)) = xmm4;
    __asm ("addsd xmm2, qword [loc..LC164]");
    *((rsp + 0x30)) = xmm6;
    *((rsp + 0x28)) = xmm3;
    *((rsp + 0x20)) = xmm1;
    *((rsp + 0x18)) = xmm5;
    *((rsp + 0x10)) = xmm9;
    *((rsp + 8)) = xmm8;
    *(rsp) = xmm0;
    __asm ("movapd xmm0, xmm2");
    lgamma ();
    xmm3 = *((rsp + 0x28));
    xmm10 = *(rsp);
    rax = 0x08004488;
    xmm2 = *((rsp + 0x48));
    xmm11 = *((rsp + 0x40));
    rdx = rax + 0x40;
    __asm ("movapd xmm0, xmm3");
    __asm ("movapd xmm12, xmm10");
    xmm9 = *((rsp + 0x10));
    xmm7 = .rodata.cst16;
    __asm ("mulsd xmm0, xmm2");
    xmm4 = *((rsp + 0x38));
    xmm6 = *((rsp + 0x30));
    __asm ("mulsd xmm12, xmm11");
    xmm1 = *((rsp + 0x20));
    xmm5 = *((rsp + 0x18));
    __asm ("mulsd xmm3, xmm11");
    xmm8 = *((rsp + 8));
    __asm ("mulsd xmm10, xmm2");
    __asm ("subsd xmm0, xmm12");
    __asm ("addsd xmm3, xmm10");
    __asm ("mulsd xmm0, xmm9");
    __asm ("mulsd xmm9, xmm3");
    *(r12) = xmm0;
    *(r13) = xmm9;
    xmm0 = APFN;
    do {
        __asm ("mulsd xmm0, xmm1");
        rax += 8;
        __asm ("addsd xmm0, qword [rax - 8]");
    } while (rax != rdx);
    xmm3 = APFD;
    __asm ("mulsd xmm0, xmm1");
    rax = 0x08004428;
    rdx = rax + 0x40;
    __asm ("addsd xmm3, xmm1");
    do {
        __asm ("mulsd xmm3, xmm1");
        rax += 8;
        __asm ("addsd xmm3, qword [rax - 8]");
    } while (rax != rdx);
    __asm ("divsd xmm0, xmm3");
    rax = 0x080043c8;
    rdx = rax + 0x50;
    __asm ("addsd xmm4, xmm0");
    xmm0 = APGN;
    do {
        __asm ("mulsd xmm0, xmm1");
        rax += 8;
        __asm ("addsd xmm0, qword [rax - 8]");
    } while (rax != rdx);
    __asm ("mulsd xmm5, xmm0");
    xmm0 = APGD;
    rax = 0x08004368;
    rdx = rax + 0x48;
    __asm ("addsd xmm0, xmm1");
    do {
        __asm ("mulsd xmm0, xmm1");
        rax += 8;
        __asm ("addsd xmm0, qword [rax - 8]");
    } while (rax != rdx);
    __asm ("divsd xmm5, xmm0");
    __asm ("movapd xmm0, xmm11");
    __asm ("movapd xmm1, xmm2");
    eax = 0;
    __asm ("mulsd xmm0, xmm4");
    __asm ("mulsd xmm4, xmm2");
    __asm ("mulsd xmm8, xmm6");
    __asm ("movapd xmm6, xmm4");
    __asm ("xorpd xmm7, xmm8");
    __asm ("mulsd xmm1, xmm5");
    __asm ("mulsd xmm5, xmm11");
    __asm ("addsd xmm0, xmm1");
    __asm ("subsd xmm6, xmm5");
    __asm ("mulsd xmm7, xmm0");
    __asm ("mulsd xmm6, xmm8");
    *(rbx) = xmm7;
    *(rbp) = xmm6;
    return rax;
label_7:
    xmm0 = *(loc..LC161);
    *(rdi) = 0;
    eax = 0xffffffff;
    *(rsi) = 0;
    *(rdx) = xmm0;
    *(rcx) = xmm0;
    goto label_2;
label_13:
    *((rsp + 8)) = xmm2;
    *(rsp) = xmm1;
    lgamma ();
    xmm2 = *((rsp + 8));
    xmm1 = *(rsp);
    goto label_3;
label_14:
    __asm ("movapd xmm0, xmm1");
    *((rsp + 8)) = xmm8;
    *(rsp) = xmm2;
    lgamma ();
    xmm8 = *((rsp + 8));
    xmm2 = *(rsp);
    goto label_4;
label_11:
    __asm ("movapd xmm0, xmm2");
    *((rsp + 8)) = xmm4;
    *(rsp) = xmm2;
    lgamma ();
    xmm4 = *((rsp + 8));
    xmm2 = *(rsp);
    goto label_5;
label_12:
    *((rsp + 8)) = xmm0;
    __asm ("movapd xmm0, xmm4");
    *((rsp + 0x20)) = xmm9;
    *((rsp + 0x10)) = xmm5;
    lgamma ();
    xmm2 = *((rsp + 0x18));
    xmm1 = *(rsp);
    xmm9 = *((rsp + 0x20));
    xmm5 = *((rsp + 0x10));
    xmm3 = *((rsp + 8));
    goto label_6;
}




