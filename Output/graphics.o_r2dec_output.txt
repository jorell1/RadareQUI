/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/graphics.o @ 0x8000040 */
#include <stdint.h>
 
int64_t histeps_compare (int64_t arg1, int64_t arg2) {
    rdi = arg1;
    rsi = arg2;
    /* [01] -r-x section size 58714 named .text */
    __asm ("endbr64");
    rax = histeps_current_plot;
    rdx = *((rax + 0x1e8));
    rax = *(rdi);
    rax <<= 6;
    xmm1 = *((rdx + rax + 8));
    rax = *(rsi);
    rax <<= 6;
    xmm0 = *((rdx + rax + 8));
    eax = 0xffffffff;
    __asm ("comisd xmm0, xmm1");
    if (rax <= 0) {
        eax = 0;
        __asm ("comisd xmm1, xmm0");
        al = (rax > 0) ? 1 : 0;
    }
    return rax;
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/graphics.o @ 0x8000090 */
#include <stdint.h>
 
int32_t compare_ypoints (int64_t arg1, int64_t arg2) {
    rdi = arg1;
    rsi = arg2;
    __asm ("endbr64");
    if (*(obj.boxplot_factor_sort_required) != 0) {
        xmm0 = *((rdi + 0x18));
        xmm1 = *((rsi + 0x18));
        eax = 1;
        __asm ("comisd xmm0, xmm1");
        if (*(obj.boxplot_factor_sort_required) > 0) {
            goto label_0;
        }
        __asm ("comisd xmm1, xmm0");
        eax = 0xffffffff;
        if (*(obj.boxplot_factor_sort_required) > 0) {
            goto label_0;
        }
    }
    xmm0 = *((rdi + 0x10));
    xmm1 = *((rsi + 0x10));
    eax = 1;
    __asm ("comisd xmm0, xmm1");
    if (*(obj.boxplot_factor_sort_required) <= 0) {
        eax = 0;
        __asm ("comisd xmm1, xmm0");
        al = (*(obj.boxplot_factor_sort_required) > 0) ? 1 : 0;
        eax = -eax;
    }
label_0:
    return eax;
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/graphics.o @ 0x80000e0 */
#include <stdint.h>
 
uint64_t adjust_nonlinear_offset (uint32_t arg1) {
    int64_t var_8h_2;
    int64_t var_10h;
    int64_t var_18h;
    int64_t var_20h;
    int64_t var_28h;
    int64_t var_4h;
    int64_t var_8h;
    rdi = arg1;
    rbx = rdi;
    rbp = *((rdi + 0xa0));
    xmm4 = *((rbp + 0x18));
    xmm0 = *((rbp + 0x10));
    __asm ("movapd xmm2, xmm4");
    __asm ("subsd xmm2, xmm0");
    __asm ("andpd xmm2, xmmword [loc..LC0]");
    if (*((rdi + 0x18c)) == 2) {
        goto label_0;
    }
    if (*(0x0800e5e4) != 2) {
        xmm1 = 0;
        __asm ("ucomisd xmm1, qword [0x0800e5f8]");
        __asm ("jp 0x80001eb");
        if (*(0x0800e5e4) != 2) {
            goto label_1;
        }
    }
    xmm1 = *(0x0800e638);
    if (*(0x0800e624) != 2) {
        __asm ("ucomisd xmm1, qword [loc..LC1]");
        __asm ("jp 0x80001eb");
        if (*(0x0800e624) != 2) {
            goto label_1;
        }
    }
    xmm3 = *(0x0800e5f8);
    do {
        __asm ("mulsd xmm3, xmm2");
        rdi = rbx;
        __asm ("mulsd xmm1, xmm2");
        __asm ("subsd xmm0, xmm3");
        __asm ("addsd xmm1, xmm4");
        *((rbp + 0x10)) = xmm0;
        *((rbp + 0x18)) = xmm1;
        eval_link_function ();
        rdi = rbx;
        *((rbx + 0x10)) = xmm0;
        xmm0 = *((rbp + 0x18));
        eax = eval_link_function ();
        *((rbx + 0x18)) = xmm0;
        return eax;
label_0:
        if (*(obj.loff) != 2) {
            xmm1 = 0;
            __asm ("ucomisd xmm1, qword [0x0800e6b0]");
            __asm ("jp 0x80001eb");
            if (*(obj.loff) != 2) {
                goto label_1;
            }
        }
        xmm1 = *(0x0800e670);
        if (*(obj.roff) != 2) {
            __asm ("ucomisd xmm1, qword [loc..LC1]");
            __asm ("jp 0x80001eb");
            if (*(obj.roff) != 2) {
                goto label_1;
            }
        }
        xmm3 = *(0x0800e6b0);
    } while (1);
label_1:
    rsi = "nonlinear axis offsets must be in graph units";
    edi |= 0xffffffff;
    eax = 0;
    rax = eval_link_function ();
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/graphics.o @ 0x8000680 */
#include <stdint.h>
 
int64_t plot_border (int64_t arg11, int64_t arg10, int64_t arg9) {
    int64_t var_8h;
    int64_t var_10h;
    int64_t var_1ch;
    int64_t var_20h;
    int64_t var_28h;
    int64_t var_10h_2;
    int64_t var_18h;
    int64_t var_20h_2;
    int64_t var_30h;
    int64_t var_40h;
    int64_t var_50h;
    int64_t var_60h;
    int64_t var_68h;
    xmm4 = arg11;
    xmm3 = arg10;
    xmm2 = arg9;
    edi = 3;
    ebx = *(reloc.draw_border);
    rax = *(fs:0x28);
    *((rsp + 0x68)) = rax;
    eax = 0;
    rax = *(reloc.term);
    ebx &= 0xf;
    uint64_t (*rax + 0x110)(void, void) (rbx, rbp);
    rdi = reloc_border_lp;
    eval_link_function ();
    if (ebx == 0xf) {
        goto label_6;
    }
label_4:
    rax = *(reloc.term);
    esi = *(0x0809225f);
    edi = *(reloc.plot_bounds);
    uint64_t (*rax + 0x58)() ();
    if ((*(reloc.draw_border) & 2) != 0) {
        goto label_7;
    }
    rax = *(reloc.term);
    esi = *(reloc.closepath);
    edi = *(reloc.plot_bounds);
    uint64_t (*rax + 0x58)() ();
label_3:
    if ((*(reloc.draw_border) & 1) != 0) {
        goto label_8;
    }
    rax = *(reloc.term);
    esi = *(reloc.closepath);
    edi = *(0x08092257);
    uint64_t (*rax + 0x58)() ();
label_2:
    if ((*(reloc.draw_border) & 8) != 0) {
        goto label_9;
    }
    rax = *(reloc.term);
    esi = *(0x0809225f);
    edi = *(0x08092257);
    uint64_t (*rax + 0x58)() ();
label_1:
    if ((*(reloc.draw_border) & 4) != 0) {
        goto label_10;
    }
    rax = *(reloc.term);
    esi = *(0x0809225f);
    edi = *(reloc.plot_bounds);
    uint64_t (*rax + 0x58)() ();
label_5:
    if (ebx == 0xf) {
        goto label_11;
    }
    do {
        if ((*(0x0809223c) & 0x10) != 0) {
            goto label_12;
        }
label_0:
        rax = *(reloc.term);
        edi = 4;
        uint64_t (*rax + 0x110)() ();
        rax = *((rsp + 0x68));
        rax ^= *(fs:0x28);
        if ((*(0x0809223c) & 0x10) != 0) {
            goto label_13;
        }
        return rax;
label_10:
        if (*(0x0809330b) != 0) {
            goto label_14;
        }
        rax = *(reloc.term);
        esi = *(0x0809225f);
        edi = *(reloc.plot_bounds);
        uint64_t (*rax + 0x60)() ();
    } while (ebx != 0xf);
label_11:
    eval_link_function ();
    if ((*(0x0809223c) & 0x10) == 0) {
        goto label_0;
    }
label_12:
    __asm ("movdqu xmm3, xmmword [reloc.plot_bounds]");
    xmm0 = *(loc..LC8);
    rdi = rsp;
    rax = *(reloc.raxis);
    __asm ("movdqu xmm2, xmmword [reloc.border_lp]");
    *((rsp + 0x10)) = xmm3;
    __asm ("mulsd xmm0, qword [rsp + 0x18]");
    __asm ("movdqu xmm4, xmmword [reloc.clip_area]");
    __asm ("movdqu xmm5, xmmword [reloc.x_axis]");
    rbx = *(reloc.clip_area);
    *(rsp) = xmm2;
    __asm ("movdqu xmm6, xmmword [reloc.polar_radius]");
    __asm ("movdqu xmm7, xmmword [reloc.mgrid_lp]");
    *((rsp + 0x60)) = rax;
    rax = reloc_plot_bounds;
    *(reloc.clip_area) = rax;
    *((rsp + 0x20)) = xmm4;
    *((rsp + 0x18)) = xmm0;
    *((rsp + 0x30)) = xmm5;
    *((rsp + 0x40)) = xmm6;
    *((rsp + 0x50)) = xmm7;
    eval_link_function ();
    xmm0 = largest_polar_circle;
    xmm1 = 0;
    __asm ("comisd xmm1, xmm0");
    while (1) {
        draw_polar_circle ();
        *(reloc.clip_area) = rbx;
        goto label_0;
label_9:
        if (*(0x08093063) == 0) {
            rax = *(reloc.term);
            esi = *(0x0809225f);
            edi = *(0x08092257);
            uint64_t (*rax + 0x60)() ();
            goto label_1;
label_8:
            if (*(0x0809286b) == 0) {
                rax = *(reloc.term);
                esi = *(reloc.closepath);
                edi = *(0x08092257);
                uint64_t (*rax + 0x60)() ();
                goto label_2;
label_7:
                if (*(reloc.draw_key) != 0) {
                    goto label_15;
                }
                rax = *(reloc.term);
                esi = *(reloc.closepath);
                edi = *(reloc.plot_bounds);
                uint64_t (*rax + 0x60)() ();
                goto label_3;
label_6:
                eval_link_function ();
                goto label_4;
            }
            xmm0 = *(0x08092783);
            *(reloc.x_axis) = 2;
            eax = eval_link_function ();
            xmm0 = *(0x0809277b);
            eax = eval_link_function ();
            esi = *(reloc.closepath);
            edi = eax;
            rax = *(reloc.term);
            uint64_t (*rax + 0x58)() ();
            rax = *(reloc.term);
            edi = ebp;
            esi = *(reloc.closepath);
            uint64_t (*rax + 0x60)() ();
            rax = *(reloc.term);
            esi = *(reloc.closepath);
            edi = *(0x08092257);
            uint64_t (*rax + 0x58)() ();
            goto label_2;
label_14:
            xmm0 = *(0x08093223);
            *(reloc.x_axis) = 6;
            eax = eval_link_function ();
            xmm0 = *(0x0809321b);
            r12d = eax;
            eax = eval_link_function ();
            edi = r12d;
            esi = *(0x0809225f);
            rax = *(reloc.term);
            uint64_t (*rax + 0x58)() ();
            rax = *(reloc.term);
            edi = ebp;
            esi = *(0x0809225f);
            uint64_t (*rax + 0x60)() ();
            rax = *(reloc.term);
            esi = *(0x0809225f);
            edi = *(0x08092257);
            uint64_t (*rax + 0x58)() ();
            goto label_5;
        }
        xmm0 = *(0x08092f7b);
        *(reloc.y_axis) = 5;
        eax = eval_link_function ();
        xmm0 = *(0x08092f73);
        eax = eval_link_function ();
        edi = *(0x08092257);
        esi = eax;
        rax = *(reloc.term);
        uint64_t (*rax + 0x58)() ();
        rax = *(reloc.term);
        esi = ebp;
        edi = *(0x08092257);
        uint64_t (*rax + 0x60)() ();
        rax = *(reloc.term);
        esi = *(0x0809225f);
        edi = *(0x08092257);
        uint64_t (*rax + 0x58)() ();
        goto label_1;
label_15:
        xmm0 = *(reloc.jitter);
        *(reloc.y_axis) = 1;
        eax = eval_link_function ();
        xmm0 = *(reloc.draw_polar_clip_line);
        r12d = eax;
        eax = eval_link_function ();
        esi = r12d;
        edi = *(reloc.plot_bounds);
        rax = *(reloc.term);
        uint64_t (*rax + 0x58)() ();
        rax = *(reloc.term);
        esi = ebp;
        edi = *(reloc.plot_bounds);
        uint64_t (*rax + 0x60)() ();
        rax = *(reloc.term);
        esi = *(reloc.closepath);
        edi = *(reloc.plot_bounds);
        uint64_t (*rax + 0x58)() ();
        goto label_3;
        xmm0 = *(0x0809349b);
        eval_link_function ();
        *(obj.largest_polar_circle) = xmm0;
    }
label_13:
    eval_link_function ();
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/graphics.o @ 0x8002de0 */
#include <stdint.h>
 
void ytick2d_callback (signed int64_t arg_64h, int64_t arg11, int64_t arg10, int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4) {
    int64_t var_8h;
    int64_t var_10h;
    int64_t var_18h_2;
    int64_t var_20h;
    int64_t var_28h;
    int64_t var_30h;
    int64_t var_38h_2;
    int64_t var_40h;
    int64_t var_48h;
    int64_t var_8h_2;
    int64_t var_10h_2;
    int64_t var_18h_3;
    int64_t var_28h_2;
    int64_t var_30h_2;
    int64_t var_38h;
    int64_t var_8h_3;
    int64_t var_10h_3;
    int64_t var_18h;
    xmm4 = arg11;
    xmm3 = arg10;
    rdi = arg1;
    rsi = arg2;
    rdx = arg3;
    rcx = arg4;
    __asm ("endbr64");
    xmm1 = 0;
    r15 = rcx;
    r14 = rsi;
    r12 = rdi;
    r13 = *(reloc.term);
    rax = *(fs:0x28);
    *((rsp + 0x18)) = rax;
    eax = 0;
    eax = *((r13 + 0x24));
    eax *= *(reloc.tic_direction);
    __asm ("cvtsi2sd xmm1, eax");
    if (edx <= 0) {
        goto label_8;
    }
    if (edx == 1) {
        goto label_9;
    }
    xmm2 = 0;
    if (edx <= 4) {
        goto label_10;
    }
label_0:
    __asm ("mulsd xmm1, xmm2");
    __asm ("cvttsd2si ebp, xmm1");
    if (*((r12 + 0x18c)) <= 0xa) {
        goto label_11;
    }
    __asm ("subsd xmm0, qword [r12 + 0x10]");
    xmm1 = 0;
    __asm ("mulsd xmm0, qword [r12 + 0x80]");
    __asm ("cvtsi2sd xmm1, dword [r12 + 0x78]");
    __asm ("addsd xmm0, xmm1");
    __asm ("addsd xmm0, qword [loc..LC8]");
    __asm ("cvttsd2si ebx, xmm0");
label_1:
    if (r15 != 0) {
        goto label_12;
    }
    goto label_13;
    do {
        r15 = *((r15 + 0x18));
        if (r15 == 0) {
            goto label_13;
        }
label_12:
        xmm0 = *(r15);
        eax = eval_link_function ();
        eax -= ebx;
        eax += 2;
    } while (eax > 4);
    r14d = 0;
label_13:
    if (*((rsp + 0x64)) < 0xfffffffe) {
        goto label_14;
    }
    edi = 5;
    uint64_t (*r13 + 0x110)() ();
    rdi = rsp + 0x60;
    eval_link_function ();
    edi = *(reloc.plot_bounds);
    if (*(reloc.keyT) == 0) {
        goto label_2;
    }
    while (*(reloc.z_axis) >= ebx) {
label_2:
        esi = ebx;
        uint64_t (*r13 + 0x58)() ();
        edi = *(0x08092257);
        esi = ebx;
        uint64_t (*r13 + 0x60)() ();
label_3:
        rdi = reloc_border_lp;
        eval_link_function ();
        edi = 6;
        uint64_t (*r13 + 0x110)() ();
label_14:
        edi = *(reloc.tic_start);
        esi = ebx;
        uint64_t (*r13 + 0x58)() ();
        edi = *(reloc.tic_start);
        esi = ebx;
        edi += ebp;
        uint64_t (*r13 + 0x60)() ();
        edi = *(reloc.tic_mirror);
        if (edi >= 0) {
            esi = ebx;
            uint64_t (*r13 + 0x58)() ();
            edi = *(reloc.tic_mirror);
            esi = ebx;
            edi -= ebp;
            uint64_t (*r13 + 0x60)() ();
        }
        if (r14 != 0) {
            rcx = "ytics";
            rdx = rsp + 0x10;
            rsi = rsp + 8;
            rdi = r12 + 0x108;
            eval_link_function ();
            ecx = *((r12 + 0xd0));
            if (ecx != 0) {
                goto label_15;
            }
label_4:
            edi = *((r12 + 0x131));
            edi ^= 1;
            edi = (int32_t) dil;
            eval_link_function ();
            __asm ("cvttsd2si esi, qword [rsp + 0x10]");
            r9d = *(reloc.rotate_tics);
            __asm ("cvttsd2si edi, qword [rsp + 0x10]");
            rdx = r14;
            r8d = *(reloc.tic_vjust);
            ecx = *(reloc.tic_hjust);
            edi += *(reloc.tic_text);
            esi += ebx;
            eval_link_function (*((r12 + 0xc8)));
            edi = 0;
            eval_link_function ();
            rdi = reloc_border_lp;
            eval_link_function ();
        }
        rax = *((rsp + 0x18));
        rax ^= *(fs:0x28);
        if (esi != 0) {
            goto label_16;
        }
        return;
label_9:
        xmm2 = *((rdi + 0x158));
        goto label_0;
label_8:
        xmm2 = *((rdi + 0x150));
        goto label_0;
label_11:
        eax = eval_link_function ();
        ebx = eax;
        goto label_1;
label_10:
        rdx = (int64_t) edx;
        rax = reloc_ticscale;
        xmm2 = *((rax + rdx*8));
        goto label_0;
    }
    edx = *(reloc.boxplot_opts);
    eax = *(0x08092257);
    if (edx >= eax) {
        goto label_2;
    }
    r8d = *(0x0809251f);
    if (r8d <= edi) {
        goto label_2;
    }
    if (edx > edi) {
        esi = ebx;
        uint64_t (*r13 + 0x58)() ();
        edi = *(reloc.boxplot_opts);
        esi = ebx;
        uint64_t (*r13 + 0x60)() ();
        r8d = *(0x0809251f);
        eax = *(0x08092257);
    }
    if (eax <= r8d) {
        goto label_3;
    }
    esi = ebx;
    edi = r8d;
    uint64_t (*r13 + 0x58)() ();
    edi = *(0x08092257);
    esi = ebx;
    uint64_t (*r13 + 0x60)() ();
    goto label_3;
label_15:
    rdi = r12 + 0xd0;
    eval_link_function ();
    goto label_4;
label_16:
    eval_link_function ();
    __asm ("endbr64");
    __asm ("movapd xmm1, xmm0");
    r12 = rsi;
    rbx = rdi;
    xmm2 = *((rdi + 0x10));
    xmm0 = *((rdi + 0x18));
    rax = *(fs:0x28);
    *((rsp + 0x38)) = rax;
    eax = 0;
    __asm ("subsd xmm1, xmm2");
    __asm ("subsd xmm0, xmm2");
    __asm ("divsd xmm1, xmm0");
    if (edx <= 0) {
        goto label_17;
    }
    if (edx != 1) {
        if (edx > 4) {
            goto label_18;
        }
        rdx = (int64_t) edx;
        rax = reloc_ticscale;
        xmm0 = 0;
        xmm7 = *((rax + rdx*8));
        *(rsp) = xmm7;
    } else {
        xmm7 = *((rdi + 0x158));
        xmm0 = 0;
        *(rsp) = xmm7;
    }
    do {
label_5:
        __asm ("comisd xmm0, xmm1");
        if (edx < 4) {
            if (*(reloc.grid_spiderweb) != 0) {
                if (*((rbx + 0x140)) == 0) {
                    goto label_19;
                }
                if (*(0x0809228f) != 0xfffffffd) {
                    goto label_20;
                }
            }
label_19:
            xmm0 = spoke_x1;
            __asm ("subsd xmm0, qword [obj.spoke_x0]");
            __asm ("mulsd xmm0, xmm1");
            *((rsp + 8)) = xmm0;
            xmm0 = spoke_y1;
            __asm ("subsd xmm0, qword [obj.spoke_y0]");
            __asm ("movapd xmm5, xmm0");
            xmm0 = *(rsp);
            __asm ("mulsd xmm5, xmm1");
            __asm ("mulsd xmm0, qword [obj.spoke_dy]");
            *((rsp + 0x10)) = xmm5;
            __asm ("addsd xmm0, xmm5");
            eax = eval_link_function ();
            xmm0 = *(rsp);
            __asm ("mulsd xmm0, qword [obj.spoke_dx]");
            __asm ("addsd xmm0, qword [rsp + 8]");
            r14d = eax;
            eax = eval_link_function ();
            xmm0 = *(rsp);
            xmm6 = *((rsp + 0x10));
            __asm ("mulsd xmm0, qword [obj.spoke_dy]");
            r13d = eax;
            __asm ("subsd xmm6, xmm0");
            __asm ("movapd xmm0, xmm6");
            eax = eval_link_function ();
            xmm0 = *(rsp);
            xmm4 = *((rsp + 8));
            __asm ("mulsd xmm0, qword [obj.spoke_dx]");
            __asm ("subsd xmm4, xmm0");
            __asm ("movapd xmm0, xmm4");
            eax = eval_link_function ();
            ecx = r14d;
            edx = r13d;
            esi = ebp;
            edi = eax;
            eval_link_function ();
            if (r12 == 0) {
                goto label_6;
            }
            xmm1 = *(rsp);
            __asm ("addsd xmm1, qword [loc..LC28]");
            xmm4 = *((rsp + 8));
            __asm ("movapd xmm0, xmm1");
            *(rsp) = xmm1;
            __asm ("mulsd xmm0, qword [obj.spoke_dx]");
            __asm ("subsd xmm4, xmm0");
            __asm ("movapd xmm0, xmm4");
            eax = eval_link_function ();
            xmm1 = *(rsp);
            xmm0 = *((rsp + 0x10));
            __asm ("mulsd xmm1, qword [obj.spoke_dy]");
            __asm ("subsd xmm0, xmm1");
            eax = eval_link_function ();
            rsi = rsp + 0x28;
            rdx = rsp + 0x30;
            rdi = rbx + 0x108;
            rcx = loc__LC29;
            r13d = eax;
            eval_link_function ();
            esi = *((rbx + 0xd0));
            if (esi != 0) {
                goto label_21;
            }
label_7:
            edi = *((rbx + 0x131));
            edi ^= 1;
            edi = (int32_t) dil;
            eval_link_function ();
            __asm ("cvttsd2si esi, qword [rsp + 0x30]");
            r9d = *((rbx + 0x138));
            __asm ("cvttsd2si edi, qword [rsp + 0x30]");
            rdx = r12;
            ecx = 1;
            r8d = 1;
            esi += r13d;
            edi += ebp;
            eval_link_function (*((rbx + 0xc8)));
            edi = 0;
            eval_link_function ();
            ecx = *((rbx + 0xd0));
            if (ecx != 0) {
                goto label_22;
            }
        }
label_6:
        rax = *((rsp + 0x38));
        rax ^= *(fs:0x28);
        if (ecx != 0) {
            goto label_23;
        }
        return;
label_17:
        xmm6 = *((rdi + 0x150));
        xmm0 = 0;
        *(rsp) = xmm6;
    } while (1);
label_18:
    xmm0 = 0;
    *(rsp) = xmm0;
    goto label_5;
label_20:
    ebp = *((rbx + 0x88));
    rsi = "polygon";
    *(rsp) = xmm1;
    eax = rbp + 1;
    rax = (int64_t) eax;
    r12 = rax * 3;
    r12 <<= 2;
    rdi = r12;
    rax = eval_link_function ();
    rcx = r12 - 0xc;
    *((rsp + 0x10)) = rax;
    *((rsp + 0x18)) = rcx;
    if (ebp <= 0) {
        goto label_24;
    }
    xmm3 = 0;
    xmm1 = *(rsp);
    r12 = rax;
    rbx = rax;
    __asm ("cvtsi2sd xmm3, ebp");
    r13d = 0;
    r15 = rsp + 0x30;
    r14 = rsp + 0x28;
    *((rsp + 8)) = xmm3;
    do {
        xmm7 = *(loc..LC21);
        edx = 0;
        rsi = r15;
        rdi = r14;
        xmm0 = 0;
        *(rsp) = xmm1;
        rbx += 0xc;
        __asm ("cvtsi2sd xmm0, r13d");
        __asm ("mulsd xmm0, qword [loc..LC27]");
        r13d++;
        __asm ("divsd xmm0, qword [rsp + 8]");
        __asm ("subsd xmm7, xmm0");
        __asm ("movapd xmm0, xmm7");
        eval_link_function ();
        xmm0 = *((rsp + 0x28));
        eax = eval_link_function ();
        xmm0 = *((rsp + 0x30));
        *((rbx - 0xc)) = eax;
        eax = eval_link_function ();
        xmm1 = *(rsp);
        *((rbx - 8)) = eax;
    } while (ebp != r13d);
    rcx = *((rsp + 0x10));
    rdx = *((rsp + 0x18));
    eax = *(rcx);
    rdx += rcx;
    *(rdx) = eax;
    eax = *((rcx + 4));
    *((rdx + 4)) = eax;
    eax = rbp - 1;
    rax *= 3;
    rbx = rcx + rax*4;
    do {
        ecx = *((r12 + 0x10));
        edx = *((r12 + 0xc));
        r12 += 0xc;
        esi = *((r12 - 8));
        edi = *((r12 - 0xc));
        eval_link_function ();
    } while (rbx != r12);
    do {
        rdi = *((rsp + 0x10));
        eval_link_function ();
        goto label_6;
label_21:
        rdi = rbx + 0xd0;
        eval_link_function ();
        goto label_7;
label_22:
        rdi = reloc_border_lp;
        eval_link_function ();
        goto label_6;
label_24:
        rcx = *((rsp + 0x10));
        r12 = *((rsp + 0x18));
        eax = *(rcx);
        r12 += rcx;
        *(r12) = eax;
        eax = *((rcx + 4));
        *((r12 + 4)) = eax;
    } while (1);
label_23:
    eval_link_function ();
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/graphics.o @ 0x8002a90 */
#include <stdint.h>
 
void xtick2d_callback (int64_t arg_80h, signed int64_t arg_84h, int64_t arg7, int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4) {
    int64_t var_18h;
    int64_t var_8h;
    int64_t var_10h;
    signed int64_t var_1ch;
    int64_t var_28h;
    int64_t var_30h;
    int64_t var_38h;
    xmm0 = arg7;
    rdi = arg1;
    rsi = arg2;
    rdx = arg3;
    rcx = arg4;
    __asm ("endbr64");
    r15 = rcx;
    r14 = rsi;
    r12 = rdi;
    r13 = *(reloc.term);
    arg_80h = xmm0;
    rax = *(fs:0x28);
    *((rsp + 0x38)) = rax;
    eax = 0;
    eax = *(reloc.tic_direction);
    ebp = *((r13 + 0x20));
    *((rsp + 0x1c)) = eax;
    if (edx <= 0) {
        goto label_4;
    }
    if (edx == 1) {
        goto label_5;
    }
    xmm3 = 0;
    *((rsp + 0x10)) = xmm3;
    if (edx <= 4) {
        goto label_6;
    }
label_0:
    xmm0 = arg_80h;
    eax = eval_link_function ();
    ebx = eax;
    if (r15 != 0) {
        goto label_7;
    }
    goto label_8;
    do {
        r15 = *((r15 + 0x18));
        if (r15 == 0) {
            goto label_8;
        }
label_7:
        xmm0 = *(r15);
        eax = eval_link_function ();
        eax -= ebx;
        eax += 2;
    } while (eax > 4);
    r14d = 0;
label_8:
    if (*((rsp + 0x84)) < 0xfffffffe) {
        goto label_9;
    }
    edi = 5;
    uint64_t (*r13 + 0x110)() ();
    rdi = rsp + 0x80;
    eval_link_function ();
    if (*((r12 + 0x18c)) == 7) {
        goto label_10;
    }
    esi = *(reloc.closepath);
    while (*(0x0809251f) <= ebx) {
label_1:
        edi = ebx;
        uint64_t (*r13 + 0x58)() ();
        esi = *(0x0809225f);
        edi = ebx;
        uint64_t (*r13 + 0x60)() ();
label_2:
        rdi = reloc_border_lp;
        eval_link_function ();
        edi = 6;
        uint64_t (*r13 + 0x110)() ();
label_9:
        rax = *(reloc.clip_area);
        if (*(rax) <= ebx) {
            if (*((rax + 4)) < ebx) {
                goto label_11;
            }
            ebp *= *((rsp + 0x1c));
            xmm0 = 0;
            esi = *(reloc.tic_start);
            edi = ebx;
            __asm ("cvtsi2sd xmm0, ebp");
            __asm ("mulsd xmm0, qword [rsp + 0x10]");
            __asm ("cvttsd2si ebp, xmm0");
            uint64_t (*r13 + 0x58)() ();
            esi = *(reloc.tic_start);
            edi = ebx;
            esi += ebp;
            uint64_t (*r13 + 0x60)() ();
            esi = *(reloc.tic_mirror);
            if (esi >= 0) {
                edi = ebx;
                uint64_t (*r13 + 0x58)() ();
                esi = *(reloc.tic_mirror);
                edi = ebx;
                esi -= ebp;
                uint64_t (*r13 + 0x60)() ();
            }
            if (r14 == 0) {
                goto label_11;
            }
            rcx = "xtics";
            rdx = rsp + 0x30;
            rsi = rsp + 0x28;
            rdi = r12 + 0x108;
            eval_link_function ();
            ecx = *((r12 + 0xd0));
            if (ecx != 0) {
                goto label_12;
            }
label_3:
            edi = *((r12 + 0x131));
            edi ^= 1;
            edi = (int32_t) dil;
            eval_link_function ();
            __asm ("cvttsd2si edi, qword [rsp + 0x28]");
            r9d = *(reloc.rotate_tics);
            __asm ("cvttsd2si esi, qword [rsp + 0x38]");
            rdx = r14;
            r8d = *(reloc.tic_vjust);
            ecx = *(reloc.tic_hjust);
            esi += *(reloc.tic_text);
            edi += ebx;
            eval_link_function (*((r12 + 0xc8)));
            edi = 0;
            eval_link_function ();
            rdi = reloc_border_lp;
            eval_link_function ();
        }
label_11:
        rax = *((rsp + 0x38));
        rax ^= *(fs:0x28);
        if (edi != 0) {
            goto label_13;
        }
        return;
label_5:
        xmm4 = *((rdi + 0x158));
        *((rsp + 0x10)) = xmm4;
        goto label_0;
label_4:
        xmm2 = *((rdi + 0x150));
        *((rsp + 0x10)) = xmm2;
        goto label_0;
label_6:
        rdx = (int64_t) edx;
        rax = reloc_ticscale;
        xmm5 = *((rax + rdx*8));
        *((rsp + 0x10)) = xmm5;
        goto label_0;
    }
    if (*(reloc.boxplot_opts) >= ebx) {
        goto label_1;
    }
    r8d = *(0x08092527);
    if (r8d <= esi) {
        goto label_1;
    }
    edx = *(reloc.z_axis);
    eax = *(0x0809225f);
    if (edx >= eax) {
        goto label_1;
    }
    if (edx > esi) {
        edi = ebx;
        uint64_t (*r13 + 0x58)() ();
        esi = *(reloc.z_axis);
        edi = ebx;
        uint64_t (*r13 + 0x60)() ();
        r8d = *(0x08092527);
        eax = *(0x0809225f);
    }
    if (eax <= r8d) {
        goto label_2;
    }
    esi = r8d;
    goto label_1;
label_12:
    rdi = r12 + 0xd0;
    eval_link_function ();
    goto label_3;
label_10:
    xmm0 = arg_80h;
    __asm ("andpd xmm0, xmmword [loc..LC0]");
    __asm ("comisd xmm0, xmmword [obj.largest_polar_circle]");
    if (eax > r8d) {
        *(obj.largest_polar_circle) = xmm0;
    }
    xmm0 = arg_80h;
    draw_polar_circle ();
    goto label_2;
label_13:
    rax = eval_link_function ();
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/graphics.o @ 0x8000ef0 */
#include <stdint.h>
 
uint64_t ttick_callback (int64_t arg7, int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4) {
    int64_t var_8h;
    int64_t var_10h;
    int64_t var_18h;
    int64_t var_20h;
    int64_t var_28h;
    int64_t var_30h;
    int64_t var_38h;
    int64_t var_3ch;
    int64_t var_40h;
    int64_t var_48h;
    xmm0 = arg7;
    rdi = arg1;
    rsi = arg2;
    rdx = arg3;
    rcx = arg4;
    __asm ("endbr64");
    __asm ("movapd xmm1, xmm0");
    r13 = rsi;
    rbx = rcx;
    if (edx <= 0) {
        goto label_2;
    }
    if (edx == 1) {
        goto label_3;
    }
    xmm5 = 0;
    *((rsp + 0x10)) = xmm5;
    if (edx <= 4) {
        goto label_4;
    }
label_0:
    if (*((rbp + 0x168)) != 0) {
        xmm6 = *((rsp + 0x10));
        __asm ("xorpd xmm6, xmmword [loc..LC12]");
        *((rsp + 0x10)) = xmm6;
    }
    __asm ("movapd xmm0, xmm1");
    rdi = rsp + 0x48;
    rsi = rsp + 0x40;
    *((rsp + 0x18)) = xmm1;
    __asm ("mulsd xmm0, qword [reloc.theta_direction]");
    __asm ("addsd xmm0, qword [reloc.theta_origin]");
    __asm ("mulsd xmm0, qword [loc..LC7]");
    eval_link_function ();
    xmm0 = largest_polar_circle;
    xmm6 = *((rsp + 0x40));
    xmm1 = *((rsp + 0x18));
    __asm ("mulsd xmm6, xmm0");
    __asm ("mulsd xmm0, qword [rsp + 0x48]");
    *(rsp) = xmm6;
    *((rsp + 8)) = xmm0;
    if (rbx == 0) {
        goto label_5;
    }
    xmm3 = *(loc..LC0);
    xmm2 = *(loc..LC13);
    while (rbx < 0) {
        rbx = *((rbx + 0x18));
        if (rbx == 0) {
            goto label_5;
        }
        xmm0 = *(rbx);
        __asm ("subsd xmm0, xmm1");
        __asm ("andpd xmm0, xmm3");
        __asm ("comisd xmm2, xmm0");
    }
    r13d = 0;
label_5:
    xmm0 = *(loc..LC14);
    __asm ("mulsd xmm0, qword [rsp]");
    *((rsp + 0x28)) = xmm1;
    eax = eval_link_function ();
    xmm0 = *(loc..LC14);
    __asm ("mulsd xmm0, qword [rsp + 8]");
    *((rsp + 0x38)) = eax;
    eax = eval_link_function ();
    xmm0 = *(rsp);
    *((rsp + 0x3c)) = eax;
    eax = eval_link_function ();
    xmm0 = *((rsp + 8));
    ebx = eax;
    eax = eval_link_function ();
    xmm2 = *(loc..LC9);
    xmm4 = *(rsp);
    r14d = ebx;
    __asm ("addsd xmm2, qword [rsp + 0x10]");
    xmm7 = *((rbp + 0x118));
    r12d = eax;
    r15d = eax;
    *((rsp + 0x30)) = xmm7;
    __asm ("mulsd xmm4, xmm2");
    *((rsp + 0x20)) = xmm2;
    __asm ("movapd xmm0, xmm4");
    eax = eval_link_function ();
    xmm2 = *((rsp + 0x20));
    __asm ("mulsd xmm2, qword [rsp + 8]");
    *((rsp + 0x18)) = eax;
    __asm ("movapd xmm0, xmm2");
    eax = eval_link_function ();
    edi = *((rsp + 0x18));
    xmm1 = *((rsp + 0x28));
    esi = eax;
    while (1) {
        ecx = r15d;
        edx = r14d;
        *(rsp) = xmm1;
        eval_link_function ();
        if (r13 != 0) {
            esi = r15d;
            edi = r14d;
            eax = eval_link_function ();
            if (eax != 0) {
                goto label_6;
            }
            edx = *((rbp + 0xd0));
            xmm1 = *(rsp);
            if (edx != 0) {
                goto label_7;
            }
label_1:
            eax = *((rbp + 0x138));
            if (eax != 0) {
                __asm ("mulsd xmm1, qword [reloc.theta_direction]");
                rax = *(reloc.term);
                __asm ("addsd xmm1, qword [reloc.theta_origin]");
                __asm ("subsd xmm1, qword [loc..LC15]");
                __asm ("cvttsd2si edi, xmm1");
                uint64_t (*rax + 0x78)() ();
            }
            eax = r12d;
            xmm1 = 0;
            eax -= *((rsp + 0x3c));
            __asm ("cvtsi2sd xmm1, eax");
            xmm3 = *((rsp + 0x38));
            eax = ebx;
            xmm0 = 0;
            eax -= *((rsp + 0x40));
            rdx = r13;
            r9d = 0;
            __asm ("cvtsi2sd xmm0, eax");
            __asm ("addsd xmm3, qword [loc..LC16]");
            r8d = *(reloc.tic_vjust);
            ecx = *(reloc.tic_hjust);
            __asm ("mulsd xmm1, xmm3");
            __asm ("movapd xmm2, xmm1");
            xmm1 = 0;
            __asm ("cvtsi2sd xmm1, r12d");
            __asm ("addsd xmm1, xmm2");
            __asm ("cvttsd2si esi, xmm1");
            __asm ("movapd xmm1, xmm0");
            xmm0 = 0;
            __asm ("mulsd xmm1, xmm3");
            __asm ("cvtsi2sd xmm0, ebx");
            __asm ("addsd xmm0, xmm1");
            __asm ("cvttsd2si edi, xmm0");
            eax = eval_link_function (*((rbp + 0xc8)));
            rdi = reloc_border_lp;
            void (*0x80921db)() ();
label_3:
            xmm0 = *(loc..LC11);
            __asm ("mulsd xmm0, qword [rdi + 0x158]");
            *((rsp + 0x10)) = xmm0;
            goto label_0;
        }
label_6:
        return rax;
label_2:
        xmm0 = *(loc..LC11);
        __asm ("mulsd xmm0, qword [rdi + 0x150]");
        *((rsp + 0x10)) = xmm0;
        goto label_0;
        xmm2 = *(loc..LC9);
        __asm ("subsd xmm2, qword [rsp + 0x10]");
        *((rsp + 0x20)) = eax;
        xmm0 = *(rsp);
        __asm ("mulsd xmm0, xmm2");
        *(rsp) = xmm2;
        eax = eval_link_function ();
        xmm0 = *((rsp + 8));
        xmm2 = *(rsp);
        r14d = eax;
        __asm ("mulsd xmm0, xmm2");
        eax = eval_link_function ();
        xmm1 = *((rsp + 0x28));
        esi = *((rsp + 0x20));
        edi = *((rsp + 0x18));
        r15d = eax;
    }
label_4:
    rdx = (int64_t) edx;
    rax = reloc_ticscale;
    xmm0 = *(loc..LC11);
    __asm ("mulsd xmm0, qword [rax + rdx*8]");
    *((rsp + 0x10)) = xmm0;
    goto label_0;
label_7:
    rdi = rbp + 0xd0;
    eval_link_function ();
    xmm1 = *(rsp);
    goto label_1;
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/graphics.o @ 0x8001290 */
#include <stdint.h>
 
int64_t place_parallel_axes (int64_t arg1, int64_t arg2) {
    int64_t var_8h;
    rdi = arg1;
    rsi = arg2;
    r13d = esi;
    if (rdi == 0) {
        goto label_5;
    }
    rbx = rdi;
    r12d = 0;
    while (*((rbx + 0x10)) != 0x801) {
label_0:
        rbx = *(rbx);
        if (rbx == 0) {
            goto label_4;
        }
label_1:
    }
    eax = *((rbx + 0x1c8));
    if (eax <= 0) {
        goto label_0;
    }
    rax = *((rbx + 0x1dc));
    rdx = *(reloc.parallel_axis_array);
    r12 = rax;
    rax *= 0x2a8;
    rbp = rdx + rax - 0x2a8;
    rdi = rbp;
    eval_link_function ();
    eax = *(reloc.closepath);
    ecx = *(0x0809225f);
    xmm0 = 0;
    xmm1 = *((rbp + 0x18));
    __asm ("subsd xmm1, qword [rbp + 0x10]");
    esi = 0x14;
    rdi = rbp;
    ecx -= eax;
    *((rbp + 0x78)) = eax;
    __asm ("cvtsi2sd xmm0, ecx");
    __asm ("divsd xmm0, xmm1");
    *((rbp + 0x80)) = xmm0;
    eval_link_function ();
    rbx = *(rbx);
    if (rbx != 0) {
        goto label_1;
    }
label_4:
    if (*(reloc.strdup) == 1) {
        r13d &= 1;
        if (r13d == 0) {
            goto label_6;
        }
    }
    rdi = reloc_parallel_axis_style;
    eval_link_function ();
    if (r12d <= 0) {
        goto label_6;
    }
    ebx = r12 - 1;
    r13d = 0;
    rbx++;
    rbx *= 0x2a8;
    do {
        rax = *(reloc.parallel_axis_array);
        xmm2 = 0;
        rax += r13;
        r13 += 0x2a8;
        xmm4 = *((rax + 0x10));
        xmm1 = *((rax + 0x48));
        __asm ("cvtsi2sd xmm2, dword [rax + 0x78]");
        xmm0 = *((rax + 0x40));
        xmm3 = *((rax + 0x80));
        __asm ("subsd xmm1, xmm4");
        __asm ("subsd xmm0, xmm4");
        __asm ("mulsd xmm1, xmm3");
        __asm ("mulsd xmm0, xmm3");
        __asm ("addsd xmm1, xmm2");
        __asm ("addsd xmm1, qword [loc..LC8]");
        __asm ("addsd xmm0, xmm2");
        __asm ("addsd xmm0, qword [loc..LC8]");
        __asm ("cvttsd2si r12d, xmm1");
        __asm ("cvttsd2si ebp, xmm0");
        xmm0 = *((rax + 0x2a0));
        eax = eval_link_function ();
        edi = eax;
        ecx = r12d;
        edx = eax;
        esi = ebp;
        eval_link_function ();
    } while (rbx != r13);
    r13d = 0;
    r12 = sym_ytick2d_callback;
    goto label_7;
label_2:
    *((rsp + 8)) = xmm0;
    eax = uint64_t (*rdx + 0x78)() ();
    rdx = *(reloc.term);
    xmm0 = *((rsp + 8));
    if (eax == 0) {
        goto label_8;
    }
    *(reloc.tic_hjust) = 0;
    rdx = *(reloc.term);
    *(reloc.tic_vjust) = 1;
label_3:
    if (*((rbp + 0x290)) != 0) {
        eax = *((rbp + 0x13c));
        *(reloc.tic_hjust) = eax;
    }
    __asm ("subsd xmm0, qword [0x0809274b]");
    xmm1 = 0;
    rdi = rbp;
    rsi = r12;
    __asm ("mulsd xmm0, qword [0x080927bb]");
    __asm ("cvtsi2sd xmm1, dword [0x080927b3]");
    *(reloc.tic_direction) = 0xffffffff;
    __asm ("addsd xmm0, xmm1");
    __asm ("addsd xmm0, qword [loc..LC8]");
    xmm1 = 0;
    __asm ("cvttsd2si eax, xmm0");
    xmm0 = 0;
    __asm ("cvtsi2sd xmm0, eax");
    *(reloc.tic_start) = eax;
    *(reloc.tic_mirror) = eax;
    eax = *((rdx + 0x20));
    __asm ("cvtsi2sd xmm1, rax");
    __asm ("mulsd xmm1, qword [rbp + 0x150]");
    __asm ("subsd xmm0, xmm1");
    __asm ("cvttsd2si eax, xmm0");
    eax -= *((rdx + 0x18));
    *(reloc.tic_text) = eax;
    eval_link_function ();
    rax = *(reloc.term);
    edi = 0;
    uint64_t (*rax + 0x78)() ();
    do {
        r13 += 0x2a8;
        if (rbx == r13) {
            goto label_6;
        }
label_7:
        rbp = *(reloc.parallel_axis_array);
        rbp += r13;
    } while ((*((rbp + 0xb8)) & 3) == 0);
    edi = *((rbp + 0x138));
    xmm0 = *((rbp + 0x2a0));
    rdx = *(reloc.term);
    if (edi != 0) {
        goto label_2;
    }
label_8:
    *(reloc.tic_hjust) = 1;
    *(reloc.tic_vjust) = 0;
    goto label_3;
label_6:
    return rax;
label_5:
    r12d = 0;
    goto label_4;
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/graphics.o @ 0x8001560 */
#include <stdint.h>
 
int64_t map_position_double_isra_0 (int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4) {
    int64_t var_ch;
    int64_t var_10h_3;
    int64_t var_18h_2;
    int64_t var_8h;
    int64_t var_10h_2;
    int64_t var_18h;
    int64_t var_8h_2;
    int64_t var_10h;
    int64_t var_14h;
    int64_t var_18h_3;
    int64_t var_20h;
    int64_t var_28h_2;
    int64_t var_30h;
    int64_t var_a0h;
    int64_t var_b8h;
    int64_t var_d8h;
    int64_t var_120h;
    int64_t var_160h;
    int64_t var_1a0h;
    int64_t var_1e8h;
    int64_t var_8h_3;
    int64_t var_18h_4;
    int64_t var_20h_2;
    int64_t var_28h;
    rdi = arg1;
    rsi = arg2;
    rdx = arg3;
    rcx = arg4;
    r12 = rsi;
    rbx = rdi;
    xmm0 = *((rdi + 0x10));
    rax = *(fs:0x28);
    *((rsp + 0x28)) = rax;
    eax = 0;
    eax = *(rdi);
    if (eax == 4) {
        goto label_6;
    }
    if (eax > 4) {
        goto label_7;
    }
    if (eax == 2) {
        goto label_8;
    }
    if (eax != 3) {
        goto label_9;
    }
    rax = *(reloc.term);
    xmm1 = 0;
    eax = *((rax + 0x10));
    eax--;
    __asm ("cvtsi2sd xmm1, rax");
    __asm ("mulsd xmm0, xmm1");
    xmm1 = *(loc..LC8);
    *(rsi) = xmm0;
label_2:
    eax = *((rbx + 4));
    if (eax == 3) {
        goto label_10;
    }
    if (eax <= 3) {
label_1:
        goto label_11;
    }
    if (eax != 4) {
        goto label_12;
    }
    rax = *(reloc.term);
    xmm0 = 0;
    eax = *((rax + 0x18));
    __asm ("cvtsi2sd xmm0, rax");
    __asm ("mulsd xmm0, qword [rbx + 0x18]");
    *(rbp) = xmm0;
    do {
label_0:
        xmm0 = *(r12);
        __asm ("addsd xmm0, xmm1");
        *(r12) = xmm0;
        __asm ("addsd xmm1, qword [rbp]");
        *(rbp) = xmm1;
        rax = *((rsp + 0x28));
        rax ^= *(fs:0x28);
        if (eax != 4) {
            goto label_13;
        }
        return rax;
label_11:
        if (eax != 2) {
            goto label_14;
        }
        edx = *(reloc.closepath);
        eax = *(0x0809225f);
        xmm0 = 0;
        xmm2 = 0;
        eax -= edx;
        __asm ("cvtsi2sd xmm2, edx");
        __asm ("cvtsi2sd xmm0, eax");
        __asm ("mulsd xmm0, qword [rbx + 0x18]");
        __asm ("addsd xmm0, xmm2");
        *(rbp) = xmm0;
    } while (1);
label_7:
    if (eax != 5) {
        goto label_15;
    }
    xmm1 = *((rbx + 0x18));
    rsi = rsp + 0x20;
    rdi = rsp + 0x18;
    edx = 0;
    eax = eval_link_function ();
    xmm0 = *((rsp + 0x18));
    xmm1 = 0;
    __asm ("subsd xmm0, qword [0x0809274b]");
    __asm ("mulsd xmm0, qword [0x080927bb]");
    __asm ("cvtsi2sd xmm1, dword [0x080927b3]");
    xmm2 = 0;
    __asm ("cvtsi2sd xmm2, dword [reloc.boxwidth_is_absolute]");
    __asm ("addsd xmm0, xmm1");
    xmm1 = *(loc..LC8);
    __asm ("addsd xmm0, xmm1");
    __asm ("cvttsd2si eax, xmm0");
    xmm0 = 0;
    __asm ("cvtsi2sd xmm0, eax");
    *(r12) = xmm0;
    xmm0 = *((rsp + 0x20));
    __asm ("subsd xmm0, qword [reloc.load_linetype]");
    __asm ("mulsd xmm0, qword [reloc.atan2]");
    __asm ("addsd xmm0, xmm2");
    __asm ("addsd xmm0, xmm1");
    __asm ("cvttsd2si eax, xmm0");
    xmm0 = 0;
    __asm ("cvtsi2sd xmm0, eax");
    *(rbp) = xmm0;
    *((rbx + 4)) = 5;
    goto label_0;
label_12:
    if (eax == 5) {
        goto label_0;
    }
    edx = 5;
label_4:
    rdx = (int64_t) edx;
    rcx = reloc_axis_array;
    xmm0 = *((rbx + 0x18));
    rax = rdx * 0x2a8;
    r13 = *((rcx + rax + 0xa0));
    if (r13 == 0) {
        goto label_16;
    }
    rax = *((r13 + 0xb0));
    if (*((rax + 0x10)) == 0) {
        goto label_16;
    }
    rdi = r13;
    *((rsp + 8)) = xmm1;
    eax = eval_link_function ();
    xmm2 = 0;
    __asm ("subsd xmm0, qword [r13 + 0x10]");
    xmm1 = *((rsp + 8));
    __asm ("mulsd xmm0, qword [r13 + 0x80]");
    __asm ("cvtsi2sd xmm2, dword [r13 + 0x78]");
    __asm ("addsd xmm0, xmm2");
    __asm ("addsd xmm0, xmm1");
    __asm ("cvttsd2si eax, xmm0");
    xmm0 = 0;
    __asm ("cvtsi2sd xmm0, eax");
    *(rbp) = xmm0;
    goto label_0;
label_15:
    eax = 6;
label_5:
    rax = (int64_t) eax;
    rcx = reloc_axis_array;
    rdx = rax * 0x2a8;
    r13 = *((rcx + rdx + 0xa0));
    if (r13 == 0) {
        goto label_17;
    }
    rdx = *((r13 + 0xb0));
    if (*((rdx + 0x10)) == 0) {
        goto label_17;
    }
    rdi = r13;
    eax = eval_link_function ();
    xmm1 = 0;
    __asm ("subsd xmm0, qword [r13 + 0x10]");
    __asm ("mulsd xmm0, qword [r13 + 0x80]");
    __asm ("cvtsi2sd xmm1, dword [r13 + 0x78]");
label_3:
    __asm ("addsd xmm0, xmm1");
    xmm1 = *(loc..LC8);
    __asm ("addsd xmm0, xmm1");
    __asm ("cvttsd2si eax, xmm0");
    xmm0 = 0;
    __asm ("cvtsi2sd xmm0, eax");
    eax = *((rbx + 4));
    *(r12) = xmm0;
    if (eax != 3) {
        goto label_1;
    }
label_10:
    rax = *(reloc.term);
    xmm0 = 0;
    eax = *((rax + 0x14));
    eax--;
    __asm ("cvtsi2sd xmm0, rax");
    __asm ("mulsd xmm0, qword [rbx + 0x18]");
    *(rbp) = xmm0;
    goto label_0;
label_8:
    edx = *(reloc.plot_bounds);
    eax = *(0x08092257);
    xmm1 = 0;
    eax -= edx;
    __asm ("cvtsi2sd xmm1, eax");
    __asm ("mulsd xmm0, xmm1");
    xmm1 = 0;
    __asm ("cvtsi2sd xmm1, edx");
    __asm ("addsd xmm0, xmm1");
    xmm1 = *(loc..LC8);
    *(rsi) = xmm0;
    goto label_2;
label_6:
    rax = *(reloc.term);
    xmm1 = 0;
    eax = *((rax + 0x1c));
    __asm ("cvtsi2sd xmm1, rax");
    __asm ("mulsd xmm0, xmm1");
    xmm1 = *(loc..LC8);
    *(rsi) = xmm0;
    goto label_2;
label_16:
    rdx *= 0x2a8;
    xmm2 = 0;
    rdx += rcx;
    __asm ("cvtsi2sd xmm2, dword [rdx + 0x78]");
    __asm ("subsd xmm0, qword [rdx + 0x10]");
    __asm ("mulsd xmm0, qword [rdx + 0x80]");
    __asm ("addsd xmm0, xmm2");
    __asm ("addsd xmm0, xmm1");
    __asm ("cvttsd2si eax, xmm0");
    xmm0 = 0;
    __asm ("cvtsi2sd xmm0, eax");
    *(rbp) = xmm0;
    goto label_0;
label_17:
    rax *= 0x2a8;
    xmm1 = 0;
    rax += rcx;
    __asm ("cvtsi2sd xmm1, dword [rax + 0x78]");
    __asm ("subsd xmm0, qword [rax + 0x10]");
    __asm ("mulsd xmm0, qword [rax + 0x80]");
    goto label_3;
label_14:
    edx -= edx;
    edx &= 0xfffffffc;
    edx += 5;
    goto label_4;
label_9:
    eax -= eax;
    eax &= 0xfffffffc;
    eax += 6;
    goto label_5;
label_13:
    rax = eval_link_function ();
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/graphics.o @ 0x8004d40 */
#include <stdint.h>
 
int64_t plot_lines (uint32_t arg1) {
    int64_t var_8h;
    int64_t var_10h;
    int64_t var_18h;
    int64_t var_20h;
    int64_t var_2ch;
    rdi = arg1;
    if (*((rdi + 0x34)) == 0xfffffffd) {
        goto label_5;
    }
    rbx = rdi;
    eax = *((rdi + 0x1c8));
    if (eax <= 0) {
        goto label_6;
    }
    xmm1 = 0;
    r13 = *(reloc.term);
    ebp = 0;
    r12d = 2;
    rax = *((rdi + 0x1e8));
    *((rsp + 0x10)) = xmm1;
    *((rsp + 8)) = xmm1;
    while (*((rax + r14)) == 2) {
label_2:
        r12d = 2;
label_1:
        rbp++;
        if (*((rbx + 0x1c8)) <= ebp) {
            goto label_6;
        }
label_0:
        r14 = rbp;
        xmm6 = *((rsp + 8));
        xmm7 = *((rsp + 0x10));
        rdi = rbx;
        r14 <<= 6;
        rax += r14;
        *((rsp + 0x18)) = xmm6;
        xmm4 = *((rax + 8));
        xmm5 = *((rax + 0x10));
        *((rsp + 0x20)) = xmm7;
        rax = *((rbx + 0x1e0));
        *((rsp + 8)) = xmm4;
        rsi = rax + rbp*8;
        *((rsp + 0x10)) = xmm5;
        eval_link_function ();
        rax = *((rbx + 0x1e8));
    }
    xmm0 = *((rsp + 8));
    eax = eval_link_function ();
    xmm0 = *((rsp + 0x10));
    r15d = eax;
    eax = eval_link_function ();
    r8d = eax;
    rax = *((rbx + 0x1e8));
    if (r15d == 0x80000000) {
        goto label_7;
    }
    if (r8d == 0x80000000) {
        goto label_7;
    }
    edx = *((rax + r14));
    if (edx != 0) {
        goto label_8;
    }
    if (r12d != 0) {
        if (r12d == 1) {
            goto label_9;
        }
        *((rsp + 0x18)) = r8d;
        esi = r8d;
        edi = r15d;
        uint64_t (*r13 + 0x58)() ();
        r8d = *((rsp + 0x18));
    }
    esi = *((rsp + 0x18));
    edi = r15d;
    uint64_t (*r13 + 0x60)() ();
label_3:
    rax = *((rbx + 0x1e8));
    rbp++;
    r12d = *((rax + r14));
    if (*((rbx + 0x1c8)) > ebp) {
        goto label_0;
    }
label_6:
    return rax;
label_8:
    if (edx != 1) {
        goto label_10;
    }
    if (r12d != 0) {
        goto label_11;
    }
    r12d = 1;
    if (*(reloc.clip_lines1) == 0) {
        goto label_1;
    }
    if (*(reloc.polar) != 0) {
        if (*(reloc.clip_radial) != 0) {
            goto label_12;
        }
    }
label_4:
    xmm0 = *((rsp + 0x20));
    *((rsp + 0x2c)) = r8d;
    eax = eval_link_function ();
    xmm0 = *((rsp + 0x18));
    r12d = eax;
    eax = eval_link_function ();
    r8d = *((rsp + 0x2c));
    esi = r12d;
    edx = r15d;
    edi = eax;
    ecx = r8d;
    eval_link_function ();
    rax = *((rbx + 0x1e8));
    r12d = *((rax + r14));
    goto label_1;
label_7:
    *((rax + r14)) = 2;
    goto label_2;
label_11:
    if (r12d == 1) {
        goto label_13;
    }
    r12d = 1;
    goto label_1;
label_9:
    if (*(reloc.clip_lines1) == 0) {
        goto label_14;
    }
    if (*(reloc.polar) != 0) {
        if (*(reloc.clip_radial) != 0) {
            goto label_12;
        }
    }
    xmm0 = *((rsp + 0x20));
    *((rsp + 0x2c)) = r8d;
    eax = eval_link_function ();
    xmm0 = *((rsp + 0x18));
    r12d = eax;
    eax = eval_link_function ();
    r8d = *((rsp + 0x2c));
    edx = r15d;
    esi = r12d;
    edi = eax;
    ecx = r8d;
    *((rsp + 0x18)) = r8d;
    eax = eval_link_function ();
    r8d = *((rsp + 0x18));
    if (eax != 0) {
        goto label_3;
    }
label_14:
    esi = r8d;
    edi = r15d;
    uint64_t (*r13 + 0x58)() ();
    rax = *((rbx + 0x1e8));
    r12d = *((rax + r14));
    goto label_1;
label_13:
    if (*(reloc.clip_lines2) == 0) {
        goto label_1;
    }
    if (*(reloc.polar) == 0) {
        goto label_4;
    }
    if (*(reloc.clip_radial) == 0) {
        goto label_4;
    }
    xmm3 = *((rsp + 0x10));
    xmm2 = *((rsp + 8));
    xmm1 = *((rsp + 0x20));
    xmm0 = *((rsp + 0x18));
    eval_link_function ();
    goto label_3;
label_5:
    return rax;
label_12:
    xmm3 = *((rsp + 0x10));
    xmm2 = *((rsp + 8));
    xmm1 = *((rsp + 0x20));
    xmm0 = *((rsp + 0x18));
    eval_link_function ();
    rax = *((rbx + 0x1e8));
    r12d = *((rax + r14));
    goto label_1;
label_10:
    r12d = edx;
    goto label_1;
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/graphics.o @ 0x8005070 */
#include <stdint.h>
 
uint64_t plot_points (int64_t arg1, int64_t arg3) {
    int64_t var_8h;
    int64_t var_10h;
    int64_t var_14h;
    int64_t var_18h;
    int64_t var_20h;
    int64_t var_24h;
    int64_t var_28h;
    rdi = arg1;
    rdx = arg3;
    rbx = rdi;
    eax = *((rdi + 0x40));
    r13 = *(reloc.term);
    *((rsp + 0x10)) = eax;
    eax = *((rdi + 0x44));
    *((rsp + 0x14)) = eax;
    if (eax == 0) {
        goto label_11;
    }
    eax = *((rdi + 0x1c8));
    if (eax <= 0) {
        goto label_13;
    }
    rsi = *((rdi + 0x1e8));
    edi = rax - 1;
    edx = 0;
    rdi <<= 6;
    rax = rsi + 0x40;
    rdi += rax;
    while (rdi != rax) {
        rax += 0x40;
        rsi = rax;
        edx += 0;
    }
    eax = *((rsp + 0x14));
    esi = *((rsp + 0x14));
    esi >>= 0x1f;
    eax ^= esi;
    eax -= esi;
    if (edx <= eax) {
        goto label_13;
    }
    *((rsp + 0x10)) = edx;
    if (eax != 1) {
        eax--;
        xmm1 = 0;
        xmm0 = 0;
        edx--;
        __asm ("cvtsi2sd xmm0, eax");
        __asm ("cvtsi2sd xmm1, edx");
        __asm ("divsd xmm1, xmm0");
        __asm ("cvttsd2si eax, xmm1");
        *((rsp + 0x10)) = eax;
    }
    xmm3 = *(loc..LC0);
    xmm1 = 0;
    xmm4 = *(loc..LC36);
    __asm ("cvtsi2sd xmm1, dword [rsp + 0x10]");
    __asm ("divsd xmm1, qword [loc..LC35]");
    __asm ("movapd xmm2, xmm1");
    __asm ("movapd xmm0, xmm1");
    __asm ("andpd xmm2, xmm3");
    __asm ("ucomisd xmm4, xmm2");
    if (edx > 0) {
        goto label_14;
    }
label_10:
    xmm1 = 0;
    r11d = *((rsp + 0x14));
    __asm ("cvtsi2sd xmm1, dword [rbx + 0x1d8]");
    __asm ("mulsd xmm0, xmm1");
    __asm ("cvttsd2si eax, xmm0");
    if (r11d < 0) {
        goto label_15;
    }
    *((rsp + 0x14)) = eax;
label_11:
    if (*((rbx + 0x38)) == 0xfffffff7) {
        goto label_16;
    }
label_5:
    eax = *((r13 + 0x24));
    xmm1 = 0;
    xmm0 = 0;
    xmm6 = 0;
    xmm2 = *((rbx + 0x50));
    __asm ("cvtsi2sd xmm1, rax");
    __asm ("mulsd xmm1, xmm2");
    __asm ("cvttsd2si eax, xmm1");
    *((rsp + 0x20)) = eax;
    eax = *((r13 + 0x20));
    __asm ("cvtsi2sd xmm0, rax");
    __asm ("mulsd xmm0, xmm2");
    __asm ("cvttsd2si eax, xmm0");
    xmm0 = *(reloc.boxwidth);
    __asm ("comisd xmm0, xmm6");
    *((rsp + 0x24)) = eax;
    if (*((rbx + 0x38)) > 0xfffffff7) {
        rdi = rbx;
        eval_link_function ();
    }
    r9d = *((rsp + 0x10));
    r10d = *((rbx + 0x1c8));
    r14b = (r9d != 0) ? 1 : 0;
    r12d = 0;
    if (r10d <= 0) {
        goto label_17;
    }
    rax = rbx + 0x58;
    *((rsp + 8)) = r13;
    *((rsp + 0x28)) = rax;
    while (r8d != 0) {
label_0:
        r12++;
        if (*((rbx + 0x1c8)) <= r12d) {
            goto label_18;
        }
label_1:
        if (*((rbx + 0x10)) == 0xc3) {
            if (r14b != 0) {
                goto label_19;
            }
        }
label_2:
        rax = *((rbx + 0x1e8));
        r13 = r12;
        r13 <<= 6;
        rax += r13;
        r8d = *(rax);
    }
    xmm0 = *((rax + 8));
    eax = eval_link_function ();
    rax = *((rbx + 0x1e8));
    xmm0 = *((rax + r13 + 0x10));
    eax = eval_link_function ();
    r15d = eax;
    if (ebp == 0x80000000) {
        goto label_20;
    }
    if (eax == 0x80000000) {
        goto label_20;
    }
    rax = *((rbx + 0x1e8));
    rax += r13;
    if (*(rax) == 2) {
        goto label_0;
    }
    xmm0 = *(reloc.boxwidth);
    xmm5 = 0;
    __asm ("comisd xmm0, xmm5");
    if (*(rax) > 2) {
        rcx = *((rsp + 8));
        xmm0 = *(loc..LC37);
        xmm1 = 0;
        __asm ("mulsd xmm0, qword [rax + 0x38]");
        edx = *((rcx + 0x1c));
        __asm ("cvtsi2sd xmm1, rdx");
        __asm ("mulsd xmm0, xmm1");
        xmm1 = 0;
        __asm ("cvtsi2sd xmm1, ebp");
        __asm ("addsd xmm0, xmm1");
        xmm1 = *((rax + 0x28));
        __asm ("cvttsd2si ebp, xmm0");
        if (*(reloc.atan2) != 3) {
            goto label_21;
        }
        eax = *((rcx + 0x18));
        __asm ("mulsd xmm1, qword [loc..LC37]");
        xmm0 = 0;
        __asm ("cvtsi2sd xmm0, rax");
        __asm ("mulsd xmm0, xmm1");
        xmm1 = 0;
        __asm ("cvtsi2sd xmm1, r15d");
        __asm ("addsd xmm0, xmm1");
        __asm ("cvttsd2si r15d, xmm0");
    }
label_3:
    if (*(reloc.clip_points) == 0) {
        goto label_22;
    }
    ecx = *((rsp + 0x20));
    eax = *(reloc.plot_bounds);
    eax += ecx;
    if (eax > ebp) {
        goto label_0;
    }
    edi = *((rsp + 0x24));
    eax = *(reloc.closepath);
    eax += edi;
    if (eax > r15d) {
        goto label_0;
    }
    eax = *(0x08092257);
    eax -= ecx;
    if (eax < ebp) {
        goto label_0;
    }
    eax = *(0x0809225f);
    eax -= edi;
    if (eax < r15d) {
        goto label_0;
    }
label_22:
    eax = *((rbx + 0x10));
    dl = (eax == 0xc3) ? 1 : 0;
    esi = edx;
    if (eax == 0x42) {
        goto label_23;
    }
    if (dl != 0) {
        goto label_23;
    }
label_8:
    r8d = *((rbx + 0x38));
label_4:
    rax = *((rbx + 0x1e0));
    rdi = rbx;
    *((rsp + 0x18)) = r8d;
    rsi = rax + r12*8;
    eval_link_function ();
    rdx = *((rsp + 0x28));
    r8d = *((rsp + 0x18));
    if (*((rbx + 0x38)) == 0xfffffff7) {
        goto label_24;
    }
    if (r8d == 0xfffffff8) {
        goto label_25;
    }
    if (r8d < 0xffffffff) {
        goto label_0;
    }
    rax = *((rsp + 8));
    edx = r8d;
    esi = r15d;
    edi = ebp;
    r12++;
    uint64_t (*rax + 0x88)() ();
    if (*((rbx + 0x1c8)) > r12d) {
        goto label_1;
    }
label_18:
    r13 = *((rsp + 8));
label_17:
    if (*((rbx + 0x38)) == 0xfffffff7) {
        goto label_26;
    }
    return rax;
label_19:
    eax = r12d;
    eax -= *((rsp + 0x14));
    edx:eax = (int64_t) eax;
    eax = *(edx:eax) / rsp + 0x10;
    edx = *(edx:eax) % rsp + 0x10;
    if (edx == 0) {
        goto label_2;
    }
    goto label_0;
label_20:
    rax = *((rbx + 0x1e8));
    *((rax + r13)) = 2;
    goto label_0;
label_21:
    __asm ("addsd xmm1, qword [rax + 0x10]");
    __asm ("movapd xmm0, xmm1");
    eax = eval_link_function ();
    r15d = eax;
    goto label_3;
label_23:
    xmm7 = *(loc..LC38);
    __asm ("ucomisd xmm7, qword [rbx + 0x50]");
    __asm ("jp 0x80054b7");
    if (edx == 0) {
        rax = *((rbx + 0x1e8));
        xmm0 = *((rax + r13 + 0x30));
        rax = *((rsp + 8));
        __asm ("mulsd xmm0, qword [reloc.pointsize]");
        uint64_t (*rax + 0xa0)() ();
        eax = *((rbx + 0x10));
        sil = (eax == 0xc3) ? 1 : 0;
        if (eax != 0x42) {
            goto label_27;
        }
    }
    r8d = *((rbx + 0x38));
    if (r8d == 0xfffffff8) {
        goto label_9;
    }
label_6:
    edi = *((rsp + 0x10));
    if (edi >= 0) {
        goto label_4;
    }
label_7:
    if (sil == 0) {
        goto label_4;
    }
    rax = *((rsp + 8));
    *((rsp + 0x18)) = r8d;
    rdi = reloc_background_fill;
    uint64_t (*rax + 0xe0)() ();
    rax = *((rsp + 8));
    xmm0 = *(reloc.pointsize);
    __asm ("mulsd xmm0, qword [reloc.pointintervalbox]");
    uint64_t (*rax + 0xa0)() ();
    rax = *((rsp + 8));
    esi = r15d;
    edi = ebp;
    edx = 6;
    uint64_t (*rax + 0x88)() ();
    rdi = rbx + 0x30;
    eval_link_function ();
    r8d = *((rsp + 0x18));
    goto label_4;
label_25:
    r8 = *((rbx + 0x1e8));
    r8 += r13;
    xmm0 = *((r8 + 0x38));
    __asm ("ucomisd xmm0, xmm0");
    __asm ("jnp 0x8005210");
    goto label_0;
    rdx = r8 + 0x20;
label_24:
    rax = *((rbx + 0x158));
    if (rax != 0) {
        ecx = *((rax + 0x58));
        if (ecx != 0) {
            goto label_28;
        }
    }
label_12:
    rax = *((rsp + 8));
    esi = r15d;
    edi = ebp;
    uint64_t (*rax + 0x70)() ();
    goto label_0;
label_13:
    *((rsp + 0x14)) = 0;
    if (*((rbx + 0x38)) != 0xfffffff7) {
        goto label_5;
    }
label_16:
    edi = 1;
    eval_link_function ();
    rax = *((rbx + 0x158));
    rdi = *((rax + 0x50));
    if (rdi != 0) {
        if (*(rdi) == 0) {
            goto label_29;
        }
        uint64_t (*r13 + 0x98)() ();
    }
label_29:
    edi = 1;
    uint64_t (*r13 + 0x80)() ();
    goto label_5;
label_26:
    rax = *((rbx + 0x158));
    rax = *((rax + 0x50));
    if (rax != 0) {
        if (*(rax) == 0) {
            goto label_30;
        }
        rdi = loc__LC29;
        uint64_t (*r13 + 0x98)() ();
    }
label_30:
    edi = 0;
    void (*0x80921db)() ();
label_9:
    rax = *((rbx + 0x1e8));
    xmm0 = *((rax + r13 + 0x38));
    __asm ("ucomisd xmm0, xmm0");
    __asm ("jp 0x80054c5");
    goto label_6;
    __asm ("subsd xmm0, qword [loc..LC9]");
    edi = *((rsp + 0x10));
    __asm ("cvttsd2si r8d, xmm0");
    if (edi < 0) {
        goto label_7;
    }
    goto label_4;
label_27:
    if (sil == 0) {
        goto label_8;
    }
    r8d = *((rbx + 0x38));
    if (r8d != 0xfffffff8) {
        goto label_6;
    }
    goto label_9;
label_14:
    __asm ("cvttsd2si rax, xmm1");
    xmm2 = 0;
    xmm4 = *(loc..LC9);
    __asm ("andnpd xmm3, xmm1");
    __asm ("cvtsi2sd xmm2, rax");
    __asm ("cmpnlesd xmm0, xmm2");
    __asm ("andpd xmm0, xmm4");
    __asm ("addsd xmm0, xmm2");
    __asm ("orpd xmm0, xmm3");
    goto label_10;
label_15:
    rsp + 0x10 = -rsp + 0x10;
    *((rsp + 0x14)) = eax;
    goto label_11;
label_28:
    rdi = rax + 0x58;
    *((rsp + 0x18)) = rdx;
    eval_link_function ();
    rdx = *((rsp + 0x18));
    goto label_12;
}




/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/graphics.o @ 0x8006b90 */
#include <stdint.h>
 
int64_t plot_betweencurves (int64_t arg1) {
    uint32_t var_8h;
    int64_t var_10h;
    int64_t var_18h;
    int64_t var_20h;
    int64_t var_28h;
    int64_t var_30h;
    signed int64_t var_34h;
    int64_t var_38h;
    int64_t var_40h;
    int64_t var_48h;
    int64_t var_50h;
    int64_t var_58h;
    int64_t var_60h;
    int64_t var_68h;
    int64_t var_70h;
    int64_t var_74h;
    int64_t var_78h;
    int64_t var_80h;
    int64_t var_88h;
    rdi = arg1;
    r13 = rdi;
    rax = *(reloc.term);
    if (*((rax + 0xe8)) == 0) {
        goto label_5;
    }
    *((rdi + 0x180)) = 0xd;
    edx = *((rdi + 0x1c8));
    eax = rdx + rdx + 3;
    if (*(obj.corners_allocated.12736) < eax) {
        goto label_6;
    }
label_4:
    if (edx <= 0) {
        goto label_7;
    }
    *(rsp) = 0;
    ebp = 0;
    esi = 0;
    *((rsp + 0x34)) = 0;
    *((rsp + 0x58)) = 0;
    *((rsp + 0x50)) = 0;
label_0:
    rcx = *((r13 + 0x1e8));
    r15 = rbp;
    r14d = ebp;
    r15 <<= 6;
    rax = rcx + r15;
    if (*(rax) == 2) {
        goto label_2;
    }
    if (esi == 0) {
        *((rsp + 0x34)) = ebp;
        *((rsp + 0x10)) = 0;
    }
    rdi = (int64_t) esi;
    r12d = rsi + 1;
    rbx = rdi * 3;
    rdi = corners.12735;
    rbx <<= 2;
    rdi += rbx;
    if (*(rsp) == 2) {
        goto label_8;
    }
label_3:
    xmm7 = *((rax + 0x38));
    xmm5 = *((rax + 0x10));
    *(rsp) = 1;
    xmm1 = *((rax + 8));
    *((rsp + 0x38)) = xmm7;
    xmm7 = *((rax + 0x28));
    eax = r14 + 1;
    *((rsp + 0x70)) = eax;
    *((rsp + 8)) = xmm5;
    *((rsp + 0x28)) = xmm7;
    if (*((r13 + 0x1c8)) > eax) {
        rax = rcx + r15 + 0x40;
        if (*(rax) == 2) {
            goto label_9;
        }
        xmm3 = *((rax + 8));
        xmm5 = *((rax + 0x38));
        xmm4 = *((rax + 0x10));
        *((rsp + 0x80)) = xmm3;
        xmm3 = *((rax + 0x28));
        *((rsp + 0x88)) = xmm5;
        *((rsp + 0x40)) = xmm4;
        *((rsp + 0x48)) = xmm3;
    }
label_9:
    __asm ("movapd xmm0, xmm1");
    *((rsp + 0x30)) = esi;
    *((rsp + 0x18)) = xmm1;
    *((rsp + 0x20)) = rdi;
    eax = eval_link_function (0);
    rdi = *((rsp + 0x20));
    xmm0 = *((rsp + 8));
    rbx += *(obj.corners.12735);
    *(rdi) = eax;
    eax = eval_link_function ();
    xmm1 = *((rsp + 0x18));
    *((rbx + 4)) = eax;
    esi = *((rsp + 0x30));
    if (*(reloc.polar) != 0) {
        goto label_10;
    }
    xmm0 = *((rsp + 0x28));
    __asm ("subsd xmm0, qword [rsp + 8]");
    xmm6 = *((rsp + 0x10));
    eax = *(rsp);
    __asm ("addsd xmm6, xmm0");
    *((rsp + 0x10)) = xmm6;
    if (eax == 0) {
        goto label_11;
    }
label_1:
    if (*((rsp + 0x34)) > ebp) {
        goto label_12;
    }
    rax = (int64_t) r12d;
    r14d -= *((rsp + 0x34));
    rbx = rax * 3;
    rax = rbp;
    rax -= r14;
    rbx <<= 2;
    r14 = rax;
    r14 <<= 6;
    *((rsp + 8)) = r14;
    do {
        rax = *((r13 + 0x1e8));
        r14 = corners.12735;
        xmm0 = *((rax + r15 + 0x38));
        r14 += rbx;
        eax = eval_link_function ();
        *(r14) = eax;
        rax = *((r13 + 0x1e8));
        r14 = corners.12735;
        xmm0 = *((rax + r15 + 0x28));
        r14 += rbx;
        rbx += 0xc;
        eax = eval_link_function ();
        *((r14 + 4)) = eax;
        rax = r15;
        r15 -= 0x40;
    } while (*((rsp + 8)) != rax);
    r15d = *((rsp + 0x70));
    r15d -= *((rsp + 0x34));
    r12d += r15d;
label_12:
    xmm1 = 0;
    edx = 0;
    rsi = corners.12735;
    rax = (int64_t) r12d;
    __asm ("comisd xmm1, xmmword [rsp + 0x10]");
    rax *= 3;
    edi = r12d;
    dl = (r12d > 0) ? 1 : 0;
    *((rsi + rax*4)) = edx;
    rdx = r13;
    finish_filled_curve ();
    esi = 0;
label_2:
    rbp++;
    if (*((r13 + 0x1c8)) > ebp) {
        goto label_0;
    }
label_7:
    return rax;
label_10:
    xmm0 = 0;
    *((rsp + 0x74)) = esi;
    *((rsp + 0x78)) = xmm1;
    eax = eval_link_function ();
    xmm4 = 0;
    xmm0 = 0;
    __asm ("cvtsi2sd xmm4, eax");
    *((rsp + 0x68)) = xmm4;
    eax = eval_link_function ();
    rbx = *((rsp + 0x34));
    xmm5 = 0;
    __asm ("cvtsi2sd xmm5, eax");
    rax = *((r13 + 0x1e8));
    rbx <<= 6;
    xmm0 = *((rax + rbx + 8));
    *((rsp + 0x60)) = xmm5;
    eax = eval_link_function ();
    *((rsp + 0x20)) = eax;
    rax = *((r13 + 0x1e8));
    xmm0 = *((rax + rbx + 0x10));
    eax = eval_link_function ();
    *((rsp + 0x30)) = eax;
    rax = *((r13 + 0x1e8));
    xmm0 = *((rax + rbx + 0x38));
    eax = eval_link_function ();
    *((rsp + 0x18)) = eax;
    rax = *((r13 + 0x1e8));
    xmm0 = *((rax + rbx + 0x28));
    eax = eval_link_function ();
    edi = *((rsp + 0x20));
    xmm2 = 0;
    edx = *(rsp);
    ecx = *((rsp + 0x18));
    xmm0 = 0;
    xmm3 = 0;
    esi = *((rsp + 0x74));
    __asm ("cvtsi2sd xmm2, edi");
    xmm4 = *((rsp + 0x68));
    r9d = *((rsp + 0x30));
    __asm ("cvtsi2sd xmm0, ecx");
    xmm5 = *((rsp + 0x60));
    xmm1 = *((rsp + 0x78));
    __asm ("cvtsi2sd xmm3, r9d");
    __asm ("subsd xmm2, xmm4");
    __asm ("subsd xmm0, xmm4");
    xmm4 = 0;
    __asm ("cvtsi2sd xmm4, eax");
    __asm ("subsd xmm3, xmm5");
    __asm ("mulsd xmm2, xmm2");
    __asm ("mulsd xmm0, xmm0");
    __asm ("mulsd xmm3, xmm3");
    __asm ("subsd xmm4, xmm5");
    __asm ("mulsd xmm4, xmm4");
    __asm ("addsd xmm2, xmm3");
    __asm ("addsd xmm0, xmm4");
    __asm ("subsd xmm0, xmm2");
    __asm ("addsd xmm0, qword [rsp + 0x10]");
    *((rsp + 0x10)) = xmm0;
    if (edx != 0) {
        goto label_1;
    }
    if (*(reloc.polar) == 0) {
        goto label_13;
    }
    xmm5 = *((rsp + 0x80));
    xmm7 = *((rsp + 8));
    xmm3 = *((rsp + 0x40));
    xmm6 = *((rsp + 0x28));
    __asm ("movapd xmm0, xmm5");
    xmm2 = *((rsp + 0x38));
    xmm4 = *((rsp + 0x48));
    __asm ("subsd xmm0, xmm1");
    __asm ("subsd xmm3, xmm7");
    __asm ("subsd xmm4, xmm6");
    __asm ("divsd xmm3, xmm0");
    xmm0 = *((rsp + 0x88));
    __asm ("subsd xmm0, xmm2");
    __asm ("divsd xmm4, xmm0");
    __asm ("movapd xmm0, xmm1");
    __asm ("mulsd xmm0, xmm3");
    __asm ("subsd xmm7, xmm0");
    __asm ("movapd xmm0, xmm7");
    __asm ("mulsd xmm2, xmm4");
    __asm ("subsd xmm6, xmm2");
    __asm ("movapd xmm2, xmm6");
    __asm ("subsd xmm2, xmm7");
    __asm ("movapd xmm7, xmm3");
    __asm ("subsd xmm7, xmm4");
    xmm4 = 0;
    __asm ("divsd xmm2, xmm7");
    __asm ("mulsd xmm3, xmm2");
    __asm ("subsd xmm1, xmm2");
    *((rsp + 0x50)) = xmm2;
    __asm ("addsd xmm3, xmm0");
    __asm ("movapd xmm0, xmm2");
    __asm ("subsd xmm0, xmm5");
    *((rsp + 0x58)) = xmm3;
    __asm ("mulsd xmm1, xmm0");
    __asm ("comisd xmm1, xmm4");
    while (1) {
        r12 = (int64_t) r12d;
        xmm0 = *((rsp + 0x50));
        rbx = r12 * 3;
        r12 = corners.12735;
        eax = eval_link_function (esi);
        rbx <<= 2;
        xmm0 = *((rsp + 0x58));
        r12 += rbx;
        rbx += *(obj.corners.12735);
        *(r12) = eax;
        eax = eval_link_function ();
        esi = *(rsp);
        *(rsp) = 2;
        *((rbx + 4)) = eax;
        r12d = rsi + 2;
        goto label_1;
label_13:
        xmm0 = *((rsp + 0x28));
        __asm ("subsd xmm0, qword [rsp + 8]");
label_11:
        xmm6 = 0;
        xmm2 = *((rsp + 0x48));
        __asm ("subsd xmm2, qword [rsp + 0x40]");
        __asm ("ucomisd xmm0, xmm6");
        __asm ("jp 0x8007090");
        if (rbx == 0) {
            __asm ("ucomisd xmm2, xmm6");
            __asm ("jp 0x8007090");
            if (rbx == 0) {
                goto label_14;
            }
        }
        __asm ("mulsd xmm2, xmm0");
        xmm4 = 0;
        __asm ("comisd xmm4, xmm2");
        if (rbx < 0) {
label_14:
            *(rsp) = 0;
            esi = r12d;
            goto label_2;
label_8:
            xmm0 = *((rsp + 0x50));
            *((rsp + 8)) = esi;
            eax = eval_link_function (rdi);
            rdi = *(rsp);
            rdx = corners.12735;
            xmm0 = *((rsp + 0x58));
            *(rdi) = eax;
            rdx += rbx;
            rbx += 0xc;
            eax = eval_link_function (rdx);
            esi = *((rsp + 8));
            rdx = *(rsp);
            rcx = *((r13 + 0x1e8));
            rdi = corners.12735;
            r9d = rsi + 2;
            *((rdx + 4)) = eax;
            esi = r12d;
            rax = rcx + r15;
            rdi += rbx;
            r12d = r9d;
            goto label_3;
            esi = r12d;
            goto label_2;
        }
        xmm6 = *((rsp + 0x48));
        xmm2 = *((rsp + 0x40));
        xmm7 = *((rsp + 0x80));
        __asm ("subsd xmm2, xmm6");
        __asm ("movapd xmm4, xmm7");
        __asm ("subsd xmm7, xmm1");
        __asm ("mulsd xmm4, xmm0");
        __asm ("movapd xmm3, xmm2");
        __asm ("addsd xmm0, xmm2");
        __asm ("mulsd xmm3, xmm1");
        __asm ("addsd xmm3, xmm4");
        xmm4 = *((rsp + 0x28));
        __asm ("subsd xmm6, xmm4");
        __asm ("divsd xmm3, xmm0");
        __asm ("movapd xmm0, xmm6");
        __asm ("movapd xmm5, xmm3");
        *((rsp + 0x50)) = xmm3;
        __asm ("subsd xmm5, xmm1");
        __asm ("mulsd xmm0, xmm5");
        __asm ("divsd xmm0, xmm7");
        __asm ("addsd xmm0, xmm4");
        *((rsp + 0x58)) = xmm0;
    }
label_6:
    *(obj.corners_allocated.12736) = eax;
    rax = (int64_t) eax;
    rdi = corners.12735;
    rdx = "betweencurves vertices";
    rsi = rax * 3;
    rsi <<= 2;
    rax = eval_link_function ();
    edx = *((r13 + 0x1c8));
    *(obj.corners.12735) = rax;
    goto label_4;
label_5:
    return plot_bars ();
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/graphics.o @ 0x80071f0 */
#include <stdint.h>
 
int64_t plot_f_bars (int64_t arg1) {
    int64_t var_8h;
    int64_t var_10h;
    int64_t var_18h;
    int64_t var_20h;
    int64_t var_2ch;
    rdi = arg1;
    xmm6 = 0;
    rax = *(reloc.term);
    *((rsp + 0x20)) = xmm6;
    eax = *((rax + 0x24));
    edx = *((rax + 0x24));
    edx >>= 2;
    eax = 1;
    if (eax > 7) {
        eax = edx;
    }
    *((rsp + 0x2c)) = eax;
    eax = *((rdi + 0x1c8));
    if (eax <= 0) {
        goto label_9;
    }
    ebx = 0;
    do {
        rax = *((rbp + 0x1e8));
        r13 = rbx;
        r13 <<= 6;
        rax += r13;
        if (*(rax) != 2) {
            xmm0 = *((rax + 8));
            rax = *(reloc.x_axis);
            rcx = reloc_axis_array;
            rax *= 0x2a8;
            rax += rcx;
            xmm1 = *((rax + 0x10));
            xmm2 = *((rax + 0x18));
            __asm ("comisd xmm2, xmm1");
            if (rax <= 0) {
                goto label_10;
            }
            __asm ("comisd xmm0, xmm1");
            if (rax < 0) {
                goto label_4;
            }
            __asm ("comisd xmm2, xmm0");
            r14b = (rax < 0) ? 1 : 0;
label_5:
            if (r14b != 0) {
                goto label_4;
            }
            eax = eval_link_function ();
            rdx = reloc_axis_array;
            r13 += *((rbp + 0x1e8));
            r12d = eax;
            rax = *(reloc.y_axis);
            xmm4 = *((r13 + 0x18));
            xmm5 = *((r13 + 0x10));
            xmm6 = *((r13 + 0x38));
            rax *= 0x2a8;
            xmm2 = *((r13 + 0x28));
            xmm1 = *((r13 + 0x20));
            *(rsp) = xmm4;
            *((rsp + 8)) = xmm5;
            *((rsp + 0x10)) = xmm6;
            rax += rdx;
            xmm3 = *((rax + 0x10));
            xmm0 = *((rax + 0x18));
            __asm ("comisd xmm0, xmm3");
            if (rax <= 0) {
                goto label_11;
            }
            r15d = 0;
            __asm ("comisd xmm2, xmm3");
            if (rax >= 0) {
                __asm ("comisd xmm0, xmm2");
                r15b = (rax >= 0) ? 1 : 0;
            }
            __asm ("comisd xmm1, xmm3");
            if (rax >= 0) {
                __asm ("comisd xmm0, xmm1");
                r14b = (rax >= 0) ? 1 : 0;
            }
label_6:
            if (r15b != 0) {
                goto label_12;
            }
label_7:
            __asm ("subsd xmm2, xmm0");
            xmm7 = *((rsp + 0x20));
            __asm ("movapd xmm4, xmm0");
            __asm ("subsd xmm4, xmm3");
            __asm ("comisd xmm2, xmm7");
            if (r15b <= 0) {
                goto label_13;
            }
            xmm5 = *((rsp + 0x20));
            __asm ("comisd xmm4, xmm5");
            if (r15b <= 0) {
                __asm ("comisd xmm5, xmm4");
                if (r15b > 0) {
                    goto label_14;
                }
            }
label_0:
            *((rsp + 0x18)) = xmm1;
            eax = eval_link_function ();
            xmm1 = *((rsp + 0x18));
            r13d = eax;
label_8:
            if (r14b != 0) {
                goto label_15;
            }
label_1:
            rax = *(reloc.y_axis);
            rsi = reloc_axis_array;
            rax *= 0x2a8;
            rax += rsi;
            xmm0 = *((rax + 0x18));
            xmm2 = *((rax + 0x10));
            __asm ("subsd xmm1, xmm0");
            __asm ("comisd xmm1, xmmword [loc..LC1]");
            __asm ("movapd xmm3, xmm0");
            __asm ("subsd xmm3, xmm2");
            if (rax <= 0) {
                goto label_16;
            }
            __asm ("comisd xmm3, xmmword [loc..LC1]");
            if (rax <= 0) {
                xmm6 = 0;
                __asm ("comisd xmm6, xmm3");
                if (rax > 0) {
                    goto label_17;
                }
            }
label_3:
            eax = eval_link_function ();
            r10d = eax;
            if (r15b == 0) {
                if (eax == r13d) {
                    goto label_4;
                }
            }
label_2:
            rax = *((rbp + 0x1e0));
            rdi = rbp;
            *((rsp + 0x18)) = r10d;
            rsi = rax + rbx*8;
            eval_link_function ();
            xmm0 = *((rsp + 8));
            eax = eval_link_function ();
            xmm0 = *(rsp);
            r14d = eax;
            eax = eval_link_function ();
            xmm0 = *((rsp + 0x10));
            r15d = eax;
            eax = eval_link_function ();
            r10d = *((rsp + 0x18));
            ecx = r13d;
            edx = r12d;
            edi = r12d;
            *((rsp + 0x10)) = eax;
            esi = r10d;
            eval_link_function ();
            xmm5 = 0;
            xmm6 = 0;
            ecx = r14d;
            __asm ("cvtsi2sd xmm5, dword [rsp + 0x2c]");
            xmm0 = *(obj.bar_size);
            edx = r12d;
            esi = r14d;
            __asm ("cvtsi2sd xmm6, r12d");
            __asm ("mulsd xmm0, xmm5");
            *((rsp + 8)) = xmm5;
            __asm ("movapd xmm7, xmm6");
            *(rsp) = xmm6;
            __asm ("subsd xmm7, xmm0");
            __asm ("cvttsd2si edi, xmm7");
            eval_link_function ();
            ecx = r15d;
            edx = r12d;
            esi = r15d;
            xmm0 = *((rsp + 8));
            __asm ("mulsd xmm0, qword [obj.bar_size]");
            __asm ("addsd xmm0, qword [rsp]");
            __asm ("cvttsd2si edi, xmm0");
            eval_link_function ();
            if (*((rbp + 0x10)) == 0x74a) {
                goto label_18;
            }
        }
label_4:
        rbx++;
    } while (*((rbp + 0x1c8)) > ebx);
label_9:
    return rax;
label_13:
    __asm ("comisd xmm7, xmm2");
    if (*((rbp + 0x1c8)) <= ebx) {
        goto label_0;
    }
    __asm ("comisd xmm4, xmmword [rsp + 0x20]");
    if (*((rbp + 0x1c8)) <= ebx) {
        goto label_0;
    }
label_14:
    __asm ("movapd xmm0, xmm3");
    *((rsp + 0x18)) = xmm1;
    eax = eval_link_function ();
    xmm1 = *((rsp + 0x18));
    r13d = eax;
    if (r14b == 0) {
        goto label_1;
    }
label_15:
    __asm ("movapd xmm0, xmm1");
    eax = eval_link_function ();
    r10d = eax;
    goto label_2;
label_16:
    xmm4 = 0;
    __asm ("comisd xmm4, xmm1");
    if (r14b <= 0) {
        goto label_3;
    }
    __asm ("comisd xmm3, xmmword [loc..LC1]");
    if (r14b <= 0) {
        goto label_3;
    }
label_17:
    __asm ("movapd xmm0, xmm2");
    goto label_3;
label_10:
    __asm ("comisd xmm0, xmm2");
    if (r14b < 0) {
        goto label_4;
    }
    __asm ("comisd xmm1, xmm0");
    r14b = (r14b < 0) ? 1 : 0;
    goto label_5;
label_11:
    r15d = 0;
    __asm ("comisd xmm2, xmm0");
    if (r14b >= 0) {
        __asm ("comisd xmm3, xmm2");
        r15b = (r14b >= 0) ? 1 : 0;
    }
    __asm ("comisd xmm1, xmm0");
    if (r14b < 0) {
        goto label_6;
    }
    __asm ("comisd xmm3, xmm1");
    r14b = (r14b >= 0) ? 1 : 0;
    if (r15b == 0) {
        goto label_7;
    }
label_12:
    __asm ("movapd xmm0, xmm2");
    *((rsp + 0x18)) = xmm1;
    eax = eval_link_function ();
    xmm1 = *((rsp + 0x18));
    r13d = eax;
    goto label_8;
label_18:
    xmm0 = *((rsp + 8));
    __asm ("mulsd xmm0, qword [obj.bar_size]");
    xmm4 = *(rsp);
    esi = *((rsp + 0x10));
    __asm ("movapd xmm1, xmm4");
    ecx = esi;
    __asm ("addsd xmm1, xmm0");
    __asm ("subsd xmm4, xmm0");
    __asm ("cvttsd2si edx, xmm1");
    __asm ("cvttsd2si edi, xmm4");
    eval_link_function ();
    goto label_4;
}







/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/graphics.o @ 0x8002450 */
#include <stdint.h>
 
int64_t map_position (int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4) {
    int64_t var_8h;
    int64_t var_10h;
    int64_t var_18h;
    rdi = arg1;
    rsi = arg2;
    rdx = arg3;
    rcx = arg4;
    __asm ("endbr64");
    rbx = rdx;
    rax = *(fs:0x28);
    *((rsp + 0x18)) = rax;
    eax = 0;
    rdx = rsp + 0x10;
    rsi = rsp + 8;
    *((rsp + 8)) = 0;
    *((rsp + 0x10)) = 0;
    eax = map_position_double_isra_0 ();
    __asm ("cvttsd2si eax, qword [rsp + 8]");
    *(rbp) = eax;
    __asm ("cvttsd2si eax, qword [rsp + 0x10]");
    *(rbx) = eax;
    rax = *((rsp + 0x18));
    rax ^= *(fs:0x28);
    if (? == ?) {
        return rax;
    }
    eval_link_function ();
    __asm ("endbr64");
    xmm1 = 0;
    r13 = rcx;
    r12 = rdx;
    rbx = rdi;
    xmm0 = *((rdi + 0x10));
    __asm ("ucomisd xmm0, xmm1");
    __asm ("jp 0x8002540");
    if (? != ?) {
        goto label_2;
    }
    *(rbp) = 0;
label_0:
    if (r12 == 0) {
        goto label_1;
    }
    xmm0 = *((rbx + 0x18));
    __asm ("ucomisd xmm0, xmm1");
    __asm ("jp 0x8002520");
    if (r12 != 0) {
        goto label_3;
    }
    *(r12) = 0;
    do {
label_1:
        return rax;
label_3:
    } while (*((rbx + 4)) > 5);
    eax = *((rbx + 4));
    rdx = 0x0800ea04;
    rax = *((rdx + rax*4));
    rax += rdx;
    /* switch table (6 cases) at 0x800ea04 */
    void (*rax)() ();
label_2:
    if (*(rbx) > 5) {
        goto label_0;
    }
    eax = *(rbx);
    rdx = 0x0800ea1c;
    rax = *((rdx + rax*4));
    rax += rdx;
    /* switch table (6 cases) at 0x800ea1c */
    void (*rax)() ();
    rax = *(reloc.term);
    xmm2 = 0;
    eax = *((rax + 0x1c));
    __asm ("cvtsi2sd xmm2, rax");
    __asm ("mulsd xmm0, xmm2");
    *(rbp) = xmm0;
    goto label_0;
    rax = *(reloc.term);
    xmm2 = 0;
    eax = *((rax + 0x10));
    eax--;
    __asm ("cvtsi2sd xmm2, rax");
    __asm ("mulsd xmm0, xmm2");
    *(rbp) = xmm0;
    goto label_0;
    eax = *(0x08092257);
    xmm2 = 0;
    eax -= *(reloc.plot_bounds);
    __asm ("cvtsi2sd xmm2, eax");
    __asm ("mulsd xmm0, xmm2");
    *(rbp) = xmm0;
    goto label_0;
    rsi = r13;
    edi = 6;
    eval_link_function ();
    __asm ("mulsd xmm0, qword [0x0809325b]");
    xmm1 = 0;
    *(rbp) = xmm0;
    goto label_0;
    rsi = r13;
    edi = 2;
    eval_link_function ();
    __asm ("mulsd xmm0, qword [0x080927bb]");
    xmm1 = 0;
    *(rbp) = xmm0;
    goto label_0;
    rax = *(reloc.term);
    xmm1 = 0;
    eax = *((rax + 0x18));
    __asm ("cvtsi2sd xmm1, rax");
    __asm ("mulsd xmm0, xmm1");
    *(r12) = xmm0;
    goto label_1;
    rax = *(reloc.term);
    xmm1 = 0;
    eax = *((rax + 0x14));
    eax--;
    __asm ("cvtsi2sd xmm1, rax");
    __asm ("mulsd xmm0, xmm1");
    *(r12) = xmm0;
    goto label_1;
    eax = *(0x0809225f);
    xmm1 = 0;
    eax -= *(reloc.closepath);
    __asm ("cvtsi2sd xmm1, eax");
    __asm ("mulsd xmm0, xmm1");
    *(r12) = xmm0;
    goto label_1;
    rsi = r13;
    edi = 5;
    eval_link_function ();
    __asm ("mulsd xmm0, qword [0x08092fb3]");
    *(r12) = xmm0;
    goto label_1;
    rsi = r13;
    edi = 1;
    eval_link_function ();
    __asm ("mulsd xmm0, qword [reloc.atan2]");
    *(r12) = xmm0;
    goto label_1;
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/graphics.o @ 0x80026e0 */
#include <stdint.h>
 
int64_t place_pixmaps (int64_t arg6, int64_t arg5, int64_t arg1, int64_t arg2) {
    int64_t var_8h;
    int64_t var_1ch;
    int64_t var_38h;
    int64_t var_8h_2;
    int64_t var_10h;
    int64_t var_14h;
    int64_t var_18h;
    int64_t var_1ch_2;
    int64_t var_20h;
    int64_t var_28h;
    int64_t var_30h;
    int64_t var_34h;
    int64_t var_3ch;
    int64_t var_40h;
    int64_t var_48h;
    int64_t var_4ch;
    int64_t var_54h;
    int64_t var_58h;
    int64_t var_68h;
    r9 = arg6;
    r8 = arg5;
    rdi = arg1;
    rsi = arg2;
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x68)) = rax;
    eax = 0;
    rax = *(reloc.term);
    if (*((rax + 0xf0)) == 0) {
        goto label_8;
    }
    rbx = *(reloc.pixmap_listhead);
    if (rbx == 0) {
        goto label_8;
    }
    r13d = edi;
    r12 = rsp + 0x30;
label_1:
    if (*((rbx + 0x68)) != r13d) {
        goto label_2;
    }
    esi = *((rbx + 0x14));
    if (esi == 0) {
        goto label_2;
    }
    ecx = *((rbx + 0x10));
    if (ecx == 0) {
        goto label_2;
    }
    if (r13d == 0xffffffff) {
        goto label_9;
    }
    rdi = rbx + 0x18;
    if (ebp == 3) {
        goto label_10;
    }
label_3:
    r15 = rsp + 0x28;
    r14 = rsp + 0x20;
    *((rsp + 8)) = 0;
    *((rsp + 0x20)) = 0;
    rdx = r15;
    rsi = r14;
    *((rsp + 0x28)) = 0;
    map_position_double_isra_0 ();
    xmm1 = *((rbx + 0x50));
    __asm ("cvttsd2si ecx, qword [rsp + 0x20]");
    xmm6 = 0;
    __asm ("cvttsd2si r8d, qword [rsp + 0x28]");
    __asm ("ucomisd xmm1, xmm6");
    *((rsp + 0x10)) = ecx;
    *((rsp + 0x14)) = r8d;
    __asm ("jp 0x8002840");
    if (ebp != 3) {
        goto label_11;
    }
    xmm7 = 0;
    __asm ("ucomisd xmm7, qword [rbx + 0x58]");
    __asm ("jp 0x8002840");
    if (ebp != 3) {
        goto label_11;
    }
label_4:
    eax = *((rbx + 0x10));
    xmm2 = 0;
    r9 = *(reloc.term);
    esi = *((rbx + 0x14));
    __asm ("cvtsi2sd xmm2, rax");
    rdi = rax;
    xmm0 = *((r9 + 0x120));
    __asm ("mulsd xmm0, xmm2");
    __asm ("cvttsd2si edx, xmm0");
    *((rsp + 0x18)) = edx;
label_7:
    xmm0 = 0;
    __asm ("ucomisd xmm1, qword [rsp + 8]");
    xmm3 = 0;
    eax = esi;
    __asm ("cvtsi2sd xmm3, rax");
    __asm ("cvtsi2sd xmm0, edx");
    __asm ("mulsd xmm0, xmm3");
    __asm ("divsd xmm0, xmm2");
    __asm ("cvttsd2si eax, xmm0");
    *((rsp + 0x1c)) = eax;
    __asm ("jnp 0x80028be");
    do {
label_0:
        edx = *((rsp + 0x18));
        goto label_12;
label_11:
        rdi = rbx + 0x40;
        rcx = "pixmap";
        rdx = r15;
        rsi = r14;
        eax = eval_link_function ();
        xmm0 = *((rsp + 0x20));
        xmm1 = *((rbx + 0x50));
        __asm ("andpd xmm0, xmmword [loc..LC0]");
        __asm ("cvttsd2si eax, xmm0");
        xmm0 = *((rsp + 0x28));
        __asm ("andpd xmm0, xmmword [loc..LC0]");
        *((rsp + 0x18)) = eax;
        __asm ("cvttsd2si eax, xmm0");
        xmm0 = *((rbx + 0x58));
        *((rsp + 0x1c)) = eax;
label_5:
        __asm ("ucomisd xmm0, qword [rsp + 8]");
        edi = *((rbx + 0x10));
        esi = *((rbx + 0x14));
        r9 = *(reloc.term);
        ecx = *((rsp + 0x10));
        r8d = *((rsp + 0x14));
        __asm ("jnp 0x8002a70");
label_6:
        __asm ("ucomisd xmm1, qword [rsp + 8]");
        eax = *((rsp + 0x1c));
        __asm ("jp 0x8002830");
    } while (1);
    if (ebp != 3) {
        goto label_0;
    }
    edx = edi;
    xmm0 = 0;
    xmm1 = 0;
    __asm ("cvtsi2sd xmm1, rdx");
    edx = esi;
    __asm ("cvtsi2sd xmm0, eax");
    __asm ("mulsd xmm0, xmm1");
    xmm1 = 0;
    __asm ("cvtsi2sd xmm1, rdx");
    __asm ("divsd xmm0, xmm1");
    __asm ("cvttsd2si edx, xmm0");
    *((rsp + 0x18)) = edx;
label_12:
    if (*((rbx + 0x6c)) != 0) {
        r10d = edx;
        r10d >>= 0x1f;
        r10d += edx;
        r10d >>= 1;
        ecx -= r10d;
        r10d = eax;
        r10d >>= 0x1f;
        *((rsp + 0x10)) = ecx;
        r10d += eax;
        r10d >>= 1;
        r8d -= r10d;
        *((rsp + 0x14)) = r8d;
    }
    eax += r8d;
    *((rsp + 0x30)) = ecx;
    *((rsp + 0x34)) = eax;
    eax = rdx + rcx;
    rdx = *((rbx + 0x78));
    rcx = r12;
    *((rsp + 0x3c)) = eax;
    eax = *((r9 + 0x14));
    *((rsp + 0x40)) = r8d;
    r8d = 2;
    *((rsp + 0x4c)) = eax;
    eax = *((r9 + 0x10));
    *((rsp + 0x48)) = 0;
    *((rsp + 0x54)) = eax;
    *((rsp + 0x58)) = 0;
    rax = uint64_t (*r9 + 0xf0)() ();
label_2:
    rbx = *((rbx + 8));
    if (rbx != 0) {
        goto label_1;
    }
label_8:
    rax = *((rsp + 0x68));
    rax ^= *(fs:0x28);
    if (rbx != 0) {
        goto label_13;
    }
    return rax;
label_9:
    if (*(reloc.multiplot_count) > 1) {
        goto label_2;
    }
    rdi = rbx + 0x18;
    if (ebp != 3) {
        goto label_3;
    }
label_10:
    rdx = rsp + 0x14;
    rsi = rsp + 0x10;
    rcx = "pixmap";
    eval_link_function ();
    xmm1 = *((rbx + 0x50));
    xmm7 = 0;
    *((rsp + 8)) = 0;
    __asm ("ucomisd xmm1, xmm7");
    __asm ("jp 0x8002a08");
    if (ebp == 3) {
        xmm3 = 0;
        __asm ("ucomisd xmm3, qword [rbx + 0x58]");
        __asm ("jp 0x8002a08");
        if (ebp != 3) {
            goto label_14;
        }
        ecx = *((rsp + 0x10));
        r8d = *((rsp + 0x14));
        goto label_4;
    }
label_14:
    rdx = rsp + 0x1c;
    rsi = rsp + 0x18;
    rdi = rbx + 0x40;
    rcx = "pixmap";
    eax = eval_link_function ();
    edx = *((rbx + 0x40));
    xmm1 = *((rbx + 0x50));
    if (edx == 0) {
        xmm0 = *(reloc.radius_scaler);
        __asm ("mulsd xmm0, xmm1");
        __asm ("cvttsd2si eax, xmm0");
        *((rsp + 0x18)) = eax;
    }
    eax = *((rbx + 0x44));
    xmm0 = *((rbx + 0x58));
    if (eax != 0) {
        goto label_5;
    }
    xmm2 = *(reloc.radius_scaler);
    __asm ("mulsd xmm2, xmm0");
    __asm ("cvttsd2si eax, xmm2");
    *((rsp + 0x1c)) = eax;
    goto label_5;
    if (eax != 0) {
        goto label_6;
    }
    eax = edi;
    xmm2 = 0;
    edx = *((rsp + 0x18));
    __asm ("cvtsi2sd xmm2, rax");
    goto label_7;
label_13:
    eval_link_function ();
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/graphics.o @ 0x80038d0 */
#include <stdint.h>
 
uint64_t free_histlist (uint32_t arg1) {
    rdi = arg1;
    __asm ("endbr64");
    if (rdi != 0) {
        rax = reloc_histogram_opts;
        rbx = rdi;
        if (rdi != rax) {
            rdi = *((rdi + 0x80));
            eval_link_function ();
            rdi = *((rbx + 0x88));
            eval_link_function ();
        }
        rdi = *((rbx + 0x30));
        if (rdi != 0) {
            eval_link_function ();
            rdi = *((rbx + 0x30));
            eval_link_function ();
            *((rbx + 0x30)) = 0;
        }
        return rax;
    }
    return rax;
}
















/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/graphics.o @ 0x8000590 */
#include <stdint.h>
 
int64_t finish_filled_curve (int64_t arg1, int64_t arg2, uint32_t arg3) {
    rdi = arg1;
    rsi = arg2;
    rdx = arg3;
    rax = *(fs:0x28);
    *((rsp + 8)) = rax;
    eax = 0;
    if (edi <= 0) {
        goto label_3;
    }
    r12d = edi;
    rbx = rdx;
    if (*((rdx + 0x180)) <= 0xd) {
        eax = *((rdx + 0x180));
        rdx = reloc__rodata;
        rax = *((rdx + rax*4));
        rax += rdx;
        /* switch table (14 cases) at 0x800e9cc */
        void (*rax)() ();
        rax = (int64_t) edi;
        r12d += 2;
        rax *= 3;
        rax <<= 2;
        ecx = *((rsi + rax - 8));
        rdx = rsi + rax;
        *((rdx + 4)) = ecx;
        rcx = rsi + rax + 0xc;
        eax = *((rsi + 4));
        *((rcx + 4)) = eax;
        eax = *(0x080927b3);
        *(rcx) = eax;
        *(rdx) = eax;
    }
label_0:
    eax = r12 + r12;
    rdi = clipcorners.12666;
    rdx = "filledcurve verticess";
    rax = (int64_t) eax;
    rsi = rax * 3;
    rsi <<= 2;
    rax = eval_link_function ();
    rdi = rbp;
    rcx = rsp + 4;
    edx = r12d;
    rsi = rax;
    *(obj.clipcorners.12666) = rax;
    eval_link_function ();
    rdi = rbx + 0x138;
    rbp = clipcorners.12666;
    eax = eval_link_function ();
    edi = *((rsp + 4));
    *((rbp + 8)) = eax;
    if (edi <= 0) {
        goto label_3;
    }
    rax = *(reloc.term);
    rsi = clipcorners.12666;
    uint64_t (*rax + 0xe8)() ();
    do {
label_3:
        rax = *((rsp + 8));
        rax ^= *(fs:0x28);
        if (edi != 0) {
            goto label_4;
        }
        return rax;
        rax = (int64_t) edi;
        xmm0 = *((rbx + 0x188));
        r12d += 2;
        r13 = rax * 3;
        r13 <<= 2;
        r14 = rsi + r13;
        eax = eval_link_function ();
        rdx = rbp + r13 + 0xc;
        esi = 0;
        *((r14 + 4)) = eax;
        *((rdx + 4)) = eax;
        eax = *((rbp + r13 - 0xc));
        *(r14) = eax;
        eax = *(rbp);
        *(rdx) = eax;
        if (*((rbx + 0x180)) == 0xd) {
            goto label_5;
        }
label_2:
        if (*((rbx + 0x138)) == 4) {
            goto label_6;
        }
label_1:
        eax = *((rbx + 0x198));
        if (eax <= 0) {
            goto label_7;
        }
    } while (rsi < 0);
    goto label_0;
    rax = (int64_t) edi;
    xmm0 = *((rbx + 0x188));
    r13 = rax * 3;
    r13 <<= 2;
    r14 = rsi + r13;
    eax = eval_link_function ();
    ecx = *((rbp + r13 - 0x14));
    rdx = rbp + r13 - 0xc;
    esi = 0;
    *(r14) = eax;
    *((rdx + 4)) = ecx;
    rcx = rbp;
    *(rdx) = eax;
    edx = *((rbp + 4));
    *((r14 + 4)) = edx;
    edx = r12 - 1;
    rdx *= 3;
    rdi = rbp + rdx*4 + 0xc;
    do {
        edx = *(rcx);
        rcx += 0xc;
        edx -= eax;
        rdx = (int64_t) edx;
        rsi += rdx;
    } while (rdi != rcx);
    r12d += 2;
    goto label_1;
    rax = (int64_t) edi;
    r12d += 2;
    rax *= 3;
    rax <<= 2;
    ecx = *((rsi + rax - 8));
    rdx = rsi + rax;
    *((rdx + 4)) = ecx;
    rcx = rsi + rax + 0xc;
    eax = *((rsi + 4));
    *((rcx + 4)) = eax;
    eax = *(0x080927b7);
    *(rcx) = eax;
    *(rdx) = eax;
    goto label_0;
    rax = (int64_t) edi;
    xmm0 = *((rbx + 0x188));
    r12d++;
    rax *= 3;
    r13 = rsi + rax*4;
    eax = eval_link_function ();
    xmm0 = *((rbx + 0x190));
    *(r13) = eax;
    eax = eval_link_function ();
    *((r13 + 4)) = eax;
    goto label_0;
    rax = (int64_t) edi;
    r12d += 2;
    rax *= 3;
    rax <<= 2;
    ecx = *((rsi + rax - 0xc));
    rdx = rsi + rax;
    *(rdx) = ecx;
    rcx = rsi + rax + 0xc;
    eax = *(rsi);
    *(rcx) = eax;
    eax = *(0x0809250f);
    *((rcx + 4)) = eax;
    *((rdx + 4)) = eax;
    goto label_0;
    rax = (int64_t) edi;
    r12d += 2;
    rax *= 3;
    rax <<= 2;
    ecx = *((rsi + rax - 0xc));
    rdx = rsi + rax;
    *(rdx) = ecx;
    rcx = rsi + rax + 0xc;
    eax = *(rsi);
    *(rcx) = eax;
    eax = *(reloc.boxwidth_is_absolute);
    *((rcx + 4)) = eax;
    *((rdx + 4)) = eax;
    goto label_0;
    esi = 0;
    goto label_2;
label_5:
    rax = (int64_t) r12d;
    esi = 0;
    rax *= 3;
    eax = *((rbp + rax*4));
    sil = (eax > 0) ? 1 : 0;
    rsi = rsi + rsi - 1;
    goto label_2;
    if (eax >= 0) {
label_7:
        goto label_0;
    }
    if (rsi > 0) {
        goto label_3;
    }
    goto label_0;
label_6:
    eax = 0;
    edx = *((rbp + 0x18));
    al = (edx >= *(rbp)) ? 1 : 0;
    eax = rax + rax - 1;
    if (r12d <= 3) {
        goto label_1;
    }
    ecx = *((rbp + 0x24));
    if (edx == ecx) {
        goto label_8;
    }
    if (r12d == 4) {
        goto label_1;
    }
    if (ecx != *((rbp + 0x30))) {
        goto label_1;
    }
    ecx -= eax;
    *((rbp + 0x24)) = ecx;
    *((rbp + 0x30)) = ecx;
    goto label_1;
label_8:
    edx -= eax;
    *((rbp + 0x18)) = edx;
    *((rbp + 0x24)) = edx;
    goto label_1;
label_4:
    rax = eval_link_function ();
    r14d = 0x90;
    *((rsp + 0x18)) = xmm0;
    eax = eval_link_function (rbx, rbp, r12, r13);
    xmm0 = 0;
    r13d = eax;
    eax = eval_link_function ();
    xmm0 = *(loc..LC4);
    xmm1 = *(loc..LC5);
    r12d = eax;
    rax = *(loc..LC6);
    *((rsp + 8)) = rax;
    while (r14d != 0) {
        rdi = rsp + 0x28;
        rsi = rsp + 0x20;
        r12d = ebp;
        r13d = ebx;
        xmm0 = *(loc..LC7);
        __asm ("mulsd xmm0, xmm2");
        eval_link_function ();
        xmm0 = *((rsp + 0x20));
        xmm1 = *((rsp + 0x28));
        xmm3 = *((rsp + 0x18));
        __asm ("mulsd xmm1, xmm3");
        __asm ("mulsd xmm0, xmm3");
        *((rsp + 0x10)) = xmm1;
        eax = eval_link_function ();
        xmm1 = *((rsp + 0x10));
        ebx = eax;
        __asm ("movapd xmm0, xmm1");
        eax = eval_link_function ();
        edx = ebx;
        esi = r12d;
        edi = r13d;
        ecx = eax;
        eval_link_function ();
        xmm2 = *(loc..LC6);
        __asm ("addsd xmm2, qword [rsp + 8]");
        *((rsp + 8)) = xmm2;
        r14d--;
    }
    return rax;
}
   p p pd pd pdg pdg pdg  pdg  pdg @ pdg @ pdg @  pdg @  pdg @ s pdg @ s pdg @ sy pdg @ sy pdg @ sym pdg @ sym pdg @ sym. pdg @ sym. pdg @ sym.d pdg @ sym.d pdg @ sym.do pdg @ sym.do pdg @ sym.do_ pdg @ sym.do_ pdg @ sym.do_p pdg @ sym.do_p pdg @ sym.do_po pdg @ sym.do_po pdg @ sym.do_pol pdg @ sym.do_pol pdg @ sym.do_poly pdg @ sym.do_poly pdg @ sym.do_polyg pdg @ sym.do_polyg pdg @ sym.do_polygo pdg @ sym.do_polygo pdg @ sym.do_polygon pdg @ sym.do_polygon
// WARNING: Could not reconcile some variable overlaps

uint64_t sym.do_polygon(int64_t arg1, uint32_t arg2, int64_t arg3, int64_t arg4)
{
    int32_t *piVar1;
    uint32_t uVar2;
    uint32_t uVar3;
    bool bVar4;
    undefined8 uVar5;
    uint32_t uVar6;
    undefined4 uVar7;
    undefined4 uVar8;
    undefined4 uVar9;
    undefined4 uVar10;
    double *pdVar11;
    double *pdVar12;
    double *pdVar13;
    uint64_t uVar14;
    int32_t *piVar15;
    char *pcVar16;
    char extraout_DL;
    double *pdVar17;
    uint64_t unaff_RBX;
    int64_t iVar18;
    int32_t iVar19;
    double *unaff_RBP;
    undefined4 in_RSI;
    double *pdVar20;
    int64_t **arg1_00;
    code *pcVar21;
    uint32_t uVar22;
    int32_t iVar23;
    uint64_t unaff_R12;
    int64_t unaff_R13;
    int64_t iVar24;
    double *unaff_R14;
    double *unaff_R15;
    int64_t in_FS_OFFSET;
    bool bVar25;
    double dVar26;
    int64_t *piVar27;
    double dVar28;
    double dStack632;
    double dStack624;
    int64_t iStack616;
    uint64_t uStack600;
    double *pdStack592;
    uint64_t uStack584;
    int64_t iStack576;
    double *pdStack568;
    double *pdStack560;
    double *pdStack544;
    uint32_t uStack536;
    uint32_t uStack532;
    double *pdStack528;
    double dStack520;
    double dStack512;
    undefined auStack504 [52];
    int32_t iStack452;
    double adStack392 [24];
    undefined auStack200 [64];
    undefined auStack136 [72];
    int64_t iStack64;
    
    pdVar13 = (double *)CONCAT44(in_RSI, arg2);
    uStack532 = (uint32_t)arg3;
    uStack536 = (uint32_t)arg4;
    iStack64 = *(int64_t *)(in_FS_OFFSET + 0x28);
    pdVar20 = pdVar13;
    if ((pdVar13[0x15] == 0.00000000) || (unaff_R15 = pdVar13, *(int32_t *)(pdVar13 + 0x14) < 2)) goto code_r0x08001bd3;
    unaff_RBP = (double *)(uint64_t)*(uint32_t *)((int64_t)pdVar13 + 0x14);
    unaff_RBX = arg1 & 0xffffffff;
    pdStack528 = (double *)_reloc.clip_area;
    pdStack560 = (double *)0x80019e9;
    pcVar16 = (char *)_reloc.clip_area;
    _obj.corners.13488 =
         (double *)func_0x080921db(_obj.corners.13488, (int64_t)*(int32_t *)(pdVar13 + 0x14) * 0xc, "polygon");
    pdStack560 = (double *)0x8001a16;
    _obj.clpcorn.13489 =
         (double *)func_0x080921db(_obj.clpcorn.13489, (int64_t)(*(int32_t *)(pdVar13 + 0x14) * 2) * 0xc, "polygon");
    iVar19 = *(int32_t *)(pdVar13 + 0x14);
    if (iVar19 < 1) {
        uVar22 = 0;
    } else {
        pdStack544 = &dStack512;
        dVar26 = pdVar13[0x15];
        unaff_R13 = 0;
        do {
            unaff_R12 = unaff_R13 * 0x28;
            unaff_R14 = (double *)((int64_t)_obj.corners.13488 + unaff_R13 * 0xc);
            if ((int32_t)unaff_RBX == 3) {
                pcVar16 = "pvert";
                pdStack560 = (double *)0x8001aee;
                func_0x080921db((int64_t)dVar26 + unaff_R12, unaff_R14, (int64_t)unaff_R14 + 4);
            } else {
                dStack520 = 0.00000000;
                dStack512 = 0.00000000;
                pdStack560 = (double *)0x8001a69;
                pcVar16 = (char *)_obj.corners.13488;
                sym.map_position_double.isra.0
                          ((int64_t)dVar26 + unaff_R12, (int64_t)&dStack520, (int64_t)pdStack544, 
                           (int64_t)_obj.corners.13488);
                *(int32_t *)unaff_R14 = (int32_t)dStack520;
                *(int32_t *)((int64_t)unaff_R14 + 4) = (int32_t)dStack512;
            }
            dVar26 = pdVar13[0x15];
            if (*(int32_t *)((int64_t)dVar26 + unaff_R12) == 3) {
                unaff_RBP = (double *)0x1;
            } else {
                if (((int32_t *)((int64_t)dVar26 + unaff_R12))[1] == 3) {
                    unaff_RBP = (double *)0x1;
                }
            }
            iVar19 = *(int32_t *)(pdVar13 + 0x14);
            uVar22 = (int32_t)unaff_R13 + 1;
            unaff_R13 = unaff_R13 + 1;
        } while ((int32_t)unaff_R13 < iVar19);
    }
    uVar6 = uStack532;
    arg4 = (int64_t)pcVar16;
    if (((int32_t)unaff_RBX == 3) && (unaff_RBX = (uint64_t)uStack536, -1 < (int32_t)uStack536)) {
        piVar1 = (int32_t *)((int64_t)_obj.corners.13488 + (int64_t)iVar19 * 0xc + -0x18);
        uVar2 = *(uint32_t *)_obj.corners.13488;
        pdVar20 = (double *)(uint64_t)uVar2;
        uVar3 = *(uint32_t *)((int64_t)_obj.corners.13488 + 4);
        arg1 = ZEXT48(uVar3);
        dVar26 = (double)(*(int32_t *)((int64_t)_obj.corners.13488 + 0xc) - uVar2) * (double)(piVar1[1] - uVar3) -
                 (double)(*(int32_t *)(_obj.corners.13488 + 2) - uVar3) * (double)(*piVar1 - uVar2);
        arg4 = (int64_t)_obj.corners.13488;
        if (uStack536 == 1) {
            if (dVar26 <= _reloc..LC1) goto code_r0x08001b78;
        } else {
            if ((uStack536 != 0) || (0.00000000 <= dVar26)) goto code_r0x08001b78;
        }
    } else {
code_r0x08001b78:
        if ((int32_t)unaff_RBP == 1) {
            _reloc.clip_area = reloc.canvas;
        }
        if ((*(int64_t *)(_reloc.term + 0xe8) == 0) || (unaff_RBX = (uint64_t)uStack532, uStack532 == 0)) {
            pdStack544 = (double *)((uint64_t)pdStack544 & 0xffffffff00000000 | (uint64_t)uVar22);
            pdStack560 = (double *)0x8001bae;
            func_0x080921db();
            arg1 = (uint64_t)pdStack544 & 0xffffffff;
            pdStack560 = (double *)0x8001bc2;
            pdVar20 = _obj.corners.13488;
            func_0x080921db();
            pdStack560 = (double *)0x8001bc7;
            func_0x080921db();
        } else {
            arg4 = (int64_t)&dStack512;
            pdStack560 = (double *)0x8001c2b;
            func_0x080921db(_obj.corners.13488, _obj.clpcorn.13489, uVar22);
            pdVar20 = _obj.clpcorn.13489;
            *(uint32_t *)(_obj.clpcorn.13489 + 1) = uVar6;
            arg1 = (uint64_t)dStack512 & 0xffffffff;
            if (dStack512._0_4_ - 4U < 2) {
                if ((*(int32_t *)0x80923af != 3) || (-1 < (int32_t)uStack536)) goto code_r0x08001c46;
                unaff_RBP = adStack392;
                pdVar20 = adStack392 + 0x10;
                pdVar11 = unaff_RBP;
                pdVar17 = (double *)((int64_t)pdVar13[0x15] + 0x10);
                do {
                    pdVar12 = pdVar11 + 4;
                    *pdVar11 = *pdVar17;
                    pdVar11[1] = pdVar17[1];
                    pdVar11[2] = pdVar17[2];
                    pdVar11 = pdVar12;
                    pdVar17 = pdVar17 + 5;
                } while (pdVar20 != pdVar12);
                uVar22 = *(uint32_t *)((int64_t)pdVar13 + 0x6c);
                unaff_R12 = (uint64_t)uVar22;
                adStack392[3] = (double)uVar22;
                arg4 = (int64_t)unaff_RBP;
                if (*(int32_t *)(pdVar13 + 0xd) == 2) {
                    pdVar13 = pdVar20;
                    pdVar11 = unaff_RBP;
                    do {
                        arg4 = (int64_t)(pdVar11 + 4);
                        pdVar13[1] = *pdVar11;
                        pdVar13[2] = pdVar11[1];
                        dVar26 = pdVar11[2];
                        pdVar13[3] = dVar26;
                        pdVar13 = pdVar13 + 8;
                        pdVar11 = (double *)arg4;
                    } while (adStack392 + 0xc != (double *)arg4);
                    pdStack560 = (double *)0x8001d5e;
                    uVar6 = func_0x080921db(dVar26, pdVar20, auStack200, auStack136);
                    unaff_R12 = (uint64_t)((uVar22 + 1) - (uint32_t)(uVar6 < 0x80000000));
                    pdStack560 = (double *)0x8001d74;
                    func_0x080921db(auStack504, unaff_R12);
                    adStack392[3] = (double)iStack452;
                }
                arg1 = 0;
                adStack392[7] = (double)uStack532;
                pdStack560 = (double *)0x8001d13;
                pdVar20 = unaff_RBP;
                func_0x080921db(adStack392[7], 0, unaff_RBP, 4);
            } else {
                if (1 < dStack512._0_4_) {
code_r0x08001c46:
                    pdStack560 = (double *)0x8001c53;
                    (**(code **)(_reloc.term + 0xe8))();
                }
            }
        }
        _reloc.clip_area = (code *)pdStack528;
    }
code_r0x08001bd3:
    if (iStack64 == *(int64_t *)(in_FS_OFFSET + 0x28)) {
        return 0;
    }
    pdStack560 = (double *)0x8001d91;
    func_0x080921db();
    iVar19 = (int32_t)pdVar20;
    iStack616 = *(int64_t *)(in_FS_OFFSET + 0x28);
    arg1_00 = (int64_t **)arg1;
    uStack600 = unaff_RBX;
    pdStack592 = unaff_RBP;
    uStack584 = unaff_R12;
    iStack576 = unaff_R13;
    pdStack568 = unaff_R14;
    pdStack560 = unaff_R15;
    (**(code **)(_reloc.term + 0xa0))(_reloc.pointsize);
    uVar22 = (uint32_t)pdVar20;
    bVar25 = (int64_t **)arg1 != (int64_t **)0x0;
    if (iVar19 == 99 && bVar25) {
        if ((*(char *)(arg1 + 0xf9) != '\0') && (*(code **)(_reloc.term + 0x128) != (code *)0x0)) {
            pdVar20 = *(double **)(arg1 + 0x50);
            arg1_00 = (int64_t **)0x2;
            (**(code **)(_reloc.term + 0x128))();
        }
    } else {
        if ((int64_t **)arg1 == (int64_t **)0x0) goto code_r0x08001ef5;
    }
    do {
        if (*(int32_t *)(arg1 + 0x40) == iVar19) {
            if (iVar19 == 99 && bVar25) {
                uVar22 = func_0x080921db(*(int64_t **)(arg1 + 0x20));
                uVar6 = func_0x080921db(*(int64_t **)(arg1 + 0x28));
                pdVar20 = (double *)(uint64_t)uVar6;
            } else {
                pdVar20 = &dStack632;
                arg1_00 = (int64_t **)(arg1 + 0x10);
                dStack632 = 0.00000000;
                dStack624 = 0.00000000;
                sym.map_position_double.isra.0((int64_t)arg1_00, (int64_t)pdVar20, (int64_t)&dStack624, arg4);
                uVar22 = (uint32_t)dStack632;
                pdVar20 = (double *)((uint64_t)pdVar20 & 0xffffffff00000000 | (uint64_t)(uint32_t)(int32_t)dStack624);
            }
            if (((int32_t)pdVar20 != -0x80000000) && (uVar22 != 0x80000000)) {
                if (extraout_DL != '\0') {
                    if (*(int32_t *)(arg1 + 0x10) == 0) {
                        piVar27 = *(int64_t **)(arg1 + 0x20);
                        dVar26 = *(double *)0x809274b;
                        dVar28 = *(double *)0x8092753;
                        if (*(double *)0x8092753 <= *(double *)0x809274b) {
code_r0x08001f48:
                            if ((double)piVar27 < dVar28) goto code_r0x08001ee9;
                            bVar4 = dVar26 < (double)piVar27;
                        } else {
code_r0x08001e92:
                            if ((double)piVar27 < dVar26) goto code_r0x08001ee9;
                            bVar4 = dVar28 < (double)piVar27;
                        }
                        if (bVar4) goto code_r0x08001ee9;
                    } else {
                        if (*(int32_t *)(arg1 + 0x10) == 1) {
                            piVar27 = *(int64_t **)(arg1 + 0x20);
                            dVar26 = *(double *)0x80931eb;
                            dVar28 = *(double *)0x80931f3;
                            if (*(double *)0x80931f3 <= *(double *)0x80931eb) goto code_r0x08001f48;
                            goto code_r0x08001e92;
                        }
                    }
                    if (*(int32_t *)(arg1 + 0x14) == 0) {
                        piVar27 = *(int64_t **)(arg1 + 0x28);
                        dVar26 = _reloc.load_linetype;
                        dVar28 = _reloc.cb2gray;
                        if (_reloc.cb2gray <= _reloc.load_linetype) {
code_r0x08001fa8:
                            if ((double)piVar27 < dVar28) goto code_r0x08001ee9;
                            bVar4 = dVar26 < (double)piVar27;
                        } else {
code_r0x08001ecd:
                            if ((double)piVar27 < dVar26) goto code_r0x08001ee9;
                            bVar4 = dVar28 < (double)piVar27;
                        }
                        if (bVar4) goto code_r0x08001ee9;
                    } else {
                        if (*(int32_t *)(arg1 + 0x14) == 1) {
                            piVar27 = *(int64_t **)(arg1 + 0x28);
                            dVar26 = *(double *)0x8092f43;
                            dVar28 = *(double *)0x8092f4b;
                            if (*(double *)0x8092f4b <= *(double *)0x8092f43) goto code_r0x08001fa8;
                            goto code_r0x08001ecd;
                        }
                    }
                }
                arg1_00 = (int64_t **)(uint64_t)uVar22;
                func_0x080921db(arg1_00, pdVar20, arg1);
            }
        }
code_r0x08001ee9:
        uVar22 = (uint32_t)pdVar20;
        arg1 = *(int64_t *)arg1;
    } while ((int64_t **)arg1 != (int64_t **)0x0);
code_r0x08001ef5:
    if (iStack616 == *(int64_t *)(in_FS_OFFSET + 0x28)) {
        return 0;
    }
    uVar14 = func_0x080921db();
    if (arg1_00 != (int64_t **)0x0) {
        iVar19 = 0;
        do {
            if ((*(int32_t *)(arg1_00 + 2) == 0x94a) && (*(int32_t *)(arg1_00 + 0x39) != 0)) {
                iVar19 = *(int32_t *)((int64_t)arg1_00 + 0x1dc);
                if (_reloc.num_parallel_axes < iVar19) {
                    iVar24 = 0xffffffff;
                    func_0x080921db(0xffffffff, "");
                    uVar5 = _reloc..LC23;
                    uVar22 = *(uint32_t *)(iVar24 + 0x1c8);
                    piVar1 = *(int32_t **)(iVar24 + 0x1e8);
                    if (0 < (int32_t)uVar22) {
                        piVar15 = piVar1;
                        do {
                            if (*piVar15 == 2) {
                                *(undefined8 *)(piVar15 + 6) = uVar5;
                                *(undefined8 *)(piVar15 + 4) = uVar5;
                            }
                            piVar15 = piVar15 + 0x10;
                        } while (piVar15 != piVar1 + (uint64_t)(uVar22 - 1) * 0x10 + 0x10);
                    }
                    if (1 < *(int32_t *)(iVar24 + 0x1c0)) {
                        obj.boxplot_factor_sort_required = (code)0x1;
                    }
                    iVar18 = (int64_t)(int32_t)uVar22 * 0x40;
                    func_0x080921db(piVar1, (int64_t)(int32_t)uVar22, 0x40, sym.compare_ypoints);
                    if (*(int32_t *)(*(int64_t *)(iVar24 + 0x1e8) + -0x40 + iVar18) == 2) {
                        iVar24 = *(int64_t *)(iVar24 + 0x1e8) + iVar18;
                        do {
                            uVar22 = uVar22 - 1;
                            piVar1 = (int32_t *)(iVar24 + -0x80);
                            iVar24 = iVar24 + -0x40;
                        } while (*piVar1 == 2);
                    }
                    return (uint64_t)uVar22;
                }
                iVar24 = _reloc.parallel_axis_array + -0x2a8 + (int64_t)iVar19 * 0x2a8;
                uVar14 = func_0x080921db(iVar24, 0x14);
                if (arg1_00[3] != (int64_t *)0x0) {
                    func_0x080921db(*(undefined8 *)(iVar24 + 0x1d8));
                    uVar14 = func_0x080921db(arg1_00[3]);
                    *(uint64_t *)(iVar24 + 0x1d8) = uVar14;
                }
            }
            iVar24 = _reloc.parallel_axis_array;
            arg1_00 = (int64_t **)*arg1_00;
        } while (arg1_00 != (int64_t **)0x0);
        if ((iVar19 != 0) && (_reloc.parallel_axis_array != 0)) {
            if (reloc.grid_spiderweb == (code)0x0) {
                if ((_reloc.strdup == 1) && ((uVar22 & 1) == 0)) {
                    return uVar14;
                }
            } else {
                if (uVar22 == 0) {
                    *(undefined *)(_reloc.parallel_axis_array + 0x140) = 1;
                    func_0x080921db(reloc.grid_lp);
                    *(int32_t *)(iVar24 + 0x88) = iVar19;
                    *(undefined *)(iVar24 + 0x130) = 0;
                    uVar14 = func_0x080921db(iVar24, sym.spidertick_callback);
                    bVar25 = _reloc.strdup == 1;
                    *(undefined *)(iVar24 + 0x140) = 0;
                    if (bVar25) {
                        return uVar14;
                    }
                }
            }
            if (0 < iVar19) {
                iVar24 = 0;
                iVar23 = 0;
                do {
                    iVar18 = _reloc.parallel_axis_array + iVar24;
                    dVar26 = ((double)iVar23 * _reloc..LC20) / (double)iVar19;
                    dVar28 = _reloc..LC21 - dVar26;
                    pcVar21 = *(code **)(iVar18 + 0x298);
                    if (pcVar21 == (code *)0x0) {
                        pcVar21 = reloc.parallel_axis_style;
                    }
                    func_0x080921db(dVar26, pcVar21);
                    func_0x080921db(dVar28, 0, obj.spoke_x0, obj.spoke_y0, 0);
                    func_0x080921db(dVar28, _reloc..LC9, obj.spoke_x1, obj.spoke_y1, 0);
                    uVar7 = func_0x080921db(_obj.spoke_y1);
                    uVar8 = func_0x080921db(_obj.spoke_x1);
                    uVar9 = func_0x080921db(_obj.spoke_y0);
                    uVar10 = func_0x080921db(_obj.spoke_x0);
                    func_0x080921db(uVar10, uVar9, uVar8, uVar7);
                    uVar14 = (uint64_t)*(uint32_t *)(iVar18 + 0xb8);
                    if (*(uint32_t *)(iVar18 + 0xb8) != 0) {
                        _obj.spoke_dx = (_obj.spoke_y0 - _obj.spoke_y1) * _reloc..LC13;
                        _obj.spoke_dy = (_obj.spoke_x1 - _obj.spoke_x0) * _reloc..LC13;
                        func_0x080921db(_obj.spoke_dy, reloc.border_lp);
                        *(undefined *)(iVar18 + 0x130) = 0;
                        uVar14 = func_0x080921db(iVar18, sym.spidertick_callback);
                    }
                    dVar26 = _reloc..LC9;
                    if (*(int64_t *)(iVar18 + 0x1d8) != 0) {
                        dVar28 = *(double *)(iVar18 + 0x270);
                        *(undefined8 *)(iVar18 + 0x270) = 0;
                        dVar26 = _reloc..LC22 * (dVar26 + dVar28);
                        uVar7 = func_0x080921db((_obj.spoke_y1 - _obj.spoke_y0) * dVar26 + _obj.spoke_y1, dVar26, dVar28
                                               );
                        uVar8 = func_0x080921db((_obj.spoke_x1 - _obj.spoke_x0) * dVar26 + _obj.spoke_x1, dVar26);
                        uVar14 = func_0x080921db(uVar8, uVar7, iVar18 + 400);
                        *(double *)(iVar18 + 0x270) = dVar28;
                    }
                    iVar23 = iVar23 + 2;
                    iVar24 = iVar24 + 0x2a8;
                } while (iVar19 * 2 != iVar23);
            }
        }
        return uVar14;
    }
    return uVar14;
}
   p p pd pd pdd pdd pdd  pdd  pdd @ pdd @ pdd @  pdd @  pdd @ s pdd @ s pdd @ sy pdd @ sy pdd @ sym pdd @ sym pdd @ sym. pdd @ sym. pdd @ sym.d pdd @ sym.d pdd @ sym.do pdd @ sym.do pdd @ sym.do_ pdd @ sym.do_ pdd @ sym.do_p pdd @ sym.do_p pdd @ sym.do_po pdd @ sym.do_po pdd @ sym.do_pol pdd @ sym.do_pol pdd @ sym.do_poly pdd @ sym.do_poly pdd @ sym.do_polyg pdd @ sym.do_polyg pdd @ sym.do_polygo pdd @ sym.do_polygo pdd @ sym.do_polygon pdd @ sym.do_polygon/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/graphics.o @ 0x8001970 */
#include <stdint.h>
 
int64_t do_polygon (int64_t arg1, uint32_t arg2, int64_t arg3, int64_t arg4) {
    rdi = arg1;
    rsi = arg2;
    rdx = arg3;
    rcx = arg4;
    *((rsp + 0x14)) = edx;
    *((rsp + 0x10)) = ecx;
    rax = *(fs:0x28);
    *((rsp + 0x1e8)) = rax;
    eax = 0;
    if (*((rsi + 0xa8)) == 0) {
        goto label_4;
    }
    rax = *((rsi + 0xa0));
    r15 = rsi;
    if (eax <= 1) {
        goto label_4;
    }
    rcx = *(reloc.clip_area);
    ebp = *((rsi + 0x14));
    ebx = edi;
    rsi = rax * 3;
    rdi = corners.13488;
    rsi <<= 2;
    rdx = "polygon";
    *((rsp + 0x18)) = rcx;
    rax = eval_link_function ();
    rdi = clpcorn.13489;
    rdx = "polygon";
    *(obj.corners.13488) = rax;
    eax = *((r15 + 0xa0));
    eax += eax;
    rax = (int64_t) eax;
    rsi = rax * 3;
    rsi <<= 2;
    rax = eval_link_function ();
    rdx = *((r15 + 0xa0));
    *(obj.clpcorn.13489) = rax;
    if (edx <= 0) {
        goto label_7;
    }
    rax = rsp + 0x28;
    rdi = *((r15 + 0xa8));
    r13d = 0;
    *((rsp + 8)) = rax;
    while (ebx != 3) {
        rdx = *((rsp + 8));
        rsi = rsp + 0x20;
        *((rsp + 0x20)) = 0;
        *((rsp + 0x28)) = 0;
        map_position_double_isra_0 ();
        __asm ("cvttsd2si edx, qword [rsp + 0x20]");
        *(r14) = edx;
        __asm ("cvttsd2si edx, qword [rsp + 0x28]");
        *((r14 + 4)) = edx;
label_0:
        rdi = *((r15 + 0xa8));
        r8 = rdi + r12;
        if (*(r8) == 3) {
            goto label_8;
        }
        edx = 1;
        if (*((r8 + 4)) == 3) {
        }
label_1:
        rdx = *((r15 + 0xa0));
        r8d = r13 + 1;
        r13++;
        if (edx <= r13d) {
            goto label_9;
        }
        rcx = corners.13488;
        r8 = r13 * 5;
        rdx = r13 * 3;
        r12 = r8*8;
        r14 = rcx + rdx*4;
        rdi += r12;
    }
    rdx = r14 + 4;
    rcx = "pvert";
    rsi = r14;
    eval_link_function ();
    goto label_0;
label_7:
    r8d = 0;
label_9:
    if (ebx == 3) {
        ebx = *((rsp + 0x10));
        if (ebx < 0) {
            goto label_3;
        }
        rcx = corners.13488;
        rax = rdx * 3;
        xmm0 = 0;
        xmm1 = 0;
        xmm2 = 0;
        rdx = rcx + rax*4 - 0x18;
        esi = *(rcx);
        eax = *((rcx + 0xc));
        edi = *((rcx + 4));
        eax -= esi;
        __asm ("cvtsi2sd xmm0, eax");
        eax = *((rdx + 4));
        eax -= edi;
        __asm ("cvtsi2sd xmm1, eax");
        eax = *((rcx + 0x10));
        eax -= edi;
        __asm ("mulsd xmm0, xmm1");
        xmm1 = 0;
        __asm ("cvtsi2sd xmm1, eax");
        eax = *(rdx);
        eax -= esi;
        __asm ("cvtsi2sd xmm2, eax");
        __asm ("mulsd xmm1, xmm2");
        __asm ("subsd xmm0, xmm1");
        if (ebx == 1) {
            goto label_10;
        }
        edx = *((rsp + 0x10));
        if (edx != 0) {
            goto label_3;
        }
        xmm1 = 0;
        __asm ("comisd xmm1, xmm0");
        if (edx > 0) {
            goto label_4;
        }
    }
label_3:
    if (ebp == 1) {
        rax = reloc_canvas;
        *(reloc.clip_area) = rax;
    }
    rax = *(reloc.term);
    if (*((rax + 0xe8)) != 0) {
        ebx = *((rsp + 0x14));
        if (ebx != 0) {
            goto label_11;
        }
    }
    *((rsp + 8)) = r8d;
    eval_link_function ();
    r8d = *((rsp + 8));
    rsi = corners.13488;
    edi = r8d;
    eval_link_function ();
    eval_link_function ();
    do {
label_2:
        rax = *((rsp + 0x18));
        *(reloc.clip_area) = rax;
label_4:
        rax = *((rsp + 0x1e8));
        rax ^= *(fs:0x28);
        if (ebx != 0) {
            goto label_12;
        }
        return rax;
label_8:
        goto label_1;
label_11:
        rsi = clpcorn.13489;
        rdi = corners.13488;
        rcx = rsp + 0x28;
        edx = r8d;
        eval_link_function ();
        rsi = clpcorn.13489;
        *((rsi + 8)) = ebx;
        edi = *((rsp + 0x28));
        eax = rdi - 4;
        if (eax <= 1) {
            goto label_13;
        }
    } while (edi <= 1);
label_5:
    rax = *(reloc.term);
    uint64_t (*rax + 0xe8)() ();
    goto label_2;
label_10:
    __asm ("comisd xmm0, xmmword [loc..LC1]");
    if (edi <= 1) {
        goto label_3;
    }
    goto label_4;
label_13:
    if (*(0x080923af) != 3) {
        goto label_5;
    }
    eax = *((rsp + 0x10));
    if (eax >= 0) {
        goto label_5;
    }
    rax = *((r15 + 0xa8));
    rbp = rsp + 0xa0;
    rdi = rsp + 0x120;
    rcx = rbp;
    rdx = rax + 0x10;
    rax = rbp;
    do {
        xmm0 = *(rdx);
        rax += 0x20;
        rdx += 0x28;
        *((rax - 0x20)) = xmm0;
        xmm0 = *((rdx - 0x20));
        *((rax - 0x18)) = xmm0;
        xmm0 = *((rdx - 0x18));
        *((rax - 0x10)) = xmm0;
    } while (rdi != rax);
    r12d = *((r15 + 0x6c));
    xmm0 = 0;
    __asm ("cvtsi2sd xmm0, r12d");
    *((rsp + 0xb8)) = xmm0;
    if (*((r15 + 0x68)) != 2) {
label_6:
        xmm0 = 0;
        edx = 4;
        rsi = rbp;
        edi = 0;
        __asm ("cvtsi2sd xmm0, dword [rsp + 0x14]");
        *((rsp + 0xd8)) = xmm0;
        eval_link_function ();
        goto label_2;
    }
    rax = rdi;
    rdx = rbp + 0x60;
    do {
        xmm0 = *(rcx);
        rcx += 0x20;
        rax += 0x40;
        *((rax - 0x38)) = xmm0;
        xmm0 = *((rcx - 0x18));
        *((rax - 0x30)) = xmm0;
        xmm0 = *((rcx - 0x10));
        *((rax - 0x28)) = xmm0;
    } while (rdx != rcx);
    rdx = rsp + 0x1a0;
    rsi = rsp + 0x160;
    eax = eval_link_function ();
    rdi = rsp + 0x30;
    r12d -= 0xffffffff;
    esi = r12d;
    eval_link_function ();
    xmm0 = 0;
    __asm ("cvtsi2sd xmm0, dword [rsp + 0x64]");
    *((rsp + 0xb8)) = xmm0;
    goto label_6;
label_12:
    rax = eval_link_function ();
}
   p p pd pd pdg pdg pdg  pdg  pdg @ pdg @ pdg @  pdg @  pdg @ s pdg @ s pdg @ sy pdg @ sy pdg @ sym pdg @ sym pdg @ sym. pdg @ sym. pdg @ sym.f pdg @ sym.f pdg @ sym.fi pdg @ sym.fi pdg @ sym.fin pdg @ sym.fin pdg @ sym.fini pdg @ sym.fini pdg @ sym.finis pdg @ sym.finis pdg @ sym.finish pdg @ sym.finish pdg @ sym.finish_ pdg @ sym.finish_ pdg @ sym.finish_f pdg @ sym.finish_f pdg @ sym.finish_fi pdg @ sym.finish_fi pdg @ sym.finish_fil pdg @ sym.finish_fil pdg @ sym.finish_fill pdg @ sym.finish_fill pdg @ sym.finish_fille pdg @ sym.finish_fille pdg @ sym.finish_filled pdg @ sym.finish_filled pdg @ sym.finish_filled_ pdg @ sym.finish_filled_ pdg @ sym.finish_filled_c pdg @ sym.finish_filled_c pdg @ sym.finish_filled_cu pdg @ sym.finish_filled_cu pdg @ sym.finish_filled_cur pdg @ sym.finish_filled_cur pdg @ sym.finish_filled_curv pdg @ sym.finish_filled_curv pdg @ sym.finish_filled_curve pdg @ sym.finish_filled_curve
void sym.finish_filled_curve(int64_t arg1, int64_t arg2, uint32_t arg3)
{
    undefined4 *puVar1;
    undefined8 uVar2;
    double dVar3;
    undefined4 uVar4;
    int32_t iVar5;
    undefined4 uVar6;
    undefined4 uVar7;
    undefined4 uVar8;
    int64_t iVar9;
    int32_t iVar10;
    int32_t *piVar11;
    undefined4 in_register_00000014;
    int64_t unaff_RBX;
    int64_t unaff_RBP;
    int64_t iVar12;
    uint64_t unaff_R12;
    undefined4 *unaff_R13;
    int32_t iVar13;
    int32_t *unaff_R14;
    int64_t in_FS_OFFSET;
    double extraout_XMM0_Qa;
    double dVar14;
    double dStack136;
    double dStack112;
    double dStack104;
    int64_t iStack96;
    int64_t iStack88;
    uint64_t uStack80;
    undefined4 *puStack72;
    int32_t *piStack64;
    int32_t iStack52;
    int64_t iStack48;
    
    iVar9 = CONCAT44(in_register_00000014, arg3);
    iStack48 = *(int64_t *)(in_FS_OFFSET + 0x28);
    iVar13 = (int32_t)arg1;
    iStack96 = unaff_RBX;
    iStack88 = unaff_RBP;
    if (iVar13 < 1) goto code_r0x080002ed;
    unaff_R12 = arg1 & 0xffffffff;
    iVar5 = (int32_t)unaff_R12;
    iStack96 = iVar9;
    // switch table (14 cases) at 0x800e9cc
    switch(*(undefined4 *)(iVar9 + 0x180)) {
    case 1:
        unaff_R12 = (uint64_t)(iVar5 + 2);
        iVar9 = (int64_t)iVar13 * 0xc;
        *(undefined4 *)(arg2 + iVar9) = *(undefined4 *)(arg2 + -0xc + iVar9);
        puVar1 = (undefined4 *)(arg2 + 0xc + iVar9);
        *puVar1 = *(undefined4 *)arg2;
        uVar4 = _reloc.boxwidth_is_absolute;
        puVar1[1] = _reloc.boxwidth_is_absolute;
        ((undefined4 *)(arg2 + iVar9))[1] = uVar4;
        break;
    case 2:
        unaff_R12 = (uint64_t)(iVar5 + 2);
        iVar9 = (int64_t)iVar13 * 0xc;
        ((undefined4 *)(arg2 + iVar9))[1] = *(undefined4 *)(arg2 + -8 + iVar9);
        puVar1 = (undefined4 *)(arg2 + 0xc + iVar9);
        puVar1[1] = *(undefined4 *)(arg2 + 4);
        uVar4 = *(undefined4 *)0x80927b3;
        *puVar1 = *(undefined4 *)0x80927b3;
        *(undefined4 *)(arg2 + iVar9) = uVar4;
        break;
    case 3:
        unaff_R12 = (uint64_t)(iVar5 + 2);
        iVar9 = (int64_t)iVar13 * 0xc;
        *(undefined4 *)(arg2 + iVar9) = *(undefined4 *)(arg2 + -0xc + iVar9);
        puVar1 = (undefined4 *)(arg2 + 0xc + iVar9);
        *puVar1 = *(undefined4 *)arg2;
        uVar4 = *(undefined4 *)0x809250f;
        puVar1[1] = *(undefined4 *)0x809250f;
        ((undefined4 *)(arg2 + iVar9))[1] = uVar4;
        break;
    case 4:
        unaff_R12 = (uint64_t)(iVar5 + 2);
        iVar9 = (int64_t)iVar13 * 0xc;
        ((undefined4 *)(arg2 + iVar9))[1] = *(undefined4 *)(arg2 + -8 + iVar9);
        puVar1 = (undefined4 *)(arg2 + 0xc + iVar9);
        puVar1[1] = *(undefined4 *)(arg2 + 4);
        uVar4 = *(undefined4 *)0x80927b7;
        *puVar1 = *(undefined4 *)0x80927b7;
        *(undefined4 *)(arg2 + iVar9) = uVar4;
        break;
    case 5:
    case 7:
        unaff_R13 = (undefined4 *)(((int64_t)iVar13 * 3 + 3) * 4);
        unaff_R14 = (int32_t *)(arg2 + (int64_t)unaff_R13);
        piStack64 = (int32_t *)0x80003a5;
        iVar13 = func_0x080921db(*(undefined8 *)(iVar9 + 0x188));
        piVar11 = (int32_t *)(arg2 + -0xc + (int64_t)unaff_R13);
        iVar12 = 0;
        *unaff_R14 = iVar13;
        piVar11[1] = *(int32_t *)(arg2 + -0x14 + (int64_t)unaff_R13);
        *piVar11 = iVar13;
        unaff_R14[1] = *(int32_t *)(arg2 + 4);
        piVar11 = (int32_t *)arg2;
        do {
            iVar10 = *piVar11;
            piVar11 = piVar11 + 3;
            iVar12 = iVar12 + (iVar10 - iVar13);
        } while ((int32_t *)(arg2 + 0xc + (uint64_t)(iVar5 - 1) * 0xc) != piVar11);
        unaff_R12 = (uint64_t)(iVar5 + 2);
        goto code_r0x08000365;
    case 6:
    case 8:
        unaff_R12 = (uint64_t)(iVar5 + 2);
        unaff_R13 = (undefined4 *)((int64_t)iVar13 * 0xc);
        unaff_R14 = (int32_t *)(arg2 + (int64_t)unaff_R13);
        piStack64 = (int32_t *)0x8000330;
        iVar5 = func_0x080921db(*(undefined8 *)(iVar9 + 0x188));
        puVar1 = (undefined4 *)(arg2 + 0xc + (int64_t)unaff_R13);
        iVar12 = 0;
        iVar13 = *(int32_t *)(iVar9 + 0x180);
        unaff_R14[1] = iVar5;
        puVar1[1] = iVar5;
        *unaff_R14 = *(int32_t *)(arg2 + -0xc + (int64_t)unaff_R13);
        *puVar1 = *(undefined4 *)arg2;
        if (iVar13 == 0xd) goto code_r0x080004f0;
        goto code_r0x08000358;
    case 9:
        unaff_R12 = (uint64_t)(iVar5 + 1);
        unaff_R13 = (undefined4 *)(arg2 + (int64_t)iVar13 * 0xc);
        piStack64 = (int32_t *)0x800044c;
        uVar4 = func_0x080921db(*(undefined8 *)(iVar9 + 0x188));
        uVar2 = *(undefined8 *)(iVar9 + 400);
        *unaff_R13 = uVar4;
        piStack64 = (int32_t *)0x800045d;
        uVar4 = func_0x080921db(uVar2);
        unaff_R13[1] = uVar4;
        break;
    case 10:
        iVar12 = 0;
        goto code_r0x08000358;
    case 0xd:
code_r0x080004f0:
        iVar12 = (uint64_t)(0 < *(int32_t *)(arg2 + (int64_t)(int32_t)unaff_R12 * 0xc)) * 2 + -1;
code_r0x08000358:
        if (*(int32_t *)(iVar9 + 0x138) == 4) {
            iVar13 = *(int32_t *)(arg2 + 0x18);
            iVar5 = ((*(int32_t *)arg2 <= iVar13) - 1) + (uint32_t)(*(int32_t *)arg2 <= iVar13);
            if (3 < (int32_t)unaff_R12) {
                iVar10 = *(int32_t *)(arg2 + 0x24);
                if (iVar13 == iVar10) {
                    iVar13 = iVar13 - iVar5;
                    *(int32_t *)(arg2 + 0x18) = iVar13;
                    *(int32_t *)(arg2 + 0x24) = iVar13;
                } else {
                    if (((int32_t)unaff_R12 != 4) && (iVar10 == *(int32_t *)(arg2 + 0x30))) {
                        iVar10 = iVar10 - iVar5;
                        *(int32_t *)(arg2 + 0x24) = iVar10;
                        *(int32_t *)(arg2 + 0x30) = iVar10;
                    }
                }
            }
        }
code_r0x08000365:
        iStack88 = arg2;
        if (*(int32_t *)(iVar9 + 0x198) < 1) {
            if ((*(int32_t *)(iVar9 + 0x198) < 0) && (0 < iVar12)) goto code_r0x080002ed;
        } else {
            if (iVar12 < 0) goto code_r0x080002ed;
        }
    }
    piStack64 = (int32_t *)0x80002a1;
    _obj.clipcorners.12666 =
         func_0x080921db(_obj.clipcorners.12666, (int64_t)((int32_t)unaff_R12 * 2) * 0xc, "filledcurve verticess");
    piStack64 = (int32_t *)0x80002bb;
    func_0x080921db(arg2, _obj.clipcorners.12666, unaff_R12, &iStack52);
    iStack88 = _obj.clipcorners.12666;
    piStack64 = (int32_t *)0x80002ce;
    uVar4 = func_0x080921db();
    *(undefined4 *)(iStack88 + 8) = uVar4;
    if (0 < iStack52) {
        piStack64 = (int32_t *)0x80002ed;
        (**(code **)(_reloc.term + 0xe8))(iStack52, _obj.clipcorners.12666);
    }
code_r0x080002ed:
    if (iStack48 == *(int64_t *)(in_FS_OFFSET + 0x28)) {
        return;
    }
    piStack64 = (int32_t *)0x8000582;
    func_0x080921db();
    iVar13 = 0x90;
    uStack80 = unaff_R12;
    puStack72 = unaff_R13;
    piStack64 = unaff_R14;
    uVar6 = func_0x080921db();
    uVar4 = func_0x080921db(0);
    dStack136 = _reloc..LC6;
    dVar14 = _reloc..LC5;
    dVar3 = _reloc..LC4;
    while( true ) {
        uVar7 = func_0x080921db(dVar3 * extraout_XMM0_Qa);
        uVar8 = func_0x080921db(dVar14 * extraout_XMM0_Qa);
        func_0x080921db(uVar6, uVar4, uVar7, uVar8);
        dStack136 = _reloc..LC6 + dStack136;
        iVar13 = iVar13 + -1;
        if (iVar13 == 0) break;
        func_0x080921db(_reloc..LC7 * dStack136, &dStack104, &dStack112);
        dVar14 = dStack104;
        dVar3 = dStack112;
        uVar4 = uVar8;
        uVar6 = uVar7;
    }
    return;
}
   p p pd pd pdd pdd pdd  pdd  pdd @ pdd @ pdd @  pdd @  pdd @ s pdd @ s pdd @ sy pdd @ sy pdd @ sym pdd @ sym pdd @ sym. pdd @ sym. pdd @ sym.f pdd @ sym.f pdd @ sym.fi pdd @ sym.fi pdd @ sym.fin pdd @ sym.fin pdd @ sym.fini pdd @ sym.fini pdd @ sym.finis pdd @ sym.finis pdd @ sym.finish pdd @ sym.finish pdd @ sym.finish_ pdd @ sym.finish_ pdd @ sym.finish_f pdd @ sym.finish_f pdd @ sym.finish_fi pdd @ sym.finish_fi pdd @ sym.finish_fil pdd @ sym.finish_fil pdd @ sym.finish_fill pdd @ sym.finish_fill pdd @ sym.finish_fille pdd @ sym.finish_fille pdd @ sym.finish_filled pdd @ sym.finish_filled pdd @ sym.finish_filled_ pdd @ sym.finish_filled_ pdd @ sym.finish_filled_c pdd @ sym.finish_filled_c pdd @ sym.finish_filled_cu pdd @ sym.finish_filled_cu pdd @ sym.finish_filled_cur pdd @ sym.finish_filled_cur pdd @ sym.finish_filled_curv pdd @ sym.finish_filled_curv pdd @ sym.finish_filled_curve pdd @ sym.finish_filled_curve/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/graphics.o @ 0x8000200 */
#include <stdint.h>
 
int64_t finish_filled_curve (int64_t arg1, int64_t arg2, uint32_t arg3) {
    rdi = arg1;
    rsi = arg2;
    rdx = arg3;
    rax = *(fs:0x28);
    *((rsp + 8)) = rax;
    eax = 0;
    if (edi <= 0) {
        goto label_3;
    }
    r12d = edi;
    rbx = rdx;
    if (*((rdx + 0x180)) <= 0xd) {
        eax = *((rdx + 0x180));
        rdx = reloc__rodata;
        rax = *((rdx + rax*4));
        rax += rdx;
        /* switch table (14 cases) at 0x800e9cc */
        void (*rax)() ();
        rax = (int64_t) edi;
        r12d += 2;
        rax *= 3;
        rax <<= 2;
        ecx = *((rsi + rax - 8));
        rdx = rsi + rax;
        *((rdx + 4)) = ecx;
        rcx = rsi + rax + 0xc;
        eax = *((rsi + 4));
        *((rcx + 4)) = eax;
        eax = *(0x080927b3);
        *(rcx) = eax;
        *(rdx) = eax;
    }
label_0:
    eax = r12 + r12;
    rdi = clipcorners.12666;
    rdx = "filledcurve verticess";
    rax = (int64_t) eax;
    rsi = rax * 3;
    rsi <<= 2;
    rax = eval_link_function ();
    rdi = rbp;
    rcx = rsp + 4;
    edx = r12d;
    rsi = rax;
    *(obj.clipcorners.12666) = rax;
    eval_link_function ();
    rdi = rbx + 0x138;
    rbp = clipcorners.12666;
    eax = eval_link_function ();
    edi = *((rsp + 4));
    *((rbp + 8)) = eax;
    if (edi <= 0) {
        goto label_3;
    }
    rax = *(reloc.term);
    rsi = clipcorners.12666;
    uint64_t (*rax + 0xe8)() ();
    do {
label_3:
        rax = *((rsp + 8));
        rax ^= *(fs:0x28);
        if (edi != 0) {
            goto label_4;
        }
        return rax;
        rax = (int64_t) edi;
        xmm0 = *((rbx + 0x188));
        r12d += 2;
        r13 = rax * 3;
        r13 <<= 2;
        r14 = rsi + r13;
        eax = eval_link_function ();
        rdx = rbp + r13 + 0xc;
        esi = 0;
        *((r14 + 4)) = eax;
        *((rdx + 4)) = eax;
        eax = *((rbp + r13 - 0xc));
        *(r14) = eax;
        eax = *(rbp);
        *(rdx) = eax;
        if (*((rbx + 0x180)) == 0xd) {
            goto label_5;
        }
label_2:
        if (*((rbx + 0x138)) == 4) {
            goto label_6;
        }
label_1:
        eax = *((rbx + 0x198));
        if (eax <= 0) {
            goto label_7;
        }
    } while (rsi < 0);
    goto label_0;
    rax = (int64_t) edi;
    xmm0 = *((rbx + 0x188));
    r13 = rax * 3;
    r13 <<= 2;
    r14 = rsi + r13;
    eax = eval_link_function ();
    ecx = *((rbp + r13 - 0x14));
    rdx = rbp + r13 - 0xc;
    esi = 0;
    *(r14) = eax;
    *((rdx + 4)) = ecx;
    rcx = rbp;
    *(rdx) = eax;
    edx = *((rbp + 4));
    *((r14 + 4)) = edx;
    edx = r12 - 1;
    rdx *= 3;
    rdi = rbp + rdx*4 + 0xc;
    do {
        edx = *(rcx);
        rcx += 0xc;
        edx -= eax;
        rdx = (int64_t) edx;
        rsi += rdx;
    } while (rdi != rcx);
    r12d += 2;
    goto label_1;
    rax = (int64_t) edi;
    r12d += 2;
    rax *= 3;
    rax <<= 2;
    ecx = *((rsi + rax - 8));
    rdx = rsi + rax;
    *((rdx + 4)) = ecx;
    rcx = rsi + rax + 0xc;
    eax = *((rsi + 4));
    *((rcx + 4)) = eax;
    eax = *(0x080927b7);
    *(rcx) = eax;
    *(rdx) = eax;
    goto label_0;
    rax = (int64_t) edi;
    xmm0 = *((rbx + 0x188));
    r12d++;
    rax *= 3;
    r13 = rsi + rax*4;
    eax = eval_link_function ();
    xmm0 = *((rbx + 0x190));
    *(r13) = eax;
    eax = eval_link_function ();
    *((r13 + 4)) = eax;
    goto label_0;
    rax = (int64_t) edi;
    r12d += 2;
    rax *= 3;
    rax <<= 2;
    ecx = *((rsi + rax - 0xc));
    rdx = rsi + rax;
    *(rdx) = ecx;
    rcx = rsi + rax + 0xc;
    eax = *(rsi);
    *(rcx) = eax;
    eax = *(0x0809250f);
    *((rcx + 4)) = eax;
    *((rdx + 4)) = eax;
    goto label_0;
    rax = (int64_t) edi;
    r12d += 2;
    rax *= 3;
    rax <<= 2;
    ecx = *((rsi + rax - 0xc));
    rdx = rsi + rax;
    *(rdx) = ecx;
    rcx = rsi + rax + 0xc;
    eax = *(rsi);
    *(rcx) = eax;
    eax = *(reloc.boxwidth_is_absolute);
    *((rcx + 4)) = eax;
    *((rdx + 4)) = eax;
    goto label_0;
    esi = 0;
    goto label_2;
label_5:
    rax = (int64_t) r12d;
    esi = 0;
    rax *= 3;
    eax = *((rbp + rax*4));
    sil = (eax > 0) ? 1 : 0;
    rsi = rsi + rsi - 1;
    goto label_2;
    if (eax >= 0) {
label_7:
        goto label_0;
    }
    if (rsi > 0) {
        goto label_3;
    }
    goto label_0;
label_6:
    eax = 0;
    edx = *((rbp + 0x18));
    al = (edx >= *(rbp)) ? 1 : 0;
    eax = rax + rax - 1;
    if (r12d <= 3) {
        goto label_1;
    }
    ecx = *((rbp + 0x24));
    if (edx == ecx) {
        goto label_8;
    }
    if (r12d == 4) {
        goto label_1;
    }
    if (ecx != *((rbp + 0x30))) {
        goto label_1;
    }
    ecx -= eax;
    *((rbp + 0x24)) = ecx;
    *((rbp + 0x30)) = ecx;
    goto label_1;
label_8:
    edx -= eax;
    *((rbp + 0x18)) = edx;
    *((rbp + 0x24)) = edx;
    goto label_1;
label_4:
    rax = eval_link_function ();
    r14d = 0x90;
    *((rsp + 0x18)) = xmm0;
    eax = eval_link_function (rbx, rbp, r12, r13);
    xmm0 = 0;
    r13d = eax;
    eax = eval_link_function ();
    xmm0 = *(loc..LC4);
    xmm1 = *(loc..LC5);
    r12d = eax;
    rax = *(loc..LC6);
    *((rsp + 8)) = rax;
    while (r14d != 0) {
        rdi = rsp + 0x28;
        rsi = rsp + 0x20;
        r12d = ebp;
        r13d = ebx;
        xmm0 = *(loc..LC7);
        __asm ("mulsd xmm0, xmm2");
        eval_link_function ();
        xmm0 = *((rsp + 0x20));
        xmm1 = *((rsp + 0x28));
        xmm3 = *((rsp + 0x18));
        __asm ("mulsd xmm1, xmm3");
        __asm ("mulsd xmm0, xmm3");
        *((rsp + 0x10)) = xmm1;
        eax = eval_link_function ();
        xmm1 = *((rsp + 0x10));
        ebx = eax;
        __asm ("movapd xmm0, xmm1");
        eax = eval_link_function ();
        edx = ebx;
        esi = r12d;
        edi = r13d;
        ecx = eax;
        eval_link_function ();
        xmm2 = *(loc..LC6);
        __asm ("addsd xmm2, qword [rsp + 8]");
        *((rsp + 8)) = xmm2;
        r14d--;
    }
    return rax;
}
   p p pd pd pdg pdg pdg  pdg  pdg @ pdg @ pdg @  pdg @  pdg @ s pdg @ s pdg @ sy pdg @ sy pdg @ sym pdg @ sym pdg @ sym. pdg @ sym. pdg @ sym.p pdg @ sym.p pdg @ sym.pl pdg @ sym.pl pdg @ sym.pla pdg @ sym.pla pdg @ sym.plac pdg @ sym.plac pdg @ sym.place pdg @ sym.place pdg @ sym.place_ pdg @ sym.place_ pdg @ sym.place_s pdg @ sym.place_s pdg @ sym.place_sp pdg @ sym.place_sp pdg @ sym.place_spi pdg @ sym.place_spi pdg @ sym.place_spid pdg @ sym.place_spid pdg @ sym.place_spide pdg @ sym.place_spide pdg @ sym.place_spider pdg @ sym.place_spider pdg @ sym.place_spiderp pdg @ sym.place_spiderp pdg @ sym.place_spiderpl pdg @ sym.place_spiderpl pdg @ sym.place_spiderplo pdg @ sym.place_spiderplo pdg @ sym.place_spiderplot pdg @ sym.place_spiderplot pdg @ sym.place_spiderplot_ pdg @ sym.place_spiderplot_ pdg @ sym.place_spiderplot_a pdg @ sym.place_spiderplot_a pdg @ sym.place_spiderplot_ax pdg @ sym.place_spiderplot_ax pdg @ sym.place_spiderplot_axe pdg @ sym.place_spiderplot_axe pdg @ sym.place_spiderplot_axes pdg @ sym.place_spiderplot_axes pdg @ sym.place_spiderplot_axes. pdg @ sym.place_spiderplot_axes. pdg @ sym.place_spiderplot_axes.p pdg @ sym.place_spiderplot_axes.p pdg @ sym.place_spiderplot_axes.pa pdg @ sym.place_spiderplot_axes.pa pdg @ sym.place_spiderplot_axes.par pdg @ sym.place_spiderplot_axes.par pdg @ sym.place_spiderplot_axes.part pdg @ sym.place_spiderplot_axes.part pdg @ sym.place_spiderplot_axes.part. pdg @ sym.place_spiderplot_axes.part. pdg @ sym.place_spiderplot_axes.part.0 pdg @ sym.place_spiderplot_axes.part.0
uint64_t sym.place_labels(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4)
{
    int32_t *piVar1;
    bool bVar2;
    undefined8 uVar3;
    uint32_t uVar4;
    undefined4 uVar5;
    undefined4 uVar6;
    undefined4 uVar7;
    undefined4 uVar8;
    uint64_t uVar9;
    int32_t *piVar10;
    int64_t iVar11;
    int32_t iVar12;
    double *arg2_00;
    int64_t **arg1_00;
    code *pcVar13;
    undefined8 in_R8;
    undefined8 in_R9;
    bool bVar14;
    int32_t iVar15;
    uint64_t unaff_R12;
    int64_t iVar16;
    uint32_t uVar17;
    int64_t in_FS_OFFSET;
    double dVar18;
    double dVar19;
    double dVar20;
    double dStack80;
    double dStack72;
    int64_t iStack64;
    
    iVar12 = (int32_t)arg2;
    iStack64 = *(int64_t *)(in_FS_OFFSET + 0x28);
    arg1_00 = (int64_t **)arg1;
    (**(code **)(_reloc.term + 0xa0))(_reloc.pointsize);
    uVar17 = (uint32_t)arg2;
    bVar14 = iVar12 == 99 && arg1 != 0;
    _bVar14 = unaff_R12 & 0xffffffffffffff00 | (uint64_t)bVar14;
    if (iVar12 == 99 && arg1 != 0) {
        if ((*(char *)(arg1 + 0xf9) != '\0') && (*(code **)(_reloc.term + 0x128) != (code *)0x0)) {
            arg2 = *(uint64_t *)(arg1 + 0x50);
            arg1_00 = (int64_t **)0x2;
            (**(code **)(_reloc.term + 0x128))();
        }
    } else {
        if (arg1 == 0) goto code_r0x08001ef5;
    }
    do {
        if (*(int32_t *)(arg1 + 0x40) == iVar12) {
            if (bVar14) {
                uVar17 = func_0x080921db(*(int64_t *)(arg1 + 0x20));
                uVar4 = func_0x080921db(*(int64_t *)(arg1 + 0x28));
                arg2 = ZEXT48(uVar4);
            } else {
                arg2_00 = &dStack80;
                arg1_00 = (int64_t **)(arg1 + 0x10);
                dStack80 = 0.00000000;
                dStack72 = 0.00000000;
                sym.map_position_double.isra.0((int64_t)arg1_00, (int64_t)arg2_00, (int64_t)&dStack72, arg4);
                uVar17 = (uint32_t)dStack80;
                arg2 = (uint64_t)arg2_00 & 0xffffffff00000000 | (uint64_t)(uint32_t)(int32_t)dStack72;
            }
            if (((int32_t)arg2 != -0x80000000) && (uVar17 != 0x80000000)) {
                if ((char)arg3 != '\0') {
                    if (*(int32_t *)(arg1 + 0x10) == 0) {
                        dVar18 = *(double *)(arg1 + 0x20);
                        dVar20 = *(double *)0x809274b;
                        dVar19 = *(double *)0x8092753;
                        if (*(double *)0x8092753 <= *(double *)0x809274b) {
code_r0x08001f48:
                            if (dVar18 < dVar19) goto code_r0x08001ee9;
                            bVar2 = dVar20 < dVar18;
                        } else {
code_r0x08001e92:
                            if (dVar18 < dVar20) goto code_r0x08001ee9;
                            bVar2 = dVar19 < dVar18;
                        }
                        if (bVar2) goto code_r0x08001ee9;
                    } else {
                        if (*(int32_t *)(arg1 + 0x10) == 1) {
                            dVar18 = *(double *)(arg1 + 0x20);
                            dVar20 = *(double *)0x80931eb;
                            dVar19 = *(double *)0x80931f3;
                            if (*(double *)0x80931f3 <= *(double *)0x80931eb) goto code_r0x08001f48;
                            goto code_r0x08001e92;
                        }
                    }
                    if (*(int32_t *)(arg1 + 0x14) == 0) {
                        dVar18 = *(double *)(arg1 + 0x28);
                        dVar20 = _reloc.load_linetype;
                        dVar19 = _reloc.cb2gray;
                        if (_reloc.cb2gray <= _reloc.load_linetype) {
code_r0x08001fa8:
                            if (dVar18 < dVar19) goto code_r0x08001ee9;
                            bVar2 = dVar20 < dVar18;
                        } else {
code_r0x08001ecd:
                            if (dVar18 < dVar20) goto code_r0x08001ee9;
                            bVar2 = dVar19 < dVar18;
                        }
                        if (bVar2) goto code_r0x08001ee9;
                    } else {
                        if (*(int32_t *)(arg1 + 0x14) == 1) {
                            dVar18 = *(double *)(arg1 + 0x28);
                            dVar20 = *(double *)0x8092f43;
                            dVar19 = *(double *)0x8092f4b;
                            if (*(double *)0x8092f4b <= *(double *)0x8092f43) goto code_r0x08001fa8;
                            goto code_r0x08001ecd;
                        }
                    }
                }
                arg1_00 = (int64_t **)(uint64_t)uVar17;
                func_0x080921db(arg1_00, arg2, arg1);
            }
        }
code_r0x08001ee9:
        uVar17 = (uint32_t)arg2;
        arg1 = *(int64_t *)arg1;
    } while (arg1 != 0);
code_r0x08001ef5:
    if (iStack64 == *(int64_t *)(in_FS_OFFSET + 0x28)) {
        return 0;
    }
    uVar9 = func_0x080921db();
    if (arg1_00 != (int64_t **)0x0) {
        iVar12 = 0;
        do {
            if ((*(int32_t *)(arg1_00 + 2) == 0x94a) && (*(int32_t *)(arg1_00 + 0x39) != 0)) {
                iVar12 = *(int32_t *)((int64_t)arg1_00 + 0x1dc);
                if (_reloc.num_parallel_axes < iVar12) {
                    iVar16 = 0xffffffff;
                    func_0x080921db(0xffffffff, "");
                    uVar3 = _reloc..LC23;
                    uVar17 = *(uint32_t *)(iVar16 + 0x1c8);
                    piVar1 = *(int32_t **)(iVar16 + 0x1e8);
                    if (0 < (int32_t)uVar17) {
                        piVar10 = piVar1;
                        do {
                            if (*piVar10 == 2) {
                                *(undefined8 *)(piVar10 + 6) = uVar3;
                                *(undefined8 *)(piVar10 + 4) = uVar3;
                            }
                            piVar10 = piVar10 + 0x10;
                        } while (piVar10 != piVar1 + (uint64_t)(uVar17 - 1) * 0x10 + 0x10);
                    }
                    if (1 < *(int32_t *)(iVar16 + 0x1c0)) {
                        obj.boxplot_factor_sort_required = (code)0x1;
                    }
                    iVar11 = (int64_t)(int32_t)uVar17 * 0x40;
                    func_0x080921db(piVar1, (int64_t)(int32_t)uVar17, 0x40, sym.compare_ypoints, in_R8, in_R9, arg1_00, 
                                    iVar12, _bVar14);
                    if (*(int32_t *)(*(int64_t *)(iVar16 + 0x1e8) + -0x40 + iVar11) == 2) {
                        iVar16 = *(int64_t *)(iVar16 + 0x1e8) + iVar11;
                        do {
                            uVar17 = uVar17 - 1;
                            piVar1 = (int32_t *)(iVar16 + -0x80);
                            iVar16 = iVar16 + -0x40;
                        } while (*piVar1 == 2);
                    }
                    return (uint64_t)uVar17;
                }
                _bVar14 = _reloc.parallel_axis_array + -0x2a8 + (int64_t)iVar12 * 0x2a8;
                uVar9 = func_0x080921db(_bVar14, 0x14);
                if (arg1_00[3] != (int64_t *)0x0) {
                    func_0x080921db(*(undefined8 *)(_bVar14 + 0x1d8));
                    uVar9 = func_0x080921db(arg1_00[3]);
                    *(uint64_t *)(_bVar14 + 0x1d8) = uVar9;
                }
            }
            iVar16 = _reloc.parallel_axis_array;
            arg1_00 = (int64_t **)*arg1_00;
        } while (arg1_00 != (int64_t **)0x0);
        if ((iVar12 != 0) && (_reloc.parallel_axis_array != 0)) {
            if (reloc.grid_spiderweb == (code)0x0) {
                if ((_reloc.strdup == 1) && ((uVar17 & 1) == 0)) {
                    return uVar9;
                }
            } else {
                if (uVar17 == 0) {
                    *(undefined *)(_reloc.parallel_axis_array + 0x140) = 1;
                    func_0x080921db(reloc.grid_lp);
                    *(int32_t *)(iVar16 + 0x88) = iVar12;
                    *(undefined *)(iVar16 + 0x130) = 0;
                    uVar9 = func_0x080921db(iVar16, sym.spidertick_callback);
                    bVar14 = _reloc.strdup == 1;
                    *(undefined *)(iVar16 + 0x140) = 0;
                    if (bVar14) {
                        return uVar9;
                    }
                }
            }
            if (0 < iVar12) {
                iVar16 = 0;
                iVar15 = 0;
                do {
                    iVar11 = _reloc.parallel_axis_array + iVar16;
                    dVar18 = ((double)iVar15 * _reloc..LC20) / (double)iVar12;
                    dVar20 = _reloc..LC21 - dVar18;
                    pcVar13 = *(code **)(iVar11 + 0x298);
                    if (pcVar13 == (code *)0x0) {
                        pcVar13 = reloc.parallel_axis_style;
                    }
                    func_0x080921db(dVar18, pcVar13);
                    func_0x080921db(dVar20, 0, obj.spoke_x0, obj.spoke_y0, 0);
                    func_0x080921db(dVar20, _reloc..LC9, obj.spoke_x1, obj.spoke_y1, 0);
                    uVar5 = func_0x080921db(_obj.spoke_y1);
                    uVar6 = func_0x080921db(_obj.spoke_x1);
                    uVar7 = func_0x080921db(_obj.spoke_y0);
                    uVar8 = func_0x080921db(_obj.spoke_x0);
                    func_0x080921db(uVar8, uVar7, uVar6, uVar5);
                    uVar9 = (uint64_t)*(uint32_t *)(iVar11 + 0xb8);
                    if (*(uint32_t *)(iVar11 + 0xb8) != 0) {
                        _obj.spoke_dx = (_obj.spoke_y0 - _obj.spoke_y1) * _reloc..LC13;
                        _obj.spoke_dy = (_obj.spoke_x1 - _obj.spoke_x0) * _reloc..LC13;
                        func_0x080921db(_obj.spoke_dy, reloc.border_lp);
                        *(undefined *)(iVar11 + 0x130) = 0;
                        uVar9 = func_0x080921db(iVar11, sym.spidertick_callback);
                    }
                    dVar18 = _reloc..LC9;
                    if (*(int64_t *)(iVar11 + 0x1d8) != 0) {
                        dVar20 = *(double *)(iVar11 + 0x270);
                        *(undefined8 *)(iVar11 + 0x270) = 0;
                        dVar18 = _reloc..LC22 * (dVar18 + dVar20);
                        uVar5 = func_0x080921db((_obj.spoke_y1 - _obj.spoke_y0) * dVar18 + _obj.spoke_y1, dVar18);
                        uVar6 = func_0x080921db((_obj.spoke_x1 - _obj.spoke_x0) * dVar18 + _obj.spoke_x1, dVar18);
                        uVar9 = func_0x080921db(uVar6, uVar5, iVar11 + 400);
                        *(double *)(iVar11 + 0x270) = dVar20;
                    }
                    iVar15 = iVar15 + 2;
                    iVar16 = iVar16 + 0x2a8;
                } while (iVar12 * 2 != iVar15);
            }
        }
        return uVar9;
    }
    return uVar9;
}
   p p pd pd pdd pdd pdd  pdd  pdd @ pdd @ pdd @  pdd @  pdd @ s pdd @ s pdd @ sy pdd @ sy pdd @ sym pdd @ sym pdd @ sym. pdd @ sym. pdd @ sym.p pdd @ sym.p pdd @ sym.pl pdd @ sym.pl pdd @ sym.pla pdd @ sym.pla pdd @ sym.plac pdd @ sym.plac pdd @ sym.place pdd @ sym.place pdd @ sym.place_ pdd @ sym.place_ pdd @ sym.place_s pdd @ sym.place_s pdd @ sym.place_sp pdd @ sym.place_sp pdd @ sym.place_spi pdd @ sym.place_spi pdd @ sym.place_spid pdd @ sym.place_spid pdd @ sym.place_spide pdd @ sym.place_spide pdd @ sym.place_spider pdd @ sym.place_spider pdd @ sym.place_spiderp pdd @ sym.place_spiderp pdd @ sym.place_spiderpl pdd @ sym.place_spiderpl pdd @ sym.place_spiderplo pdd @ sym.place_spiderplo pdd @ sym.place_spiderplot pdd @ sym.place_spiderplot pdd @ sym.place_spiderplot_ pdd @ sym.place_spiderplot_ pdd @ sym.place_spiderplot_a pdd @ sym.place_spiderplot_a pdd @ sym.place_spiderplot_ax pdd @ sym.place_spiderplot_ax pdd @ sym.place_spiderplot_axe pdd @ sym.place_spiderplot_axe pdd @ sym.place_spiderplot_axes pdd @ sym.place_spiderplot_axes pdd @ sym.place_spiderplot_axes. pdd @ sym.place_spiderplot_axes. pdd @ sym.place_spiderplot_axes.p pdd @ sym.place_spiderplot_axes.p pdd @ sym.place_spiderplot_axes.pa pdd @ sym.place_spiderplot_axes.pa pdd @ sym.place_spiderplot_axes.par pdd @ sym.place_spiderplot_axes.par pdd @ sym.place_spiderplot_axes.part pdd @ sym.place_spiderplot_axes.part pdd @ sym.place_spiderplot_axes.part. pdd @ sym.place_spiderplot_axes.part. pdd @ sym.place_spiderplot_axes.part.0 pdd @ sym.place_spiderplot_axes.part.0/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/graphics.o @ 0x8002000 */
#include <stdint.h>
 
int64_t place_labels (int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4) {
    rdi = arg1;
    rsi = arg2;
    rdx = arg3;
    rcx = arg4;
    r13d = edx;
    rbx = rdi;
    xmm0 = *(reloc.pointsize);
    rax = *(fs:0x28);
    *((rsp + 0x18)) = rax;
    eax = 0;
    rax = *(reloc.term);
    uint64_t (*rax + 0xa0)(void, void, void, void, void) (rbx, rbp, r12, r13, r14);
    r12b = (ebp == 0x63) ? 1 : 0;
    al = (rbx != 0) ? 1 : 0;
    r12b &= al;
    if (r12b == 0) {
        goto label_14;
    }
    if (*((rbx + 0xf9)) != 0) {
        goto label_15;
    }
label_8:
    r14 = rsp + 0x10;
    do {
        if (*((rbx + 0x40)) == ebp) {
            if (r12b != 0) {
                goto label_16;
            }
            rsi = rsp + 8;
            rdi = rbx + 0x10;
            rdx = r14;
            *((rsp + 8)) = 0;
            *((rsp + 0x10)) = 0;
            map_position_double_isra_0 ();
            __asm ("cvttsd2si r15d, qword [rsp + 8]");
            __asm ("cvttsd2si esi, qword [rsp + 0x10]");
label_4:
            if (esi == 0x80000000) {
                goto label_2;
            }
            if (r15d == 0x80000000) {
                goto label_2;
            }
            if (r13b != 0) {
                eax = *((rbx + 0x10));
                if (eax != 0) {
                    goto label_17;
                }
                xmm0 = *(0x0809274b);
                xmm1 = *(0x08092753);
                xmm2 = *((rbx + 0x20));
                __asm ("comisd xmm1, xmm0");
                if (eax <= 0) {
                    goto label_18;
                }
label_1:
                __asm ("comisd xmm2, xmm0");
                if (eax < 0) {
                    goto label_2;
                }
                __asm ("comisd xmm1, xmm2");
                al = (eax < 0) ? 1 : 0;
label_3:
                if (al != 0) {
                    goto label_2;
                }
label_0:
                eax = *((rbx + 0x14));
                if (eax != 0) {
                    goto label_19;
                }
                xmm0 = *(reloc.load_linetype);
                xmm1 = *(reloc.cb2gray);
                xmm2 = *((rbx + 0x28));
                __asm ("comisd xmm1, xmm0");
                if (eax <= 0) {
                    goto label_20;
                }
label_6:
                __asm ("comisd xmm2, xmm0");
                if (eax < 0) {
                    goto label_2;
                }
                __asm ("comisd xmm1, xmm2");
                al = (eax < 0) ? 1 : 0;
label_7:
                if (al != 0) {
                    goto label_2;
                }
            }
label_5:
            rdx = rbx;
            edi = r15d;
            eval_link_function ();
        }
label_2:
        rbx = *(rbx);
    } while (rbx != 0);
label_9:
    rax = *((rsp + 0x18));
    rax ^= *(fs:0x28);
    if (rbx != 0) {
        goto label_21;
    }
    return rax;
label_17:
    if (eax != 1) {
        goto label_0;
    }
    xmm0 = *(0x080931eb);
    xmm1 = *(0x080931f3);
    xmm2 = *((rbx + 0x20));
    __asm ("comisd xmm1, xmm0");
    if (eax > 1) {
        goto label_1;
    }
label_18:
    __asm ("comisd xmm2, xmm1");
    if (eax < 1) {
        goto label_2;
    }
    __asm ("comisd xmm0, xmm2");
    al = (eax < 1) ? 1 : 0;
    goto label_3;
label_16:
    xmm0 = *((rbx + 0x20));
    eax = eval_link_function ();
    xmm0 = *((rbx + 0x28));
    r15d = eax;
    eax = eval_link_function ();
    esi = eax;
    goto label_4;
label_19:
    if (eax != 1) {
        goto label_5;
    }
    xmm0 = *(0x08092f43);
    xmm1 = *(0x08092f4b);
    xmm2 = *((rbx + 0x28));
    __asm ("comisd xmm1, xmm0");
    if (eax > 1) {
        goto label_6;
    }
label_20:
    __asm ("comisd xmm2, xmm1");
    if (eax < 1) {
        goto label_2;
    }
    __asm ("comisd xmm0, xmm2");
    al = (eax < 1) ? 1 : 0;
    goto label_7;
label_14:
    if (rbx != 0) {
        goto label_8;
    }
    goto label_9;
label_15:
    rax = *(reloc.term);
    rax = *((rax + 0x128));
    if (rax == 0) {
        goto label_8;
    }
    rsi = *((rbx + 0x50));
    edi = 2;
    void (*rax)() ();
    goto label_8;
label_21:
    rax = eval_link_function ();
    if (rdi == 0) {
        goto label_22;
    }
    r13d = esi;
    ebp = 0;
    rbx = rdi;
    do {
        if (*((rbx + 0x10)) == 0x94a) {
            edx = *((rbx + 0x1c8));
            if (edx == 0) {
                goto label_23;
            }
            ebp = *((rbx + 0x1dc));
            if (ebp > *(reloc.num_parallel_axes)) {
                goto label_24;
            }
            rax = (int64_t) ebp;
            rdx = *(reloc.parallel_axis_array);
            esi = 0x14;
            rax *= 0x2a8;
            r12 = rdx + rax - 0x2a8;
            rdi = r12;
            eval_link_function ();
            if (*((rbx + 0x18)) == 0) {
                goto label_23;
            }
            rdi = *((r12 + 0x1d8));
            eval_link_function ();
            rdi = *((rbx + 0x18));
            rax = eval_link_function ();
            *((r12 + 0x1d8)) = rax;
        }
label_23:
        rbx = *(rbx);
    } while (rbx != 0);
    if (ebp == 0) {
        goto label_12;
    }
    rbx = *(reloc.parallel_axis_array);
    if (rbx == 0) {
        goto label_12;
    }
    if (*(reloc.grid_spiderweb) == 0) {
        goto label_25;
    }
    if (r13d == 0) {
        goto label_26;
    }
label_11:
    if (ebp <= 0) {
        goto label_12;
    }
    xmm6 = 0;
    eax = rbp + rbp;
    r13d = 0;
    r12d = 0;
    __asm ("cvtsi2sd xmm6, ebp");
    *((rsp + 0xc)) = eax;
    *((rsp + 0x10)) = xmm6;
    while (eax == 0) {
label_10:
        if (*((rbx + 0x1d8)) != 0) {
            xmm2 = *((rbx + 0x270));
            xmm0 = *(loc..LC9);
            *((rbx + 0x270)) = 0;
            xmm1 = *(loc..LC22);
            xmm3 = spoke_y1;
            __asm ("addsd xmm0, xmm2");
            *((rsp + 0x18)) = xmm2;
            __asm ("mulsd xmm1, xmm0");
            __asm ("movapd xmm0, xmm3");
            __asm ("subsd xmm0, qword [obj.spoke_y0]");
            __asm ("mulsd xmm0, xmm1");
            *(rsp) = xmm1;
            __asm ("addsd xmm0, xmm3");
            eax = eval_link_function ();
            xmm3 = spoke_x1;
            xmm1 = *(rsp);
            r14d = eax;
            __asm ("movapd xmm0, xmm3");
            __asm ("subsd xmm0, qword [obj.spoke_x0]");
            __asm ("mulsd xmm0, xmm1");
            __asm ("addsd xmm0, xmm3");
            eax = eval_link_function ();
            rdx = rbx + 0x190;
            esi = r14d;
            edi = eax;
            eval_link_function ();
            xmm2 = *((rsp + 0x18));
            *((rbx + 0x270)) = xmm2;
        }
        r12d += 2;
        r13 += 0x2a8;
        if (*((rsp + 0xc)) == r12d) {
            goto label_12;
        }
        xmm4 = *(loc..LC21);
        rbx = *(reloc.parallel_axis_array);
        xmm0 = 0;
        __asm ("cvtsi2sd xmm0, r12d");
        __asm ("mulsd xmm0, qword [loc..LC20]");
        rbx += r13;
        __asm ("divsd xmm0, qword [rsp + 0x10]");
        __asm ("subsd xmm4, xmm0");
        rdi = *((rbx + 0x298));
        *(rsp) = xmm4;
        if (rdi == 0) {
            goto label_27;
        }
label_13:
        eval_link_function ();
        xmm0 = *(rsp);
        edx = 0;
        xmm1 = 0;
        rsi = obj_spoke_y0;
        rdi = obj_spoke_x0;
        *(rsp) = xmm0;
        eval_link_function ();
        rax = *(loc..LC9);
        edx = 0;
        xmm0 = *(rsp);
        rsi = obj_spoke_y1;
        rdi = obj_spoke_x1;
        xmm1 = rax;
        eval_link_function ();
        xmm0 = spoke_y1;
        eax = eval_link_function ();
        xmm0 = spoke_x1;
        eax = eval_link_function ();
        xmm0 = spoke_y0;
        r15d = eax;
        eax = eval_link_function ();
        xmm0 = spoke_x0;
        r14d = eax;
        eax = eval_link_function ();
        ecx = ebp;
        edx = r15d;
        esi = r14d;
        edi = eax;
        eval_link_function ();
        eax = *((rbx + 0xb8));
    }
    xmm0 = spoke_y0;
    __asm ("subsd xmm0, qword [obj.spoke_y1]");
    rdi = reloc_border_lp;
    __asm ("mulsd xmm0, qword [loc..LC13]");
    *(obj.spoke_dx) = xmm0;
    xmm0 = spoke_x1;
    __asm ("subsd xmm0, qword [obj.spoke_x0]");
    __asm ("mulsd xmm0, qword [loc..LC13]");
    *(obj.spoke_dy) = xmm0;
    eval_link_function ();
    *((rbx + 0x130)) = 0;
    rsi = sym_spidertick_callback;
    rdi = rbx;
    eval_link_function ();
    goto label_10;
label_26:
    *((rbx + 0x140)) = 1;
    rdi = reloc_grid_lp;
    eval_link_function ();
    *((rbx + 0x88)) = ebp;
    rsi = sym_spidertick_callback;
    rdi = rbx;
    *((rbx + 0x130)) = 0;
    eax = eval_link_function ();
    *((rbx + 0x140)) = 0;
    if (*(reloc.strdup) != 1) {
        goto label_11;
    }
label_12:
    return rax;
label_25:
    if (*(reloc.strdup) != 1) {
        goto label_11;
    }
    r13d &= 1;
    if (r13d != 0) {
        goto label_11;
    }
    goto label_12;
label_27:
    rdi = reloc_parallel_axis_style;
    goto label_13;
label_22:
    return rax;
label_24:
    rsi = "attempt to draw undefined radial axis";
    edi = 0xffffffff;
    eax = 0;
    eval_link_function ();
    __asm ("endbr64");
    r12d = *((rdi + 0x1c8));
    rdi = *((rdi + 0x1e8));
    if (r12d <= 0) {
        goto label_28;
    }
    edx = r12 - 1;
    xmm0 = *(loc..LC23);
    rax = rdi;
    rdx <<= 6;
    rdx = rdi + rdx + 0x40;
    do {
        if (*(rax) == 2) {
            *((rax + 0x18)) = xmm0;
            *((rax + 0x10)) = xmm0;
        }
        rax += 0x40;
    } while (rax != rdx);
label_28:
    if (*((rbp + 0x1c0)) > 1) {
        *(obj.boxplot_factor_sort_required) = 1;
    }
    rbx = (int64_t) r12d;
    edx = 0x40;
    rcx = sym_compare_ypoints;
    rsi = rbx;
    rbx <<= 6;
    eval_link_function ();
    rdx = *((rbp + 0x1e8));
    if (*((rdx + rbx - 0x40)) != 2) {
        goto label_29;
    }
    rax = rdx + rbx;
    do {
        rax -= 0x40;
        r12d--;
    } while (*((rax - 0x40)) == 2);
label_29:
    eax = r12d;
    return rax;
}
   p p pd pd pdg pdg pdg  pdg  pdg @ pdg @ pdg @  pdg @  pdg @ s pdg @ s pdg @ sy pdg @ sy pdg @ sym pdg @ sym pdg @ sym. pdg @ sym. pdg @ sym.p pdg @ sym.p pdg @ sym.pl pdg @ sym.pl pdg @ sym.pla pdg @ sym.pla pdg @ sym.plac pdg @ sym.plac pdg @ sym.place pdg @ sym.place pdg @ sym.place_ pdg @ sym.place_ pdg @ sym.place_l pdg @ sym.place_l pdg @ sym.place_la pdg @ sym.place_la pdg @ sym.place_lab pdg @ sym.place_lab pdg @ sym.place_labe pdg @ sym.place_labe pdg @ sym.place_label pdg @ sym.place_label pdg @ sym.place_labels pdg @ sym.place_labels
uint64_t sym.place_labels(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4)
{
    int32_t *piVar1;
    bool bVar2;
    undefined8 uVar3;
    uint32_t uVar4;
    undefined4 uVar5;
    undefined4 uVar6;
    undefined4 uVar7;
    undefined4 uVar8;
    uint64_t uVar9;
    int32_t *piVar10;
    int64_t iVar11;
    int32_t iVar12;
    double *arg2_00;
    int64_t **arg1_00;
    code *pcVar13;
    undefined8 in_R8;
    undefined8 in_R9;
    bool bVar14;
    int32_t iVar15;
    uint64_t unaff_R12;
    int64_t iVar16;
    uint32_t uVar17;
    int64_t in_FS_OFFSET;
    double dVar18;
    double dVar19;
    double dVar20;
    double dStack80;
    double dStack72;
    int64_t iStack64;
    
    iVar12 = (int32_t)arg2;
    iStack64 = *(int64_t *)(in_FS_OFFSET + 0x28);
    arg1_00 = (int64_t **)arg1;
    (**(code **)(_reloc.term + 0xa0))(_reloc.pointsize);
    uVar17 = (uint32_t)arg2;
    bVar14 = iVar12 == 99 && arg1 != 0;
    _bVar14 = unaff_R12 & 0xffffffffffffff00 | (uint64_t)bVar14;
    if (iVar12 == 99 && arg1 != 0) {
        if ((*(char *)(arg1 + 0xf9) != '\0') && (*(code **)(_reloc.term + 0x128) != (code *)0x0)) {
            arg2 = *(uint64_t *)(arg1 + 0x50);
            arg1_00 = (int64_t **)0x2;
            (**(code **)(_reloc.term + 0x128))();
        }
    } else {
        if (arg1 == 0) goto code_r0x08001ef5;
    }
    do {
        if (*(int32_t *)(arg1 + 0x40) == iVar12) {
            if (bVar14) {
                uVar17 = func_0x080921db(*(int64_t *)(arg1 + 0x20));
                uVar4 = func_0x080921db(*(int64_t *)(arg1 + 0x28));
                arg2 = ZEXT48(uVar4);
            } else {
                arg2_00 = &dStack80;
                arg1_00 = (int64_t **)(arg1 + 0x10);
                dStack80 = 0.00000000;
                dStack72 = 0.00000000;
                sym.map_position_double.isra.0((int64_t)arg1_00, (int64_t)arg2_00, (int64_t)&dStack72, arg4);
                uVar17 = (uint32_t)dStack80;
                arg2 = (uint64_t)arg2_00 & 0xffffffff00000000 | (uint64_t)(uint32_t)(int32_t)dStack72;
            }
            if (((int32_t)arg2 != -0x80000000) && (uVar17 != 0x80000000)) {
                if ((char)arg3 != '\0') {
                    if (*(int32_t *)(arg1 + 0x10) == 0) {
                        dVar18 = *(double *)(arg1 + 0x20);
                        dVar20 = *(double *)0x809274b;
                        dVar19 = *(double *)0x8092753;
                        if (*(double *)0x8092753 <= *(double *)0x809274b) {
code_r0x08001f48:
                            if (dVar18 < dVar19) goto code_r0x08001ee9;
                            bVar2 = dVar20 < dVar18;
                        } else {
code_r0x08001e92:
                            if (dVar18 < dVar20) goto code_r0x08001ee9;
                            bVar2 = dVar19 < dVar18;
                        }
                        if (bVar2) goto code_r0x08001ee9;
                    } else {
                        if (*(int32_t *)(arg1 + 0x10) == 1) {
                            dVar18 = *(double *)(arg1 + 0x20);
                            dVar20 = *(double *)0x80931eb;
                            dVar19 = *(double *)0x80931f3;
                            if (*(double *)0x80931f3 <= *(double *)0x80931eb) goto code_r0x08001f48;
                            goto code_r0x08001e92;
                        }
                    }
                    if (*(int32_t *)(arg1 + 0x14) == 0) {
                        dVar18 = *(double *)(arg1 + 0x28);
                        dVar20 = _reloc.load_linetype;
                        dVar19 = _reloc.cb2gray;
                        if (_reloc.cb2gray <= _reloc.load_linetype) {
code_r0x08001fa8:
                            if (dVar18 < dVar19) goto code_r0x08001ee9;
                            bVar2 = dVar20 < dVar18;
                        } else {
code_r0x08001ecd:
                            if (dVar18 < dVar20) goto code_r0x08001ee9;
                            bVar2 = dVar19 < dVar18;
                        }
                        if (bVar2) goto code_r0x08001ee9;
                    } else {
                        if (*(int32_t *)(arg1 + 0x14) == 1) {
                            dVar18 = *(double *)(arg1 + 0x28);
                            dVar20 = *(double *)0x8092f43;
                            dVar19 = *(double *)0x8092f4b;
                            if (*(double *)0x8092f4b <= *(double *)0x8092f43) goto code_r0x08001fa8;
                            goto code_r0x08001ecd;
                        }
                    }
                }
                arg1_00 = (int64_t **)(uint64_t)uVar17;
                func_0x080921db(arg1_00, arg2, arg1);
            }
        }
code_r0x08001ee9:
        uVar17 = (uint32_t)arg2;
        arg1 = *(int64_t *)arg1;
    } while (arg1 != 0);
code_r0x08001ef5:
    if (iStack64 == *(int64_t *)(in_FS_OFFSET + 0x28)) {
        return 0;
    }
    uVar9 = func_0x080921db();
    if (arg1_00 != (int64_t **)0x0) {
        iVar12 = 0;
        do {
            if ((*(int32_t *)(arg1_00 + 2) == 0x94a) && (*(int32_t *)(arg1_00 + 0x39) != 0)) {
                iVar12 = *(int32_t *)((int64_t)arg1_00 + 0x1dc);
                if (_reloc.num_parallel_axes < iVar12) {
                    iVar16 = 0xffffffff;
                    func_0x080921db(0xffffffff, "");
                    uVar3 = _reloc..LC23;
                    uVar17 = *(uint32_t *)(iVar16 + 0x1c8);
                    piVar1 = *(int32_t **)(iVar16 + 0x1e8);
                    if (0 < (int32_t)uVar17) {
                        piVar10 = piVar1;
                        do {
                            if (*piVar10 == 2) {
                                *(undefined8 *)(piVar10 + 6) = uVar3;
                                *(undefined8 *)(piVar10 + 4) = uVar3;
                            }
                            piVar10 = piVar10 + 0x10;
                        } while (piVar10 != piVar1 + (uint64_t)(uVar17 - 1) * 0x10 + 0x10);
                    }
                    if (1 < *(int32_t *)(iVar16 + 0x1c0)) {
                        obj.boxplot_factor_sort_required = (code)0x1;
                    }
                    iVar11 = (int64_t)(int32_t)uVar17 * 0x40;
                    func_0x080921db(piVar1, (int64_t)(int32_t)uVar17, 0x40, sym.compare_ypoints, in_R8, in_R9, arg1_00, 
                                    iVar12, _bVar14);
                    if (*(int32_t *)(*(int64_t *)(iVar16 + 0x1e8) + -0x40 + iVar11) == 2) {
                        iVar16 = *(int64_t *)(iVar16 + 0x1e8) + iVar11;
                        do {
                            uVar17 = uVar17 - 1;
                            piVar1 = (int32_t *)(iVar16 + -0x80);
                            iVar16 = iVar16 + -0x40;
                        } while (*piVar1 == 2);
                    }
                    return (uint64_t)uVar17;
                }
                _bVar14 = _reloc.parallel_axis_array + -0x2a8 + (int64_t)iVar12 * 0x2a8;
                uVar9 = func_0x080921db(_bVar14, 0x14);
                if (arg1_00[3] != (int64_t *)0x0) {
                    func_0x080921db(*(undefined8 *)(_bVar14 + 0x1d8));
                    uVar9 = func_0x080921db(arg1_00[3]);
                    *(uint64_t *)(_bVar14 + 0x1d8) = uVar9;
                }
            }
            iVar16 = _reloc.parallel_axis_array;
            arg1_00 = (int64_t **)*arg1_00;
        } while (arg1_00 != (int64_t **)0x0);
        if ((iVar12 != 0) && (_reloc.parallel_axis_array != 0)) {
            if (reloc.grid_spiderweb == (code)0x0) {
                if ((_reloc.strdup == 1) && ((uVar17 & 1) == 0)) {
                    return uVar9;
                }
            } else {
                if (uVar17 == 0) {
                    *(undefined *)(_reloc.parallel_axis_array + 0x140) = 1;
                    func_0x080921db(reloc.grid_lp);
                    *(int32_t *)(iVar16 + 0x88) = iVar12;
                    *(undefined *)(iVar16 + 0x130) = 0;
                    uVar9 = func_0x080921db(iVar16, sym.spidertick_callback);
                    bVar14 = _reloc.strdup == 1;
                    *(undefined *)(iVar16 + 0x140) = 0;
                    if (bVar14) {
                        return uVar9;
                    }
                }
            }
            if (0 < iVar12) {
                iVar16 = 0;
                iVar15 = 0;
                do {
                    iVar11 = _reloc.parallel_axis_array + iVar16;
                    dVar18 = ((double)iVar15 * _reloc..LC20) / (double)iVar12;
                    dVar20 = _reloc..LC21 - dVar18;
                    pcVar13 = *(code **)(iVar11 + 0x298);
                    if (pcVar13 == (code *)0x0) {
                        pcVar13 = reloc.parallel_axis_style;
                    }
                    func_0x080921db(dVar18, pcVar13);
                    func_0x080921db(dVar20, 0, obj.spoke_x0, obj.spoke_y0, 0);
                    func_0x080921db(dVar20, _reloc..LC9, obj.spoke_x1, obj.spoke_y1, 0);
                    uVar5 = func_0x080921db(_obj.spoke_y1);
                    uVar6 = func_0x080921db(_obj.spoke_x1);
                    uVar7 = func_0x080921db(_obj.spoke_y0);
                    uVar8 = func_0x080921db(_obj.spoke_x0);
                    func_0x080921db(uVar8, uVar7, uVar6, uVar5);
                    uVar9 = (uint64_t)*(uint32_t *)(iVar11 + 0xb8);
                    if (*(uint32_t *)(iVar11 + 0xb8) != 0) {
                        _obj.spoke_dx = (_obj.spoke_y0 - _obj.spoke_y1) * _reloc..LC13;
                        _obj.spoke_dy = (_obj.spoke_x1 - _obj.spoke_x0) * _reloc..LC13;
                        func_0x080921db(_obj.spoke_dy, reloc.border_lp);
                        *(undefined *)(iVar11 + 0x130) = 0;
                        uVar9 = func_0x080921db(iVar11, sym.spidertick_callback);
                    }
                    dVar18 = _reloc..LC9;
                    if (*(int64_t *)(iVar11 + 0x1d8) != 0) {
                        dVar20 = *(double *)(iVar11 + 0x270);
                        *(undefined8 *)(iVar11 + 0x270) = 0;
                        dVar18 = _reloc..LC22 * (dVar18 + dVar20);
                        uVar5 = func_0x080921db((_obj.spoke_y1 - _obj.spoke_y0) * dVar18 + _obj.spoke_y1, dVar18);
                        uVar6 = func_0x080921db((_obj.spoke_x1 - _obj.spoke_x0) * dVar18 + _obj.spoke_x1, dVar18);
                        uVar9 = func_0x080921db(uVar6, uVar5, iVar11 + 400);
                        *(double *)(iVar11 + 0x270) = dVar20;
                    }
                    iVar15 = iVar15 + 2;
                    iVar16 = iVar16 + 0x2a8;
                } while (iVar12 * 2 != iVar15);
            }
        }
        return uVar9;
    }
    return uVar9;
}
   p p pd pd pdd pdd pdd  pdd  pdd @ pdd @ pdd @  pdd @  pdd @ s pdd @ s pdd @ sy pdd @ sy pdd @ sym pdd @ sym pdd @ sym. pdd @ sym. pdd @ sym.p pdd @ sym.p pdd @ sym.pl pdd @ sym.pl pdd @ sym.pla pdd @ sym.pla pdd @ sym.plac pdd @ sym.plac pdd @ sym.place pdd @ sym.place pdd @ sym.place_ pdd @ sym.place_ pdd @ sym.place_l pdd @ sym.place_l pdd @ sym.place_la pdd @ sym.place_la pdd @ sym.place_lab pdd @ sym.place_lab pdd @ sym.place_labe pdd @ sym.place_labe pdd @ sym.place_label pdd @ sym.place_label pdd @ sym.place_labels pdd @ sym.place_labels/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/graphics.o @ 0x8001da0 */
#include <stdint.h>
 
int64_t place_labels (int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4) {
    rdi = arg1;
    rsi = arg2;
    rdx = arg3;
    rcx = arg4;
    r13d = edx;
    rbx = rdi;
    xmm0 = *(reloc.pointsize);
    rax = *(fs:0x28);
    *((rsp + 0x18)) = rax;
    eax = 0;
    rax = *(reloc.term);
    uint64_t (*rax + 0xa0)(void, void, void, void, void) (rbx, rbp, r12, r13, r14);
    r12b = (ebp == 0x63) ? 1 : 0;
    al = (rbx != 0) ? 1 : 0;
    r12b &= al;
    if (r12b == 0) {
        goto label_14;
    }
    if (*((rbx + 0xf9)) != 0) {
        goto label_15;
    }
label_8:
    r14 = rsp + 0x10;
    do {
        if (*((rbx + 0x40)) == ebp) {
            if (r12b != 0) {
                goto label_16;
            }
            rsi = rsp + 8;
            rdi = rbx + 0x10;
            rdx = r14;
            *((rsp + 8)) = 0;
            *((rsp + 0x10)) = 0;
            map_position_double_isra_0 ();
            __asm ("cvttsd2si r15d, qword [rsp + 8]");
            __asm ("cvttsd2si esi, qword [rsp + 0x10]");
label_4:
            if (esi == 0x80000000) {
                goto label_2;
            }
            if (r15d == 0x80000000) {
                goto label_2;
            }
            if (r13b != 0) {
                eax = *((rbx + 0x10));
                if (eax != 0) {
                    goto label_17;
                }
                xmm0 = *(0x0809274b);
                xmm1 = *(0x08092753);
                xmm2 = *((rbx + 0x20));
                __asm ("comisd xmm1, xmm0");
                if (eax <= 0) {
                    goto label_18;
                }
label_1:
                __asm ("comisd xmm2, xmm0");
                if (eax < 0) {
                    goto label_2;
                }
                __asm ("comisd xmm1, xmm2");
                al = (eax < 0) ? 1 : 0;
label_3:
                if (al != 0) {
                    goto label_2;
                }
label_0:
                eax = *((rbx + 0x14));
                if (eax != 0) {
                    goto label_19;
                }
                xmm0 = *(reloc.load_linetype);
                xmm1 = *(reloc.cb2gray);
                xmm2 = *((rbx + 0x28));
                __asm ("comisd xmm1, xmm0");
                if (eax <= 0) {
                    goto label_20;
                }
label_6:
                __asm ("comisd xmm2, xmm0");
                if (eax < 0) {
                    goto label_2;
                }
                __asm ("comisd xmm1, xmm2");
                al = (eax < 0) ? 1 : 0;
label_7:
                if (al != 0) {
                    goto label_2;
                }
            }
label_5:
            rdx = rbx;
            edi = r15d;
            eval_link_function ();
        }
label_2:
        rbx = *(rbx);
    } while (rbx != 0);
label_9:
    rax = *((rsp + 0x18));
    rax ^= *(fs:0x28);
    if (rbx != 0) {
        goto label_21;
    }
    return rax;
label_17:
    if (eax != 1) {
        goto label_0;
    }
    xmm0 = *(0x080931eb);
    xmm1 = *(0x080931f3);
    xmm2 = *((rbx + 0x20));
    __asm ("comisd xmm1, xmm0");
    if (eax > 1) {
        goto label_1;
    }
label_18:
    __asm ("comisd xmm2, xmm1");
    if (eax < 1) {
        goto label_2;
    }
    __asm ("comisd xmm0, xmm2");
    al = (eax < 1) ? 1 : 0;
    goto label_3;
label_16:
    xmm0 = *((rbx + 0x20));
    eax = eval_link_function ();
    xmm0 = *((rbx + 0x28));
    r15d = eax;
    eax = eval_link_function ();
    esi = eax;
    goto label_4;
label_19:
    if (eax != 1) {
        goto label_5;
    }
    xmm0 = *(0x08092f43);
    xmm1 = *(0x08092f4b);
    xmm2 = *((rbx + 0x28));
    __asm ("comisd xmm1, xmm0");
    if (eax > 1) {
        goto label_6;
    }
label_20:
    __asm ("comisd xmm2, xmm1");
    if (eax < 1) {
        goto label_2;
    }
    __asm ("comisd xmm0, xmm2");
    al = (eax < 1) ? 1 : 0;
    goto label_7;
label_14:
    if (rbx != 0) {
        goto label_8;
    }
    goto label_9;
label_15:
    rax = *(reloc.term);
    rax = *((rax + 0x128));
    if (rax == 0) {
        goto label_8;
    }
    rsi = *((rbx + 0x50));
    edi = 2;
    void (*rax)() ();
    goto label_8;
label_21:
    rax = eval_link_function ();
    if (rdi == 0) {
        goto label_22;
    }
    r13d = esi;
    ebp = 0;
    rbx = rdi;
    do {
        if (*((rbx + 0x10)) == 0x94a) {
            edx = *((rbx + 0x1c8));
            if (edx == 0) {
                goto label_23;
            }
            ebp = *((rbx + 0x1dc));
            if (ebp > *(reloc.num_parallel_axes)) {
                goto label_24;
            }
            rax = (int64_t) ebp;
            rdx = *(reloc.parallel_axis_array);
            esi = 0x14;
            rax *= 0x2a8;
            r12 = rdx + rax - 0x2a8;
            rdi = r12;
            eval_link_function ();
            if (*((rbx + 0x18)) == 0) {
                goto label_23;
            }
            rdi = *((r12 + 0x1d8));
            eval_link_function ();
            rdi = *((rbx + 0x18));
            rax = eval_link_function ();
            *((r12 + 0x1d8)) = rax;
        }
label_23:
        rbx = *(rbx);
    } while (rbx != 0);
    if (ebp == 0) {
        goto label_12;
    }
    rbx = *(reloc.parallel_axis_array);
    if (rbx == 0) {
        goto label_12;
    }
    if (*(reloc.grid_spiderweb) == 0) {
        goto label_25;
    }
    if (r13d == 0) {
        goto label_26;
    }
label_11:
    if (ebp <= 0) {
        goto label_12;
    }
    xmm6 = 0;
    eax = rbp + rbp;
    r13d = 0;
    r12d = 0;
    __asm ("cvtsi2sd xmm6, ebp");
    *((rsp + 0xc)) = eax;
    *((rsp + 0x10)) = xmm6;
    while (eax == 0) {
label_10:
        if (*((rbx + 0x1d8)) != 0) {
            xmm2 = *((rbx + 0x270));
            xmm0 = *(loc..LC9);
            *((rbx + 0x270)) = 0;
            xmm1 = *(loc..LC22);
            xmm3 = spoke_y1;
            __asm ("addsd xmm0, xmm2");
            *((rsp + 0x18)) = xmm2;
            __asm ("mulsd xmm1, xmm0");
            __asm ("movapd xmm0, xmm3");
            __asm ("subsd xmm0, qword [obj.spoke_y0]");
            __asm ("mulsd xmm0, xmm1");
            *(rsp) = xmm1;
            __asm ("addsd xmm0, xmm3");
            eax = eval_link_function ();
            xmm3 = spoke_x1;
            xmm1 = *(rsp);
            r14d = eax;
            __asm ("movapd xmm0, xmm3");
            __asm ("subsd xmm0, qword [obj.spoke_x0]");
            __asm ("mulsd xmm0, xmm1");
            __asm ("addsd xmm0, xmm3");
            eax = eval_link_function ();
            rdx = rbx + 0x190;
            esi = r14d;
            edi = eax;
            eval_link_function ();
            xmm2 = *((rsp + 0x18));
            *((rbx + 0x270)) = xmm2;
        }
        r12d += 2;
        r13 += 0x2a8;
        if (*((rsp + 0xc)) == r12d) {
            goto label_12;
        }
        xmm4 = *(loc..LC21);
        rbx = *(reloc.parallel_axis_array);
        xmm0 = 0;
        __asm ("cvtsi2sd xmm0, r12d");
        __asm ("mulsd xmm0, qword [loc..LC20]");
        rbx += r13;
        __asm ("divsd xmm0, qword [rsp + 0x10]");
        __asm ("subsd xmm4, xmm0");
        rdi = *((rbx + 0x298));
        *(rsp) = xmm4;
        if (rdi == 0) {
            goto label_27;
        }
label_13:
        eval_link_function ();
        xmm0 = *(rsp);
        edx = 0;
        xmm1 = 0;
        rsi = obj_spoke_y0;
        rdi = obj_spoke_x0;
        *(rsp) = xmm0;
        eval_link_function ();
        rax = *(loc..LC9);
        edx = 0;
        xmm0 = *(rsp);
        rsi = obj_spoke_y1;
        rdi = obj_spoke_x1;
        xmm1 = rax;
        eval_link_function ();
        xmm0 = spoke_y1;
        eax = eval_link_function ();
        xmm0 = spoke_x1;
        eax = eval_link_function ();
        xmm0 = spoke_y0;
        r15d = eax;
        eax = eval_link_function ();
        xmm0 = spoke_x0;
        r14d = eax;
        eax = eval_link_function ();
        ecx = ebp;
        edx = r15d;
        esi = r14d;
        edi = eax;
        eval_link_function ();
        eax = *((rbx + 0xb8));
    }
    xmm0 = spoke_y0;
    __asm ("subsd xmm0, qword [obj.spoke_y1]");
    rdi = reloc_border_lp;
    __asm ("mulsd xmm0, qword [loc..LC13]");
    *(obj.spoke_dx) = xmm0;
    xmm0 = spoke_x1;
    __asm ("subsd xmm0, qword [obj.spoke_x0]");
    __asm ("mulsd xmm0, qword [loc..LC13]");
    *(obj.spoke_dy) = xmm0;
    eval_link_function ();
    *((rbx + 0x130)) = 0;
    rsi = sym_spidertick_callback;
    rdi = rbx;
    eval_link_function ();
    goto label_10;
label_26:
    *((rbx + 0x140)) = 1;
    rdi = reloc_grid_lp;
    eval_link_function ();
    *((rbx + 0x88)) = ebp;
    rsi = sym_spidertick_callback;
    rdi = rbx;
    *((rbx + 0x130)) = 0;
    eax = eval_link_function ();
    *((rbx + 0x140)) = 0;
    if (*(reloc.strdup) != 1) {
        goto label_11;
    }
label_12:
    return rax;
label_25:
    if (*(reloc.strdup) != 1) {
        goto label_11;
    }
    r13d &= 1;
    if (r13d != 0) {
        goto label_11;
    }
    goto label_12;
label_27:
    rdi = reloc_parallel_axis_style;
    goto label_13;
label_22:
    return rax;
label_24:
    rsi = "attempt to draw undefined radial axis";
    edi = 0xffffffff;
    eax = 0;
    eval_link_function ();
    __asm ("endbr64");
    r12d = *((rdi + 0x1c8));
    rdi = *((rdi + 0x1e8));
    if (r12d <= 0) {
        goto label_28;
    }
    edx = r12 - 1;
    xmm0 = *(loc..LC23);
    rax = rdi;
    rdx <<= 6;
    rdx = rdi + rdx + 0x40;
    do {
        if (*(rax) == 2) {
            *((rax + 0x18)) = xmm0;
            *((rax + 0x10)) = xmm0;
        }
        rax += 0x40;
    } while (rax != rdx);
label_28:
    if (*((rbp + 0x1c0)) > 1) {
        *(obj.boxplot_factor_sort_required) = 1;
    }
    rbx = (int64_t) r12d;
    edx = 0x40;
    rcx = sym_compare_ypoints;
    rsi = rbx;
    rbx <<= 6;
    eval_link_function ();
    rdx = *((rbp + 0x1e8));
    if (*((rdx + rbx - 0x40)) != 2) {
        goto label_29;
    }
    rax = rdx + rbx;
    do {
        rax -= 0x40;
        r12d--;
    } while (*((rax - 0x40)) == 2);
label_29:
    eax = r12d;
    return rax;
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/graphics.o @ 0x8003530 */
#include <stdint.h>
 
int64_t place_arrows (int64_t arg1, int64_t arg4) {
    rdi = arg1;
    rcx = arg4;
    edx = 0;
    rbx = *(reloc.first_arrow);
    r12 = *(reloc.clip_area);
    rax = *(fs:0x28);
    *((rsp + 0x48)) = rax;
    eax = 0;
    rax = *(reloc.term);
    rax = reloc_canvas;
    if ((*((rax + 0xa8)) & 0x80) != 0) {
        rax = rdx;
    }
    *(reloc.clip_area) = rax;
    if (rbx == 0) {
        goto label_1;
    }
    do {
        *((rsp + 0x20)) = 0;
        *((rsp + 0x28)) = 0;
        *((rsp + 0x30)) = 0;
        *((rsp + 0x38)) = 0;
        if (*((rbx + 0x6c)) == ebp) {
            if (*((rbx + 0xc)) == 3) {
                goto label_2;
            }
            rdi = rbx + 0x10;
            rdx = rsp + 0x28;
            rsi = rsp + 0x20;
            map_position_double_isra_0 ();
            eax = *((rbx + 0xc));
            rdi = rbx + 0x38;
            if (eax == 1) {
                goto label_3;
            }
            if (eax == 2) {
                goto label_4;
            }
            rdx = rsp + 0x38;
            rsi = rsp + 0x30;
            map_position_double_isra_0 ();
label_0:
            rdi = rbx + 0x70;
            eval_link_function ();
            rdi = rbx + 0x68;
            eval_link_function ();
            edi = *((rbx + 0xd8));
            xmm3 = *((rsp + 0x38));
            xmm2 = *((rsp + 0x30));
            xmm1 = *((rsp + 0x28));
            xmm0 = *((rsp + 0x20));
            eval_link_function ();
        }
label_2:
        rbx = *(rbx);
    } while (rbx != 0);
label_1:
    rdi = reloc_border_lp;
    eval_link_function ();
    *(reloc.clip_area) = r12;
    rax = *((rsp + 0x48));
    rax ^= *(fs:0x28);
    if (rbx == 0) {
        return rax;
label_4:
        rdx = *(reloc.term);
        xmm1 = 0;
        xmm0 = 0;
        rsi = rsp + 0x40;
        rcx = "arrow";
        eax = *((rdx + 0x20));
        __asm ("cvtsi2sd xmm1, rax");
        eax = *((rdx + 0x24));
        edx = 0;
        __asm ("cvtsi2sd xmm0, rax");
        __asm ("divsd xmm1, xmm0");
        *((rsp + 8)) = xmm1;
        eval_link_function ();
        xmm0 = *((rbx + 0x60));
        rdi = rsp + 0x18;
        __asm ("mulsd xmm0, qword [loc..LC7]");
        rsi = rsp + 0x10;
        eval_link_function ();
        xmm0 = *((rsp + 0x40));
        xmm4 = *((rsp + 0x10));
        xmm1 = *((rsp + 0x20));
        __asm ("mulsd xmm4, xmm0");
        __asm ("mulsd xmm0, qword [rsp + 0x18]");
        __asm ("mulsd xmm0, qword [rsp + 8]");
        __asm ("addsd xmm0, qword [rsp + 0x28]");
        __asm ("addsd xmm1, xmm4");
        *((rsp + 0x38)) = xmm0;
        *((rsp + 0x30)) = xmm1;
        goto label_0;
label_3:
        rdx = rsp + 0x38;
        rsi = rsp + 0x30;
        rcx = "arrow";
        eval_link_function ();
        xmm0 = *((rsp + 0x30));
        __asm ("addsd xmm0, qword [rsp + 0x20]");
        *((rsp + 0x30)) = xmm0;
        xmm0 = *((rsp + 0x38));
        __asm ("addsd xmm0, qword [rsp + 0x28]");
        *((rsp + 0x38)) = xmm0;
        goto label_0;
    }
    rax = eval_link_function ();
    __asm ("endbr64");
    rbx = rsi;
    rdi = "Visible pixel grid has a scan line shorter than previous scan lines.";
    if (rdi != 0) {
        eval_link_function ();
    }
    *(obj.stackheight) = "Visible pixel grid has a scan line shorter than previous scan lines.";
    if (rbp != 0) {
        rax = *(reloc.histogram_opts);
        rdi = rbp + 8;
        rsi = reloc_histogram_opts;
        rdi &= 0xfffffffffffffff8;
        *(rbp) = rax;
        rax = *(reloc.screen_ok);
        *((rbp + 0x130)) = rax;
        rax = rbp;
        rax -= rdi;
        rsi -= rax;
        eax += 0x138;
        eax >>= 3;
        rcx = rax;
        *(rdi) = *(rsi);
        rcx--;
        rsi += 8;
        rdi += 8;
        rdi = rbx + 8;
        rdi &= 0xfffffffffffffff8;
        __asm ("movdqu xmm0, xmmword [rbx]");
        __asm ("movups xmmword [rbp + 0x38], xmm0");
        __asm ("movdqu xmm1, xmmword [rbx + 0x10]");
        __asm ("movups xmmword [rbp + 0x48], xmm1");
        __asm ("movdqu xmm2, xmmword [rbx + 0x20]");
        rax = rcx;
        __asm ("movups xmmword [rbp + 0x58], xmm2");
        __asm ("movdqu xmm3, xmmword [rbx + 0x30]");
        __asm ("movups xmmword [rbp + 0x68], xmm3");
        __asm ("movdqu xmm4, xmmword [rbx + 0x40]");
        __asm ("movups xmmword [rbp + 0x78], xmm4");
        __asm ("movdqu xmm5, xmmword [rbx + 0x50]");
        __asm ("movups xmmword [rbp + 0x88], xmm5");
        __asm ("movdqu xmm6, xmmword [rbx + 0x60]");
        __asm ("movups xmmword [rbp + 0x98], xmm6");
        __asm ("movdqu xmm7, xmmword [rbx + 0x70]");
        __asm ("movups xmmword [rbp + 0xa8], xmm7");
        __asm ("movdqu xmm0, xmmword [rbx + 0x80]");
        __asm ("movups xmmword [rbp + 0xb8], xmm0");
        __asm ("movdqu xmm1, xmmword [rbx + 0x90]");
        __asm ("movups xmmword [rbp + 0xc8], xmm1");
        __asm ("movdqu xmm2, xmmword [rbx + 0xa0]");
        __asm ("movups xmmword [rbp + 0xd8], xmm2");
        __asm ("movdqu xmm3, xmmword [rbx + 0xb0]");
        __asm ("movups xmmword [rbp + 0xe8], xmm3");
        __asm ("movdqu xmm4, xmmword [rbx + 0xc0]");
        __asm ("movups xmmword [rbp + 0xf8], xmm4");
        __asm ("movdqu xmm5, xmmword [rbx + 0xd0]");
        __asm ("movups xmmword [rbp + 0x108], xmm5");
        __asm ("movdqu xmm6, xmmword [rbx + 0xe0]");
        __asm ("movups xmmword [rbp + 0x118], xmm6");
        __asm ("movdqu xmm7, xmmword [rbx + 0xf0]");
        __asm ("movups xmmword [rbp + 0x128], xmm7");
        *(rbx) = 0;
        *((rbx + 0xf8)) = 0;
        rbx -= rdi;
        ecx = rbx + 0x100;
        ecx >>= 3;
        *(rdi) = rax;
        rcx--;
        rdi += 8;
        *(reloc.default_rectangle) = rbp;
    }
    return rax;
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/graphics.o @ 0x8006300 */
#include <stdint.h>
 
int64_t plot_bars (int64_t arg5, int64_t arg1, int64_t arg4) {
    r8 = arg5;
    rdi = arg1;
    rcx = arg4;
    rbx = rdi;
    rax = *(reloc.term);
    esi = *((rdi + 0x10));
    *((rsp + 0x30)) = rax;
    eax = *((rax + 0x24));
    edx = *((rax + 0x24));
    edx >>= 1;
    eax = 1;
    if (eax > 3) {
        eax = edx;
    }
    edx = esi;
    edx &= 0xffffffbf;
    *((rsp + 0x2c)) = eax;
    al = (esi == 0x289) ? 1 : 0;
    cl = (esi == 0x608) ? 1 : 0;
    eax |= ecx;
    cl = (esi == 0x549) ? 1 : 0;
    eax |= ecx;
    cl = (edx == 0x186) ? 1 : 0;
    al |= cl;
    if (al == 0) {
        if (edx != 0x487) {
            goto label_11;
        }
    }
    edx = *((rbx + 0x1c8));
    if (edx <= 0) {
        goto label_12;
    }
    rax = rsp + 0x58;
    r12d = 0;
    r13 = rbx;
    *((rsp + 0x10)) = 0;
    *((rsp + 0x38)) = rax;
    r14 = reloc_axis_array;
    r15 = r12;
    do {
        rax = *((r13 + 0x1e8));
        r12 = r15;
        r12 <<= 6;
        rax += r12;
        if (*(rax) != 2) {
            xmm1 = *((rax + 8));
            if (esi == 0x608) {
                rdi = *((r13 + 0x1a8));
                r11d = r15 - 1;
                xmm0 = 0;
                xmm2 = 0;
                ecx = *(0x08092457);
                r10d = *((rdi + 8));
                r10d += ecx;
                ecx--;
                __asm ("cvtsi2sd xmm2, r10d");
                edx = r10 - 1;
                edx *= r11d;
                edx += *((r13 + 0x1b0));
                __asm ("cvtsi2sd xmm0, edx");
                __asm ("addsd xmm0, xmm1");
                xmm1 = 0;
                __asm ("cvtsi2sd xmm1, ecx");
                __asm ("mulsd xmm1, qword [loc..LC8]");
                __asm ("addsd xmm1, xmm0");
                __asm ("divsd xmm1, xmm2");
                __asm ("addsd xmm2, xmm2");
                __asm ("movapd xmm0, xmm1");
                xmm1 = *(loc..LC8);
                __asm ("addsd xmm1, qword [rdi + 0x10]");
                __asm ("addsd xmm1, xmm0");
                xmm0 = *((rax + 0x38));
                __asm ("subsd xmm0, qword [rax + 0x30]");
                __asm ("divsd xmm0, xmm2");
                *((rsp + 0x10)) = xmm0;
            }
            rax = *(reloc.x_axis);
            rax *= 0x2a8;
            rax += r14;
            xmm0 = *((rax + 0x10));
            xmm2 = *((rax + 0x18));
            __asm ("comisd xmm2, xmm0");
            if (rax <= 0) {
                goto label_13;
            }
            __asm ("comisd xmm1, xmm0");
            if (rax < 0) {
                goto label_3;
            }
            __asm ("comisd xmm2, xmm1");
            al = (rax < 0) ? 1 : 0;
label_4:
            if (al != 0) {
                goto label_3;
            }
            __asm ("movapd xmm0, xmm1");
            *((rsp + 8)) = xmm1;
            eax = eval_link_function ();
            xmm1 = *((rsp + 8));
            ebx = eax;
            rax = *((r13 + 0x1e8));
            xmm0 = *((rax + r12 + 0x10));
            rax = *(reloc.y_axis);
            rax *= 0x2a8;
            rax += r14;
            xmm2 = *((rax + 0x10));
            xmm3 = *((rax + 0x18));
            __asm ("comisd xmm3, xmm2");
            if (rax <= 0) {
                goto label_14;
            }
            __asm ("comisd xmm0, xmm2");
            if (rax >= 0) {
                __asm ("comisd xmm3, xmm0");
                al = (rax < 0) ? 1 : 0;
label_6:
                if (al != 0) {
                    goto label_5;
                }
                *((rsp + 0x20)) = xmm1;
                eval_link_function ();
                rax = *((r13 + 0x1e8));
                rax += r12;
                xmm2 = *((rax + 0x20));
                xmm0 = *((rax + 0x28));
                *((rsp + 0x18)) = xmm2;
                eax = eval_link_function ();
                xmm2 = *((rsp + 0x18));
                *((rsp + 8)) = eax;
                __asm ("movapd xmm0, xmm2");
                eax = eval_link_function ();
                xmm7 = *(loc..LC40);
                xmm1 = *((rsp + 0x20));
                rax = *((r13 + 0x1e8));
                rax += r12;
                __asm ("ucomisd xmm7, qword [rax + 0x20]");
                __asm ("jp 0x8006590");
                if (rax == 0) {
                    rax = *(reloc.y_axis);
                    *((rsp + 0x18)) = xmm1;
                    rax *= 0x2a8;
                    rax += r14;
                    xmm0 = *((rax + 0x10));
                    __asm ("minsd xmm0, qword [rax + 0x18]");
                    eax = eval_link_function ();
                    xmm1 = *((rsp + 0x18));
                    rax = *((r13 + 0x1e8));
                    rax += r12;
                }
                if (*((r13 + 0x10)) == 0x608) {
                    goto label_15;
                }
                xmm1 = *((rax + 0x30));
                xmm0 = *((rax + 0x38));
                *((rsp + 0x20)) = xmm1;
                eax = eval_link_function ();
                xmm1 = *((rsp + 0x20));
                *((rsp + 0x18)) = eax;
                __asm ("movapd xmm0, xmm1");
                eax = eval_link_function ();
                r12d = eax;
label_9:
                eax = *((r13 + 0x10));
                if (eax != 0x608) {
                    if (eax == 0x549) {
                        goto label_16;
                    }
                    rax = *((r13 + 0x1e0));
                    rdi = r13;
                    rsi = rax + r15*8;
                    eval_link_function ();
                }
label_16:
                rdi = obj_bar_lp;
                if ((*(obj.bar_lp) & 8) != 0) {
                    goto label_17;
                }
                if (*((r13 + 0x10)) == 0x289) {
                    goto label_18;
                }
label_10:
                ecx = *((rsp + 8));
                if (*(reloc.polar) == 0) {
                    goto label_19;
                }
                edx = *((rsp + 0x18));
                esi = ebp;
                edi = r12d;
                eval_link_function ();
label_8:
                if ((*(obj.bar_lp) & 8) != 0) {
                    rax = *(reloc.term);
                    esi = 0;
                    edi = 0xffffffff;
                    rax = uint64_t (*rax + 0x140)() ();
                }
                xmm1 = *(obj.bar_size);
                xmm6 = 0;
                if (*(reloc.polar) != 0) {
                    goto label_20;
                }
                __asm ("comisd xmm6, xmm1");
                if (*(reloc.polar) > 0) {
                    goto label_21;
                }
                xmm4 = 0;
                __asm ("comisd xmm1, xmm4");
                if (*(reloc.polar) > 0) {
                    goto label_22;
                }
            }
label_5:
            esi = *((r13 + 0x10));
        }
label_3:
        r15++;
    } while (*((r13 + 0x1c8)) > r15d);
    rbx = r13;
label_11:
    sil &= 0x7f;
    if (esi != 0x146) {
        if (esi != 0x447) {
            goto label_12;
        }
    }
    eax = *((rbx + 0x1c8));
    if (eax <= 0) {
        goto label_12;
    }
    r14d = 0;
    goto label_23;
label_0:
    __asm ("comisd xmm0, xmm1");
    if (eax < 0) {
        goto label_1;
    }
    __asm ("comisd xmm2, xmm0");
    al = (eax < 0) ? 1 : 0;
label_2:
    if (al != 0) {
        goto label_1;
    }
    eax = eval_link_function ();
    r12d = eax;
    rax = *((rbx + 0x1e8));
    rax += rbp;
    xmm1 = *((rax + 0x30));
    xmm0 = *((rax + 0x38));
    *((rsp + 8)) = xmm1;
    eax = eval_link_function ();
    xmm1 = *((rsp + 8));
    r15d = eax;
    __asm ("movapd xmm0, xmm1");
    eax = eval_link_function ();
    xmm4 = *(loc..LC40);
    r13d = eax;
    rax = *((rbx + 0x1e8));
    __asm ("ucomisd xmm4, qword [rax + rbp + 0x30]");
    __asm ("jp 0x8006768");
    if (rax == 0) {
        rax = *(reloc.x_axis);
        rcx = reloc_axis_array;
        rax *= 0x2a8;
        rax += rcx;
        xmm0 = *((rax + 0x10));
        __asm ("minsd xmm0, qword [rax + 0x18]");
        eax = eval_link_function ();
        r13d = eax;
    }
    rax = *((rbx + 0x1e0));
    rdi = rbx;
    rsi = rax + r14*8;
    eval_link_function ();
    rdi = obj_bar_lp;
    if ((*(obj.bar_lp) & 8) != 0) {
        goto label_24;
    }
label_7:
    ecx = r12d;
    edx = r15d;
    esi = r12d;
    edi = r13d;
    eval_link_function ();
    if ((*(obj.bar_lp) & 8) != 0) {
        rax = *(reloc.term);
        esi = 0;
        edi = 0xffffffff;
        uint64_t (*rax + 0x140)() ();
    }
    xmm1 = *(obj.bar_size);
    xmm5 = 0;
    __asm ("comisd xmm1, xmm5");
    if ((*(obj.bar_lp) & 8) <= 0) {
        goto label_1;
    }
    xmm2 = 0;
    xmm0 = 0;
    edx = r13d;
    edi = r13d;
    __asm ("cvtsi2sd xmm2, dword [rsp + 0x2c]");
    __asm ("cvtsi2sd xmm0, r12d");
    __asm ("mulsd xmm1, xmm2");
    *((rsp + 0x10)) = xmm2;
    __asm ("movapd xmm3, xmm0");
    __asm ("movapd xmm6, xmm0");
    *((rsp + 8)) = xmm0;
    __asm ("addsd xmm3, xmm1");
    __asm ("subsd xmm6, xmm1");
    __asm ("cvttsd2si ecx, xmm3");
    __asm ("cvttsd2si esi, xmm6");
    eval_link_function ();
    xmm2 = *((rsp + 0x10));
    edx = r15d;
    edi = r15d;
    __asm ("mulsd xmm2, qword [obj.bar_size]");
    xmm0 = *((rsp + 8));
    __asm ("movapd xmm1, xmm2");
    __asm ("movapd xmm2, xmm0");
    __asm ("addsd xmm2, xmm1");
    __asm ("subsd xmm0, xmm1");
    __asm ("cvttsd2si ecx, xmm2");
    __asm ("cvttsd2si esi, xmm0");
    eval_link_function ();
    do {
label_1:
        r14++;
        if (*((rbx + 0x1c8)) <= r14d) {
            goto label_12;
        }
label_23:
        rax = *((rbx + 0x1e8));
        rbp <<= 6;
        rax += rbp;
    } while (*(rax) == 2);
    xmm0 = *((rax + 0x10));
    rax = *(reloc.y_axis);
    rdx = reloc_axis_array;
    rax *= 0x2a8;
    rax += rdx;
    xmm1 = *((rax + 0x10));
    xmm2 = *((rax + 0x18));
    __asm ("comisd xmm2, xmm1");
    if (rax > 0) {
        goto label_0;
    }
    __asm ("comisd xmm0, xmm2");
    if (rax < 0) {
        goto label_1;
    }
    __asm ("comisd xmm1, xmm0");
    al = (rax < 0) ? 1 : 0;
    goto label_2;
label_12:
    rdi = rbx + 0x30;
    void (*0x80921db)() ();
label_13:
    __asm ("comisd xmm1, xmm2");
    if (rax < 0) {
        goto label_3;
    }
    __asm ("comisd xmm0, xmm1");
    al = (rax < 0) ? 1 : 0;
    goto label_4;
label_14:
    __asm ("comisd xmm0, xmm3");
    if (rax < 0) {
        goto label_5;
    }
    __asm ("comisd xmm2, xmm0");
    al = (rax < 0) ? 1 : 0;
    goto label_6;
label_24:
    eval_link_function ();
    goto label_7;
label_20:
    __asm ("comisd xmm1, xmm6");
    if (rax <= 0) {
        goto label_5;
    }
    eax = *((rsp + 0x18));
    ebx = *((rsp + 8));
    xmm0 = 0;
    xmm1 = 0;
    eax -= r12d;
    ebx -= ebp;
    __asm ("cvtsi2sd xmm1, eax");
    *((rsp + 0x4c)) = eax;
    __asm ("cvtsi2sd xmm0, ebx");
    eval_link_function ();
    rdi = *((rsp + 0x38));
    rsi = rsp + 0x50;
    eax = eval_link_function ();
    xmm0 = 0;
    xmm1 = 0;
    esi = ebp;
    __asm ("cvtsi2sd xmm0, dword [rsp + 0x2c]");
    __asm ("mulsd xmm0, qword [obj.bar_size]");
    xmm2 = *((rsp + 0x58));
    edi = r12d;
    __asm ("cvtsi2sd xmm1, r12d");
    __asm ("mulsd xmm2, xmm0");
    __asm ("movapd xmm3, xmm1");
    __asm ("mulsd xmm0, qword [rsp + 0x50]");
    __asm ("addsd xmm1, xmm2");
    __asm ("subsd xmm3, xmm2");
    __asm ("cvttsd2si ecx, xmm1");
    xmm1 = 0;
    __asm ("cvtsi2sd xmm1, ebp");
    __asm ("cvttsd2si eax, xmm3");
    *((rsp + 0x40)) = ecx;
    __asm ("movapd xmm2, xmm1");
    __asm ("subsd xmm1, xmm0");
    __asm ("addsd xmm2, xmm0");
    *((rsp + 0x20)) = eax;
    __asm ("cvttsd2si r8d, xmm1");
    __asm ("cvttsd2si edx, xmm2");
    *((rsp + 0x48)) = r8d;
    *((rsp + 0x44)) = edx;
    eax = eval_link_function ();
    if (eax == 0) {
        rbp = *((rsp + 0x30));
        esi = *((rsp + 0x44));
        edi = *((rsp + 0x20));
        uint64_t (*rbp + 0x58)() ();
        esi = *((rsp + 0x48));
        edi = *((rsp + 0x40));
        uint64_t (*rbp + 0x60)() ();
    }
    esi = *((rsp + 8));
    edi = *((rsp + 0x18));
    eax = eval_link_function ();
    if (eax != 0) {
        goto label_5;
    }
    ebp = *((rsp + 0x4c));
    esi = *((rsp + 0x44));
    edi = *((rsp + 0x20));
    r12 = *((rsp + 0x30));
    esi += ebx;
    edi += ebp;
    uint64_t (*r12 + 0x58)() ();
    esi = *((rsp + 0x48));
    edi = *((rsp + 0x40));
    esi += ebx;
    edi += ebp;
    uint64_t (*r12 + 0x60)() ();
    goto label_5;
label_19:
    edx = ebx;
    esi = ebp;
    edi = ebx;
    eval_link_function ();
    goto label_8;
label_15:
    __asm ("movapd xmm0, xmm1");
    __asm ("subsd xmm0, qword [rsp + 0x10]");
    *((rsp + 0x18)) = xmm1;
    eax = eval_link_function ();
    xmm1 = *((rsp + 0x18));
    __asm ("addsd xmm1, qword [rsp + 0x10]");
    r12d = eax;
    __asm ("movapd xmm0, xmm1");
    eax = eval_link_function ();
    *((rsp + 0x18)) = eax;
    goto label_9;
label_22:
    xmm2 = 0;
    xmm0 = 0;
    ecx = ebp;
    esi = ebp;
    __asm ("cvtsi2sd xmm2, dword [rsp + 0x2c]");
    __asm ("cvtsi2sd xmm0, ebx");
    __asm ("mulsd xmm1, xmm2");
    *((rsp + 0x20)) = xmm2;
    __asm ("movapd xmm3, xmm0");
    __asm ("movapd xmm5, xmm0");
    *((rsp + 0x18)) = xmm0;
    __asm ("addsd xmm3, xmm1");
    __asm ("subsd xmm5, xmm1");
    __asm ("cvttsd2si edx, xmm3");
    __asm ("cvttsd2si edi, xmm5");
    eval_link_function ();
    xmm2 = *((rsp + 0x20));
    xmm0 = *((rsp + 0x18));
    __asm ("mulsd xmm2, qword [obj.bar_size]");
    ecx = *((rsp + 8));
    esi = *((rsp + 8));
    __asm ("movapd xmm1, xmm2");
    __asm ("movapd xmm2, xmm0");
    __asm ("addsd xmm2, xmm1");
    __asm ("subsd xmm0, xmm1");
    __asm ("cvttsd2si edx, xmm2");
    __asm ("cvttsd2si edi, xmm0");
    eval_link_function ();
    esi = *((r13 + 0x10));
    goto label_3;
label_17:
    eval_link_function ();
    goto label_10;
label_18:
    rax = *((rsp + 0x30));
    if (*((rax + 0xc0)) == 0) {
        goto label_10;
    }
    rdi = r13 + 0x138;
    eval_link_function ();
    goto label_10;
label_21:
    ebx = *((rsp + 0x18));
    ecx = ebp;
    esi = ebp;
    edi = r12d;
    edx = ebx;
    eval_link_function ();
    ecx = *((rsp + 8));
    edx = ebx;
    edi = r12d;
    esi = ecx;
    eval_link_function ();
    esi = *((r13 + 0x10));
    goto label_3;
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/graphics.o @ 0x8000af0 */
#include <stdint.h>
 
uint64_t place_grid (int64_t arg1) {
    rdi = arg1;
    ebx = edi;
    rdi = reloc_border_lp;
    eax = *(0x0809228f);
    rbp = *(reloc.term);
    r14d = *(0x08092297);
    r15 = *(reloc.clip_area);
    *((rsp + 0x1c)) = eax;
    eval_link_function (rbx, rbp, r12, r13, r14);
    *(obj.largest_polar_circle) = 0;
    if (ebx == 2) {
        goto label_4;
    }
    while (1) {
        edx = *(0x0809353b);
        rax = reloc_plot_bounds;
        *(reloc.x_axis) = 2;
        *(reloc.y_axis) = 1;
        *(reloc.clip_area) = rax;
        if (edx != 0) {
            if (*(reloc.raxis) != 0) {
                goto label_5;
            }
            if (*(reloc.polar) != 0) {
                goto label_5;
            }
        }
label_0:
        xmm0 = *(reloc.polar_grid_angle);
        xmm5 = 0;
        __asm ("comisd xmm0, xmm5");
        if (*(reloc.polar) > 0) {
            goto label_6;
        }
        eax = *(reloc.setup_tics);
        if (eax != 0) {
            goto label_7;
        }
label_1:
        eax = *((rsp + 0x1c));
        *(0x08092297) = r14d;
        *(reloc.clip_area) = r15;
        *(0x0809228f) = eax;
        return rax;
label_4:
        *(0x08092297) = 0xfffffffd;
        *(0x0809228f) = 0xfffffffd;
        rcx = sym_ytick2d_callback;
        edx = 2;
        edi = 1;
        *(reloc.x_axis) = 2;
        rsi = reloc_ytic_x;
        *(reloc.y_axis) = 1;
        eval_link_function ();
        edx = 1;
        edi = 2;
        rcx = sym_xtick2d_callback;
        rsi = reloc_xtic_y;
        eval_link_function ();
        edx = 6;
        edi = 5;
        rcx = sym_ytick2d_callback;
        rsi = reloc_y2tic_x;
        *(reloc.x_axis) = 6;
        *(reloc.y_axis) = 5;
        eval_link_function ();
        edx = 5;
        edi = 6;
        rcx = sym_xtick2d_callback;
        rsi = reloc_x2tic_y;
        eval_link_function ();
    }
label_5:
    xmm0 = 0;
    eax = eval_link_function ();
    edi = *(0x080935bb);
    *(reloc.tic_start) = eax;
    *(reloc.tic_mirror) = eax;
    eax -= *((rbp + 0x18));
    *(reloc.tic_text) = eax;
    *(reloc.rotate_tics) = edi;
    if (edi == 0) {
        goto label_8;
    }
    eax = uint64_t (*rbp + 0x78)() ();
    if (eax != 0) {
        eax = 0;
        al = (*(reloc.rotate_tics) == 0xfffffef2) ? 1 : 0;
        eax += eax;
        *(reloc.tic_hjust) = eax;
    }
label_2:
    if (*(0x08093713) != 0) {
        eax = *(0x080935bf);
        *(reloc.tic_hjust) = eax;
    }
    rsi = sym_xtick2d_callback;
    rdi = 0x08093483;
    *(reloc.tic_direction) = 1;
    eval_link_function ();
    edi = 0;
    uint64_t (*rbp + 0x78)() ();
    goto label_0;
label_6:
    xmm0 = 0;
    eax = eval_link_function ();
    xmm0 = 0;
    ebx = eax;
    eax = eval_link_function ();
    edi = 5;
    rax = *(reloc.term);
    uint64_t (*rax + 0x110)() ();
    rdi = reloc_grid_lp;
    eval_link_function ();
    xmm3 = largest_polar_circle;
    xmm6 = 0;
    __asm ("comisd xmm6, xmm3");
    if (*(0x08093713) >= 0) {
        goto label_9;
    }
label_3:
    xmm2 = 0;
    xmm0 = *(loc..LC9);
    r12 = rsp + 0x28;
    __asm ("movapd xmm1, xmm2");
    while (*(0x08093713) > 0) {
        xmm3 = largest_polar_circle;
        __asm ("movapd xmm0, xmm1");
        rsi = rsp + 0x20;
        rdi = r12;
        *((rsp + 8)) = xmm1;
        *((rsp + 0x10)) = xmm3;
        eval_link_function ();
        xmm0 = *((rsp + 0x20));
        xmm2 = *((rsp + 0x28));
        xmm1 = *((rsp + 8));
        xmm3 = *((rsp + 0x10));
        __asm ("mulsd xmm0, xmm3");
        *((rsp + 8)) = xmm1;
        *((rsp + 0x10)) = xmm2;
        eax = eval_link_function ();
        xmm2 = *((rsp + 0x10));
        __asm ("mulsd xmm2, qword [obj.largest_polar_circle]");
        r13d = eax;
        __asm ("movapd xmm0, xmm2");
        eax = eval_link_function ();
        edx = r13d;
        esi = ebp;
        edi = ebx;
        ecx = eax;
        eval_link_function ();
        xmm1 = *((rsp + 8));
        __asm ("addsd xmm1, qword [reloc.polar_grid_angle]");
        xmm4 = *(loc..LC10);
        __asm ("comisd xmm4, xmm1");
    }
    rax = *(reloc.term);
    edi = 6;
    uint64_t (*rax + 0x110)() ();
    eax = *(reloc.setup_tics);
    if (eax == 0) {
        goto label_1;
    }
label_7:
    rdi = reloc_border_lp;
    eval_link_function ();
    xmm7 = 0;
    __asm ("comisd xmm7, xmmword [obj.largest_polar_circle]");
    while (1) {
        rdi = reloc_THETA_AXIS;
        eval_link_function ();
        rsi = sym_ttick_callback;
        rdi = reloc_THETA_AXIS;
        eval_link_function ();
        rax = *(reloc.term);
        edi = 0;
        uint64_t (*rax + 0x78)() ();
        goto label_1;
label_8:
        *(reloc.tic_hjust) = 1;
        goto label_2;
label_9:
        xmm0 = *(0x0809349b);
        eval_link_function ();
        __asm ("movapd xmm3, xmm0");
        *(obj.largest_polar_circle) = xmm0;
        goto label_3;
        xmm0 = *(0x0809349b);
        eval_link_function ();
        *(obj.largest_polar_circle) = xmm0;
    }
}


