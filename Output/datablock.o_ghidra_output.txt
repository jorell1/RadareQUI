int32_t sym.enlarge_datablock.isra.0(uint32_t arg1, int64_t arg2)
{
    int32_t iVar1;
    int64_t *piVar2;
    int64_t *piVar3;
    int64_t iVar4;
    int64_t iVar5;
    undefined4 in_RDI;
    int32_t iVar6;
    int32_t iVar7;
    
    // [01] -r-x section size 1427 named .text
    piVar3 = *(int64_t **)CONCAT44(in_RDI, arg1);
    if ((piVar3 == (int64_t *)0x0) || (*piVar3 == 0)) {
        iVar4 = 0;
        iVar5 = 0x1000;
        iVar7 = 0;
    } else {
        iVar7 = 0;
        piVar2 = piVar3;
        do {
            iVar6 = iVar7;
            piVar2 = piVar2 + 1;
            iVar7 = iVar6 + 1;
        } while (*piVar2 != 0);
        iVar1 = iVar6 + 0x201 + (int32_t)arg2 >> 9;
        if ((iVar6 + 0x201 >> 9 == iVar1) && ((arg2 & 1U) != 0)) {
            return iVar7;
        }
        iVar4 = (int64_t)iVar7 << 3;
        iVar5 = (int64_t)(iVar1 << 9) << 3;
    }
    piVar3 = (int64_t *)func_0x0801278a(piVar3, iVar5, "x");
    *(int64_t **)CONCAT44(in_RDI, arg1) = piVar3;
    *(undefined8 *)((int64_t)piVar3 + iVar4) = 0;
    return iVar7;
}


undefined * sym.parse_datablock_name(void)
{
    func_0x0801278a("x"._0_8_);
    _reloc.c_token = _reloc.c_token + 1;
    "x"._0_8_ = (undefined *)
                func_0x0801278a((int64_t)(*(int32_t *)(_reloc.token + (int64_t)_reloc.c_token * 0x28 + 0x24) + 2), 
                                "datablock");
    *"x"._0_8_ = 0x24;
    func_0x0801278a("x"._0_8_ + 1, (int64_t)_reloc.c_token, 
                    *(int32_t *)(_reloc.token + (int64_t)_reloc.c_token * 0x28 + 0x24) + 2);
    _reloc.c_token = _reloc.c_token + 1;
    return "x"._0_8_;
}


void sym.get_datablock(int64_t arg1)
{
    int64_t *piVar1;
    int64_t iVar2;
    int64_t *piVar3;
    int32_t *piVar4;
    
    iVar2 = func_0x0801278a();
    if (((iVar2 != 0) && (*(int32_t *)(iVar2 + 0x10) == 4)) && (*(int64_t *)(iVar2 + 0x18) != 0)) {
        return;
    }
    piVar4 = (int32_t *)0xffffffff;
    func_0x0801278a(0xffffffff, "no datablock named %s", arg1);
    if (*piVar4 == 4) {
        piVar1 = *(int64_t **)(piVar4 + 2);
        if (piVar1 != (int64_t *)0x0) {
            iVar2 = *piVar1;
            piVar3 = piVar1;
            while (iVar2 != 0) {
                piVar3 = piVar3 + 1;
                func_0x0801278a();
                iVar2 = *piVar3;
            }
        }
        func_0x0801278a(piVar1);
        *(undefined8 *)(piVar4 + 2) = 0;
        return;
    }
    return;
}




void sym.append_to_datablock(int64_t arg1, int64_t arg2)
{
    int32_t iVar1;
    
    iVar1 = sym.enlarge_datablock.isra.0((int32_t)arg1 + 8, 1);
    *(int64_t *)(*(int64_t *)(arg1 + 8) + (int64_t)iVar1 * 8) = arg2;
    *(undefined8 *)(*(int64_t *)(arg1 + 8) + 8 + (int64_t)iVar1 * 8) = 0;
    return;
}




