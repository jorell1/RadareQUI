

double ** sym.new_object(int64_t arg7, int64_t arg8, int64_t arg9, int64_t arg10, int64_t arg11,
                        undefined8 placeholder_5, undefined8 placeholder_6, undefined8 placeholder_7, int64_t arg1,
                        int64_t arg2, int64_t arg3)
{
    undefined auVar1 [16];
    uint32_t uVar2;
    int32_t iVar3;
    int32_t iVar4;
    uint32_t uVar5;
    undefined4 uVar6;
    double **ppdVar7;
    double **ppdVar8;
    code *pcVar9;
    int64_t iVar10;
    double **ppdVar11;
    double **ppdVar12;
    char *pcVar13;
    int64_t in_FS_OFFSET;
    undefined uVar14;
    uint8_t uVar15;
    double *extraout_XMM0_Qa;
    double *extraout_XMM0_Qa_00;
    double *extraout_XMM0_Qa_01;
    double *extraout_XMM0_Qa_02;
    double extraout_XMM0_Qa_03;
    uint32_t uStack1588;
    undefined4 uStack1552;
    undefined4 uStack1548;
    double *apdStack1400 [42];
    double *pdStack1064;
    undefined4 uStack1056;
    undefined4 uStack1048;
    undefined8 uStack1040;
    undefined8 uStack1024;
    undefined4 uStack1004;
    undefined4 uStack996;
    double dStack984;
    undefined8 uStack960;
    undefined8 uStack856;
    undefined8 uStack840;
    undefined8 uStack832;
    double *pdStack728;
    undefined4 uStack720;
    undefined4 uStack712;
    undefined8 uStack704;
    undefined8 uStack688;
    undefined4 uStack668;
    undefined4 uStack660;
    double dStack648;
    undefined8 uStack624;
    undefined4 uStack568;
    undefined4 uStack520;
    undefined8 uStack504;
    undefined8 uStack472;
    undefined uStack464;
    double *pdStack392;
    undefined4 uStack384;
    undefined4 uStack376;
    undefined8 uStack368;
    undefined8 uStack352;
    undefined4 uStack332;
    undefined4 uStack324;
    double dStack312;
    undefined8 uStack288;
    int64_t iStack64;
    
    uVar15 = 0;
    ppdVar11 = (double **)(arg2 & 0xffffffff);
    iStack64 = *(int64_t *)(in_FS_OFFSET + 0x28);
    pcVar9 = (code *)apdStack1400;
    iVar10 = 0x29;
    ppdVar8 = (double **)0x8012740;
    ppdVar12 = (double **)pcVar9;
    while (iVar10 != 0) {
        iVar10 = iVar10 + -1;
        *ppdVar12 = *ppdVar8;
        ppdVar8 = ppdVar8 + 1;
        ppdVar12 = ppdVar12 + 1;
    }
    ppdVar8 = &pdStack392;
    iVar10 = 0x29;
    ppdVar12 = &pdStack1064;
    while (iVar10 != 0) {
        iVar10 = iVar10 + -1;
        *ppdVar12 = (double *)0x0;
        ppdVar12 = ppdVar12 + 1;
    }
    iVar10 = 0x29;
    ppdVar12 = &pdStack728;
    while (iVar10 != 0) {
        iVar10 = iVar10 + -1;
        *ppdVar12 = (double *)0x0;
        ppdVar12 = ppdVar12 + 1;
    }
    iVar10 = 0x29;
    ppdVar12 = ppdVar8;
    while (iVar10 != 0) {
        iVar10 = iVar10 + -1;
        *ppdVar12 = (double *)0x0;
        ppdVar12 = ppdVar12 + 1;
    }
    if (arg3 == 0) {
        arg3 = func_0x08090034(arg7, arg8, arg9, arg10, arg11, placeholder_5, 0x148, "object");
    } else {
        if (*(int32_t *)(arg3 + 0x10) == 4) {
            func_0x08090034(arg7, arg8, arg9, arg10, arg11, placeholder_5);
        }
    }
    iVar3 = (int32_t)ppdVar11;
    if (iVar3 == 1) {
        iVar10 = 0x29;
        ppdVar12 = (double **)pcVar9;
        ppdVar7 = (double **)arg3;
        while (iVar10 != 0) {
            iVar10 = iVar10 + -1;
            *ppdVar7 = *ppdVar12;
            ppdVar12 = ppdVar12 + (uint64_t)uVar15 * 0x1ffffffffffffffe + 1;
            ppdVar7 = ppdVar7 + (uint64_t)uVar15 * 0x1ffffffffffffffe + 1;
        }
        *(undefined4 *)(arg3 + 0x3c) = 0xfffffff9;
        *(undefined4 *)(arg3 + 0x18) = 3;
code_r0x0800155e:
        *(int32_t *)(arg3 + 8) = (int32_t)arg1;
        *(int32_t *)(arg3 + 0x10) = iVar3;
        if (iStack64 == *(int64_t *)(in_FS_OFFSET + 0x28)) {
            return (double **)arg3;
        }
        func_0x08090034();
    } else {
        if (iVar3 == 3) {
            iVar10 = 0x29;
            uStack1056 = 0xffffffff;
            uStack1040 = 0x6400000001;
            uStack1024 = 0xfffffffe00000001;
            uStack1048 = 3;
            dStack984 = _reloc..LC1;
            uStack960 = 0xfffffffc00000001;
            uStack856 = 0x200000002;
            uStack1004 = 0xfffffffc;
            uStack840 = _reloc..LC48;
            uStack996 = 0xffffffff;
            uStack832 = _reloc..LC49;
            ppdVar12 = &pdStack1064;
            ppdVar7 = (double **)arg3;
            while (iVar10 != 0) {
                iVar10 = iVar10 + -1;
                *ppdVar7 = *ppdVar12;
                ppdVar12 = ppdVar12 + (uint64_t)uVar15 * 0x1ffffffffffffffe + 1;
                ppdVar7 = ppdVar7 + (uint64_t)uVar15 * 0x1ffffffffffffffe + 1;
            }
            goto code_r0x0800155e;
        }
        if (iVar3 == 2) {
            iVar10 = 0x29;
            uStack720 = 0xffffffff;
            uStack704 = 0x6400000001;
            uStack688 = 0xfffffffe00000001;
            uStack712 = 2;
            dStack648 = _reloc..LC1;
            uStack624 = 0xfffffffc00000001;
            uStack668 = 0xfffffffc;
            uStack504 = _reloc..LC50;
            uStack660 = 0xffffffff;
            uStack568 = 1;
            uStack520 = 2;
            uStack472 = _reloc..LC51;
            uStack464 = 1;
            ppdVar12 = &pdStack728;
            ppdVar7 = (double **)arg3;
            while (iVar10 != 0) {
                iVar10 = iVar10 + -1;
                *ppdVar7 = *ppdVar12;
                ppdVar12 = ppdVar12 + (uint64_t)uVar15 * 0x1ffffffffffffffe + 1;
                ppdVar7 = ppdVar7 + (uint64_t)uVar15 * 0x1ffffffffffffffe + 1;
            }
            goto code_r0x0800155e;
        }
        if (iVar3 == 4) {
            iVar10 = 0x29;
            uStack384 = 0xffffffff;
            uStack368 = 0x6400000001;
            uStack376 = 4;
            uStack352 = 0xfffffffe00000001;
            uStack332 = 0xfffffffe;
            uStack324 = 0xffffffff;
            dStack312 = _reloc..LC1;
            uStack288 = 0xfffffffe00000001;
            ppdVar12 = ppdVar8;
            ppdVar7 = (double **)arg3;
            while (iVar10 != 0) {
                iVar10 = iVar10 + -1;
                *ppdVar7 = *ppdVar12;
                ppdVar12 = ppdVar12 + (uint64_t)uVar15 * 0x1ffffffffffffffe + 1;
                ppdVar7 = ppdVar7 + (uint64_t)uVar15 * 0x1ffffffffffffffe + 1;
            }
            goto code_r0x0800155e;
        }
    }
    pcVar13 = "object initialization failure";
    ppdVar12 = (double **)0xffffffff;
    func_0x08090034();
    iVar10 = *(int64_t *)(in_FS_OFFSET + 0x28);
    _reloc.c_token = _reloc.c_token + 1;
    if ((int32_t)_reloc.c_token < (int32_t)_reloc.num_tokens) {
        ppdVar8 = (double **)((uint64_t)pcVar13 & 0xffffffff);
        iVar3 = func_0x08090034(_reloc.c_token, reloc..LC4);
        if ((iVar3 == 0) && (iVar3 = func_0x08090034(), 0 < iVar3)) {
            pcVar9 = (code *)*ppdVar12;
            if ((double **)pcVar9 == (double **)0x0) {
                ppdVar7 = (double **)func_0x08090034(0x78, "linestyle");
            } else {
                ppdVar7 = (double **)pcVar9;
                arg3 = (int64_t)(double **)0x0;
                while (pcVar9 = (code *)ppdVar7, *(int32_t *)((int64_t)pcVar9 + 8) < iVar3) {
                    ppdVar11 = *(double ***)pcVar9;
                    ppdVar7 = ppdVar11;
                    arg3 = (int64_t)pcVar9;
                    if (ppdVar11 == (double **)0x0) goto code_r0x08001a20;
                }
                if (*(int32_t *)((int64_t)pcVar9 + 8) == iVar3) goto code_r0x08001947;
                ppdVar7 = (double **)func_0x08090034(0x78, "linestyle");
                if ((double **)arg3 != (double **)0x0) goto code_r0x08001a52;
            }
            *ppdVar12 = (double *)ppdVar7;
            arg3 = 0;
            ppdVar11 = (double **)pcVar9;
            pcVar9 = (code *)ppdVar7;
            do {
                uStack1588 = iVar3 - 1;
                uStack1552 = (undefined4)_reloc..LC57;
                uStack1548 = (undefined4)((uint64_t)_reloc..LC57 >> 0x20);
                auVar1 = ZEXT816((uint64_t)_reloc..LC1);
                *(int32_t *)((int64_t)pcVar9 + 8) = iVar3;
                *(double ***)pcVar9 = ppdVar11;
                *(double **)((int64_t)pcVar9 + 0x70) = (double *)0x0;
                *(double **)((int64_t)pcVar9 + 0x10) = (double *)((uint64_t)uStack1588 << 0x20);
                *(double **)((int64_t)pcVar9 + 0x18) = (double *)CONCAT44(0xffffffff, uStack1588);
    // WARNING: Store size is inaccurate
                *(undefined *)((int64_t)pcVar9 + 0x20) = auVar1 << 0x40;
                *(undefined4 *)((int64_t)pcVar9 + 0x30) = uStack1552;
                *(undefined4 *)((int64_t)pcVar9 + 0x34) = uStack1548;
                *(undefined4 *)((int64_t)pcVar9 + 0x38) = 0;
                *(undefined4 *)((int64_t)pcVar9 + 0x3c) = 0;
                *(undefined4 *)((int64_t)pcVar9 + 0x40) = 1;
                *(uint32_t *)((int64_t)pcVar9 + 0x44) = uStack1588;
                *(undefined4 *)((int64_t)pcVar9 + 0x48) = 0;
                *(undefined4 *)((int64_t)pcVar9 + 0x4c) = 0;
                *(undefined4 *)((int64_t)pcVar9 + 0x50) = 0;
                *(undefined4 *)((int64_t)pcVar9 + 0x54) = 0;
                *(undefined4 *)((int64_t)pcVar9 + 0x58) = 0;
                *(undefined4 *)((int64_t)pcVar9 + 0x5c) = 0;
                *(undefined4 *)((int64_t)pcVar9 + 0x60) = 0;
                *(undefined4 *)((int64_t)pcVar9 + 100) = 0;
                *(undefined4 *)((int64_t)pcVar9 + 0x68) = 0;
                *(undefined4 *)((int64_t)pcVar9 + 0x6c) = 0;
code_r0x08001947:
                iVar4 = func_0x08090034(_reloc.c_token, "def$ault");
                if (iVar4 == 0) {
                    func_0x08090034((double **)((int64_t)pcVar9 + 0x10), ppdVar8, 1);
                    if ((int32_t)_reloc.num_tokens <= (int32_t)_reloc.c_token) goto code_r0x0800197c;
                } else {
                    if (*ppdVar12 == (double *)pcVar9) {
                        *ppdVar12 = *(double **)pcVar9;
                    } else {
                        *(double **)arg3 = *(double **)pcVar9;
                    }
                    func_0x08090034();
                    _reloc.c_token = _reloc.c_token + 1;
                    if ((int32_t)_reloc.num_tokens <= (int32_t)_reloc.c_token) goto code_r0x0800197c;
                }
                iVar4 = func_0x08090034(_reloc.c_token, reloc..LC4);
                if (iVar4 != 0) goto code_r0x0800197c;
                pcVar13 = "linetype";
                if (ppdVar12 != (double **)reloc.first_perm_linestyle) {
                    pcVar13 = "style line";
                }
                func_0x08090034(_reloc.c_token, "Extraneous arguments to set %s", pcVar13);
code_r0x08001a20:
                pcVar9 = (code *)ppdVar11;
                ppdVar7 = (double **)func_0x08090034(0x78, "linestyle");
code_r0x08001a52:
                *(double ***)arg3 = ppdVar7;
                ppdVar11 = (double **)pcVar9;
                pcVar9 = (code *)ppdVar7;
            } while( true );
        }
    }
    func_0x08090034(_reloc.c_token, "tag must be > zero");
code_r0x08001ab8:
    func_0x08090034();
    ppdVar7 = (double **)(uint64_t)_reloc.c_token;
    _reloc.c_token = _reloc.c_token + 1;
    if (((int32_t)_reloc.c_token < (int32_t)_reloc.num_tokens) &&
       (ppdVar7 = (double **)func_0x08090034(_reloc.c_token, reloc..LC4), (int32_t)ppdVar7 == 0)) {
        uVar5 = _reloc.c_token;
        if ((int32_t)_reloc.c_token < (int32_t)_reloc.num_tokens) {
            do {
                ppdVar7 = (double **)func_0x08090034(uVar5, reloc..LC4);
                if ((int32_t)ppdVar7 != 0) {
                    return ppdVar7;
                }
                iVar3 = func_0x08090034(_reloc.c_token, "p$oints");
                if (iVar3 == 0) {
                    iVar3 = func_0x08090034(_reloc.c_token, "first$linetype");
                    if (iVar3 == 0) {
                        iVar3 = func_0x08090034(_reloc.c_token, "sort$ed");
                        if (iVar3 == 0) {
                            iVar3 = func_0x08090034(_reloc.c_token, "unsort$ed");
                            if (iVar3 == 0) {
                                iVar3 = func_0x08090034(_reloc.c_token, "li$near");
                                if (iVar3 == 0) {
                                    iVar3 = func_0x08090034(_reloc.c_token, "c$ubicspline");
                                    if (iVar3 == 0) {
                                        iVar3 = func_0x08090034(_reloc.c_token, "b$spline");
                                        if (iVar3 == 0) {
                                            iVar3 = func_0x08090034(_reloc.c_token, "le$vels");
                                            if (iVar3 == 0) {
                                                iVar3 = func_0x08090034(_reloc.c_token, "o$rder");
                                                if (iVar3 != 0) {
                                                    _reloc.c_token = _reloc.c_token + 1;
                                                    iVar3 = func_0x08090034();
                                                    if (iVar3 - 2U < 9) {
                                                        ppdVar7 = (double **)(uint64_t)_reloc.num_tokens;
                                                        _reloc.contour_order = iVar3;
                                                        uVar5 = _reloc.c_token;
                                                        goto code_r0x08001b5e;
                                                    }
code_r0x0800208f:
                                                    func_0x08090034(_reloc.c_token, 
                                                                    "bspline order must be in [2..10] range.");
                                                }
                                                func_0x08090034(_reloc.c_token, 
                                                                
                                                            "expecting \'linear\', \'cubicspline\', \'bspline\', \'points\', \'levels\' or \'order\'"
                                                            );
                                                iVar10 = *(int64_t *)(in_FS_OFFSET + 0x28);
                                                _reloc.c_token = _reloc.c_token + 1;
                                                if ((int32_t)_reloc.num_tokens <= (int32_t)_reloc.c_token) {
code_r0x08002323:
                                                    func_0x08090034(_reloc.c_token, "tag must be > zero");
                                                    goto code_r0x08002337;
                                                }
                                                uVar5 = func_0x08090034(_reloc.c_token, reloc..LC4);
                                                ppdVar12 = (double **)(uint64_t)uVar5;
                                                if (uVar5 != 0) goto code_r0x08002323;
                                                ppdVar8 = (double **)func_0x08090034();
                                                ppdVar7 = _reloc.first_custom_dashtype;
                                                iVar3 = (int32_t)ppdVar8;
                                                if (iVar3 < 1) goto code_r0x08002323;
                                                if (_reloc.first_custom_dashtype == (double **)0x0) {
                                                    pcVar9 = (code *)func_0x08090034(0x38, "dashtype");
                                                } else {
                                                    ppdVar11 = _reloc.first_custom_dashtype;
                                                    arg3 = (int64_t)(double **)0x0;
                                                    while (ppdVar7 = ppdVar11, *(int32_t *)(ppdVar7 + 1) < iVar3) {
                                                        ppdVar11 = (double **)*ppdVar7;
                                                        arg3 = (int64_t)ppdVar7;
                                                        if (ppdVar11 == (double **)0x0) goto code_r0x080022c0;
                                                    }
                                                    ppdVar11 = (double **)0x0;
                                                    pcVar9 = (code *)ppdVar7;
                                                    if (*(int32_t *)(ppdVar7 + 1) == iVar3) goto code_r0x080021e3;
                                                    pcVar9 = (code *)func_0x08090034(0x38, "dashtype");
                                                    if ((double **)arg3 != (double **)0x0) goto code_r0x080022dd;
                                                }
                                                arg3 = 0;
                                                _reloc.first_custom_dashtype = (double **)pcVar9;
                                                do {
                                                    *(int32_t *)((int64_t)pcVar9 + 8) = (int32_t)ppdVar8;
                                                    *(undefined4 *)((int64_t)pcVar9 + 0xc) = 0xffffffff;
                                                    *(double **)((int64_t)pcVar9 + 0x30) = (double *)0x0;
                                                    *(double ***)pcVar9 = ppdVar7;
                                                    ppdVar11 = (double **)0x1;
                                                    *(double **)((int64_t)pcVar9 + 0x10) = (double *)0x0;
                                                    *(double **)((int64_t)pcVar9 + 0x18) = (double *)0x0;
                                                    *(undefined4 *)((int64_t)pcVar9 + 0x20) = 0;
                                                    *(undefined4 *)((int64_t)pcVar9 + 0x24) = 0;
                                                    *(undefined4 *)((int64_t)pcVar9 + 0x28) = 0;
                                                    *(undefined4 *)((int64_t)pcVar9 + 0x2c) = 0;
code_r0x080021e3:
                                                    iVar3 = func_0x08090034(_reloc.c_token, "def$ault");
                                                    if (iVar3 == 0) {
                                                        uVar6 = func_0x08090034();
                                                        uVar5 = _reloc.num_tokens;
                                                        iVar3 = _reloc.c_token;
                                                        *(undefined4 *)((int64_t)pcVar9 + 0xc) = uVar6;
                                                        ppdVar12 = ppdVar11;
                                                        if ((int32_t)uVar5 <= iVar3) goto code_r0x08002216;
code_r0x08002274:
                                                        iVar3 = func_0x08090034(iVar3, reloc..LC4);
                                                        if (iVar3 != 0) goto code_r0x08002216;
                                                        if ((int32_t)ppdVar12 != 0) {
                                                            ppdVar7 = *(double ***)pcVar9;
                                                            if (_reloc.first_custom_dashtype != (double **)pcVar9) {
                                                                *(double ***)arg3 = *(double ***)pcVar9;
                                                                ppdVar7 = _reloc.first_custom_dashtype;
                                                            }
                                                            goto code_r0x0800229e;
                                                        }
                                                    } else {
                                                        ppdVar7 = *(double ***)pcVar9;
                                                        if (_reloc.first_custom_dashtype != (double **)pcVar9) {
                                                            *(double ***)arg3 = *(double ***)pcVar9;
                                                            ppdVar7 = _reloc.first_custom_dashtype;
                                                        }
                                                        _reloc.first_custom_dashtype = ppdVar7;
                                                        func_0x08090034();
                                                        iVar3 = _reloc.c_token + 1;
                                                        _reloc.c_token = iVar3;
                                                        if (iVar3 < (int32_t)_reloc.num_tokens) goto code_r0x08002274;
code_r0x08002216:
                                                        if (iVar10 == *(int64_t *)(in_FS_OFFSET + 0x28)) {
                                                            return (double **)0x0;
                                                        }
code_r0x08002337:
                                                        ppdVar7 = (double **)func_0x08090034();
code_r0x0800229e:
                                                        _reloc.first_custom_dashtype = ppdVar7;
                                                        func_0x08090034(pcVar9);
                                                    }
                                                    func_0x08090034(_reloc.c_token, 
                                                                    "Extraneous arguments to set dashtype");
code_r0x080022c0:
                                                    ppdVar7 = ppdVar11;
                                                    pcVar9 = (code *)func_0x08090034(0x38, "dashtype");
code_r0x080022dd:
                                                    *(code **)arg3 = pcVar9;
                                                } while( true );
                                            }
                                            _reloc.c_token = _reloc.c_token + 1;
                                            if ((_reloc.set_iterator == 0) ||
                                               (*(int32_t *)(_reloc.set_iterator + 0x40) == 0)) {
                                                func_0x08090034(reloc.dyn_contour_levels_list);
                                                func_0x08090034(reloc.dyn_contour_levels_list, 8, 5, 10);
                                            }
                                            iVar3 = func_0x08090034(_reloc.c_token, "di$screte");
                                            if (iVar3 == 0) {
                                                iVar3 = func_0x08090034(_reloc.c_token, "in$cremental");
                                                ppdVar7 = _reloc.first_custom_dashtype;
                                                if (iVar3 == 0) {
                                                    iVar3 = func_0x08090034(_reloc.c_token, "au$to");
                                                    if (iVar3 == 0) {
                                                        if (_reloc.contour_levels_kind == 2) {
                                                            func_0x08090034(_reloc.c_token, 
                                                                            
                                                            "Levels type is discrete, ignoring new number of contour levels"
                                                            );
                                                            goto code_r0x08001fcb;
                                                        }
                                                    } else {
                                                        _reloc.contour_levels_kind = 0;
                                                        ppdVar7 = (double **)(uint64_t)_reloc.c_token;
                                                        _reloc.c_token = _reloc.c_token + 1;
                                                        if ((int32_t)_reloc.num_tokens <= (int32_t)_reloc.c_token) {
                                                            _reloc.contour_levels_kind = 0;
                                                            return ppdVar7;
                                                        }
                                                        iVar3 = func_0x08090034(_reloc.c_token, reloc..LC4);
                                                        if (iVar3 != 0) {
code_r0x08001e0c:
                                                            ppdVar7 = (double **)(uint64_t)_reloc.num_tokens;
                                                            uVar5 = _reloc.c_token;
                                                            goto code_r0x08001b5e;
                                                        }
                                                    }
                                                    _reloc.contour_levels = func_0x08090034();
                                                    ppdVar7 = (double **)(uint64_t)_reloc.num_tokens;
                                                    uVar5 = _reloc.c_token;
                                                } else {
                                                    _reloc.c_token = _reloc.c_token + 1;
                                                    _reloc.contour_levels_kind = 1;
                                                    func_0x08090034();
                                                    uVar5 = _reloc.c_token;
                                                    *ppdVar7 = extraout_XMM0_Qa;
                                                    iVar3 = func_0x08090034(uVar5, reloc..LC9);
                                                    ppdVar11 = _reloc.first_custom_dashtype;
                                                    if (iVar3 == 0) {
code_r0x0800207d:
                                                        func_0x08090034(_reloc.c_token, 
                                                                        "expecting comma to separate start,incr levels")
                                                        ;
                                                        ppdVar11 = ppdVar7;
                                                        goto code_r0x0800208f;
                                                    }
                                                    _reloc.c_token = _reloc.c_token + 1;
                                                    ppdVar7 = (double **)func_0x08090034();
                                                    uVar14 = (double)extraout_XMM0_Qa_00 == 0.00000000;
                                                    ppdVar11[1] = extraout_XMM0_Qa_00;
                                                    while( true ) {
                                                        if ((bool)uVar14) {
                                                            func_0x08090034(_reloc.c_token, "increment cannot be 0");
                                                            ppdVar7 = ppdVar11;
                                                            goto code_r0x0800207d;
                                                        }
                                                        if ((int32_t)_reloc.num_tokens <= (int32_t)_reloc.c_token) {
                                                            return ppdVar7;
                                                        }
                                                        iVar3 = func_0x08090034(_reloc.c_token, reloc..LC4);
                                                        if (iVar3 != 0) goto code_r0x08001e0c;
code_r0x08001fcb:
                                                        iVar3 = func_0x08090034(_reloc.c_token, reloc..LC9);
                                                        uVar14 = iVar3 == 0;
                                                        if (!(bool)uVar14) break;
code_r0x08002051:
                                                        ppdVar7 = (double **)
                                                                  func_0x08090034(_reloc.c_token, 
                                                                                  
                                                            "expecting comma to separate incr,stop levels");
                                                    }
                                                    _reloc.c_token = _reloc.c_token + 1;
                                                    _reloc.free_dynarray = 2;
                                                    func_0x08090034();
                                                    _reloc.contour_levels =
                                                         (int32_t)((extraout_XMM0_Qa_03 -
                                                                   (double)*_reloc.first_custom_dashtype) /
                                                                   (double)_reloc.first_custom_dashtype[1] + _reloc..LC1
                                                                  );
                                                    ppdVar7 = (double **)(uint64_t)_reloc.num_tokens;
                                                    uVar5 = _reloc.c_token;
                                                }
                                            } else {
                                                _reloc.contour_levels_kind = 2;
                                                _reloc.c_token = _reloc.c_token + 1;
                                                if (((int32_t)_reloc.num_tokens <= (int32_t)_reloc.c_token) ||
                                                   (iVar3 = func_0x08090034(_reloc.c_token, reloc..LC4), iVar3 != 0)) {
                                                    uVar14 = 1;
                                                    func_0x08090034(_reloc.c_token, "expecting discrete level");
code_r0x0800203f:
                                                    func_0x08090034(_reloc.c_token, 
                                                                    "expecting comma to separate discrete levels");
                                                    goto code_r0x08002051;
                                                }
                                                pcVar9 = reloc..LC4;
                                                ppdVar11 = (double **)func_0x08090034();
                                                func_0x08090034();
                                                uVar2 = _reloc.num_tokens;
                                                uVar5 = _reloc.c_token;
                                                ppdVar7 = (double **)(uint64_t)_reloc.num_tokens;
                                                *ppdVar11 = extraout_XMM0_Qa_01;
                                                if ((int32_t)uVar5 < (int32_t)uVar2) {
                                                    do {
                                                        iVar3 = func_0x08090034(uVar5, reloc..LC4);
                                                        if (iVar3 != 0) {
                                                            ppdVar7 = (double **)(uint64_t)_reloc.num_tokens;
                                                            uVar5 = _reloc.c_token;
                                                            break;
                                                        }
                                                        iVar3 = func_0x08090034(_reloc.c_token, reloc..LC9);
                                                        uVar14 = iVar3 == 0;
                                                        if ((bool)uVar14) goto code_r0x0800203f;
                                                        _reloc.c_token = _reloc.c_token + 1;
                                                        ppdVar11 = (double **)func_0x08090034();
                                                        func_0x08090034();
                                                        uVar2 = _reloc.num_tokens;
                                                        uVar5 = _reloc.c_token;
                                                        ppdVar7 = (double **)(uint64_t)_reloc.num_tokens;
                                                        *ppdVar11 = extraout_XMM0_Qa_02;
                                                    } while ((int32_t)uVar5 < (int32_t)uVar2);
                                                }
                                                _reloc.contour_levels = (int32_t)_reloc.free_dynarray;
                                            }
                                        } else {
                                            _reloc.contour_kind = 2;
                                            _reloc.c_token = _reloc.c_token + 1;
                                            ppdVar7 = (double **)(uint64_t)_reloc.num_tokens;
                                            uVar5 = _reloc.c_token;
                                        }
                                    } else {
                                        _reloc.contour_kind = 1;
                                        _reloc.c_token = _reloc.c_token + 1;
                                        ppdVar7 = (double **)(uint64_t)_reloc.num_tokens;
                                        uVar5 = _reloc.c_token;
                                    }
                                } else {
                                    _reloc.contour_kind = 0;
                                    _reloc.c_token = _reloc.c_token + 1;
                                    ppdVar7 = (double **)(uint64_t)_reloc.num_tokens;
                                    uVar5 = _reloc.c_token;
                                }
                            } else {
                                reloc.contour_sortlevels = (code)0x0;
                                _reloc.c_token = _reloc.c_token + 1;
                                ppdVar7 = (double **)(uint64_t)_reloc.num_tokens;
                                uVar5 = _reloc.c_token;
                            }
                        } else {
                            reloc.contour_sortlevels = (code)0x1;
                            _reloc.c_token = _reloc.c_token + 1;
                            ppdVar7 = (double **)(uint64_t)_reloc.num_tokens;
                            uVar5 = _reloc.c_token;
                        }
                    } else {
                        _reloc.c_token = _reloc.c_token + 1;
                        _reloc.contour_firstlinetype = func_0x08090034();
                        ppdVar7 = (double **)(uint64_t)_reloc.num_tokens;
                        uVar5 = _reloc.c_token;
                    }
                } else {
                    _reloc.c_token = _reloc.c_token + 1;
                    _reloc.contour_pts = func_0x08090034();
                    ppdVar7 = (double **)(uint64_t)_reloc.num_tokens;
                    uVar5 = _reloc.c_token;
                }
code_r0x08001b5e:
            } while ((int32_t)uVar5 < (int32_t)ppdVar7);
        }
    } else {
        _reloc.contour_pts = 5;
        _reloc.contour_kind = 0;
        _reloc.contour_order = 4;
        _reloc.contour_levels = 5;
        _reloc.contour_levels_kind = 0;
        _reloc.contour_firstlinetype = 0;
    }
    return ppdVar7;
code_r0x0800197c:
    if (iVar10 == *(int64_t *)(in_FS_OFFSET + 0x28)) {
        return (double **)0x0;
    }
    goto code_r0x08001ab8;
}


// WARNING: Control flow encountered bad instruction data
// WARNING: Possible PIC construction at 0x08002377: Changing call to branch
// WARNING: Possible PIC construction at 0x080023ed: Changing call to branch
// WARNING: Possible PIC construction at 0x0800244d: Changing call to branch
// WARNING: Possible PIC construction at 0x080024a3: Changing call to branch
// WARNING: Possible PIC construction at 0x080024f9: Changing call to branch
// WARNING: Possible PIC construction at 0x08002526: Changing call to branch
// WARNING: Possible PIC construction at 0x08002584: Changing call to branch
// WARNING: Possible PIC construction at 0x080025d9: Changing call to branch
// WARNING: Possible PIC construction at 0x08002647: Changing call to branch
// WARNING: Possible PIC construction at 0x08002689: Changing call to branch
// WARNING: Possible PIC construction at 0x080026da: Changing call to branch
// WARNING: Possible PIC construction at 0x08002706: Changing call to branch
// WARNING: Possible PIC construction at 0x0800273d: Changing call to branch
// WARNING: Possible PIC construction at 0x0800276a: Changing call to branch
// WARNING: Possible PIC construction at 0x08002780: Changing call to branch
// WARNING: Possible PIC construction at 0x080027b0: Changing call to branch
// WARNING: Possible PIC construction at 0x0800280c: Changing call to branch
// WARNING: Possible PIC construction at 0x08002828: Changing call to branch
// WARNING: Possible PIC construction at 0x08002844: Changing call to branch
// WARNING: Possible PIC construction at 0x08002860: Changing call to branch
// WARNING: Possible PIC construction at 0x080027d0: Changing call to branch
// WARNING: Removing unreachable block (ram,0x08002865)
// WARNING: Removing unreachable block (ram,0x0800287a)
// WARNING: Removing unreachable block (ram,0x0800287e)
// WARNING: Removing unreachable block (ram,0x08002849)
// WARNING: Removing unreachable block (ram,0x08002859)
// WARNING: Removing unreachable block (ram,0x0800282d)
// WARNING: Removing unreachable block (ram,0x0800283d)
// WARNING: Removing unreachable block (ram,0x08002811)
// WARNING: Removing unreachable block (ram,0x08002821)
// WARNING: Removing unreachable block (ram,0x080027b5)
// WARNING: Removing unreachable block (ram,0x08002785)
// WARNING: Removing unreachable block (ram,0x0800276f)
// WARNING: Removing unreachable block (ram,0x08002883)
// WARNING: Removing unreachable block (ram,0x0800289a)
// WARNING: Removing unreachable block (ram,0x08002778)
// WARNING: Removing unreachable block (ram,0x08002742)
// WARNING: Removing unreachable block (ram,0x080027d0)
// WARNING: Removing unreachable block (ram,0x0800274a)
// WARNING: Removing unreachable block (ram,0x08002765)
// WARNING: Removing unreachable block (ram,0x0800270b)
// WARNING: Removing unreachable block (ram,0x080026df)
// WARNING: Removing unreachable block (ram,0x08002690)
// WARNING: Removing unreachable block (ram,0x08002720)
// WARNING: Removing unreachable block (ram,0x08002730)
// WARNING: Removing unreachable block (ram,0x080026bd)
// WARNING: Removing unreachable block (ram,0x080026e6)
// WARNING: Removing unreachable block (ram,0x080026c9)
// WARNING: Removing unreachable block (ram,0x08002700)
// WARNING: Removing unreachable block (ram,0x08002706)
// WARNING: Removing unreachable block (ram,0x080026ce)
// WARNING: Removing unreachable block (ram,0x0800264c)
// WARNING: Removing unreachable block (ram,0x08002656)
// WARNING: Removing unreachable block (ram,0x08002666)
// WARNING: Removing unreachable block (ram,0x0800267a)
// WARNING: Removing unreachable block (ram,0x08002680)
// WARNING: Removing unreachable block (ram,0x080025de)
// WARNING: Removing unreachable block (ram,0x08002620)
// WARNING: Removing unreachable block (ram,0x08002636)
// WARNING: Removing unreachable block (ram,0x080025e2)
// WARNING: Removing unreachable block (ram,0x080025f5)
// WARNING: Removing unreachable block (ram,0x080025f8)
// WARNING: Removing unreachable block (ram,0x08002612)
// WARNING: Removing unreachable block (ram,0x08002589)
// WARNING: Removing unreachable block (ram,0x080025b6)
// WARNING: Removing unreachable block (ram,0x080025cc)
// WARNING: Removing unreachable block (ram,0x0800258d)
// WARNING: Removing unreachable block (ram,0x080025a8)
// WARNING: Removing unreachable block (ram,0x0800252b)
// WARNING: Removing unreachable block (ram,0x08002561)
// WARNING: Removing unreachable block (ram,0x08002577)
// WARNING: Removing unreachable block (ram,0x0800252f)
// WARNING: Removing unreachable block (ram,0x08002542)
// WARNING: Removing unreachable block (ram,0x08002545)
// WARNING: Removing unreachable block (ram,0x0800255f)
// WARNING: Removing unreachable block (ram,0x080024fe)
// WARNING: Removing unreachable block (ram,0x080024a8)
// WARNING: Removing unreachable block (ram,0x08002452)
// WARNING: Removing unreachable block (ram,0x08002456)
// WARNING: Removing unreachable block (ram,0x080024ad)
// WARNING: Removing unreachable block (ram,0x08002503)
// WARNING: Removing unreachable block (ram,0x08002519)
// WARNING: Removing unreachable block (ram,0x080024c3)
// WARNING: Removing unreachable block (ram,0x080024d6)
// WARNING: Removing unreachable block (ram,0x080024d9)
// WARNING: Removing unreachable block (ram,0x080024f3)
// WARNING: Removing unreachable block (ram,0x0800246c)
// WARNING: Removing unreachable block (ram,0x08002480)
// WARNING: Removing unreachable block (ram,0x08002483)
// WARNING: Removing unreachable block (ram,0x0800249d)
// WARNING: Removing unreachable block (ram,0x080023f2)
// WARNING: Removing unreachable block (ram,0x080023f6)
// WARNING: Removing unreachable block (ram,0x08002440)
// WARNING: Removing unreachable block (ram,0x0800240c)
// WARNING: Removing unreachable block (ram,0x08002420)
// WARNING: Removing unreachable block (ram,0x08002423)
// WARNING: Removing unreachable block (ram,0x0800237c)
// WARNING: Removing unreachable block (ram,0x08002380)
// WARNING: Removing unreachable block (ram,0x0800238a)
// WARNING: Removing unreachable block (ram,0x080023e0)
// WARNING: Removing unreachable block (ram,0x080023a0)
// WARNING: Removing unreachable block (ram,0x080023b1)
// WARNING: Removing unreachable block (ram,0x080023b4)
// WARNING: Removing unreachable block (ram,0x08002438)
// WARNING: Removing unreachable block (ram,0x080023cb)
// WARNING: Removing unreachable block (ram,0x080023d5)
// WARNING: Removing unreachable block (ram,0x080027d5)
// WARNING: Removing unreachable block (ram,0x080026f6)
// WARNING: Removing unreachable block (ram,0x080027e5)
// WARNING: Removing unreachable block (ram,0x08002800)

void sym.set_termoptions(void)
{
    char cVar1;
    char *pcVar2;
    int32_t iVar3;
    int64_t in_FS_OFFSET;
    
    pcVar2 = (char *)(uint64_t)_reloc.c_token;
    iVar3 = _reloc.c_token + 1;
    if (_reloc.num_tokens <= iVar3) {
        _reloc.c_token = iVar3;
        return;
    }
    cVar1 = (char)_reloc.c_token;
    _reloc.c_token = iVar3;
    *pcVar2 = *pcVar2 + cVar1;
    *pcVar2 = *pcVar2 + cVar1;
    pcVar2[in_FS_OFFSET] = pcVar2[in_FS_OFFSET] + cVar1;
    *(char *)((int64_t)pcVar2 * 2) = *(char *)((int64_t)pcVar2 * 2) + cVar1;
    *pcVar2 = *pcVar2 + cVar1;
    *pcVar2 = *pcVar2 + cVar1;
    // WARNING: Bad instruction - Truncating control flow here
    halt_baddata();
}






double sym.set_grid(int64_t arg7)
{
    double dVar1;
    int32_t iVar2;
    char cVar3;
    int32_t iVar4;
    int32_t iVar5;
    int64_t iVar6;
    undefined4 *puVar7;
    undefined4 *puVar8;
    uint8_t uVar9;
    double extraout_XMM0_Qa;
    double extraout_XMM0_Qa_00;
    double extraout_XMM0_Qa_01;
    double extraout_XMM0_Qa_02;
    double extraout_XMM0_Qa_03;
    double extraout_XMM0_Qa_04;
    double extraout_XMM0_Qa_05;
    double extraout_XMM0_Qa_06;
    double extraout_XMM0_Qa_07;
    double extraout_XMM0_Qa_08;
    double extraout_XMM0_Qa_09;
    double extraout_XMM0_Qa_10;
    double extraout_XMM0_Qa_11;
    double extraout_XMM0_Qa_12;
    double extraout_XMM0_Qa_13;
    double extraout_XMM0_Qa_14;
    double extraout_XMM0_Qa_15;
    double extraout_XMM0_Qa_16;
    double dVar10;
    double extraout_XMM0_Qa_17;
    double extraout_XMM0_Qa_18;
    double extraout_XMM0_Qa_19;
    double extraout_XMM0_Qa_20;
    double extraout_XMM0_Qa_21;
    double extraout_XMM0_Qa_22;
    double extraout_XMM0_Qa_23;
    double extraout_XMM0_Qa_24;
    
    uVar9 = 0;
    _reloc.c_token = _reloc.c_token + 1;
    iVar4 = _reloc.c_token;
    do {
        while( true ) {
            while( true ) {
                while( true ) {
                    while( true ) {
                        while( true ) {
                            while( true ) {
                                while( true ) {
                                    while( true ) {
                                        while( true ) {
                                            cVar3 = '\0';
                                            do {
                                                if ((_reloc.num_tokens <= iVar4) ||
                                                   (iVar4 = func_0x08090034(iVar4, reloc..LC4),
                                                   arg7 = (int64_t)extraout_XMM0_Qa, iVar4 != 0)) {
                                                    if (cVar3 != '\0') {
                                                        return (double)arg7;
                                                    }
                                                    goto code_r0x080066a8;
                                                }
                                                cVar3 = sym.grid_match(2, "nox$tics");
                                                arg7 = (int64_t)extraout_XMM0_Qa_00;
                                                iVar4 = _reloc.c_token;
                                            } while ((((((cVar3 != '\0') ||
                                                        (cVar3 = sym.grid_match(1, "noy$tics"),
                                                        arg7 = (int64_t)extraout_XMM0_Qa_01, iVar4 = _reloc.c_token,
                                                        cVar3 != '\0')) ||
                                                       (cVar3 = sym.grid_match(0, "noz$tics"),
                                                       arg7 = (int64_t)extraout_XMM0_Qa_02, iVar4 = _reloc.c_token,
                                                       cVar3 != '\0')) ||
                                                      ((cVar3 = sym.grid_match(6, "nox2$tics"),
                                                       arg7 = (int64_t)extraout_XMM0_Qa_03, iVar4 = _reloc.c_token,
                                                       cVar3 != '\0' ||
                                                       (cVar3 = sym.grid_match(5, "noy2$tics"),
                                                       arg7 = (int64_t)extraout_XMM0_Qa_04, iVar4 = _reloc.c_token,
                                                       cVar3 != '\0')))) ||
                                                     ((cVar3 = sym.grid_match(2, "nomx$tics"),
                                                      arg7 = (int64_t)extraout_XMM0_Qa_05, iVar4 = _reloc.c_token,
                                                      cVar3 != '\0' ||
                                                      ((cVar3 = sym.grid_match(1, "nomy$tics"),
                                                       arg7 = (int64_t)extraout_XMM0_Qa_06, iVar4 = _reloc.c_token,
                                                       cVar3 != '\0' ||
                                                       (cVar3 = sym.grid_match(0, "nomz$tics"),
                                                       arg7 = (int64_t)extraout_XMM0_Qa_07, iVar4 = _reloc.c_token,
                                                       cVar3 != '\0')))))) ||
                                                    ((cVar3 = sym.grid_match(6, "nomx2$tics"),
                                                     arg7 = (int64_t)extraout_XMM0_Qa_08, iVar4 = _reloc.c_token,
                                                     cVar3 != '\0' ||
                                                     ((((cVar3 = sym.grid_match(5, "nomy2$tics"),
                                                        arg7 = (int64_t)extraout_XMM0_Qa_09, iVar4 = _reloc.c_token,
                                                        cVar3 != '\0' ||
                                                        (cVar3 = sym.grid_match(3, "nocb$tics"),
                                                        arg7 = (int64_t)extraout_XMM0_Qa_10, iVar4 = _reloc.c_token,
                                                        cVar3 != '\0')) ||
                                                       (cVar3 = sym.grid_match(3, "nomcb$tics"),
                                                       arg7 = (int64_t)extraout_XMM0_Qa_11, iVar4 = _reloc.c_token,
                                                       cVar3 != '\0')) ||
                                                      ((cVar3 = sym.grid_match(7, "nor$tics"),
                                                       arg7 = (int64_t)extraout_XMM0_Qa_12, iVar4 = _reloc.c_token,
                                                       cVar3 != '\0' ||
                                                       (cVar3 = sym.grid_match(7, "nomr$tics"),
                                                       arg7 = (int64_t)extraout_XMM0_Qa_13, iVar4 = _reloc.c_token,
                                                       cVar3 != '\0'))))))));
                                            iVar4 = func_0x08090034(_reloc.c_token, "po$lar");
                                            if (iVar4 == 0) break;
                                            *(undefined *)0x80914f4 = 1;
                                            _reloc.polar_grid_angle = _reloc..LC264;
                                            _reloc.c_token = _reloc.c_token + 1;
                                            cVar3 = func_0x08090034();
                                            arg7 = (int64_t)extraout_XMM0_Qa_14;
                                            iVar4 = _reloc.c_token;
                                            if (cVar3 != '\0') {
                                                dVar10 = (double)func_0x08090034();
                                                dVar1 = _reloc.ang2rad;
                                                if (_reloc..LC265 < dVar10) {
                                                    dVar1 = _reloc..LC266;
                                                }
                                                arg7 = (int64_t)(dVar10 * dVar1);
                                                _reloc.polar_grid_angle = (double)arg7;
                                                iVar4 = _reloc.c_token;
                                            }
                                        }
                                        iVar4 = func_0x08090034(_reloc.c_token, "nopo$lar");
                                        if (iVar4 == 0) break;
                                        _reloc.polar_grid_angle = 0.00000000;
                                        _reloc.c_token = _reloc.c_token + 1;
                                        arg7 = (int64_t)extraout_XMM0_Qa_16;
                                        iVar4 = _reloc.c_token;
                                    }
                                    iVar4 = func_0x08090034(_reloc.c_token, "spider$plot");
                                    if (iVar4 == 0) break;
                                    reloc.grid_spiderweb = (code)0x1;
                                    _reloc.c_token = _reloc.c_token + 1;
                                    arg7 = (int64_t)extraout_XMM0_Qa_17;
                                    iVar4 = _reloc.c_token;
                                }
                                iVar4 = func_0x08090034(_reloc.c_token, "back");
                                if (iVar4 == 0) break;
                                _reloc.grid_layer = 0;
                                _reloc.c_token = _reloc.c_token + 1;
                                arg7 = (int64_t)extraout_XMM0_Qa_18;
                                iVar4 = _reloc.c_token;
                            }
                            iVar4 = func_0x08090034(_reloc.c_token, "front");
                            if (iVar4 == 0) break;
                            _reloc.grid_layer = 1;
                            _reloc.c_token = _reloc.c_token + 1;
                            arg7 = (int64_t)extraout_XMM0_Qa_19;
                            iVar4 = _reloc.c_token;
                        }
                        iVar4 = func_0x08090034(_reloc.c_token, "vert$ical");
                        if (iVar4 == 0) break;
                        reloc.grid_vertical_lines = (code)0x1;
                        _reloc.c_token = _reloc.c_token + 1;
                        arg7 = (int64_t)extraout_XMM0_Qa_20;
                        iVar4 = _reloc.c_token;
                    }
                    iVar4 = func_0x08090034(_reloc.c_token, "novert$ical");
                    if (iVar4 == 0) break;
                    reloc.grid_vertical_lines = (code)0x0;
                    _reloc.c_token = _reloc.c_token + 1;
                    arg7 = (int64_t)extraout_XMM0_Qa_21;
                    iVar4 = _reloc.c_token;
                }
                iVar4 = func_0x08090034(_reloc.c_token, "layerd$efault");
                arg7 = (int64_t)extraout_XMM0_Qa_22;
                if ((iVar4 == 0) &&
                   (iVar4 = func_0x08090034(_reloc.c_token, "behind"), iVar2 = _reloc.c_token,
                   arg7 = (int64_t)extraout_XMM0_Qa_23, iVar4 == 0)) break;
                _reloc.grid_layer = 0xffffffff;
                _reloc.c_token = _reloc.c_token + 1;
                iVar4 = _reloc.c_token;
            }
            func_0x08090034(reloc.grid_lp, 2, 0);
            iVar5 = func_0x08090034(_reloc.c_token, reloc..LC9);
            iVar4 = _reloc.c_token;
            if (iVar5 != 0) break;
            if (_reloc.c_token == iVar2) goto code_r0x080066a8;
            iVar6 = 0x1a;
            puVar7 = (undefined4 *)reloc.grid_lp;
            puVar8 = (undefined4 *)reloc.mgrid_lp;
            while (arg7 = (int64_t)extraout_XMM0_Qa_24, iVar6 != 0) {
                iVar6 = iVar6 + -1;
                *puVar8 = *puVar7;
                puVar7 = puVar7 + (uint64_t)uVar9 * 0x3ffffffffffffffe + 1;
                puVar8 = puVar8 + (uint64_t)uVar9 * 0x3ffffffffffffffe + 1;
            }
        }
        _reloc.c_token = _reloc.c_token + 1;
        arg7 = func_0x08090034(reloc.mgrid_lp, 2, 0);
        iVar4 = _reloc.c_token;
    } while (_reloc.c_token != iVar2);
code_r0x080066a8:
    cVar3 = func_0x08090034();
    if (cVar3 == '\0') {
        if (reloc.polar == (code)0x0) {
            if (reloc.spiderplot == (code)0x0) {
                reloc.tmargin = (code)0x1;
                reloc.df_columnheaders = (code)0x1;
            } else {
                reloc.grid_spiderweb = (code)0x1;
            }
        } else {
            _reloc.polar_grid_angle = _reloc..LC264;
            *(undefined *)0x80914f4 = 1;
        }
    }
    return extraout_XMM0_Qa_15;
}


void sym.set_timedata.isra.0(int64_t arg1, int64_t arg2)
{
    int32_t iVar1;
    
    iVar1 = _reloc.c_token + 1;
    _reloc.c_token = iVar1;
    *(undefined4 *)arg1 = 0;
    iVar1 = func_0x08090034(iVar1, "t$ime");
    if (iVar1 == 0) {
        iVar1 = func_0x08090034(_reloc.c_token, "geo$graphic");
        if (iVar1 != 0) {
            *(undefined4 *)arg1 = 2;
            _reloc.c_token = _reloc.c_token + 1;
            *(undefined4 *)arg2 = *(undefined4 *)arg1;
            return;
        }
    } else {
        *(undefined4 *)arg1 = 1;
        _reloc.c_token = _reloc.c_token + 1;
    }
    *(undefined4 *)arg2 = *(undefined4 *)arg1;
    return;
}


void sym.set_margin.isra.0(int64_t arg1, int64_t arg2)
{
    int32_t iVar1;
    double *pdVar2;
    double *pdVar3;
    code *pcVar4;
    code *pcVar5;
    double dVar6;
    double dVar7;
    undefined8 extraout_XMM0_Qa;
    undefined8 uVar8;
    
    uVar8 = _reloc..LC275;
    *(undefined4 *)arg1 = 4;
    *(undefined8 *)arg2 = uVar8;
    _reloc.c_token = _reloc.c_token + 1;
    if (_reloc.num_tokens <= _reloc.c_token) {
        return;
    }
    iVar1 = func_0x08090034(_reloc.c_token, reloc..LC4);
    if (iVar1 != 0) {
        return;
    }
    iVar1 = func_0x08090034(_reloc.c_token, reloc..LC16);
    if (iVar1 != 0) {
        _reloc.c_token = _reloc.c_token + 1;
        iVar1 = func_0x08090034(_reloc.c_token, "sc$reen");
        if (iVar1 == 0) {
            func_0x08090034(_reloc.c_token, "expecting \'screen <fraction>\'");
            _reloc.c_token = _reloc.c_token + 1;
            iVar1 = func_0x08090034(_reloc.c_token, "def$ault");
            dVar6 = _reloc..LC191;
            dVar7 = _reloc..LC1;
            if (iVar1 == 0) {
                dVar7 = (double)func_0x08090034();
                iVar1 = func_0x08090034(_reloc.c_token, reloc..LC9);
                if (iVar1 == 0) {
                    dVar6 = _reloc..LC191 * dVar7;
                } else {
                    _reloc.c_token = _reloc.c_token + 1;
                    dVar6 = (double)func_0x08090034(extraout_XMM0_Qa, dVar7);
                }
                pdVar3 = (double *)reloc.epsilon_abs;
                do {
                    *pdVar3 = dVar7;
                    pdVar2 = pdVar3 + 0x55;
                    pdVar3[1] = dVar6;
                    pdVar3 = pdVar2;
                } while (pdVar2 != (double *)0x80917ac);
                pcVar4 = reloc.ticscale;
                while (iVar1 = func_0x08090034(_reloc.c_token, reloc..LC9), iVar1 != 0) {
                    _reloc.c_token = _reloc.c_token + 1;
                    pcVar5 = pcVar4 + 8;
                    uVar8 = func_0x08090034();
                    *(undefined8 *)(pcVar4 + 0x10) = uVar8;
                    pcVar4 = pcVar5;
                    if (pcVar5 == reloc.df_separators) {
                        return;
                    }
                }
            } else {
                _reloc.c_token = _reloc.c_token + 1;
                pdVar3 = (double *)reloc.epsilon_abs;
                do {
                    *pdVar3 = dVar7;
                    pdVar2 = pdVar3 + 0x55;
                    pdVar3[1] = dVar6;
                    pdVar3 = pdVar2;
                } while (pdVar2 != (double *)0x8091fa4);
                _reloc.ticscale = dVar7;
                _reloc.default_axis_zeroaxis = dVar6;
                _reloc.missing_val = dVar7;
                _reloc.df_separators = dVar7;
                _reloc.df_commentschars = dVar7;
            }
            return;
        }
    }
    iVar1 = func_0x08090034(_reloc.c_token, "sc$reen");
    if (iVar1 != 0) {
        *(undefined4 *)arg1 = 3;
        _reloc.c_token = _reloc.c_token + 1;
    }
    dVar6 = (double)func_0x08090034();
    dVar7 = 0.00000000;
    if (dVar6 < 0.00000000) {
        *(undefined8 *)arg2 = _reloc..LC275;
        if (*(int32_t *)arg1 != 3) {
            return;
        }
    } else {
        *(double *)arg2 = dVar6;
        if (*(int32_t *)arg1 != 3) {
            return;
        }
        if ((0.00000000 <= dVar6) && (dVar7 = dVar6, _reloc..LC1 < dVar6)) {
            *(double *)arg2 = _reloc..LC1;
            return;
        }
    }
    *(double *)arg2 = dVar7;
    return;
}


// WARNING: Control flow encountered bad instruction data
// WARNING: Possible PIC construction at 0x08006c7a: Changing call to branch
// WARNING: Possible PIC construction at 0x08006cce: Changing call to branch
// WARNING: Removing unreachable block (ram,0x08006c7f)
// WARNING: Removing unreachable block (ram,0x08006cd3)

int64_t sym.set_zeroaxis(int64_t arg7, int64_t arg8, int64_t arg9, int64_t arg10, int64_t arg11,
                        undefined8 placeholder_5, undefined8 placeholder_6, undefined8 placeholder_7, int64_t arg1)
{
    char cVar1;
    char *pcVar2;
    int64_t in_FS_OFFSET;
    int64_t extraout_XMM0_Qa;
    
    _reloc.c_token = _reloc.c_token + 1;
    pcVar2 = (char *)((int64_t)(int32_t)arg1 * 0x2a8);
    if ((*(code **)(pcVar2 + 0x80903b4) == reloc.default_axis_zeroaxis) &&
       ((_reloc.num_tokens <= _reloc.c_token ||
        (pcVar2 = (char *)func_0x08090034(_reloc.c_token, reloc..LC4), arg7 = extraout_XMM0_Qa, (int32_t)pcVar2 != 0))))
    {
        *(code **)(reloc.int_warn + (int64_t)(int32_t)arg1 * 0x2a8) = reloc.default_axis_zeroaxis;
        return arg7;
    }
    cVar1 = (char)pcVar2;
    *pcVar2 = *pcVar2 + cVar1;
    *pcVar2 = *pcVar2 + cVar1;
    pcVar2[in_FS_OFFSET] = pcVar2[in_FS_OFFSET] + cVar1;
    *(char *)((int64_t)pcVar2 * 2) = *(char *)((int64_t)pcVar2 * 2) + cVar1;
    *pcVar2 = *pcVar2 + cVar1;
    *pcVar2 = *pcVar2 + cVar1;
    // WARNING: Bad instruction - Truncating control flow here
    halt_baddata();
}


void sym.set_separator(int64_t arg1)
{
    int32_t iVar1;
    int32_t iVar2;
    undefined8 uVar3;
    int64_t iVar4;
    
    _reloc.c_token = _reloc.c_token + 1;
    func_0x08090034();
    iVar1 = _reloc.num_tokens;
    iVar2 = _reloc.c_token;
    *(undefined8 *)arg1 = 0;
    if ((iVar1 <= iVar2) || (iVar2 = func_0x08090034(iVar2, reloc..LC4), iVar2 != 0)) {
        return;
    }
    iVar2 = func_0x08090034(_reloc.c_token, "white$space");
    if (iVar2 == 0) {
        iVar2 = func_0x08090034(_reloc.c_token, "space");
        if (iVar2 != 0) {
            uVar3 = func_0x08090034(reloc..LC281);
            *(undefined8 *)arg1 = uVar3;
            _reloc.c_token = _reloc.c_token + 1;
            return;
        }
        iVar2 = func_0x08090034(_reloc.c_token, "comma");
        if (iVar2 == 0) {
            iVar2 = func_0x08090034(_reloc.c_token, reloc..LC283);
            if ((iVar2 != 0) || (iVar2 = func_0x08090034(_reloc.c_token, reloc..LC285), iVar2 != 0)) {
                uVar3 = func_0x08090034(reloc..LC284);
                *(undefined8 *)arg1 = uVar3;
                _reloc.c_token = _reloc.c_token + 1;
                return;
            }
            iVar4 = func_0x08090034();
            *(int64_t *)arg1 = iVar4;
            if (iVar4 != 0) {
                return;
            }
            func_0x08090034(_reloc.c_token, reloc..LC286);
            _reloc.c_token = _reloc.c_token + 1;
            if (_reloc.num_tokens <= _reloc.c_token) {
                return;
            }
            do {
                iVar2 = func_0x08090034(_reloc.c_token, reloc..LC4);
                if (iVar2 != 0) {
                    return;
                }
                iVar2 = func_0x08090034(_reloc.c_token, "miss$ing");
                if (iVar2 == 0) {
                    iVar2 = func_0x08090034(_reloc.c_token, "sep$arators");
                    if (iVar2 == 0) {
                        iVar2 = func_0x08090034(_reloc.c_token, "com$mentschars");
                        if (iVar2 == 0) {
                            iVar2 = func_0x08090034(_reloc.c_token, "bin$ary");
                            if (iVar2 == 0) {
                                iVar2 = func_0x08090034(_reloc.c_token, "fort$ran");
                                if (iVar2 == 0) {
                                    iVar2 = func_0x08090034(_reloc.c_token, "nofort$ran");
                                    if (iVar2 == 0) goto code_r0x08007128;
                                    reloc.df_fortran_constants = (code)0x0;
                                    _reloc.c_token = _reloc.c_token + 1;
                                } else {
                                    reloc.df_fortran_constants = (code)0x1;
                                    _reloc.c_token = _reloc.c_token + 1;
                                }
                            } else {
                                func_0x08090034();
                            }
                        } else {
                            _reloc.c_token = _reloc.c_token + 1;
                            if ((_reloc.c_token < _reloc.num_tokens) &&
                               (iVar2 = func_0x08090034(_reloc.c_token, reloc..LC4), iVar2 == 0)) {
                                iVar4 = func_0x08090034();
                                if (iVar4 == 0) {
                                    func_0x08090034(_reloc.c_token, "expected string with comments chars");
                                    goto code_r0x08007201;
                                }
                                func_0x08090034();
                                _reloc.df_commentschars = iVar4;
                            } else {
                                func_0x08090034(_reloc.df_commentschars);
                                _reloc.df_commentschars = func_0x08090034();
                            }
                        }
                    } else {
                        sym.set_separator((int64_t)reloc.df_separators);
                    }
                } else {
                    _reloc.c_token = _reloc.c_token + 1;
                    func_0x08090034();
                    _reloc.missing_val = 0;
                    if (_reloc.num_tokens <= _reloc.c_token) {
                        _reloc.missing_val = 0;
                        return;
                    }
                    iVar2 = func_0x08090034(_reloc.c_token, reloc..LC4);
                    if (iVar2 == 0) {
                        iVar2 = func_0x08090034(_reloc.c_token, reloc..LC288);
                        if ((iVar2 == 0) && (iVar2 = func_0x08090034(_reloc.c_token, reloc..LC289), iVar2 == 0)) {
                            _reloc.missing_val = func_0x08090034();
                            if (_reloc.missing_val == 0) {
                                func_0x08090034(_reloc.c_token, "expected missing-value string");
code_r0x08007128:
                                iVar2 = func_0x08090034(_reloc.c_token, "fpe_trap");
                                if (iVar2 == 0) {
                                    iVar2 = func_0x08090034(_reloc.c_token, "nofpe_trap");
                                    if (iVar2 == 0) {
                                        iVar2 = func_0x08090034(_reloc.c_token, "columnhead$ers");
                                        if (iVar2 == 0) {
                                            iVar2 = func_0x08090034(_reloc.c_token, "nocolumnhead$ers");
                                            if (iVar2 == 0) {
code_r0x08007201:
                                                func_0x08090034(_reloc.c_token, "expecting datafile modifier");
                                                func_0x08090034(_reloc.set_colorbox_tbl);
                                                func_0x08090034(_reloc.color_box);
                                                func_0x08090034(_reloc.dgrid3d_mode);
                                                _reloc.dgrid3d_mode = 0;
                                                func_0x08090034(_reloc.decimalsign);
                                                _reloc.decimalsign = 0;
                                                func_0x08090034(_reloc.lookup_table_nth_reverse);
                                                _reloc.lookup_table_nth_reverse = 0;
                                                func_0x08090034();
                                                _obj.pm3d_last_set_palette_mode = 0x30;
                                                return;
                                            }
                                            reloc.df_columnheaders = (code)0x0;
                                            _reloc.c_token = _reloc.c_token + 1;
                                        } else {
                                            reloc.df_columnheaders = (code)0x1;
                                            _reloc.c_token = _reloc.c_token + 1;
                                        }
                                    } else {
                                        reloc.df_nofpe_trap = (code)0x1;
                                        _reloc.c_token = _reloc.c_token + 1;
                                    }
                                } else {
                                    reloc.df_nofpe_trap = (code)0x0;
                                    _reloc.c_token = _reloc.c_token + 1;
                                }
                            }
                        } else {
                            _reloc.missing_val = func_0x08090034();
                            _reloc.c_token = _reloc.c_token + 1;
                        }
                    }
                }
                if (_reloc.num_tokens <= _reloc.c_token) {
                    return;
                }
            } while( true );
        }
        uVar3 = func_0x08090034(reloc..LC9);
        *(undefined8 *)arg1 = uVar3;
    }
    _reloc.c_token = _reloc.c_token + 1;
    return;
}


// WARNING: Control flow encountered bad instruction data
// WARNING: Possible PIC construction at 0x080072c4: Changing call to branch
// WARNING: Possible PIC construction at 0x080072e1: Changing call to branch
// WARNING: Possible PIC construction at 0x080078a4: Changing call to branch
// WARNING: Possible PIC construction at 0x080078d2: Changing call to branch
// WARNING: Possible PIC construction at 0x0800832b: Changing call to branch
// WARNING: Possible PIC construction at 0x0800834d: Changing call to branch
// WARNING: Possible PIC construction at 0x08008371: Changing call to branch
// WARNING: Possible PIC construction at 0x08008397: Changing call to branch
// WARNING: Possible PIC construction at 0x080083bf: Changing call to branch
// WARNING: Possible PIC construction at 0x080085fd: Changing call to branch
// WARNING: Possible PIC construction at 0x08008622: Changing call to branch
// WARNING: Possible PIC construction at 0x08008574: Changing call to branch
// WARNING: Possible PIC construction at 0x080085ae: Changing call to branch
// WARNING: Possible PIC construction at 0x080085e8: Changing call to branch
// WARNING: Possible PIC construction at 0x08007967: Changing call to branch
// WARNING: Possible PIC construction at 0x080079b1: Changing call to branch
// WARNING: Possible PIC construction at 0x08008326: Changing call to branch
// WARNING: Possible PIC construction at 0x08007517: Changing call to branch
// WARNING: Possible PIC construction at 0x0800758c: Changing call to branch
// WARNING: Possible PIC construction at 0x080075a3: Changing call to branch
// WARNING: Possible PIC construction at 0x08007659: Changing call to branch
// WARNING: Possible PIC construction at 0x080076c8: Changing call to branch
// WARNING: Possible PIC construction at 0x08007876: Changing call to branch
// WARNING: Possible PIC construction at 0x080077c2: Changing call to branch
// WARNING: Possible PIC construction at 0x08007752: Changing call to branch
// WARNING: Possible PIC construction at 0x080077ff: Changing call to branch
// WARNING: Possible PIC construction at 0x08007853: Changing call to branch
// WARNING: Possible PIC construction at 0x08007a91: Changing call to branch
// WARNING: Possible PIC construction at 0x08007a57: Changing call to branch
// WARNING: Possible PIC construction at 0x080081e7: Changing call to branch
// WARNING: Possible PIC construction at 0x08007f4a: Changing call to branch
// WARNING: Possible PIC construction at 0x080082da: Changing call to branch
// WARNING: Possible PIC construction at 0x08008005: Changing call to branch
// WARNING: Possible PIC construction at 0x0800804a: Changing call to branch
// WARNING: Possible PIC construction at 0x0800808f: Changing call to branch
// WARNING: Possible PIC construction at 0x080080d4: Changing call to branch
// WARNING: Possible PIC construction at 0x08008119: Changing call to branch
// WARNING: Possible PIC construction at 0x08008163: Changing call to branch
// WARNING: Possible PIC construction at 0x08007ca7: Changing call to branch
// WARNING: Possible PIC construction at 0x08007cc9: Changing call to branch
// WARNING: Possible PIC construction at 0x08007cf0: Changing call to branch
// WARNING: Possible PIC construction at 0x08007dcc: Changing call to branch
// WARNING: Possible PIC construction at 0x08008304: Changing call to branch
// WARNING: Possible PIC construction at 0x08008260: Changing call to branch
// WARNING: Possible PIC construction at 0x08007ee7: Changing call to branch
// WARNING: Possible PIC construction at 0x08007b3f: Changing call to branch
// WARNING: Possible PIC construction at 0x08007b8b: Changing call to branch
// WARNING: Possible PIC construction at 0x08007bd7: Changing call to branch
// WARNING: Removing unreachable block (ram,0x08007b90)
// WARNING: Removing unreachable block (ram,0x08007ba7)
// WARNING: Removing unreachable block (ram,0x08007bd0)
// WARNING: Removing unreachable block (ram,0x08007b44)
// WARNING: Removing unreachable block (ram,0x08007b5b)
// WARNING: Removing unreachable block (ram,0x080082a0)
// WARNING: Removing unreachable block (ram,0x08007b84)
// WARNING: Removing unreachable block (ram,0x08007eec)
// WARNING: Removing unreachable block (ram,0x08007ef4)
// WARNING: Removing unreachable block (ram,0x080082b8)
// WARNING: Removing unreachable block (ram,0x08007efd)
// WARNING: Removing unreachable block (ram,0x08007f03)
// WARNING: Removing unreachable block (ram,0x08008265)
// WARNING: Removing unreachable block (ram,0x0800826e)
// WARNING: Removing unreachable block (ram,0x08007dd1)
// WARNING: Removing unreachable block (ram,0x08008260)
// WARNING: Removing unreachable block (ram,0x08007ddc)
// WARNING: Removing unreachable block (ram,0x080081b0)
// WARNING: Removing unreachable block (ram,0x08007de5)
// WARNING: Removing unreachable block (ram,0x08007d28)
// WARNING: Removing unreachable block (ram,0x08008250)
// WARNING: Removing unreachable block (ram,0x08007d3c)
// WARNING: Removing unreachable block (ram,0x08007d4c)
// WARNING: Removing unreachable block (ram,0x08008240)
// WARNING: Removing unreachable block (ram,0x08007d73)
// WARNING: Removing unreachable block (ram,0x08007d83)
// WARNING: Removing unreachable block (ram,0x08008230)
// WARNING: Removing unreachable block (ram,0x08007d9c)
// WARNING: Removing unreachable block (ram,0x08007dac)
// WARNING: Removing unreachable block (ram,0x08007dee)
// WARNING: Removing unreachable block (ram,0x080082ea)
// WARNING: Removing unreachable block (ram,0x08007df7)
// WARNING: Removing unreachable block (ram,0x08008220)
// WARNING: Removing unreachable block (ram,0x08007e0b)
// WARNING: Removing unreachable block (ram,0x08007e1b)
// WARNING: Removing unreachable block (ram,0x08008210)
// WARNING: Removing unreachable block (ram,0x08007e3e)
// WARNING: Removing unreachable block (ram,0x08007e4e)
// WARNING: Removing unreachable block (ram,0x08008200)
// WARNING: Removing unreachable block (ram,0x08007e63)
// WARNING: Removing unreachable block (ram,0x08007e73)
// WARNING: Removing unreachable block (ram,0x08007dbd)
// WARNING: Removing unreachable block (ram,0x08007cf5)
// WARNING: Removing unreachable block (ram,0x08007cce)
// WARNING: Removing unreachable block (ram,0x0800839c)
// WARNING: Removing unreachable block (ram,0x08007ce4)
// WARNING: Removing unreachable block (ram,0x08007d00)
// WARNING: Removing unreachable block (ram,0x08007dc1)
// WARNING: Removing unreachable block (ram,0x08007cf0)
// WARNING: Removing unreachable block (ram,0x08007cac)
// WARNING: Removing unreachable block (ram,0x080083b0)
// WARNING: Removing unreachable block (ram,0x08007cb8)
// WARNING: Removing unreachable block (ram,0x08008168)
// WARNING: Removing unreachable block (ram,0x0800811e)
// WARNING: Removing unreachable block (ram,0x080080d9)
// WARNING: Removing unreachable block (ram,0x080080fe)
// WARNING: Removing unreachable block (ram,0x08008129)
// WARNING: Removing unreachable block (ram,0x0800814c)
// WARNING: Removing unreachable block (ram,0x08008119)
// WARNING: Removing unreachable block (ram,0x08008094)
// WARNING: Removing unreachable block (ram,0x0800804f)
// WARNING: Removing unreachable block (ram,0x08008074)
// WARNING: Removing unreachable block (ram,0x0800809f)
// WARNING: Removing unreachable block (ram,0x080080c2)
// WARNING: Removing unreachable block (ram,0x0800808f)
// WARNING: Removing unreachable block (ram,0x0800800a)
// WARNING: Removing unreachable block (ram,0x080082df)
// WARNING: Removing unreachable block (ram,0x08007f4f)
// WARNING: Removing unreachable block (ram,0x08007f57)
// WARNING: Removing unreachable block (ram,0x08007f74)
// WARNING: Removing unreachable block (ram,0x080082d1)
// WARNING: Removing unreachable block (ram,0x08007f83)
// WARNING: Removing unreachable block (ram,0x080081ec)
// WARNING: Removing unreachable block (ram,0x08007a5c)
// WARNING: Removing unreachable block (ram,0x0800828e)
// WARNING: Removing unreachable block (ram,0x08007a64)
// WARNING: Removing unreachable block (ram,0x08007a96)
// WARNING: Removing unreachable block (ram,0x08007a78)
// WARNING: Removing unreachable block (ram,0x08007804)
// WARNING: Removing unreachable block (ram,0x08007814)
// WARNING: Removing unreachable block (ram,0x0800781e)
// WARNING: Removing unreachable block (ram,0x08007833)
// WARNING: Removing unreachable block (ram,0x0800765e)
// WARNING: Removing unreachable block (ram,0x080077b0)
// WARNING: Removing unreachable block (ram,0x08007757)
// WARNING: Removing unreachable block (ram,0x080077c7)
// WARNING: Removing unreachable block (ram,0x08007671)
// WARNING: Removing unreachable block (ram,0x080076bb)
// WARNING: Removing unreachable block (ram,0x0800787b)
// WARNING: Removing unreachable block (ram,0x080076cd)
// WARNING: Removing unreachable block (ram,0x08007880)
// WARNING: Removing unreachable block (ram,0x080076d5)
// WARNING: Removing unreachable block (ram,0x080075a8)
// WARNING: Removing unreachable block (ram,0x080077e0)
// WARNING: Removing unreachable block (ram,0x080077f5)
// WARNING: Removing unreachable block (ram,0x08007841)
// WARNING: Removing unreachable block (ram,0x080077ff)
// WARNING: Removing unreachable block (ram,0x080075b4)
// WARNING: Removing unreachable block (ram,0x080075bf)
// WARNING: Removing unreachable block (ram,0x08007710)
// WARNING: Removing unreachable block (ram,0x08007760)
// WARNING: Removing unreachable block (ram,0x0800773b)
// WARNING: Removing unreachable block (ram,0x080075c7)
// WARNING: Removing unreachable block (ram,0x080075f1)
// WARNING: Removing unreachable block (ram,0x080075e0)
// WARNING: Removing unreachable block (ram,0x080075fd)
// WARNING: Removing unreachable block (ram,0x08007656)
// WARNING: Removing unreachable block (ram,0x080075d6)
// WARNING: Removing unreachable block (ram,0x080078a9)
// WARNING: Removing unreachable block (ram,0x080078c0)
// WARNING: Removing unreachable block (ram,0x08007591)
// WARNING: Removing unreachable block (ram,0x080076f4)
// WARNING: Removing unreachable block (ram,0x080076fc)
// WARNING: Removing unreachable block (ram,0x08007599)
// WARNING: Removing unreachable block (ram,0x0800751c)
// WARNING: Removing unreachable block (ram,0x08007538)
// WARNING: Removing unreachable block (ram,0x08007552)
// WARNING: Removing unreachable block (ram,0x08007858)
// WARNING: Removing unreachable block (ram,0x08007862)
// WARNING: Removing unreachable block (ram,0x08007867)
// WARNING: Removing unreachable block (ram,0x0800756d)
// WARNING: Removing unreachable block (ram,0x08007580)
// WARNING: Removing unreachable block (ram,0x08007523)
// WARNING: Removing unreachable block (ram,0x080079b6)
// WARNING: Removing unreachable block (ram,0x080079c2)
// WARNING: Removing unreachable block (ram,0x080079d0)
// WARNING: Removing unreachable block (ram,0x080079de)
// WARNING: Removing unreachable block (ram,0x08007a7e)
// WARNING: Removing unreachable block (ram,0x08007a30)
// WARNING: Removing unreachable block (ram,0x080081e0)
// WARNING: Removing unreachable block (ram,0x08007a4a)
// WARNING: Removing unreachable block (ram,0x08007a8a)
// WARNING: Removing unreachable block (ram,0x08007aa0)
// WARNING: Removing unreachable block (ram,0x08007f28)
// WARNING: Removing unreachable block (ram,0x08008376)
// WARNING: Removing unreachable block (ram,0x0800838a)
// WARNING: Removing unreachable block (ram,0x08007f43)
// WARNING: Removing unreachable block (ram,0x08007f98)
// WARNING: Removing unreachable block (ram,0x08008352)
// WARNING: Removing unreachable block (ram,0x08008362)
// WARNING: Removing unreachable block (ram,0x08007fa6)
// WARNING: Removing unreachable block (ram,0x08008015)
// WARNING: Removing unreachable block (ram,0x08008330)
// WARNING: Removing unreachable block (ram,0x0800833e)
// WARNING: Removing unreachable block (ram,0x08008038)
// WARNING: Removing unreachable block (ram,0x08008005)
// WARNING: Removing unreachable block (ram,0x08007c90)
// WARNING: Removing unreachable block (ram,0x08007c9e)
// WARNING: Removing unreachable block (ram,0x08007e90)
// WARNING: Removing unreachable block (ram,0x08007e9e)
// WARNING: Removing unreachable block (ram,0x08007ee0)
// WARNING: Removing unreachable block (ram,0x08007f10)
// WARNING: Removing unreachable block (ram,0x08007b10)
// WARNING: Removing unreachable block (ram,0x08007b28)
// WARNING: Removing unreachable block (ram,0x08007b36)
// WARNING: Removing unreachable block (ram,0x08007c20)
// WARNING: Removing unreachable block (ram,0x08007c37)
// WARNING: Removing unreachable block (ram,0x08007c3a)
// WARNING: Removing unreachable block (ram,0x08007c48)
// WARNING: Removing unreachable block (ram,0x08007c60)
// WARNING: Removing unreachable block (ram,0x08007c78)
// WARNING: Removing unreachable block (ram,0x08008309)
// WARNING: Removing unreachable block (ram,0x0800831d)
// WARNING: Removing unreachable block (ram,0x0800796c)
// WARNING: Removing unreachable block (ram,0x08007972)
// WARNING: Removing unreachable block (ram,0x08007980)
// WARNING: Removing unreachable block (ram,0x080085ed)
// WARNING: Removing unreachable block (ram,0x080085f1)
// WARNING: Removing unreachable block (ram,0x080085b3)
// WARNING: Removing unreachable block (ram,0x080085bb)
// WARNING: Removing unreachable block (ram,0x080085db)
// WARNING: Removing unreachable block (ram,0x08008579)
// WARNING: Removing unreachable block (ram,0x08008587)
// WARNING: Removing unreachable block (ram,0x08008627)
// WARNING: Removing unreachable block (ram,0x08008668)
// WARNING: Removing unreachable block (ram,0x0800863f)
// WARNING: Removing unreachable block (ram,0x08008658)
// WARNING: Removing unreachable block (ram,0x0800864b)
// WARNING: Removing unreachable block (ram,0x080078d7)
// WARNING: Removing unreachable block (ram,0x08007960)
// WARNING: Removing unreachable block (ram,0x08007915)
// WARNING: Removing unreachable block (ram,0x08007950)
// WARNING: Removing unreachable block (ram,0x080072e6)
// WARNING: Removing unreachable block (ram,0x08007510)
// WARNING: Removing unreachable block (ram,0x0800730d)
// WARNING: Removing unreachable block (ram,0x0800749f)
// WARNING: Removing unreachable block (ram,0x08007488)
// WARNING: Removing unreachable block (ram,0x080074bb)
// WARNING: Removing unreachable block (ram,0x080074e3)
// WARNING: Removing unreachable block (ram,0x08007892)
// WARNING: Removing unreachable block (ram,0x08007897)
// WARNING: Removing unreachable block (ram,0x080074fa)
// WARNING: Removing unreachable block (ram,0x080072c9)
// WARNING: Removing unreachable block (ram,0x08007bdc)
// WARNING: Removing unreachable block (ram,0x080083c4)
// WARNING: Removing unreachable block (ram,0x08008598)
// WARNING: Removing unreachable block (ram,0x0800849b)
// WARNING: Removing unreachable block (ram,0x08008518)
// WARNING: Removing unreachable block (ram,0x080085d1)
// WARNING: Removing unreachable block (ram,0x08008521)
// WARNING: Removing unreachable block (ram,0x08008524)
// WARNING: Removing unreachable block (ram,0x08008540)
// WARNING: Removing unreachable block (ram,0x080084a3)
// WARNING: Removing unreachable block (ram,0x08008602)
// WARNING: Removing unreachable block (ram,0x08008613)
// WARNING: Removing unreachable block (ram,0x080084b3)
// WARNING: Removing unreachable block (ram,0x080084c0)
// WARNING: Removing unreachable block (ram,0x080084d8)
// WARNING: Removing unreachable block (ram,0x080084e2)
// WARNING: Removing unreachable block (ram,0x080085fd)
// WARNING: Removing unreachable block (ram,0x08008503)
// WARNING: Removing unreachable block (ram,0x08007bf3)
// WARNING: Removing unreachable block (ram,0x08007ac0)
// WARNING: Removing unreachable block (ram,0x08007990)
// WARNING: Removing unreachable block (ram,0x080079a4)
// WARNING: Removing unreachable block (ram,0x08007ad2)
// WARNING: Removing unreachable block (ram,0x08007ade)
// WARNING: Removing unreachable block (ram,0x08007aeb)
// WARNING: Removing unreachable block (ram,0x08007af8)
// WARNING: Removing unreachable block (ram,0x0800791f)
// WARNING: Removing unreachable block (ram,0x0800832b)
// WARNING: Removing unreachable block (ram,0x08007938)
// WARNING: Recovered jumptable eliminated as dead code

void sym.set_palette_defined(int64_t arg7)
{
    undefined *in_FS_OFFSET;
    
    *in_FS_OFFSET = *in_FS_OFFSET;
    // WARNING: Bad instruction - Truncating control flow here
    halt_baddata();
}


// WARNING: Could not reconcile some variable overlaps

void sym.set_tic_prop(int64_t arg7, undefined8 placeholder_1, undefined8 placeholder_2, undefined8 placeholder_3,
                     undefined8 placeholder_4, undefined8 placeholder_5, undefined8 placeholder_6,
                     undefined8 placeholder_7, int64_t arg1)
{
    int32_t iVar1;
    bool bVar2;
    int32_t iVar3;
    uint32_t uVar4;
    undefined4 uVar5;
    uint32_t uVar6;
    undefined8 uVar7;
    int64_t iVar8;
    double dVar9;
    uint32_t *unaff_RBP;
    char *pcVar10;
    uint32_t *puVar11;
    uint32_t *puVar12;
    undefined4 *puVar13;
    int32_t unaff_R15D;
    int64_t in_FS_OFFSET;
    bool bVar14;
    undefined8 extraout_XMM0_Qa;
    undefined8 extraout_XMM0_Qa_00;
    double extraout_XMM0_Qa_01;
    double extraout_XMM0_Qa_02;
    double dVar15;
    double extraout_XMM0_Qa_03;
    double extraout_XMM0_Qa_04;
    double extraout_XMM0_Qa_05;
    double dVar16;
    double dVar17;
    char cStack113;
    double dStack112;
    double dStack104;
    double dStack96;
    undefined2 uStack76;
    char acStack74 [10];
    int64_t iStack64;
    
    iVar1 = *(int32_t *)(arg1 + 0x18c);
    iStack64 = *(int64_t *)(in_FS_OFFSET + 0x28);
    iVar3 = func_0x08090034(arg7, placeholder_1, placeholder_2, placeholder_3, _reloc.c_token, "tict$ics");
    if (iVar3 == 0) {
        bVar2 = false;
    } else {
        if (10 < iVar1) {
            bVar2 = false;
            puVar13 = (undefined4 *)0x0;
            pcVar10 = (char *)0x0;
            goto code_r0x08008a58;
        }
        bVar2 = true;
    }
    puVar13 = (undefined4 *)0x0;
    pcVar10 = (char *)0x0;
    if (iVar1 < 8) {
        acStack74[0] = '\0';
        pcVar10 = acStack74;
        uStack76 = 0x6f6e;
        unaff_RBP = (uint32_t *)&uStack76;
        uVar7 = func_0x08090034(iVar1);
        func_0x08090034(pcVar10, uVar7, 10);
        puVar12 = unaff_RBP;
        do {
            puVar11 = puVar12;
            uVar4 = *puVar11 + 0xfefefeff & ~*puVar11;
            uVar6 = uVar4 & 0x80808080;
            puVar12 = puVar11 + 1;
        } while (uVar6 == 0);
        bVar14 = (uVar4 & 0x8080) == 0;
        if (bVar14) {
            uVar6 = uVar6 >> 0x10;
        }
        if (bVar14) {
            puVar12 = (uint32_t *)((int64_t)puVar11 + 6);
        }
        puVar13 = (undefined4 *)((int64_t)puVar12 + (-3 - (uint64_t)CARRY1((uint8_t)uVar6, (uint8_t)uVar6)));
        *puVar13 = 0x63692474;
        *(undefined2 *)(puVar13 + 1) = 0x73;
    }
code_r0x08008a58:
    if (*(int32_t *)0x8090730 == iVar1) {
        pcVar10 = "mtics";
    }
    iVar3 = func_0x08090034(_reloc.c_token, pcVar10);
    if (((iVar3 != 0) || (10 < iVar1)) || (bVar2)) {
        cStack113 = '\0';
        *(undefined *)(arg1 + 0x100) = 0;
        unaff_RBP = (uint32_t *)0x0;
        _reloc.c_token = _reloc.c_token + 1;
        unaff_R15D = ~-(uint32_t)(iVar1 == 0) + 6;
        goto code_r0x08008d34;
    }
code_r0x08008a95:
    if (7 < iVar1) goto code_r0x08008c00;
code_r0x08008a9f:
    unaff_RBP = (uint32_t *)&uStack76;
    iVar3 = func_0x08090034(_reloc.c_token, unaff_RBP);
    if (iVar3 != 0) {
        *(uint32_t *)(arg1 + 0xb8) = *(uint32_t *)(arg1 + 0xb8) & 0xfffffffc;
        _reloc.c_token = _reloc.c_token + 1;
    }
    *puVar13 = 0x6974246d;
    *(undefined2 *)(puVar13 + 1) = 0x7363;
    *(undefined *)((int64_t)puVar13 + 6) = 0;
    iVar3 = func_0x08090034(_reloc.c_token, pcVar10);
    if (iVar3 != 0) {
        if (*(char *)(arg1 + 0x100) == '\0') {
            func_0x08090034();
            *(undefined8 *)(arg1 + 0xe0) = 0;
        }
        *(undefined4 *)(arg1 + 0xc0) = 4;
        _reloc.c_token = _reloc.c_token + 1;
    }
    iVar3 = func_0x08090034(_reloc.c_token, unaff_RBP);
    if (iVar3 != 0) {
        *(undefined4 *)(arg1 + 0xc0) = 1;
        _reloc.c_token = _reloc.c_token + 1;
    }
    *puVar13 = 0x69742464;
    *(undefined2 *)(puVar13 + 1) = 0x7363;
    *(undefined *)((int64_t)puVar13 + 6) = 0;
    iVar3 = func_0x08090034(_reloc.c_token, pcVar10);
    if (iVar3 != 0) {
        if (*(char *)(arg1 + 0x100) == '\0') {
            func_0x08090034();
            *(undefined8 *)(arg1 + 0xe0) = 0;
        }
        *(undefined4 *)(arg1 + 0xc0) = 5;
        _reloc.c_token = _reloc.c_token + 1;
    }
    iVar3 = func_0x08090034(_reloc.c_token, unaff_RBP);
    if (iVar3 != 0) {
        _reloc.c_token = _reloc.c_token + 1;
        *(undefined4 *)(arg1 + 0xc0) = 1;
    }
    *pcVar10 = 'm';
    uVar7 = func_0x08090034(iVar1);
    func_0x08090034(pcVar10 + 1, uVar7);
    iVar8 = func_0x08090034();
    *(undefined4 *)(pcVar10 + iVar8) = 0x63692474;
    *(undefined2 *)((int64_t)(pcVar10 + iVar8) + 4) = 0x73;
    iVar3 = func_0x08090034(_reloc.c_token, pcVar10);
    uVar6 = _reloc.c_token;
    if (iVar3 != 0) {
        _reloc.c_token = _reloc.c_token + 1;
        if (((int32_t)_reloc.c_token < _reloc.num_tokens) &&
           (iVar3 = func_0x08090034(_reloc.c_token, reloc..LC4), iVar3 == 0)) {
            iVar3 = func_0x08090034(_reloc.c_token, "def$ault");
            if (iVar3 == 0) {
                iVar3 = func_0x08090034();
                uVar6 = _reloc.c_token;
                if (iVar3 - 1U < 100) {
                    *(undefined4 *)(arg1 + 0x144) = 2;
                    *(double *)(arg1 + 0x148) = (double)iVar3;
                } else {
                    *(undefined4 *)(arg1 + 0x144) = 1;
                    func_0x08090034(uVar6 - 1, "Expecting number of intervals");
                    uVar6 = _reloc.c_token;
                }
            } else {
                *(undefined4 *)(arg1 + 0x144) = 1;
                _reloc.c_token = _reloc.c_token + 1;
                uVar6 = _reloc.c_token;
            }
        } else {
            uVar6 = _reloc.c_token;
            *(undefined4 *)(arg1 + 0x144) = 3;
        }
    }
    iVar3 = func_0x08090034(uVar6, unaff_RBP);
    if (iVar3 != 0) {
        _reloc.c_token = _reloc.c_token + 1;
        *(undefined4 *)(arg1 + 0x144) = 0;
    }
code_r0x08008c00:
    if (iStack64 == *(int64_t *)(in_FS_OFFSET + 0x28)) {
        return;
    }
    func_0x08090034();
    do {
        iVar3 = func_0x08090034(_reloc.c_token, "l$eft");
        if (iVar3 == 0) {
            iVar3 = func_0x08090034(_reloc.c_token, "c$entre");
            if ((iVar3 == 0) && (iVar3 = func_0x08090034(_reloc.c_token, "c$enter"), iVar3 == 0)) {
                iVar3 = func_0x08090034(_reloc.c_token, "ri$ght");
                if (iVar3 == 0) {
                    iVar3 = func_0x08090034(_reloc.c_token, "autoj$ustify");
                    if (iVar3 == 0) {
                        iVar3 = func_0x08090034(_reloc.c_token, "range$limited");
                        if (iVar3 == 0) {
                            iVar3 = func_0x08090034(_reloc.c_token, "norange$limited");
                            if (iVar3 == 0) {
                                iVar3 = func_0x08090034(_reloc.c_token, "f$ont");
                                if (iVar3 == 0) {
                                    iVar3 = func_0x08090034(_reloc.c_token, "geo$graphic");
                                    if (iVar3 == 0) {
code_r0x0800948d:
                                        iVar3 = func_0x08090034(_reloc.c_token, "time$date");
                                        if (iVar3 == 0) {
                                            iVar3 = func_0x08090034(_reloc.c_token, "numeric");
                                            if (iVar3 == 0) {
                                                iVar3 = func_0x08090034(_reloc.c_token, "format");
                                                if (iVar3 == 0) {
                                                    iVar3 = func_0x08090034(_reloc.c_token, "enh$anced");
                                                    if (iVar3 == 0) {
code_r0x080095b3:
                                                        iVar3 = func_0x08090034(_reloc.c_token, "noenh$anced");
                                                        if (iVar3 == 0) {
                                                            iVar3 = func_0x08090034(_reloc.c_token, reloc..LC141);
                                                            if ((iVar3 == 0) &&
                                                               (iVar3 = func_0x08090034(_reloc.c_token, "text$color"),
                                                               iVar3 == 0)) {
                                                                iVar3 = func_0x08090034(_reloc.c_token, "au$tofreq");
                                                                if (iVar3 == 0) {
                                                                    iVar3 = func_0x08090034(_reloc.c_token, "log$scale")
                                                                    ;
                                                                    if (iVar3 == 0) {
                                                                        iVar3 = func_0x08090034(_reloc.c_token, 
                                                                                                "nolog$scale");
                                                                        if (iVar3 == 0) {
                                                                            iVar3 = func_0x08090034(_reloc.c_token, 
                                                                                                    reloc..LC379);
                                                                            if (iVar3 == 0) {
                                                                                if ((bVar2) &&
                                                                                   ((iVar3 = func_0x08090034(
                                                            _reloc.c_token, "front"), iVar3 != 0 ||
                                                            (iVar3 = func_0x08090034(_reloc.c_token, "back"), iVar3 != 0
                                                            )))) {
code_r0x080098ad:
                                                                _reloc.c_token = _reloc.c_token + 1;
                                                                uVar6 = _reloc.c_token;
                                                            } else {
                                                                if (_reloc.num_tokens <= (int32_t)_reloc.c_token)
                                                                goto code_r0x08008d88;
                                                                iVar3 = func_0x08090034(_reloc.c_token, reloc..LC4);
                                                                uVar6 = _reloc.c_token;
                                                                if (iVar3 == 0) {
                                                                    iVar3 = func_0x08090034(_reloc.c_token, reloc..LC312
                                                                                           );
                                                                    if (iVar3 != 0) {
                                                                        _reloc.c_token = _reloc.c_token + 1;
                                                                        if (*(char *)(arg1 + 0x100) == '\0') {
                                                                            if ((_reloc.set_iterator == 0) ||
                                                                               (*(int32_t *)(_reloc.set_iterator + 0x40)
                                                                                == 0)) {
                                                                                func_0x08090034();
                                                                                *(undefined8 *)(arg1 + 0xe0) = 0;
                                                                                if (*(char *)(arg1 + 0x100) != '\0')
                                                                                goto code_r0x0800978e;
                                                                            }
                                                                            *(undefined4 *)(arg1 + 0xc0) = 3;
                                                                        }
code_r0x0800978e:
                                                                        if (_reloc.num_tokens <= (int32_t)_reloc.c_token
                                                                           ) goto code_r0x080098c1;
                                                                        iVar3 = func_0x08090034(_reloc.c_token, 
                                                                                                reloc..LC4);
                                                                        if (iVar3 != 0) goto code_r0x08009879;
                                                                        uVar6 = func_0x08090034(_reloc.c_token, 
                                                                                                reloc..LC319);
                                                                        dStack104 = (double)(uint64_t)uVar6;
                                                                        if (uVar6 != 0) goto code_r0x08009879;
                                                                        dStack96 = (double)(uint64_t)_reloc.c_token;
                                                                        dStack96._0_4_ = _reloc.c_token;
                                                                        dStack112 = (double)func_0x08090034();
                                                                        if ((dStack112 != 0.00000000) &&
                                                                           (*(int32_t *)(arg1 + 0x16c) == 1)) {
                                                                            iVar3 = func_0x08090034(_reloc.c_token, 
                                                                                                    reloc..LC9);
                                                                            if (iVar3 == 0) {
code_r0x08009bbb:
                                                                                iVar3 = func_0x08090034(_reloc.c_token, 
                                                                                                        reloc..LC319);
                                                                                if (iVar3 == 0) goto code_r0x080097f8;
                                                                            }
                                                                            _reloc.c_token = dStack96._0_4_;
                                                                            func_0x08090034(dStack112);
                                                                            dStack112 = 0.00000000;
                                                                        }
code_r0x080097f8:
                                                                        func_0x08090034();
                                                                        dStack96 = extraout_XMM0_Qa_01;
                                                                        if ((int32_t)_reloc.c_token < _reloc.num_tokens)
                                                                        goto code_r0x080098ec;
code_r0x08009818:
                                                                        func_0x08090034(dStack96, arg1, dStack112, 
                                                                                        (uint64_t)dStack104 & 0xffffffff
                                                                                       );
                                                                        func_0x08090034();
                                                                        if ((int32_t)_reloc.c_token < _reloc.num_tokens)
                                                                        {
                                                                            iVar3 = func_0x08090034(_reloc.c_token, 
                                                                                                    reloc..LC4);
                                                                            if ((iVar3 == 0) &&
                                                                               (iVar3 = func_0x08090034(_reloc.c_token, 
                                                                                                        reloc..LC9),
                                                                               iVar3 != 0)) break;
code_r0x08009879:
                                                                            if ((((int32_t)_reloc.c_token <
                                                                                  _reloc.num_tokens) &&
                                                                                (iVar3 = func_0x08090034(_reloc.c_token
                                                                                                         , reloc..LC4),
                                                                                iVar3 == 0)) &&
                                                                               (iVar3 = func_0x08090034(_reloc.c_token, 
                                                                                                        reloc..LC319),
                                                                               iVar3 != 0)) goto code_r0x080098ad;
                                                                        }
code_r0x080098c1:
                                                                        func_0x08090034(*(undefined8 *)(arg1 + 0xe0));
                                                                        uVar6 = _reloc.c_token;
                                                                        *(undefined8 *)(arg1 + 0xe0) = 0;
                                                                        func_0x08090034(uVar6, 
                                                            "expecting right parenthesis )");
code_r0x080098ec:
                                                            iVar3 = func_0x08090034();
                                                            if (((iVar3 == 0) &&
                                                                (iVar3 = func_0x08090034(_reloc.c_token, reloc..LC9),
                                                                iVar3 == 0)) &&
                                                               (iVar3 = func_0x08090034(_reloc.c_token, reloc..LC319),
                                                               iVar3 == 0)) {
                                                                uVar6 = func_0x08090034();
                                                                dStack104 = (double)(uint64_t)uVar6;
                                                            }
                                                            goto code_r0x08009818;
                                                            }
                                                            func_0x08090034();
                                                            iVar3 = func_0x08090034(_reloc.c_token, reloc..LC9);
                                                            dVar9 = extraout_XMM0_Qa_02;
                                                            if (iVar3 != 0) goto code_r0x08009a73;
                                                            dVar16 = _reloc..LC352;
                                                            dVar17 = extraout_XMM0_Qa_02;
                                                            dVar15 = _reloc..LC351;
                                                            dStack112 = extraout_XMM0_Qa_02;
                                                            uVar6 = _reloc.c_token;
                                                            if (extraout_XMM0_Qa_02 <= 0.00000000) {
                                                                do {
                                                                    func_0x08090034(uVar6, "increment must be positive")
                                                                    ;
code_r0x08009a73:
                                                                    uVar6 = _reloc.c_token + 1;
                                                                    dStack104 = (double)(uint64_t)uVar6;
                                                                    _reloc.c_token = uVar6;
                                                                    func_0x08090034();
                                                                    iVar3 = func_0x08090034(_reloc.c_token, reloc..LC9);
                                                                    dVar15 = _reloc..LC351;
                                                                    dStack112 = extraout_XMM0_Qa_03;
                                                                    dStack96 = dVar9;
                                                                    if (iVar3 != 0) {
                                                                        _reloc.c_token = _reloc.c_token + 1;
                                                                        func_0x08090034(_reloc..LC351);
                                                                        dVar15 = extraout_XMM0_Qa_04;
                                                                        dStack112 = dVar9;
                                                                        dStack96 = extraout_XMM0_Qa_03;
                                                                    }
                                                                } while ((dVar9 < dVar15) &&
                                                                        (extraout_XMM0_Qa_03 <= 0.00000000));
                                                                dVar16 = dVar9;
                                                                dVar17 = extraout_XMM0_Qa_03;
                                                                if (dVar15 < dVar9) {
                                                                    if (_reloc..LC3 <= extraout_XMM0_Qa_03) {
                                                                        func_0x08090034(uVar6, 
                                                            "increment must be negative");
                                                            goto code_r0x08009bbb;
                                                            }
                                                            func_0x08090034((dVar15 * _reloc..LC382 - dVar9) /
                                                                            extraout_XMM0_Qa_03);
                                                            dVar17 = (double)((uint64_t)extraout_XMM0_Qa_03 ^
                                                                             _reloc..LC383);
                                                            dVar16 = dVar9 + extraout_XMM0_Qa_05 * extraout_XMM0_Qa_03;
                                                            dVar15 = dVar9;
                                                            dStack112 = extraout_XMM0_Qa_03;
                                                            dStack104 = dVar9;
                                                            }
                                                            }
                                                            if (*(char *)(arg1 + 0x100) == '\0') {
                                                                func_0x08090034();
                                                                *(undefined8 *)(arg1 + 0xe0) = 0;
                                                                dStack112 = dVar16;
                                                                dStack104 = dVar17;
                                                                dStack96 = dVar15;
                                                            }
                                                            *(undefined4 *)(arg1 + 0xc0) = 2;
                                                            *(double *)(arg1 + 0xe8) = dVar16;
                                                            *(double *)(arg1 + 0xf0) = dVar17;
                                                            *(double *)(arg1 + 0xf8) = dVar15;
                                                            uVar6 = _reloc.c_token;
                                                            }
                                                            }
                                                            } else {
                                                                *(undefined *)(arg1 + 0x100) = 1;
                                                                _reloc.c_token = _reloc.c_token + 1;
                                                                uVar6 = _reloc.c_token;
                                                            }
                                                            } else {
                                                                *(undefined *)(arg1 + 0x132) = 0;
                                                                _reloc.c_token = _reloc.c_token + 1;
                                                                uVar6 = _reloc.c_token;
                                                            }
                                                            } else {
                                                                *(undefined *)(arg1 + 0x132) = 1;
                                                                _reloc.c_token = _reloc.c_token + 1;
                                                                uVar6 = _reloc.c_token;
                                                            }
                                                            } else {
                                                                _reloc.c_token = _reloc.c_token + 1;
                                                                if (*(char *)(arg1 + 0x100) == '\0') {
                                                                    func_0x08090034();
                                                                    *(undefined8 *)(arg1 + 0xe0) = 0;
                                                                }
                                                                *(undefined4 *)(arg1 + 0xc0) = 1;
                                                                uVar6 = _reloc.c_token;
                                                            }
                                                            } else {
                                                                func_0x08090034(arg1 + 0xd0, unaff_R15D);
                                                                uVar6 = _reloc.c_token;
                                                            }
                                                        } else {
                                                            *(undefined *)(arg1 + 0x131) = 0;
                                                            _reloc.c_token = _reloc.c_token + 1;
                                                            uVar6 = _reloc.c_token;
                                                        }
                                                    } else {
                                                        *(undefined *)(arg1 + 0x131) = 1;
                                                        _reloc.c_token = _reloc.c_token + 1;
                                                        uVar6 = _reloc.c_token;
                                                    }
                                                } else {
                                                    _reloc.c_token = _reloc.c_token + 1;
                                                    if (((int32_t)_reloc.c_token < _reloc.num_tokens) &&
                                                       (iVar3 = func_0x08090034(_reloc.c_token, reloc..LC4), iVar3 == 0)
                                                       ) {
                                                        dVar9 = (double)func_0x08090034();
                                                        if (dVar9 == 0.00000000) {
                                                            func_0x08090034(_reloc.c_token, "expected format");
                                                            goto code_r0x080095b3;
                                                        }
                                                    } else {
                                                        dVar9 = (double)func_0x08090034(reloc..LC346);
                                                    }
                                                    func_0x08090034();
                                                    uVar6 = _reloc.c_token;
                                                    *(double *)(arg1 + 0x178) = dVar9;
                                                    dStack112 = dVar9;
                                                }
                                            } else {
                                                *(undefined4 *)(arg1 + 0x170) = 0;
                                                _reloc.c_token = _reloc.c_token + 1;
                                                uVar6 = _reloc.c_token;
                                            }
                                        } else {
                                            *(undefined4 *)(arg1 + 0x170) = 1;
                                            _reloc.c_token = _reloc.c_token + 1;
                                            uVar6 = _reloc.c_token;
                                        }
                                    } else {
                                        *(undefined4 *)(arg1 + 0x170) = 2;
                                        _reloc.c_token = _reloc.c_token + 1;
                                        uVar6 = _reloc.c_token;
                                    }
                                } else {
                                    _reloc.c_token = _reloc.c_token + 1;
                                    iVar3 = func_0x08090034();
                                    if ((iVar3 == 0) && (iVar3 = func_0x08090034(), iVar3 != 3)) {
                                        func_0x08090034(_reloc.c_token, "expected font");
                                        goto code_r0x0800948d;
                                    }
                                    func_0x08090034();
                                    *(undefined8 *)(arg1 + 200) = 0;
                                    uVar7 = func_0x08090034();
                                    uVar6 = _reloc.c_token;
                                    *(undefined8 *)(arg1 + 200) = uVar7;
                                }
                            } else {
                                *(undefined *)(arg1 + 0x130) = 0;
                                _reloc.c_token = _reloc.c_token + 1;
                                uVar6 = _reloc.c_token;
                            }
                        } else {
                            *(undefined *)(arg1 + 0x130) = 1;
                            _reloc.c_token = _reloc.c_token + 1;
                            uVar6 = _reloc.c_token;
                        }
                    } else {
                        *(undefined *)(arg1 + 0x290) = 0;
                        _reloc.c_token = _reloc.c_token + 1;
                        uVar6 = _reloc.c_token;
                    }
                } else {
                    *(undefined *)(arg1 + 0x290) = 1;
                    *(undefined4 *)(arg1 + 0x13c) = 2;
                    _reloc.c_token = _reloc.c_token + 1;
                    uVar6 = _reloc.c_token;
                }
            } else {
                *(undefined *)(arg1 + 0x290) = 1;
                *(undefined4 *)(arg1 + 0x13c) = 1;
                _reloc.c_token = _reloc.c_token + 1;
                uVar6 = _reloc.c_token;
            }
        } else {
            *(undefined *)(arg1 + 0x290) = 1;
            *(undefined4 *)(arg1 + 0x13c) = 0;
            _reloc.c_token = _reloc.c_token + 1;
            uVar6 = _reloc.c_token;
        }
code_r0x08008d16:
        if (_reloc.num_tokens <= (int32_t)uVar6) goto code_r0x08008d88;
        while( true ) {
            iVar3 = func_0x08090034(uVar6, reloc..LC4);
            if (iVar3 != 0) goto code_r0x08008d88;
code_r0x08008d34:
            iVar3 = func_0x08090034(_reloc.c_token, "cs");
            if (iVar3 != 0) {
                unaff_RBP = (uint32_t *)0x1;
                *(uint32_t *)(arg1 + 0xb8) = *(uint32_t *)(arg1 + 0xb8) & 0xfffffffe | 2;
                _reloc.c_token = _reloc.c_token + 1;
                uVar6 = _reloc.c_token;
                goto code_r0x08008d16;
            }
            iVar3 = func_0x08090034(_reloc.c_token, "bo$rder");
            if (iVar3 == 0) break;
            *(uint32_t *)(arg1 + 0xb8) = *(uint32_t *)(arg1 + 0xb8) & 0xfffffffd | 1;
            _reloc.c_token = _reloc.c_token + 1;
            uVar6 = _reloc.c_token;
            if (_reloc.num_tokens <= (int32_t)_reloc.c_token) goto code_r0x08008d88;
        }
        iVar3 = func_0x08090034(_reloc.c_token, "mi$rror");
        if (iVar3 != 0) {
            *(uint32_t *)(arg1 + 0xb8) = *(uint32_t *)(arg1 + 0xb8) | 4;
            cStack113 = '\x01';
            _reloc.c_token = _reloc.c_token + 1;
            uVar6 = _reloc.c_token;
            goto code_r0x08008d16;
        }
        iVar3 = func_0x08090034(_reloc.c_token, "nomi$rror");
        if (iVar3 != 0) {
            *(uint32_t *)(arg1 + 0xb8) = *(uint32_t *)(arg1 + 0xb8) & 0xfffffffb;
            cStack113 = '\x01';
            _reloc.c_token = _reloc.c_token + 1;
            uVar6 = _reloc.c_token;
            goto code_r0x08008d16;
        }
        iVar3 = func_0x08090034(_reloc.c_token, "in$wards");
        if (iVar3 != 0) {
            *(undefined *)(arg1 + 0x168) = 1;
            _reloc.c_token = _reloc.c_token + 1;
            uVar6 = _reloc.c_token;
            goto code_r0x08008d16;
        }
        iVar3 = func_0x08090034(_reloc.c_token, "out$wards");
        if (iVar3 != 0) {
            *(undefined *)(arg1 + 0x168) = 0;
            _reloc.c_token = _reloc.c_token + 1;
            uVar6 = _reloc.c_token;
            goto code_r0x08008d16;
        }
        iVar3 = func_0x08090034(_reloc.c_token, "sc$ale");
        if (iVar3 != 0) {
            _reloc.c_token = _reloc.c_token + 1;
            iVar3 = func_0x08090034(_reloc.c_token, "def$ault");
            if (iVar3 == 0) {
                func_0x08090034();
                uVar6 = _reloc.c_token;
                *(undefined8 *)(arg1 + 0x150) = extraout_XMM0_Qa;
                iVar3 = func_0x08090034(uVar6, reloc..LC9);
                if (iVar3 == 0) {
                    *(double *)(arg1 + 0x158) = _reloc..LC191 * *(double *)(arg1 + 0x150);
                } else {
                    _reloc.c_token = _reloc.c_token + 1;
                    func_0x08090034();
                    *(undefined8 *)(arg1 + 0x158) = extraout_XMM0_Qa_00;
                }
                uVar6 = _reloc.c_token;
                if (bVar2) {
                    while (iVar3 = func_0x08090034(_reloc.c_token, reloc..LC9), uVar6 = _reloc.c_token, iVar3 != 0) {
                        _reloc.c_token = _reloc.c_token + 1;
                        func_0x08090034();
                    }
                }
            } else {
                *(undefined8 *)(arg1 + 0x150) = _reloc..LC1;
                *(double *)(arg1 + 0x158) = _reloc..LC191;
                _reloc.c_token = _reloc.c_token + 1;
                uVar6 = _reloc.c_token;
            }
            goto code_r0x08008d16;
        }
        iVar3 = func_0x08090034(_reloc.c_token, "ro$tate");
        if (iVar3 != 0) {
            *(undefined4 *)(arg1 + 0x138) = 0xfffffef2;
            _reloc.c_token = _reloc.c_token + 1;
            iVar3 = func_0x08090034(_reloc.c_token, reloc..LC362);
            uVar6 = _reloc.c_token;
            if (iVar3 != 0) {
                _reloc.c_token = _reloc.c_token + 1;
                uVar5 = func_0x08090034();
                uVar6 = _reloc.c_token;
                *(undefined4 *)(arg1 + 0x138) = uVar5;
            }
            goto code_r0x08008d16;
        }
        iVar3 = func_0x08090034(_reloc.c_token, "noro$tate");
        if (iVar3 != 0) {
            *(undefined4 *)(arg1 + 0x138) = 0;
            _reloc.c_token = _reloc.c_token + 1;
            uVar6 = _reloc.c_token;
            goto code_r0x08008d16;
        }
        iVar3 = func_0x08090034(_reloc.c_token, "off$set");
        if (iVar3 != 0) {
            _reloc.c_token = _reloc.c_token + 1;
            func_0x08090034(arg1 + 0x108, 4, 3);
            uVar6 = _reloc.c_token;
            goto code_r0x08008d16;
        }
        iVar3 = func_0x08090034(_reloc.c_token, "nooff$set");
        if (iVar3 != 0) {
            *(undefined4 *)(arg1 + 0x110) = 4;
            *(undefined8 *)(arg1 + 0x118) = 0;
            *(undefined8 *)(arg1 + 0x120) = 0;
            uVar6 = _reloc.c_token + 1;
            _reloc.c_token = uVar6;
            *(undefined8 *)(arg1 + 0x108) = 0x400000004;
            *(undefined8 *)(arg1 + 0x128) = 0;
            goto code_r0x08008d16;
        }
    } while( true );
    _reloc.c_token = _reloc.c_token + 1;
    goto code_r0x0800978e;
code_r0x08008d88:
    if (bVar2) goto code_r0x08008c00;
    uVar6 = *(uint32_t *)(arg1 + 0xb8);
    if (((uVar6 & 3) != 0) || ((char)unaff_RBP != '\0')) goto code_r0x08008a95;
    if (10 < iVar1) {
        *(uint32_t *)(arg1 + 0xb8) = uVar6 | 2;
        goto code_r0x08008c00;
    }
    *(uint32_t *)(arg1 + 0xb8) = uVar6 | 1;
    if ((cStack113 != '\0') || (2 < iVar1 - 1U)) goto code_r0x08008a95;
    *(uint32_t *)(arg1 + 0xb8) = uVar6 | 5;
    goto code_r0x08008a9f;
}










// WARNING: Control flow encountered bad instruction data

void sym.delete_linestyle(int64_t arg1, int64_t arg2, int64_t arg3)
{
    char cVar1;
    int64_t in_FS_OFFSET;
    
    if (arg3 != 0) {
        if (*(int64_t *)arg1 == arg3) {
            *(undefined8 *)arg1 = *(undefined8 *)arg3;
        } else {
            *(undefined8 *)arg2 = *(undefined8 *)arg3;
        }
        cVar1 = (char)arg1;
        *(char *)arg1 = *(char *)arg1 + cVar1;
        *(char *)arg1 = *(char *)arg1 + cVar1;
        *(char *)(in_FS_OFFSET + arg1) = *(char *)(in_FS_OFFSET + arg1) + cVar1;
        *(char *)(arg1 * 2) = *(char *)(arg1 * 2) + cVar1;
        *(char *)arg1 = *(char *)arg1 + cVar1;
        *(char *)arg1 = *(char *)arg1 + cVar1;
    // WARNING: Bad instruction - Truncating control flow here
        halt_baddata();
    }
    return;
}


void sym.free_marklist(int64_t arg1)
{
    int64_t iVar1;
    
    if (arg1 == 0) {
        return;
    }
    do {
        iVar1 = *(int64_t *)(arg1 + 0x18);
        if (*(int64_t *)(arg1 + 8) != 0) {
            func_0x08090034();
        }
        func_0x08090034(arg1);
        arg1 = iVar1;
    } while (iVar1 != 0);
    return;
}


undefined8 * sym.prune_dataticks(int64_t arg1)
{
    undefined *puVar1;
    undefined8 *puVar2;
    uint64_t uVar3;
    undefined8 *puVar4;
    undefined4 uVar5;
    int64_t in_FS_OFFSET;
    uint8_t uVar6;
    undefined8 uStack72;
    undefined8 uStack64;
    undefined4 uStack56;
    undefined8 *puStack48;
    int64_t iStack32;
    
    uVar6 = 0;
    puVar2 = &uStack72;
    puVar4 = &uStack72;
    iStack32 = *(int64_t *)(in_FS_OFFSET + 0x28);
    uStack72 = 0;
    uStack64 = 0;
    uStack56 = 0;
    puStack48 = (undefined8 *)0x0;
    puVar1 = (undefined *)arg1;
    if (arg1 != 0) {
        do {
            while (puVar4 = (undefined8 *)puVar1, -1 < *(int32_t *)((int64_t)puVar4 + 0x10)) {
                *(undefined8 **)((int64_t)puVar2 + 0x18) = puVar4;
                puVar2 = puVar4;
                puVar1 = *(undefined **)((int64_t)puVar4 + 0x18);
                if (*(undefined **)((int64_t)puVar4 + 0x18) == (undefined *)0x0) goto code_r0x08009c64;
            }
            func_0x08090034(*(undefined8 *)((int64_t)puVar4 + 8));
            puVar1 = *(undefined **)((int64_t)puVar4 + 0x18);
            arg1 = (int64_t)puVar4;
            func_0x08090034();
            puVar4 = puVar2;
        } while (puVar1 != (undefined *)0x0);
    }
code_r0x08009c64:
    uVar5 = (undefined4)arg1;
    *(undefined8 *)((int64_t)puVar4 + 0x18) = 0;
    if (iStack32 != *(int64_t *)(in_FS_OFFSET + 0x28)) {
        func_0x08090034();
        puVar2 = (undefined8 *)func_0x08090034(0x100, "text_label");
        *puVar2 = 0;
        puVar2[0x1f] = 0;
        uVar3 = (uint64_t)
                (((int32_t)puVar2 - (int32_t)(undefined8 *)((uint64_t)(puVar2 + 1) & 0xfffffffffffffff8)) + 0x100U >> 3)
        ;
        puVar4 = (undefined8 *)((uint64_t)(puVar2 + 1) & 0xfffffffffffffff8);
        while (uVar3 != 0) {
            uVar3 = uVar3 - 1;
            *puVar4 = 0;
            puVar4 = puVar4 + (uint64_t)uVar6 * 0x1ffffffffffffffe + 1;
        }
        *(undefined4 *)(puVar2 + 1) = uVar5;
        puVar2[0x1a] = 0x400000004;
        puVar2[2] = 0;
        *(undefined4 *)(puVar2 + 3) = 0;
        puVar2[4] = 0;
        puVar2[5] = 0;
        puVar2[6] = 0;
        *(undefined4 *)(puVar2 + 7) = 0;
        *(undefined4 *)(puVar2 + 0xb) = 0;
        *(undefined4 *)(puVar2 + 0xe) = 1;
        *(undefined4 *)(puVar2 + 0x1b) = 4;
        puVar2[0x1c] = 0;
        puVar2[0x1d] = 0;
        puVar2[0x1e] = 0;
        return puVar2;
    }
    return puStack48;
}


void sym.set_command(void)
{
    int64_t iVar1;
    char cVar2;
    int32_t iVar3;
    int64_t iVar4;
    int64_t iVar5;
    code *unaff_RBX;
    int32_t iVar6;
    int64_t in_FS_OFFSET;
    
    iVar1 = *(int64_t *)(in_FS_OFFSET + 0x28);
    iVar6 = _reloc.c_token + 1;
    iVar5 = _reloc.token + (int64_t)iVar6 * 0x28;
    iVar3 = *(int32_t *)(iVar5 + 0x20);
    iVar4 = (int64_t)iVar3;
    if (((*(char *)(_reloc.gp_input_line + iVar4) == 'n') && (*(char *)(_reloc.gp_input_line + 1 + iVar4) == 'o')) &&
       (*(char *)(_reloc.gp_input_line + 2 + iVar4) != 'n')) {
        if (reloc.interactive != (code)0x0) {
            _reloc.c_token = iVar6;
            func_0x08090034(iVar6);
            iVar5 = (int64_t)_reloc.c_token;
            _reloc.c_token = _reloc.c_token + -1;
            iVar5 = _reloc.token + iVar5 * 0x28;
            iVar3 = *(int32_t *)(iVar5 + 0x20);
        }
        *(int32_t *)(iVar5 + 0x24) = *(int32_t *)(iVar5 + 0x24) + -2;
        *(int32_t *)(iVar5 + 0x20) = iVar3 + 2;
        func_0x08090034();
        goto code_r0x0800dea0;
    }
    _reloc.c_token = iVar6;
    _reloc.set_iterator = func_0x08090034();
    cVar2 = func_0x08090034();
    if (cVar2 == '\0') {
        cVar2 = func_0x08090034(_reloc.set_iterator);
        if (cVar2 != '\0') {
            _reloc.set_iterator = func_0x08090034();
            func_0x08090034(iVar6, "unbounded iteration not accepted here");
            goto code_r0x08010822;
        }
        unaff_RBX = (code *)0x8012a58;
        iVar6 = _reloc.c_token;
        goto code_r0x0800dbf8;
    }
    unaff_RBX = reloc..LC4;
    if (_reloc.c_token < _reloc.num_tokens) {
        do {
            iVar3 = func_0x08090034(_reloc.c_token, reloc..LC4);
            if (iVar3 != 0) break;
            _reloc.c_token = _reloc.c_token + 1;
        } while (_reloc.c_token < _reloc.num_tokens);
    }
    do {
        _reloc.set_iterator = func_0x08090034();
        if (iVar1 == *(int64_t *)(in_FS_OFFSET + 0x28)) {
            return;
        }
code_r0x08010822:
        func_0x08090034();
        func_0x08090034(_reloc.c_token, "Error allocating datablock");
        while (iVar3 = func_0x08090034(_reloc.c_token, reloc..LC531), iVar3 != 0) {
            do {
                _reloc.theta_direction = _reloc..LC1;
                while( true ) {
                    while( true ) {
                        while( true ) {
                            while( true ) {
                                while( true ) {
                                    _reloc.c_token = _reloc.c_token + 1;
                                    if ((_reloc.num_tokens <= _reloc.c_token) ||
                                       (iVar3 = func_0x08090034(_reloc.c_token, reloc..LC4), iVar3 != 0))
                                    goto code_r0x0800de48;
                                    iVar3 = func_0x08090034(_reloc.c_token, "r$ight");
                                    if (iVar3 == 0) break;
                                    _reloc.theta_origin = 0;
                                }
                                iVar3 = func_0x08090034(_reloc.c_token, "t$op");
                                if (iVar3 == 0) break;
                                _reloc.theta_origin = _reloc..LC525;
                            }
                            iVar3 = func_0x08090034(_reloc.c_token, "l$eft");
                            if (iVar3 == 0) break;
                            _reloc.theta_origin = _reloc..LC526;
                        }
                        iVar3 = func_0x08090034(_reloc.c_token, "b$ottom");
                        if (iVar3 == 0) break;
                        _reloc.theta_origin = _reloc..LC527;
                    }
                    iVar3 = func_0x08090034(_reloc.c_token, "clockwise");
                    if ((iVar3 == 0) && (iVar3 = func_0x08090034(_reloc.c_token, reloc..LC529), iVar3 == 0)) break;
                    _reloc.theta_direction = _reloc..LC275;
                }
                iVar3 = func_0x08090034(_reloc.c_token, "counterclockwise");
            } while (iVar3 != 0);
        }
        func_0x08090034(_reloc.c_token, "unrecognized option");
        _reloc.c_token = _reloc.c_token + 1;
        func_0x08090034(0xffffffff, "this copy of gnuplot has no mouse support");
code_r0x0800de48:
        cVar2 = func_0x08090034(_reloc.set_iterator);
        if (cVar2 != '\0') {
code_r0x0800dbf8:
            _reloc.c_token = iVar6;
            iVar6 = _reloc.c_token;
            iVar3 = func_0x08090034(reloc.set_tbl, _reloc.c_token);
            if (iVar3 - 3U < 0xb6) {
    // WARNING: Could not recover jumptable at 0x0800dc1b. Too many branches
    // WARNING: Treating indirect jump as call
                (*(unaff_RBX + *(int32_t *)(unaff_RBX + (uint64_t)(iVar3 - 3U) * 4)))();
                return;
            }
            func_0x08090034(_reloc.c_token, "unrecognized option - see \'help set\'.");
            do {
                reloc.history_full = (code)0x0;
                _reloc.c_token = _reloc.c_token + 1;
                while( true ) {
                    while( true ) {
                        while( true ) {
                            while( true ) {
                                if ((_reloc.num_tokens <= _reloc.c_token) || (iVar3 = func_0x08090034(), iVar3 != 0))
                                goto code_r0x0800de48;
                                iVar3 = func_0x08090034(_reloc.c_token, reloc..LC486);
                                if (iVar3 == 0) break;
                                reloc.history_quiet = (code)0x1;
                                _reloc.c_token = _reloc.c_token + 1;
                            }
                            iVar3 = func_0x08090034(_reloc.c_token, reloc..LC487);
                            if (iVar3 == 0) break;
                            reloc.history_quiet = (code)0x0;
                            _reloc.c_token = _reloc.c_token + 1;
                        }
                        iVar3 = func_0x08090034(_reloc.c_token, reloc..LC488);
                        if (iVar3 == 0) break;
                        reloc.history_full = (code)0x1;
                        _reloc.c_token = _reloc.c_token + 1;
                    }
                    iVar3 = func_0x08090034(_reloc.c_token, reloc..LC489);
                    if (iVar3 != 0) break;
                    iVar3 = func_0x08090034(_reloc.c_token, "def$ault");
                    if (iVar3 == 0) {
                        iVar3 = func_0x08090034(_reloc.c_token, "size");
                        if (iVar3 != 0) {
                            _reloc.c_token = _reloc.c_token + 1;
                        }
                        _reloc.gnuplot_history_size = func_0x08090034();
                    } else {
                        reloc.history_quiet = (code)0x0;
                        reloc.history_full = (code)0x1;
                        _reloc.gnuplot_history_size = 500;
                        _reloc.c_token = _reloc.c_token + 1;
                    }
                }
            } while( true );
        }
code_r0x0800dea0:
        func_0x08090034(0);
    } while( true );
}


uint64_t sym.set_cntrlabel(void)
{
    int32_t iVar1;
    uint64_t uVar2;
    int64_t iVar3;
    uint64_t uVar4;
    char *pcVar5;
    uint32_t uVar6;
    
    _reloc.c_token = _reloc.c_token + 1;
    if (((int32_t)_reloc.c_token < _reloc.num_tokens) &&
       (uVar2 = func_0x08090034(_reloc.c_token, reloc..LC4), (int32_t)uVar2 == 0)) {
        if ((int32_t)_reloc.c_token < _reloc.num_tokens) {
            do {
                uVar2 = func_0x08090034(_reloc.c_token, reloc..LC4);
                if ((int32_t)uVar2 != 0) {
                    return uVar2;
                }
                iVar1 = func_0x08090034(_reloc.c_token, "form$at");
                if (iVar1 == 0) {
                    iVar1 = func_0x08090034(_reloc.c_token, "font");
                    if (iVar1 == 0) {
                        iVar1 = func_0x08090034(_reloc.c_token, "one$color");
                        if (iVar1 == 0) {
                            iVar1 = func_0x08090034(_reloc.c_token, "start");
                            if (iVar1 == 0) {
                                iVar1 = func_0x08090034(_reloc.c_token, "int$erval");
                                if (iVar1 == 0) {
                                    pcVar5 = "unrecognized option";
                                    uVar6 = _reloc.c_token;
                                    func_0x08090034();
                                    iVar1 = func_0x08090034(_reloc.c_token, pcVar5 + 2);
                                    if (iVar1 == 0) {
                                        iVar1 = func_0x08090034(_reloc.c_token, pcVar5);
                                        if (iVar1 == 0) {
                                            return 0;
                                        }
                                        if (pcVar5[2] == 'm') {
                                            *(undefined *)((int64_t)(int32_t)uVar6 * 0x2a8 + 0x809025d) = 0;
                                        } else {
                                            reloc.FITLIMIT[(int64_t)(int32_t)uVar6 * 0x2a8] = (code)0x0;
                                        }
                                    } else {
                                        if (pcVar5[2] == 'm') {
                                            *(undefined *)((int64_t)(int32_t)uVar6 * 0x2a8 + 0x809025d) = 1;
                                        } else {
                                            reloc.FITLIMIT[(int64_t)(int32_t)uVar6 * 0x2a8] = (code)0x1;
                                        }
                                    }
                                    _reloc.c_token = _reloc.c_token + 1;
                                    return 1;
                                }
                                _reloc.c_token = _reloc.c_token + 1;
                                uVar2 = func_0x08090034();
                                _reloc.clabel_interval = (undefined4)uVar2;
                            } else {
                                _reloc.c_token = _reloc.c_token + 1;
                                uVar2 = func_0x08090034();
                                _reloc.clabel_start = (int32_t)uVar2;
                                if (_reloc.clabel_start < 1) {
                                    _reloc.clabel_start = 5;
                                }
                            }
                        } else {
                            uVar2 = (uint64_t)_reloc.c_token;
                            reloc.clabel_onecolor = (code)0x1;
                            _reloc.c_token = _reloc.c_token + 1;
                        }
                    } else {
                        _reloc.c_token = _reloc.c_token + 1;
                        uVar4 = func_0x08090034();
                        uVar2 = uVar4;
                        if (uVar4 != 0) {
                            uVar2 = func_0x08090034();
                            _reloc.clabel_font = uVar4;
                        }
                    }
                } else {
                    _reloc.c_token = _reloc.c_token + 1;
                    iVar3 = func_0x08090034();
                    if (iVar3 != 0) {
                        func_0x08090034(reloc.contour_format, iVar3, 0x20);
                    }
                    uVar2 = func_0x08090034();
                }
            } while ((int32_t)_reloc.c_token < _reloc.num_tokens);
        }
    } else {
        uVar2 = 0x67;
        reloc.clabel_onecolor = (code)0x0;
        _reloc.contour_format = 0x332e3825;
        *(undefined2 *)0x8090438 = 0x67;
    }
    return uVar2;
}


void sym.set_datafile(void)
{
    int32_t iVar1;
    int64_t iVar2;
    
    _reloc.c_token = _reloc.c_token + 1;
    if (_reloc.num_tokens <= _reloc.c_token) {
        return;
    }
    do {
        iVar1 = func_0x08090034(_reloc.c_token, reloc..LC4);
        if (iVar1 != 0) {
            return;
        }
        iVar1 = func_0x08090034(_reloc.c_token, "miss$ing");
        if (iVar1 == 0) {
            iVar1 = func_0x08090034(_reloc.c_token, "sep$arators");
            if (iVar1 == 0) {
                iVar1 = func_0x08090034(_reloc.c_token, "com$mentschars");
                if (iVar1 == 0) {
                    iVar1 = func_0x08090034(_reloc.c_token, "bin$ary");
                    if (iVar1 == 0) {
                        iVar1 = func_0x08090034(_reloc.c_token, "fort$ran");
                        if (iVar1 == 0) {
                            iVar1 = func_0x08090034(_reloc.c_token, "nofort$ran");
                            if (iVar1 == 0) goto code_r0x08007128;
                            reloc.df_fortran_constants = (code)0x0;
                            _reloc.c_token = _reloc.c_token + 1;
                        } else {
                            reloc.df_fortran_constants = (code)0x1;
                            _reloc.c_token = _reloc.c_token + 1;
                        }
                    } else {
                        func_0x08090034();
                    }
                } else {
                    _reloc.c_token = _reloc.c_token + 1;
                    if ((_reloc.c_token < _reloc.num_tokens) &&
                       (iVar1 = func_0x08090034(_reloc.c_token, reloc..LC4), iVar1 == 0)) {
                        iVar2 = func_0x08090034();
                        if (iVar2 == 0) {
                            func_0x08090034(_reloc.c_token, "expected string with comments chars");
                            goto code_r0x08007201;
                        }
                        func_0x08090034();
                        _reloc.df_commentschars = iVar2;
                    } else {
                        func_0x08090034(_reloc.df_commentschars);
                        _reloc.df_commentschars = func_0x08090034();
                    }
                }
            } else {
                sym.set_separator((int64_t)reloc.df_separators);
            }
        } else {
            _reloc.c_token = _reloc.c_token + 1;
            func_0x08090034();
            _reloc.missing_val = 0;
            if (_reloc.num_tokens <= _reloc.c_token) {
                _reloc.missing_val = 0;
                return;
            }
            iVar1 = func_0x08090034(_reloc.c_token, reloc..LC4);
            if (iVar1 == 0) {
                iVar1 = func_0x08090034(_reloc.c_token, reloc..LC288);
                if ((iVar1 == 0) && (iVar1 = func_0x08090034(_reloc.c_token, reloc..LC289), iVar1 == 0)) {
                    _reloc.missing_val = func_0x08090034();
                    if (_reloc.missing_val == 0) {
                        func_0x08090034(_reloc.c_token, "expected missing-value string");
code_r0x08007128:
                        iVar1 = func_0x08090034(_reloc.c_token, "fpe_trap");
                        if (iVar1 == 0) {
                            iVar1 = func_0x08090034(_reloc.c_token, "nofpe_trap");
                            if (iVar1 == 0) {
                                iVar1 = func_0x08090034(_reloc.c_token, "columnhead$ers");
                                if (iVar1 == 0) {
                                    iVar1 = func_0x08090034(_reloc.c_token, "nocolumnhead$ers");
                                    if (iVar1 == 0) {
code_r0x08007201:
                                        func_0x08090034(_reloc.c_token, "expecting datafile modifier");
                                        func_0x08090034(_reloc.set_colorbox_tbl);
                                        func_0x08090034(_reloc.color_box);
                                        func_0x08090034(_reloc.dgrid3d_mode);
                                        _reloc.dgrid3d_mode = 0;
                                        func_0x08090034(_reloc.decimalsign);
                                        _reloc.decimalsign = 0;
                                        func_0x08090034(_reloc.lookup_table_nth_reverse);
                                        _reloc.lookup_table_nth_reverse = 0;
                                        func_0x08090034();
                                        _obj.pm3d_last_set_palette_mode = 0x30;
                                        return;
                                    }
                                    reloc.df_columnheaders = (code)0x0;
                                    _reloc.c_token = _reloc.c_token + 1;
                                } else {
                                    reloc.df_columnheaders = (code)0x1;
                                    _reloc.c_token = _reloc.c_token + 1;
                                }
                            } else {
                                reloc.df_nofpe_trap = (code)0x1;
                                _reloc.c_token = _reloc.c_token + 1;
                            }
                        } else {
                            reloc.df_nofpe_trap = (code)0x0;
                            _reloc.c_token = _reloc.c_token + 1;
                        }
                    }
                } else {
                    _reloc.missing_val = func_0x08090034();
                    _reloc.c_token = _reloc.c_token + 1;
                }
            }
        }
        if (_reloc.num_tokens <= _reloc.c_token) {
            return;
        }
    } while( true );
}




void sym.set_linestyle(int64_t arg7, int64_t arg8, int64_t arg9, int64_t arg10, int64_t arg11, undefined8 placeholder_5,
                      undefined8 placeholder_6, undefined8 placeholder_7, int64_t arg1, int64_t arg2)
{
    int64_t iVar1;
    undefined auVar2 [16];
    int32_t iVar3;
    int32_t iVar4;
    int32_t iVar5;
    int32_t iVar6;
    uint32_t uVar7;
    undefined4 uVar8;
    double **ppdVar9;
    char *pcVar10;
    double **unaff_RBX;
    code *unaff_RBP;
    double **unaff_R12;
    uint64_t unaff_R14;
    int64_t in_FS_OFFSET;
    undefined uVar11;
    double *extraout_XMM0_Qa;
    double *extraout_XMM0_Qa_00;
    double *extraout_XMM0_Qa_01;
    double *extraout_XMM0_Qa_02;
    double extraout_XMM0_Qa_03;
    uint32_t uStack172;
    undefined4 uStack136;
    undefined4 uStack132;
    
    iVar1 = *(int64_t *)(in_FS_OFFSET + 0x28);
    _reloc.c_token = _reloc.c_token + 1;
    if (_reloc.c_token < _reloc.num_tokens) {
        unaff_R14 = arg2 & 0xffffffff;
        iVar3 = func_0x08090034(arg7, arg8, arg9, arg10, arg11, placeholder_5, _reloc.c_token, reloc..LC4);
        if ((iVar3 == 0) && (iVar3 = func_0x08090034(), 0 < iVar3)) {
            unaff_RBP = *(code **)arg1;
            if ((double **)unaff_RBP == (double **)0x0) {
                ppdVar9 = (double **)func_0x08090034(0x78, "linestyle");
            } else {
                ppdVar9 = (double **)unaff_RBP;
                unaff_R12 = (double **)0x0;
                while (unaff_RBP = (code *)ppdVar9, *(int32_t *)((int64_t)unaff_RBP + 8) < iVar3) {
                    unaff_RBX = *(double ***)unaff_RBP;
                    ppdVar9 = unaff_RBX;
                    unaff_R12 = (double **)unaff_RBP;
                    if (unaff_RBX == (double **)0x0) goto code_r0x08001a20;
                }
                if (*(int32_t *)((int64_t)unaff_RBP + 8) == iVar3) goto code_r0x08001947;
                ppdVar9 = (double **)func_0x08090034(0x78, "linestyle");
                if (unaff_R12 != (double **)0x0) goto code_r0x08001a52;
            }
            *(double ***)arg1 = ppdVar9;
            unaff_R12 = (double **)0x0;
            unaff_RBX = (double **)unaff_RBP;
            unaff_RBP = (code *)ppdVar9;
            do {
                uStack172 = iVar3 - 1;
                uStack136 = (undefined4)_reloc..LC57;
                uStack132 = (undefined4)((uint64_t)_reloc..LC57 >> 0x20);
                auVar2 = ZEXT816((uint64_t)_reloc..LC1);
                *(int32_t *)((int64_t)unaff_RBP + 8) = iVar3;
                *(double ***)unaff_RBP = unaff_RBX;
                *(double **)((int64_t)unaff_RBP + 0x70) = (double *)0x0;
                *(double **)((int64_t)unaff_RBP + 0x10) = (double *)((uint64_t)uStack172 << 0x20);
                *(double **)((int64_t)unaff_RBP + 0x18) = (double *)CONCAT44(0xffffffff, uStack172);
    // WARNING: Store size is inaccurate
                *(undefined *)((int64_t)unaff_RBP + 0x20) = auVar2 << 0x40;
                *(undefined4 *)((int64_t)unaff_RBP + 0x30) = uStack136;
                *(undefined4 *)((int64_t)unaff_RBP + 0x34) = uStack132;
                *(undefined4 *)((int64_t)unaff_RBP + 0x38) = 0;
                *(undefined4 *)((int64_t)unaff_RBP + 0x3c) = 0;
                *(undefined4 *)((int64_t)unaff_RBP + 0x40) = 1;
                *(uint32_t *)((int64_t)unaff_RBP + 0x44) = uStack172;
                *(undefined4 *)((int64_t)unaff_RBP + 0x48) = 0;
                *(undefined4 *)((int64_t)unaff_RBP + 0x4c) = 0;
                *(undefined4 *)((int64_t)unaff_RBP + 0x50) = 0;
                *(undefined4 *)((int64_t)unaff_RBP + 0x54) = 0;
                *(undefined4 *)((int64_t)unaff_RBP + 0x58) = 0;
                *(undefined4 *)((int64_t)unaff_RBP + 0x5c) = 0;
                *(undefined4 *)((int64_t)unaff_RBP + 0x60) = 0;
                *(undefined4 *)((int64_t)unaff_RBP + 100) = 0;
                *(undefined4 *)((int64_t)unaff_RBP + 0x68) = 0;
                *(undefined4 *)((int64_t)unaff_RBP + 0x6c) = 0;
code_r0x08001947:
                iVar4 = func_0x08090034(_reloc.c_token, "def$ault");
                if (iVar4 == 0) {
                    func_0x08090034((double **)((int64_t)unaff_RBP + 0x10), unaff_R14, 1);
                    if (_reloc.num_tokens <= _reloc.c_token) goto code_r0x0800197c;
                } else {
                    if (*(double ***)arg1 == (double **)unaff_RBP) {
                        *(double **)arg1 = *(double **)unaff_RBP;
                    } else {
                        *unaff_R12 = *(double **)unaff_RBP;
                    }
                    func_0x08090034();
                    _reloc.c_token = _reloc.c_token + 1;
                    if (_reloc.num_tokens <= _reloc.c_token) goto code_r0x0800197c;
                }
                iVar4 = func_0x08090034(_reloc.c_token, reloc..LC4);
                if (iVar4 != 0) goto code_r0x0800197c;
                pcVar10 = "linetype";
                if ((code *)arg1 != reloc.first_perm_linestyle) {
                    pcVar10 = "style line";
                }
                func_0x08090034(_reloc.c_token, "Extraneous arguments to set %s", pcVar10);
code_r0x08001a20:
                unaff_RBP = (code *)unaff_RBX;
                ppdVar9 = (double **)func_0x08090034(0x78, "linestyle");
code_r0x08001a52:
                *unaff_R12 = (double *)ppdVar9;
                unaff_RBX = (double **)unaff_RBP;
                unaff_RBP = (code *)ppdVar9;
            } while( true );
        }
    }
    func_0x08090034(_reloc.c_token, "tag must be > zero");
code_r0x08001ab8:
    func_0x08090034();
    _reloc.c_token = _reloc.c_token + 1;
    if ((_reloc.c_token < _reloc.num_tokens) && (iVar3 = func_0x08090034(_reloc.c_token, reloc..LC4), iVar3 == 0)) {
        iVar3 = _reloc.c_token;
        if (_reloc.c_token < _reloc.num_tokens) {
            do {
                iVar3 = func_0x08090034(iVar3, reloc..LC4);
                if (iVar3 != 0) {
                    return;
                }
                iVar3 = func_0x08090034(_reloc.c_token, "p$oints");
                if (iVar3 == 0) {
                    iVar3 = func_0x08090034(_reloc.c_token, "first$linetype");
                    if (iVar3 == 0) {
                        iVar3 = func_0x08090034(_reloc.c_token, "sort$ed");
                        if (iVar3 == 0) {
                            iVar3 = func_0x08090034(_reloc.c_token, "unsort$ed");
                            if (iVar3 == 0) {
                                iVar3 = func_0x08090034(_reloc.c_token, "li$near");
                                if (iVar3 == 0) {
                                    iVar3 = func_0x08090034(_reloc.c_token, "c$ubicspline");
                                    if (iVar3 == 0) {
                                        iVar3 = func_0x08090034(_reloc.c_token, "b$spline");
                                        if (iVar3 == 0) {
                                            iVar3 = func_0x08090034(_reloc.c_token, "le$vels");
                                            if (iVar3 == 0) {
                                                iVar3 = func_0x08090034(_reloc.c_token, "o$rder");
                                                if (iVar3 != 0) {
                                                    _reloc.c_token = _reloc.c_token + 1;
                                                    iVar6 = func_0x08090034();
                                                    iVar4 = _reloc.num_tokens;
                                                    iVar3 = _reloc.c_token;
                                                    if (iVar6 - 2U < 9) goto code_r0x08001b5e;
code_r0x0800208f:
                                                    func_0x08090034(_reloc.c_token, 
                                                                    "bspline order must be in [2..10] range.");
                                                }
                                                func_0x08090034(_reloc.c_token, 
                                                                
                                                            "expecting \'linear\', \'cubicspline\', \'bspline\', \'points\', \'levels\' or \'order\'"
                                                            );
                                                iVar1 = *(int64_t *)(in_FS_OFFSET + 0x28);
                                                _reloc.c_token = _reloc.c_token + 1;
                                                if (_reloc.num_tokens <= _reloc.c_token) {
code_r0x08002323:
                                                    func_0x08090034(_reloc.c_token, "tag must be > zero");
                                                    goto code_r0x08002337;
                                                }
                                                uVar7 = func_0x08090034(_reloc.c_token, reloc..LC4);
                                                arg1 = ZEXT48(uVar7);
                                                if (uVar7 != 0) goto code_r0x08002323;
                                                unaff_R14 = func_0x08090034();
                                                ppdVar9 = _reloc.first_custom_dashtype;
                                                iVar3 = (int32_t)unaff_R14;
                                                if (iVar3 < 1) goto code_r0x08002323;
                                                if (_reloc.first_custom_dashtype == (double **)0x0) {
                                                    unaff_RBP = (code *)func_0x08090034(0x38, "dashtype");
                                                } else {
                                                    unaff_RBX = _reloc.first_custom_dashtype;
                                                    unaff_R12 = (double **)0x0;
                                                    while (ppdVar9 = unaff_RBX, *(int32_t *)(ppdVar9 + 1) < iVar3) {
                                                        unaff_RBX = (double **)*ppdVar9;
                                                        unaff_R12 = ppdVar9;
                                                        if (unaff_RBX == (double **)0x0) goto code_r0x080022c0;
                                                    }
                                                    unaff_RBX = (double **)0x0;
                                                    unaff_RBP = (code *)ppdVar9;
                                                    if (*(int32_t *)(ppdVar9 + 1) == iVar3) goto code_r0x080021e3;
                                                    unaff_RBP = (code *)func_0x08090034(0x38, "dashtype");
                                                    if (unaff_R12 != (double **)0x0) goto code_r0x080022dd;
                                                }
                                                unaff_R12 = (double **)0x0;
                                                _reloc.first_custom_dashtype = (double **)unaff_RBP;
                                                do {
                                                    *(int32_t *)((int64_t)unaff_RBP + 8) = (int32_t)unaff_R14;
                                                    *(undefined4 *)((int64_t)unaff_RBP + 0xc) = 0xffffffff;
                                                    *(double **)((int64_t)unaff_RBP + 0x30) = (double *)0x0;
                                                    *(double ***)unaff_RBP = ppdVar9;
                                                    unaff_RBX = (double **)0x1;
                                                    *(double **)((int64_t)unaff_RBP + 0x10) = (double *)0x0;
                                                    *(double **)((int64_t)unaff_RBP + 0x18) = (double *)0x0;
                                                    *(undefined4 *)((int64_t)unaff_RBP + 0x20) = 0;
                                                    *(undefined4 *)((int64_t)unaff_RBP + 0x24) = 0;
                                                    *(undefined4 *)((int64_t)unaff_RBP + 0x28) = 0;
                                                    *(undefined4 *)((int64_t)unaff_RBP + 0x2c) = 0;
code_r0x080021e3:
                                                    iVar3 = func_0x08090034(_reloc.c_token, "def$ault");
                                                    if (iVar3 == 0) {
                                                        uVar8 = func_0x08090034();
                                                        iVar4 = _reloc.num_tokens;
                                                        iVar3 = _reloc.c_token;
                                                        *(undefined4 *)((int64_t)unaff_RBP + 0xc) = uVar8;
                                                        arg1 = (int64_t)unaff_RBX;
                                                        if (iVar4 <= iVar3) goto code_r0x08002216;
code_r0x08002274:
                                                        iVar3 = func_0x08090034(iVar3, reloc..LC4);
                                                        if (iVar3 != 0) goto code_r0x08002216;
                                                        if ((int32_t)arg1 != 0) {
                                                            ppdVar9 = *(double ***)unaff_RBP;
                                                            if (_reloc.first_custom_dashtype != (double **)unaff_RBP) {
                                                                *unaff_R12 = (double *)*(double ***)unaff_RBP;
                                                                ppdVar9 = _reloc.first_custom_dashtype;
                                                            }
                                                            goto code_r0x0800229e;
                                                        }
                                                    } else {
                                                        ppdVar9 = *(double ***)unaff_RBP;
                                                        if (_reloc.first_custom_dashtype != (double **)unaff_RBP) {
                                                            *unaff_R12 = (double *)*(double ***)unaff_RBP;
                                                            ppdVar9 = _reloc.first_custom_dashtype;
                                                        }
                                                        _reloc.first_custom_dashtype = ppdVar9;
                                                        func_0x08090034();
                                                        iVar3 = _reloc.c_token + 1;
                                                        _reloc.c_token = iVar3;
                                                        if (iVar3 < _reloc.num_tokens) goto code_r0x08002274;
code_r0x08002216:
                                                        if (iVar1 == *(int64_t *)(in_FS_OFFSET + 0x28)) {
                                                            return;
                                                        }
code_r0x08002337:
                                                        ppdVar9 = (double **)func_0x08090034();
code_r0x0800229e:
                                                        _reloc.first_custom_dashtype = ppdVar9;
                                                        func_0x08090034(unaff_RBP);
                                                    }
                                                    func_0x08090034(_reloc.c_token, 
                                                                    "Extraneous arguments to set dashtype");
code_r0x080022c0:
                                                    ppdVar9 = unaff_RBX;
                                                    unaff_RBP = (code *)func_0x08090034(0x38, "dashtype");
code_r0x080022dd:
                                                    *unaff_R12 = (double *)unaff_RBP;
                                                } while( true );
                                            }
                                            _reloc.c_token = _reloc.c_token + 1;
                                            if ((_reloc.set_iterator == 0) ||
                                               (*(int32_t *)(_reloc.set_iterator + 0x40) == 0)) {
                                                func_0x08090034(reloc.dyn_contour_levels_list);
                                                func_0x08090034(reloc.dyn_contour_levels_list, 8, 5, 10);
                                            }
                                            iVar3 = func_0x08090034(_reloc.c_token, "di$screte");
                                            if (iVar3 == 0) {
                                                iVar3 = func_0x08090034(_reloc.c_token, "in$cremental");
                                                ppdVar9 = _reloc.first_custom_dashtype;
                                                if (iVar3 == 0) {
                                                    iVar3 = func_0x08090034(_reloc.c_token, "au$to");
                                                    if (iVar3 == 0) {
                                                        if (_reloc.contour_levels_kind == 2) {
                                                            func_0x08090034(_reloc.c_token, 
                                                                            
                                                            "Levels type is discrete, ignoring new number of contour levels"
                                                            );
                                                            goto code_r0x08001fcb;
                                                        }
                                                    } else {
                                                        _reloc.contour_levels_kind = 0;
                                                        _reloc.c_token = _reloc.c_token + 1;
                                                        if (_reloc.num_tokens <= _reloc.c_token) {
                                                            _reloc.contour_levels_kind = 0;
                                                            return;
                                                        }
                                                        iVar5 = func_0x08090034(_reloc.c_token, reloc..LC4);
                                                        iVar4 = _reloc.num_tokens;
                                                        iVar6 = _reloc.contour_order;
                                                        iVar3 = _reloc.c_token;
                                                        if (iVar5 != 0) goto code_r0x08001b5e;
                                                    }
                                                    _reloc.contour_levels = func_0x08090034();
                                                    iVar4 = _reloc.num_tokens;
                                                    iVar6 = _reloc.contour_order;
                                                    iVar3 = _reloc.c_token;
                                                } else {
                                                    _reloc.c_token = _reloc.c_token + 1;
                                                    _reloc.contour_levels_kind = 1;
                                                    func_0x08090034();
                                                    iVar3 = _reloc.c_token;
                                                    *ppdVar9 = extraout_XMM0_Qa;
                                                    iVar3 = func_0x08090034(iVar3, reloc..LC9);
                                                    unaff_RBX = _reloc.first_custom_dashtype;
                                                    if (iVar3 == 0) {
code_r0x0800207d:
                                                        func_0x08090034(_reloc.c_token, 
                                                                        "expecting comma to separate start,incr levels")
                                                        ;
                                                        unaff_RBX = ppdVar9;
                                                        goto code_r0x0800208f;
                                                    }
                                                    _reloc.c_token = _reloc.c_token + 1;
                                                    func_0x08090034();
                                                    uVar11 = (double)extraout_XMM0_Qa_00 == 0.00000000;
                                                    unaff_RBX[1] = extraout_XMM0_Qa_00;
                                                    while( true ) {
                                                        if ((bool)uVar11) {
                                                            func_0x08090034(_reloc.c_token, "increment cannot be 0");
                                                            ppdVar9 = unaff_RBX;
                                                            goto code_r0x0800207d;
                                                        }
                                                        if (_reloc.num_tokens <= _reloc.c_token) {
                                                            return;
                                                        }
                                                        iVar5 = func_0x08090034(_reloc.c_token, reloc..LC4);
                                                        iVar4 = _reloc.num_tokens;
                                                        iVar6 = _reloc.contour_order;
                                                        iVar3 = _reloc.c_token;
                                                        if (iVar5 != 0) goto code_r0x08001b5e;
code_r0x08001fcb:
                                                        iVar3 = func_0x08090034(_reloc.c_token, reloc..LC9);
                                                        uVar11 = iVar3 == 0;
                                                        if (!(bool)uVar11) break;
code_r0x08002051:
                                                        func_0x08090034(_reloc.c_token, 
                                                                        "expecting comma to separate incr,stop levels");
                                                    }
                                                    _reloc.c_token = _reloc.c_token + 1;
                                                    _reloc.free_dynarray = 2;
                                                    func_0x08090034();
                                                    _reloc.contour_levels =
                                                         (int32_t)((extraout_XMM0_Qa_03 -
                                                                   (double)*_reloc.first_custom_dashtype) /
                                                                   (double)_reloc.first_custom_dashtype[1] + _reloc..LC1
                                                                  );
                                                    iVar4 = _reloc.num_tokens;
                                                    iVar6 = _reloc.contour_order;
                                                    iVar3 = _reloc.c_token;
                                                }
                                            } else {
                                                _reloc.contour_levels_kind = 2;
                                                _reloc.c_token = _reloc.c_token + 1;
                                                if ((_reloc.num_tokens <= _reloc.c_token) ||
                                                   (iVar3 = func_0x08090034(_reloc.c_token, reloc..LC4), iVar3 != 0)) {
                                                    uVar11 = 1;
                                                    func_0x08090034(_reloc.c_token, "expecting discrete level");
code_r0x0800203f:
                                                    func_0x08090034(_reloc.c_token, 
                                                                    "expecting comma to separate discrete levels");
                                                    goto code_r0x08002051;
                                                }
                                                unaff_RBP = reloc..LC4;
                                                unaff_RBX = (double **)func_0x08090034();
                                                func_0x08090034();
                                                iVar4 = _reloc.num_tokens;
                                                iVar3 = _reloc.c_token;
                                                *unaff_RBX = extraout_XMM0_Qa_01;
                                                if (iVar3 < iVar4) {
                                                    do {
                                                        iVar6 = func_0x08090034(iVar3, reloc..LC4);
                                                        iVar4 = _reloc.num_tokens;
                                                        iVar3 = _reloc.c_token;
                                                        if (iVar6 != 0) break;
                                                        iVar3 = func_0x08090034(_reloc.c_token, reloc..LC9);
                                                        uVar11 = iVar3 == 0;
                                                        if ((bool)uVar11) goto code_r0x0800203f;
                                                        _reloc.c_token = _reloc.c_token + 1;
                                                        unaff_RBX = (double **)func_0x08090034();
                                                        func_0x08090034();
                                                        iVar4 = _reloc.num_tokens;
                                                        iVar3 = _reloc.c_token;
                                                        *unaff_RBX = extraout_XMM0_Qa_02;
                                                    } while (iVar3 < iVar4);
                                                }
                                                _reloc.contour_levels = (int32_t)_reloc.free_dynarray;
                                                iVar6 = _reloc.contour_order;
                                            }
                                        } else {
                                            _reloc.contour_kind = 2;
                                            _reloc.c_token = _reloc.c_token + 1;
                                            iVar4 = _reloc.num_tokens;
                                            iVar6 = _reloc.contour_order;
                                            iVar3 = _reloc.c_token;
                                        }
                                    } else {
                                        _reloc.contour_kind = 1;
                                        _reloc.c_token = _reloc.c_token + 1;
                                        iVar4 = _reloc.num_tokens;
                                        iVar6 = _reloc.contour_order;
                                        iVar3 = _reloc.c_token;
                                    }
                                } else {
                                    _reloc.contour_kind = 0;
                                    _reloc.c_token = _reloc.c_token + 1;
                                    iVar4 = _reloc.num_tokens;
                                    iVar6 = _reloc.contour_order;
                                    iVar3 = _reloc.c_token;
                                }
                            } else {
                                reloc.contour_sortlevels = (code)0x0;
                                _reloc.c_token = _reloc.c_token + 1;
                                iVar4 = _reloc.num_tokens;
                                iVar6 = _reloc.contour_order;
                                iVar3 = _reloc.c_token;
                            }
                        } else {
                            reloc.contour_sortlevels = (code)0x1;
                            _reloc.c_token = _reloc.c_token + 1;
                            iVar4 = _reloc.num_tokens;
                            iVar6 = _reloc.contour_order;
                            iVar3 = _reloc.c_token;
                        }
                    } else {
                        _reloc.c_token = _reloc.c_token + 1;
                        _reloc.contour_firstlinetype = func_0x08090034();
                        iVar4 = _reloc.num_tokens;
                        iVar6 = _reloc.contour_order;
                        iVar3 = _reloc.c_token;
                    }
                } else {
                    _reloc.c_token = _reloc.c_token + 1;
                    _reloc.contour_pts = func_0x08090034();
                    iVar4 = _reloc.num_tokens;
                    iVar6 = _reloc.contour_order;
                    iVar3 = _reloc.c_token;
                }
code_r0x08001b5e:
                _reloc.contour_order = iVar6;
            } while (iVar3 < iVar4);
        }
    } else {
        _reloc.contour_pts = 5;
        _reloc.contour_kind = 0;
        _reloc.contour_order = 4;
        _reloc.contour_levels = 5;
        _reloc.contour_levels_kind = 0;
        _reloc.contour_firstlinetype = 0;
    }
    return;
code_r0x0800197c:
    if (iVar1 == *(int64_t *)(in_FS_OFFSET + 0x28)) {
        return;
    }
    goto code_r0x08001ab8;
}




// WARNING: Control flow encountered bad instruction data
// WARNING: Possible PIC construction at 0x08005a97: Changing call to branch
// WARNING: Possible PIC construction at 0x08005acc: Changing call to branch
// WARNING: Possible PIC construction at 0x08004c4f: Changing call to branch
// WARNING: Possible PIC construction at 0x08004ca8: Changing call to branch
// WARNING: Possible PIC construction at 0x08004cdc: Changing call to branch
// WARNING: Possible PIC construction at 0x08004d19: Changing call to branch
// WARNING: Possible PIC construction at 0x08004d67: Changing call to branch
// WARNING: Possible PIC construction at 0x08004dae: Changing call to branch
// WARNING: Possible PIC construction at 0x08005a6f: Changing call to branch
// WARNING: Possible PIC construction at 0x080059fd: Changing call to branch
// WARNING: Possible PIC construction at 0x08005a23: Changing call to branch
// WARNING: Possible PIC construction at 0x08005a45: Changing call to branch
// WARNING: Possible PIC construction at 0x080053bd: Changing call to branch
// WARNING: Possible PIC construction at 0x08004f2c: Changing call to branch
// WARNING: Possible PIC construction at 0x0800524d: Changing call to branch
// WARNING: Possible PIC construction at 0x0800533d: Changing call to branch
// WARNING: Possible PIC construction at 0x0800567f: Changing call to branch
// WARNING: Possible PIC construction at 0x080056eb: Changing call to branch
// WARNING: Possible PIC construction at 0x08005908: Changing call to branch
// WARNING: Possible PIC construction at 0x0800593b: Changing call to branch
// WARNING: Possible PIC construction at 0x08004e8b: Changing call to branch
// WARNING: Possible PIC construction at 0x08004b72: Changing call to branch
// WARNING: Possible PIC construction at 0x08004b9c: Changing call to branch
// WARNING: Possible PIC construction at 0x08004bda: Changing call to branch
// WARNING: Possible PIC construction at 0x080052de: Changing call to branch
// WARNING: Possible PIC construction at 0x08004fa3: Changing call to branch
// WARNING: Possible PIC construction at 0x08005013: Changing call to branch
// WARNING: Possible PIC construction at 0x08004e23: Changing call to branch
// WARNING: Possible PIC construction at 0x0800505d: Changing call to branch
// WARNING: Possible PIC construction at 0x080050ca: Changing call to branch
// WARNING: Possible PIC construction at 0x08005111: Changing call to branch
// WARNING: Possible PIC construction at 0x08005992: Changing call to branch
// WARNING: Possible PIC construction at 0x08005165: Changing call to branch
// WARNING: Possible PIC construction at 0x080051f0: Changing call to branch
// WARNING: Possible PIC construction at 0x080052a9: Changing call to branch
// WARNING: Possible PIC construction at 0x08004ec8: Changing call to branch
// WARNING: Possible PIC construction at 0x08004ef8: Changing call to branch
// WARNING: Possible PIC construction at 0x08005556: Changing call to branch
// WARNING: Possible PIC construction at 0x0800558c: Changing call to branch
// WARNING: Possible PIC construction at 0x0800540f: Changing call to branch
// WARNING: Possible PIC construction at 0x08005b1d: Changing call to branch
// WARNING: Possible PIC construction at 0x08005c16: Changing call to branch
// WARNING: Possible PIC construction at 0x08005c5e: Changing call to branch
// WARNING: Possible PIC construction at 0x08005cba: Changing call to branch
// WARNING: Possible PIC construction at 0x08005ce6: Changing call to branch
// WARNING: Possible PIC construction at 0x08005f20: Changing call to branch
// WARNING: Possible PIC construction at 0x08005fbd: Changing call to branch
// WARNING: Possible PIC construction at 0x08006024: Changing call to branch
// WARNING: Possible PIC construction at 0x0800606d: Changing call to branch
// WARNING: Possible PIC construction at 0x0800611d: Changing call to branch
// WARNING: Possible PIC construction at 0x0800618d: Changing call to branch
// WARNING: Possible PIC construction at 0x08006235: Changing call to branch
// WARNING: Possible PIC construction at 0x08006261: Changing call to branch
// WARNING: Possible PIC construction at 0x0800628b: Changing call to branch
// WARNING: Possible PIC construction at 0x0800630d: Changing call to branch
// WARNING: Possible PIC construction at 0x0800634d: Changing call to branch
// WARNING: Possible PIC construction at 0x08006393: Changing call to branch
// WARNING: Possible PIC construction at 0x080063f9: Changing call to branch
// WARNING: Possible PIC construction at 0x08006213: Changing call to branch
// WARNING: Possible PIC construction at 0x080060d5: Changing call to branch
// WARNING: Possible PIC construction at 0x08006179: Changing call to branch
// WARNING: Possible PIC construction at 0x08005dd0: Changing call to branch
// WARNING: Possible PIC construction at 0x08005e28: Changing call to branch
// WARNING: Possible PIC construction at 0x08005e9e: Changing call to branch
// WARNING: Possible PIC construction at 0x08005b9d: Changing call to branch
// WARNING: Possible PIC construction at 0x08005bc4: Changing call to branch
// WARNING: Removing unreachable block (ram,0x08005ba2)
// WARNING: Removing unreachable block (ram,0x08005baa)
// WARNING: Removing unreachable block (ram,0x08005bc4)
// WARNING: Removing unreachable block (ram,0x08005ea3)
// WARNING: Removing unreachable block (ram,0x08005ecc)
// WARNING: Removing unreachable block (ram,0x08005efd)
// WARNING: Removing unreachable block (ram,0x08005f0d)
// WARNING: Removing unreachable block (ram,0x08005eda)
// WARNING: Removing unreachable block (ram,0x08005ea7)
// WARNING: Removing unreachable block (ram,0x08005e2d)
// WARNING: Removing unreachable block (ram,0x08005e56)
// WARNING: Removing unreachable block (ram,0x08005e91)
// WARNING: Removing unreachable block (ram,0x08005e6c)
// WARNING: Removing unreachable block (ram,0x08005e31)
// WARNING: Removing unreachable block (ram,0x08005dd5)
// WARNING: Removing unreachable block (ram,0x080060da)
// WARNING: Removing unreachable block (ram,0x0800616c)
// WARNING: Removing unreachable block (ram,0x080060f3)
// WARNING: Removing unreachable block (ram,0x080063fe)
// WARNING: Removing unreachable block (ram,0x08006408)
// WARNING: Removing unreachable block (ram,0x08006440)
// WARNING: Removing unreachable block (ram,0x0800640e)
// WARNING: Removing unreachable block (ram,0x08006398)
// WARNING: Removing unreachable block (ram,0x080063f0)
// WARNING: Removing unreachable block (ram,0x080063be)
// WARNING: Removing unreachable block (ram,0x08006430)
// WARNING: Removing unreachable block (ram,0x080063d5)
// WARNING: Removing unreachable block (ram,0x080063dd)
// WARNING: Removing unreachable block (ram,0x080063e9)
// WARNING: Removing unreachable block (ram,0x08006352)
// WARNING: Removing unreachable block (ram,0x08006384)
// WARNING: Removing unreachable block (ram,0x08006356)
// WARNING: Removing unreachable block (ram,0x08006312)
// WARNING: Removing unreachable block (ram,0x08006340)
// WARNING: Removing unreachable block (ram,0x08006316)
// WARNING: Removing unreachable block (ram,0x08006378)
// WARNING: Removing unreachable block (ram,0x0800632c)
// WARNING: Removing unreachable block (ram,0x08006290)
// WARNING: Removing unreachable block (ram,0x08006266)
// WARNING: Removing unreachable block (ram,0x080062c8)
// WARNING: Removing unreachable block (ram,0x08006300)
// WARNING: Removing unreachable block (ram,0x080062de)
// WARNING: Removing unreachable block (ram,0x0800626a)
// WARNING: Removing unreachable block (ram,0x08006284)
// WARNING: Removing unreachable block (ram,0x0800623a)
// WARNING: Removing unreachable block (ram,0x0800623e)
// WARNING: Removing unreachable block (ram,0x080061f0)
// WARNING: Removing unreachable block (ram,0x08006218)
// WARNING: Removing unreachable block (ram,0x08006226)
// WARNING: Removing unreachable block (ram,0x08006204)
// WARNING: Removing unreachable block (ram,0x08006254)
// WARNING: Removing unreachable block (ram,0x08006192)
// WARNING: Removing unreachable block (ram,0x080061c1)
// WARNING: Removing unreachable block (ram,0x080062a0)
// WARNING: Removing unreachable block (ram,0x080061d5)
// WARNING: Removing unreachable block (ram,0x08006232)
// WARNING: Removing unreachable block (ram,0x080061ea)
// WARNING: Removing unreachable block (ram,0x080062bd)
// WARNING: Removing unreachable block (ram,0x08006122)
// WARNING: Removing unreachable block (ram,0x0800613e)
// WARNING: Removing unreachable block (ram,0x0800617e)
// WARNING: Removing unreachable block (ram,0x08006154)
// WARNING: Removing unreachable block (ram,0x08006126)
// WARNING: Removing unreachable block (ram,0x08006072)
// WARNING: Removing unreachable block (ram,0x08006090)
// WARNING: Removing unreachable block (ram,0x08006110)
// WARNING: Removing unreachable block (ram,0x080060a6)
// WARNING: Removing unreachable block (ram,0x08006076)
// WARNING: Removing unreachable block (ram,0x08006029)
// WARNING: Removing unreachable block (ram,0x08005fe8)
// WARNING: Removing unreachable block (ram,0x0800602d)
// WARNING: Removing unreachable block (ram,0x08006060)
// WARNING: Removing unreachable block (ram,0x08006043)
// WARNING: Removing unreachable block (ram,0x08005ffb)
// WARNING: Removing unreachable block (ram,0x08005fc2)
// WARNING: Removing unreachable block (ram,0x080060c0)
// WARNING: Removing unreachable block (ram,0x08005fd0)
// WARNING: Removing unreachable block (ram,0x08006007)
// WARNING: Removing unreachable block (ram,0x08006017)
// WARNING: Removing unreachable block (ram,0x08005fdf)
// WARNING: Removing unreachable block (ram,0x08005f25)
// WARNING: Removing unreachable block (ram,0x08005fb0)
// WARNING: Removing unreachable block (ram,0x08005f58)
// WARNING: Removing unreachable block (ram,0x08005f7a)
// WARNING: Removing unreachable block (ram,0x08005f98)
// WARNING: Removing unreachable block (ram,0x08005fa4)
// WARNING: Removing unreachable block (ram,0x08005f86)
// WARNING: Removing unreachable block (ram,0x08005ceb)
// WARNING: Removing unreachable block (ram,0x08005cf3)
// WARNING: Removing unreachable block (ram,0x08005f12)
// WARNING: Removing unreachable block (ram,0x08005d5b)
// WARNING: Removing unreachable block (ram,0x08005cbf)
// WARNING: Removing unreachable block (ram,0x08005dc0)
// WARNING: Removing unreachable block (ram,0x08005cd9)
// WARNING: Removing unreachable block (ram,0x08005c63)
// WARNING: Removing unreachable block (ram,0x08005de0)
// WARNING: Removing unreachable block (ram,0x08005e1b)
// WARNING: Removing unreachable block (ram,0x08005df6)
// WARNING: Removing unreachable block (ram,0x08005c6b)
// WARNING: Removing unreachable block (ram,0x08005c8b)
// WARNING: Removing unreachable block (ram,0x08005c90)
// WARNING: Removing unreachable block (ram,0x08005c9c)
// WARNING: Removing unreachable block (ram,0x08005da0)
// WARNING: Removing unreachable block (ram,0x08005f20)
// WARNING: Removing unreachable block (ram,0x08005db4)
// WARNING: Removing unreachable block (ram,0x08005cb0)
// WARNING: Removing unreachable block (ram,0x08005b22)
// WARNING: Removing unreachable block (ram,0x08005b2a)
// WARNING: Removing unreachable block (ram,0x08005c00)
// WARNING: Removing unreachable block (ram,0x08005b44)
// WARNING: Removing unreachable block (ram,0x08005c1b)
// WARNING: Removing unreachable block (ram,0x08005b52)
// WARNING: Removing unreachable block (ram,0x08005b74)
// WARNING: Removing unreachable block (ram,0x08005b68)
// WARNING: Removing unreachable block (ram,0x08005b79)
// WARNING: Removing unreachable block (ram,0x08005b5e)
// WARNING: Removing unreachable block (ram,0x08005c0d)
// WARNING: Removing unreachable block (ram,0x08005414)
// WARNING: Removing unreachable block (ram,0x08005591)
// WARNING: Removing unreachable block (ram,0x0800575e)
// WARNING: Removing unreachable block (ram,0x08005a28)
// WARNING: Removing unreachable block (ram,0x08005778)
// WARNING: Removing unreachable block (ram,0x08005599)
// WARNING: Removing unreachable block (ram,0x0800555b)
// WARNING: Removing unreachable block (ram,0x0800556b)
// WARNING: Removing unreachable block (ram,0x0800556f)
// WARNING: Removing unreachable block (ram,0x080055ae)
// WARNING: Removing unreachable block (ram,0x080055ba)
// WARNING: Removing unreachable block (ram,0x080055c1)
// WARNING: Removing unreachable block (ram,0x0800557f)
// WARNING: Removing unreachable block (ram,0x08004efd)
// WARNING: Removing unreachable block (ram,0x08005408)
// WARNING: Removing unreachable block (ram,0x08004f05)
// WARNING: Removing unreachable block (ram,0x08005540)
// WARNING: Removing unreachable block (ram,0x08004ecd)
// WARNING: Removing unreachable block (ram,0x08004ed1)
// WARNING: Removing unreachable block (ram,0x08004eeb)
// WARNING: Removing unreachable block (ram,0x080052ae)
// WARNING: Removing unreachable block (ram,0x080051f5)
// WARNING: Removing unreachable block (ram,0x0800516a)
// WARNING: Removing unreachable block (ram,0x08005172)
// WARNING: Removing unreachable block (ram,0x0800517b)
// WARNING: Removing unreachable block (ram,0x0800519f)
// WARNING: Removing unreachable block (ram,0x08005642)
// WARNING: Removing unreachable block (ram,0x08005650)
// WARNING: Removing unreachable block (ram,0x080051b8)
// WARNING: Removing unreachable block (ram,0x08005997)
// WARNING: Removing unreachable block (ram,0x08005116)
// WARNING: Removing unreachable block (ram,0x0800512f)
// WARNING: Removing unreachable block (ram,0x080050cf)
// WARNING: Removing unreachable block (ram,0x08005070)
// WARNING: Removing unreachable block (ram,0x08005085)
// WARNING: Removing unreachable block (ram,0x080050f6)
// WARNING: Removing unreachable block (ram,0x08005062)
// WARNING: Removing unreachable block (ram,0x0800506a)
// WARNING: Removing unreachable block (ram,0x08004e28)
// WARNING: Removing unreachable block (ram,0x08005280)
// WARNING: Removing unreachable block (ram,0x08004e30)
// WARNING: Removing unreachable block (ram,0x08005040)
// WARNING: Removing unreachable block (ram,0x0800508c)
// WARNING: Removing unreachable block (ram,0x08005158)
// WARNING: Removing unreachable block (ram,0x080050a6)
// WARNING: Removing unreachable block (ram,0x08005992)
// WARNING: Removing unreachable block (ram,0x080050b3)
// WARNING: Removing unreachable block (ram,0x08005050)
// WARNING: Removing unreachable block (ram,0x08005018)
// WARNING: Removing unreachable block (ram,0x08004fa8)
// WARNING: Removing unreachable block (ram,0x08004fac)
// WARNING: Removing unreachable block (ram,0x08004e3f)
// WARNING: Removing unreachable block (ram,0x08004fcc)
// WARNING: Removing unreachable block (ram,0x080052e3)
// WARNING: Removing unreachable block (ram,0x08004bdf)
// WARNING: Removing unreachable block (ram,0x080059ba)
// WARNING: Removing unreachable block (ram,0x08004bf0)
// WARNING: Removing unreachable block (ram,0x08004c20)
// WARNING: Removing unreachable block (ram,0x08004ba1)
// WARNING: Removing unreachable block (ram,0x080052d0)
// WARNING: Removing unreachable block (ram,0x08004ba9)
// WARNING: Removing unreachable block (ram,0x08005a4a)
// WARNING: Removing unreachable block (ram,0x08004bc3)
// WARNING: Removing unreachable block (ram,0x08004b77)
// WARNING: Removing unreachable block (ram,0x08004f80)
// WARNING: Removing unreachable block (ram,0x08005008)
// WARNING: Removing unreachable block (ram,0x08005013)
// WARNING: Removing unreachable block (ram,0x08004f96)
// WARNING: Removing unreachable block (ram,0x08004b7f)
// WARNING: Removing unreachable block (ram,0x08004e90)
// WARNING: Removing unreachable block (ram,0x08005940)
// WARNING: Removing unreachable block (ram,0x0800594b)
// WARNING: Removing unreachable block (ram,0x0800590d)
// WARNING: Removing unreachable block (ram,0x08005911)
// WARNING: Removing unreachable block (ram,0x08005956)
// WARNING: Removing unreachable block (ram,0x08005965)
// WARNING: Removing unreachable block (ram,0x08005927)
// WARNING: Removing unreachable block (ram,0x080056f0)
// WARNING: Removing unreachable block (ram,0x080056ff)
// WARNING: Removing unreachable block (ram,0x08005684)
// WARNING: Removing unreachable block (ram,0x08005739)
// WARNING: Removing unreachable block (ram,0x0800568c)
// WARNING: Removing unreachable block (ram,0x080056a6)
// WARNING: Removing unreachable block (ram,0x080057e0)
// WARNING: Removing unreachable block (ram,0x080058fb)
// WARNING: Removing unreachable block (ram,0x080057eb)
// WARNING: Removing unreachable block (ram,0x08005a02)
// WARNING: Removing unreachable block (ram,0x080057f6)
// WARNING: Removing unreachable block (ram,0x08005a09)
// WARNING: Removing unreachable block (ram,0x08005876)
// WARNING: Removing unreachable block (ram,0x080056b1)
// WARNING: Removing unreachable block (ram,0x080056b9)
// WARNING: Removing unreachable block (ram,0x08005975)
// WARNING: Removing unreachable block (ram,0x080056c7)
// WARNING: Removing unreachable block (ram,0x080056e3)
// WARNING: Removing unreachable block (ram,0x08005342)
// WARNING: Removing unreachable block (ram,0x080055ff)
// WARNING: Removing unreachable block (ram,0x0800534a)
// WARNING: Removing unreachable block (ram,0x08005672)
// WARNING: Removing unreachable block (ram,0x08005364)
// WARNING: Removing unreachable block (ram,0x08005a1a)
// WARNING: Removing unreachable block (ram,0x08005376)
// WARNING: Removing unreachable block (ram,0x08005252)
// WARNING: Removing unreachable block (ram,0x080052f0)
// WARNING: Removing unreachable block (ram,0x08005330)
// WARNING: Removing unreachable block (ram,0x08005306)
// WARNING: Removing unreachable block (ram,0x0800525a)
// WARNING: Removing unreachable block (ram,0x08004f31)
// WARNING: Removing unreachable block (ram,0x08004e53)
// WARNING: Removing unreachable block (ram,0x08004f39)
// WARNING: Removing unreachable block (ram,0x08005240)
// WARNING: Removing unreachable block (ram,0x08004f53)
// WARNING: Removing unreachable block (ram,0x080053c2)
// WARNING: Removing unreachable block (ram,0x08005624)
// WARNING: Removing unreachable block (ram,0x080053ca)
// WARNING: Removing unreachable block (ram,0x08004f1f)
// WARNING: Removing unreachable block (ram,0x080053e4)
// WARNING: Removing unreachable block (ram,0x08005a74)
// WARNING: Removing unreachable block (ram,0x08004db3)
// WARNING: Removing unreachable block (ram,0x08004dbb)
// WARNING: Removing unreachable block (ram,0x08004d6c)
// WARNING: Removing unreachable block (ram,0x08004d74)
// WARNING: Removing unreachable block (ram,0x08004d93)
// WARNING: Removing unreachable block (ram,0x08004d1e)
// WARNING: Removing unreachable block (ram,0x080059ce)
// WARNING: Removing unreachable block (ram,0x08004d26)
// WARNING: Removing unreachable block (ram,0x080059eb)
// WARNING: Removing unreachable block (ram,0x08004d4c)
// WARNING: Removing unreachable block (ram,0x08004ce1)
// WARNING: Removing unreachable block (ram,0x08004ce9)
// WARNING: Removing unreachable block (ram,0x080053b0)
// WARNING: Removing unreachable block (ram,0x08004d03)
// WARNING: Removing unreachable block (ram,0x08004cad)
// WARNING: Removing unreachable block (ram,0x08004cb5)
// WARNING: Removing unreachable block (ram,0x08004fe0)
// WARNING: Removing unreachable block (ram,0x08004ccf)
// WARNING: Removing unreachable block (ram,0x08004c54)
// WARNING: Removing unreachable block (ram,0x08004c5c)
// WARNING: Removing unreachable block (ram,0x08004ea8)
// WARNING: Removing unreachable block (ram,0x08004ebb)
// WARNING: Removing unreachable block (ram,0x08004c6c)
// WARNING: Removing unreachable block (ram,0x08004e10)
// WARNING: Removing unreachable block (ram,0x08004e19)
// WARNING: Removing unreachable block (ram,0x08004c72)
// WARNING: Removing unreachable block (ram,0x08004b68)
// WARNING: Removing unreachable block (ram,0x08004c7b)
// WARNING: Removing unreachable block (ram,0x080058c5)
// WARNING: Removing unreachable block (ram,0x080058d6)
// WARNING: Removing unreachable block (ram,0x08004c40)
// WARNING: Removing unreachable block (ram,0x08004dd0)
// WARNING: Removing unreachable block (ram,0x08004dd7)
// WARNING: Removing unreachable block (ram,0x08004c84)
// WARNING: Removing unreachable block (ram,0x08004e80)
// WARNING: Removing unreachable block (ram,0x08004c9b)
// WARNING: Removing unreachable block (ram,0x08005ad1)
// WARNING: Removing unreachable block (ram,0x08005b00)
// WARNING: Removing unreachable block (ram,0x08005ad5)
// WARNING: Removing unreachable block (ram,0x08005b10)
// WARNING: Removing unreachable block (ram,0x08005aeb)
// WARNING: Removing unreachable block (ram,0x08005a9c)
// WARNING: Removing unreachable block (ram,0x08005aa0)
// WARNING: Removing unreachable block (ram,0x08005b90)
// WARNING: Removing unreachable block (ram,0x08005aba)
// WARNING: Removing unreachable block (ram,0x08005bc9)
// WARNING: Removing unreachable block (ram,0x08005abf)
// WARNING: Removing unreachable block (ram,0x08005bd3)
// WARNING: Removing unreachable block (ram,0x08005bf0)
// WARNING: Removing unreachable block (ram,0x08004ac0)
// WARNING: Removing unreachable block (ram,0x08005430)
// WARNING: Removing unreachable block (ram,0x080057a8)
// WARNING: Removing unreachable block (ram,0x080057c3)
// WARNING: Removing unreachable block (ram,0x080057af)
// WARNING: Removing unreachable block (ram,0x08005440)
// WARNING: Removing unreachable block (ram,0x08005453)
// WARNING: Removing unreachable block (ram,0x08005457)
// WARNING: Removing unreachable block (ram,0x080055cf)
// WARNING: Removing unreachable block (ram,0x08005655)
// WARNING: Removing unreachable block (ram,0x0800570f)
// WARNING: Removing unreachable block (ram,0x0800565e)
// WARNING: Removing unreachable block (ram,0x080055d5)
// WARNING: Removing unreachable block (ram,0x080055ef)
// WARNING: Removing unreachable block (ram,0x08005460)
// WARNING: Removing unreachable block (ram,0x08005450)
// WARNING: Removing unreachable block (ram,0x0800546c)
// WARNING: Removing unreachable block (ram,0x08005790)
// WARNING: Removing unreachable block (ram,0x08005477)
// WARNING: Removing unreachable block (ram,0x08005495)
// WARNING: Removing unreachable block (ram,0x0800549d)
// WARNING: Removing unreachable block (ram,0x080054b4)
// WARNING: Removing unreachable block (ram,0x08005528)
// WARNING: Removing unreachable block (ram,0x08004b04)
// WARNING: Removing unreachable block (ram,0x08005a3c)
// WARNING: Removing unreachable block (ram,0x08004b13)
// WARNING: Removing unreachable block (ram,0x08004b30)
// WARNING: Removing unreachable block (ram,0x08004de0)
// WARNING: Removing unreachable block (ram,0x08005a5e)
// WARNING: Removing unreachable block (ram,0x08005a63)
// WARNING: Removing unreachable block (ram,0x08004df7)
// WARNING: Removing unreachable block (ram,0x08004b3c)
// WARNING: Removing unreachable block (ram,0x08004c48)

void sym.set_object(undefined8 placeholder_0, undefined8 placeholder_1, undefined8 placeholder_2,
                   undefined8 placeholder_3, int64_t arg11)
{
    char cVar1;
    char *pcVar2;
    int64_t in_FS_OFFSET;
    
    pcVar2 = (char *)(uint64_t)_reloc.c_token;
    cVar1 = (char)_reloc.c_token;
    _reloc.c_token = _reloc.c_token + 1;
    *pcVar2 = *pcVar2 + cVar1;
    *pcVar2 = *pcVar2 + cVar1;
    pcVar2[in_FS_OFFSET] = pcVar2[in_FS_OFFSET] + cVar1;
    *(char *)((int64_t)pcVar2 * 2) = *(char *)((int64_t)pcVar2 * 2) + cVar1;
    *pcVar2 = *pcVar2 + cVar1;
    *pcVar2 = *pcVar2 + cVar1;
    // WARNING: Bad instruction - Truncating control flow here
    halt_baddata();
}




d  dd @ dd @ dd @  dd @  dd @ s dd @ s dd @ sy dd @ sy dd @ sym dd @ sym dd @ sym. dd @ sym. dd @ sym.s dd @ sym.s dd @ sym.se dd @ sym.se dd @ sym.set dd @ sym.set dd @ sym.set_ dd @ sym.set_ dd @ sym.set_l dd @ sym.set_l dd @ sym.set_lo dd @ sym.set_lo dd @ sym.set_log dd @ sym.set_log dd @ sym.set_logs dd @ sym.set_logs dd @ sym.set_logsc dd @ sym.set_logsc dd @ sym.set_logsca dd @ sym.set_logsca dd @ sym.set_logscal dd @ sym.set_logscal dd @ sym.set_logscale dd @ sym.set_logscaleopendir /proc/x/fd: No such file or directory
WARNING: r_list_purge: assertion 'list' failed (line 67)


// WARNING: Control flow encountered bad instruction data
// WARNING: Possible PIC construction at 0x0800791f: Changing call to branch
// WARNING: Possible PIC construction at 0x08008339: Changing call to branch
// WARNING: Possible PIC construction at 0x0800835d: Changing call to branch
// WARNING: Possible PIC construction at 0x08008385: Changing call to branch
// WARNING: Possible PIC construction at 0x080083ab: Changing call to branch
// WARNING: Possible PIC construction at 0x080083d3: Changing call to branch
// WARNING: Possible PIC construction at 0x0800860e: Changing call to branch
// WARNING: Possible PIC construction at 0x08008548: Changing call to branch
// WARNING: Possible PIC construction at 0x0800857c: Changing call to branch
// WARNING: Possible PIC construction at 0x080085c8: Changing call to branch
// WARNING: Possible PIC construction at 0x08007967: Changing call to branch
// WARNING: Possible PIC construction at 0x080079b1: Changing call to branch
// WARNING: Possible PIC construction at 0x08008326: Changing call to branch
// WARNING: Possible PIC construction at 0x08007a81: Changing call to branch
// WARNING: Possible PIC construction at 0x08007a3d: Changing call to branch
// WARNING: Possible PIC construction at 0x08007a6b: Changing call to branch
// WARNING: Possible PIC construction at 0x08007aa7: Changing call to branch
// WARNING: Possible PIC construction at 0x08007f64: Changing call to branch
// WARNING: Possible PIC construction at 0x08007fc3: Changing call to branch
// WARNING: Possible PIC construction at 0x08008023: Changing call to branch
// WARNING: Possible PIC construction at 0x08008067: Changing call to branch
// WARNING: Possible PIC construction at 0x080080ad: Changing call to branch
// WARNING: Possible PIC construction at 0x080080f1: Changing call to branch
// WARNING: Possible PIC construction at 0x08008137: Changing call to branch
// WARNING: Possible PIC construction at 0x08008182: Changing call to branch
// WARNING: Possible PIC construction at 0x08007cba: Changing call to branch
// WARNING: Possible PIC construction at 0x08007cd3: Changing call to branch
// WARNING: Possible PIC construction at 0x08007d0f: Changing call to branch
// WARNING: Possible PIC construction at 0x080082ea: Changing call to branch
// WARNING: Possible PIC construction at 0x080081c9: Changing call to branch
// WARNING: Possible PIC construction at 0x08007ee7: Changing call to branch
// WARNING: Possible PIC construction at 0x08007b3f: Changing call to branch
// WARNING: Possible PIC construction at 0x08007b8b: Changing call to branch
// WARNING: Possible PIC construction at 0x08007bd7: Changing call to branch
// WARNING: Removing unreachable block (ram,0x08007b90)
// WARNING: Removing unreachable block (ram,0x08007ba7)
// WARNING: Removing unreachable block (ram,0x08007bd0)
// WARNING: Removing unreachable block (ram,0x08007b44)
// WARNING: Removing unreachable block (ram,0x08007b5b)
// WARNING: Removing unreachable block (ram,0x080082a0)
// WARNING: Removing unreachable block (ram,0x08007b84)
// WARNING: Removing unreachable block (ram,0x08007eec)
// WARNING: Removing unreachable block (ram,0x08007ef4)
// WARNING: Removing unreachable block (ram,0x080082b8)
// WARNING: Removing unreachable block (ram,0x08007efd)
// WARNING: Removing unreachable block (ram,0x08007f03)
// WARNING: Removing unreachable block (ram,0x080081ce)
// WARNING: Removing unreachable block (ram,0x080082ef)
// WARNING: Removing unreachable block (ram,0x08007d14)
// WARNING: Removing unreachable block (ram,0x08007dc1)
// WARNING: Removing unreachable block (ram,0x08008260)
// WARNING: Removing unreachable block (ram,0x0800833e)
// WARNING: Removing unreachable block (ram,0x0800826e)
// WARNING: Removing unreachable block (ram,0x08007ddc)
// WARNING: Removing unreachable block (ram,0x080081b0)
// WARNING: Removing unreachable block (ram,0x08007de5)
// WARNING: Removing unreachable block (ram,0x08007d28)
// WARNING: Removing unreachable block (ram,0x08008250)
// WARNING: Removing unreachable block (ram,0x08007d3c)
// WARNING: Removing unreachable block (ram,0x08007d4c)
// WARNING: Removing unreachable block (ram,0x08008240)
// WARNING: Removing unreachable block (ram,0x08007d73)
// WARNING: Removing unreachable block (ram,0x08007d83)
// WARNING: Removing unreachable block (ram,0x08008230)
// WARNING: Removing unreachable block (ram,0x08007d9c)
// WARNING: Removing unreachable block (ram,0x08007dac)
// WARNING: Removing unreachable block (ram,0x08007dee)
// WARNING: Removing unreachable block (ram,0x080082ea)
// WARNING: Removing unreachable block (ram,0x08007df7)
// WARNING: Removing unreachable block (ram,0x08008220)
// WARNING: Removing unreachable block (ram,0x08007e0b)
// WARNING: Removing unreachable block (ram,0x08007e1b)
// WARNING: Removing unreachable block (ram,0x08008210)
// WARNING: Removing unreachable block (ram,0x08007e3e)
// WARNING: Removing unreachable block (ram,0x08007e4e)
// WARNING: Removing unreachable block (ram,0x08008200)
// WARNING: Removing unreachable block (ram,0x08007e63)
// WARNING: Removing unreachable block (ram,0x08007e73)
// WARNING: Removing unreachable block (ram,0x08007dbd)
// WARNING: Removing unreachable block (ram,0x08007cd8)
// WARNING: Removing unreachable block (ram,0x08007ce4)
// WARNING: Removing unreachable block (ram,0x08007cf0)
// WARNING: Removing unreachable block (ram,0x08007d00)
// WARNING: Removing unreachable block (ram,0x08007cbf)
// WARNING: Removing unreachable block (ram,0x08008187)
// WARNING: Removing unreachable block (ram,0x0800813c)
// WARNING: Removing unreachable block (ram,0x0800814c)
// WARNING: Removing unreachable block (ram,0x080080f6)
// WARNING: Removing unreachable block (ram,0x080080fe)
// WARNING: Removing unreachable block (ram,0x08008119)
// WARNING: Removing unreachable block (ram,0x08008129)
// WARNING: Removing unreachable block (ram,0x080080b2)
// WARNING: Removing unreachable block (ram,0x080080c2)
// WARNING: Removing unreachable block (ram,0x0800806c)
// WARNING: Removing unreachable block (ram,0x0800838a)
// WARNING: Removing unreachable block (ram,0x0800839c)
// WARNING: Removing unreachable block (ram,0x08008074)
// WARNING: Removing unreachable block (ram,0x0800808f)
// WARNING: Removing unreachable block (ram,0x0800809f)
// WARNING: Removing unreachable block (ram,0x08008028)
// WARNING: Removing unreachable block (ram,0x08008038)
// WARNING: Removing unreachable block (ram,0x08007fc8)
// WARNING: Removing unreachable block (ram,0x08008005)
// WARNING: Removing unreachable block (ram,0x08008015)
// WARNING: Removing unreachable block (ram,0x08007f69)
// WARNING: Removing unreachable block (ram,0x08008362)
// WARNING: Removing unreachable block (ram,0x08007f74)
// WARNING: Removing unreachable block (ram,0x080082d1)
// WARNING: Removing unreachable block (ram,0x08007f83)
// WARNING: Removing unreachable block (ram,0x08007aac)
// WARNING: Removing unreachable block (ram,0x08007a70)
// WARNING: Removing unreachable block (ram,0x08007a42)
// WARNING: Removing unreachable block (ram,0x080081e0)
// WARNING: Removing unreachable block (ram,0x08007a4a)
// WARNING: Removing unreachable block (ram,0x0800828e)
// WARNING: Removing unreachable block (ram,0x08007a64)
// WARNING: Removing unreachable block (ram,0x08007a86)
// WARNING: Removing unreachable block (ram,0x08007a30)
// WARNING: Removing unreachable block (ram,0x08007a8a)
// WARNING: Removing unreachable block (ram,0x08007a78)
// WARNING: Removing unreachable block (ram,0x080079b6)
// WARNING: Removing unreachable block (ram,0x080079c2)
// WARNING: Removing unreachable block (ram,0x080079d0)
// WARNING: Removing unreachable block (ram,0x080079de)
// WARNING: Removing unreachable block (ram,0x08007a7e)
// WARNING: Removing unreachable block (ram,0x08007aa0)
// WARNING: Removing unreachable block (ram,0x08007f28)
// WARNING: Removing unreachable block (ram,0x08007f43)
// WARNING: Removing unreachable block (ram,0x08008376)
// WARNING: Removing unreachable block (ram,0x08007f57)
// WARNING: Removing unreachable block (ram,0x08007f98)
// WARNING: Removing unreachable block (ram,0x08008352)
// WARNING: Removing unreachable block (ram,0x08007fa6)
// WARNING: Removing unreachable block (ram,0x08007c90)
// WARNING: Removing unreachable block (ram,0x08007c9e)
// WARNING: Removing unreachable block (ram,0x080083b0)
// WARNING: Removing unreachable block (ram,0x08007cb8)
// WARNING: Removing unreachable block (ram,0x08007e90)
// WARNING: Removing unreachable block (ram,0x08007e9e)
// WARNING: Removing unreachable block (ram,0x08007ee0)
// WARNING: Removing unreachable block (ram,0x08007f10)
// WARNING: Removing unreachable block (ram,0x08007b10)
// WARNING: Removing unreachable block (ram,0x08007b28)
// WARNING: Removing unreachable block (ram,0x08007b36)
// WARNING: Removing unreachable block (ram,0x08007c20)
// WARNING: Removing unreachable block (ram,0x08007c37)
// WARNING: Removing unreachable block (ram,0x08007c3a)
// WARNING: Removing unreachable block (ram,0x08007c48)
// WARNING: Removing unreachable block (ram,0x08007c60)
// WARNING: Removing unreachable block (ram,0x08007c78)
// WARNING: Removing unreachable block (ram,0x08008309)
// WARNING: Removing unreachable block (ram,0x0800831d)
// WARNING: Removing unreachable block (ram,0x0800796c)
// WARNING: Removing unreachable block (ram,0x08007972)
// WARNING: Removing unreachable block (ram,0x08007980)
// WARNING: Removing unreachable block (ram,0x080085cd)
// WARNING: Removing unreachable block (ram,0x080085db)
// WARNING: Removing unreachable block (ram,0x08008613)
// WARNING: Removing unreachable block (ram,0x08008668)
// WARNING: Removing unreachable block (ram,0x0800863f)
// WARNING: Removing unreachable block (ram,0x08008658)
// WARNING: Removing unreachable block (ram,0x0800864b)
// WARNING: Removing unreachable block (ram,0x080085f1)
// WARNING: Removing unreachable block (ram,0x08008581)
// WARNING: Removing unreachable block (ram,0x08008587)
// WARNING: Removing unreachable block (ram,0x0800854d)
// WARNING: Removing unreachable block (ram,0x080083d8)
// WARNING: Removing unreachable block (ram,0x08008598)
// WARNING: Removing unreachable block (ram,0x080085bb)
// WARNING: Removing unreachable block (ram,0x0800849b)
// WARNING: Removing unreachable block (ram,0x08008518)
// WARNING: Removing unreachable block (ram,0x080085d1)
// WARNING: Removing unreachable block (ram,0x08008521)
// WARNING: Removing unreachable block (ram,0x08008524)
// WARNING: Removing unreachable block (ram,0x08008540)
// WARNING: Removing unreachable block (ram,0x080084a3)
// WARNING: Removing unreachable block (ram,0x080084b3)
// WARNING: Removing unreachable block (ram,0x080084c0)
// WARNING: Removing unreachable block (ram,0x080084d8)
// WARNING: Removing unreachable block (ram,0x080084e2)
// WARNING: Removing unreachable block (ram,0x080085fd)
// WARNING: Removing unreachable block (ram,0x08008602)
// WARNING: Removing unreachable block (ram,0x08008503)
// WARNING: Removing unreachable block (ram,0x08007924)
// WARNING: Removing unreachable block (ram,0x0800832b)
// WARNING: Removing unreachable block (ram,0x08008330)
// WARNING: Removing unreachable block (ram,0x08007938)
// WARNING: Removing unreachable block (ram,0x08007bdc)
// WARNING: Removing unreachable block (ram,0x080083c4)
// WARNING: Removing unreachable block (ram,0x08007bf3)
// WARNING: Removing unreachable block (ram,0x08007ac0)
// WARNING: Removing unreachable block (ram,0x08007990)
// WARNING: Removing unreachable block (ram,0x080079a4)
// WARNING: Removing unreachable block (ram,0x08007ad2)
// WARNING: Removing unreachable block (ram,0x08007ade)
// WARNING: Removing unreachable block (ram,0x08007aeb)
// WARNING: Removing unreachable block (ram,0x08007af8)
// WARNING: Recovered jumptable eliminated as dead code

void sym.set_palette(void)
{
    char cVar1;
    char *pcVar2;
    int64_t in_FS_OFFSET;
    
    pcVar2 = (char *)(uint64_t)_reloc.c_token;
    _reloc.c_token = _reloc.c_token + 1;
    if ((_reloc.num_tokens <= (int32_t)_reloc.c_token) && (_reloc..data != 0)) {
        pcVar2 = (char *)sym.reset_palette.part.0();
    }
    cVar1 = (char)pcVar2;
    *pcVar2 = *pcVar2 + cVar1;
    *pcVar2 = *pcVar2 + cVar1;
    pcVar2[in_FS_OFFSET] = pcVar2[in_FS_OFFSET] + cVar1;
    *(char *)((int64_t)pcVar2 * 2) = *(char *)((int64_t)pcVar2 * 2) + cVar1;
    *pcVar2 = *pcVar2 + cVar1;
    *pcVar2 = *pcVar2 + cVar1;
    // WARNING: Bad instruction - Truncating control flow here
    halt_baddata();
}




// WARNING: Possible PIC construction at 0x080011dc: Changing call to branch
// WARNING: Possible PIC construction at 0x08001204: Changing call to branch
// WARNING: Possible PIC construction at 0x0800122c: Changing call to branch
// WARNING: Possible PIC construction at 0x08001254: Changing call to branch
// WARNING: Possible PIC construction at 0x0800127c: Changing call to branch
// WARNING: Removing unreachable block (ram,0x08001259)
// WARNING: Removing unreachable block (ram,0x08001261)
// WARNING: Removing unreachable block (ram,0x08001275)
// WARNING: Removing unreachable block (ram,0x08001231)
// WARNING: Removing unreachable block (ram,0x08001239)
// WARNING: Removing unreachable block (ram,0x0800124d)
// WARNING: Removing unreachable block (ram,0x08001209)
// WARNING: Removing unreachable block (ram,0x08001211)
// WARNING: Removing unreachable block (ram,0x08001225)
// WARNING: Removing unreachable block (ram,0x080011e1)
// WARNING: Removing unreachable block (ram,0x080011e9)
// WARNING: Removing unreachable block (ram,0x080011fd)
// WARNING: Removing unreachable block (ram,0x08001281)
// WARNING: Removing unreachable block (ram,0x08001289)
// WARNING: Removing unreachable block (ram,0x0800129d)

int64_t ** sym.set_colorbox(void)
{
    int64_t iVar1;
    uint32_t uVar2;
    undefined4 uVar3;
    int32_t iVar4;
    uint32_t uVar5;
    int64_t **ppiVar6;
    int64_t **ppiVar7;
    int64_t **ppiVar8;
    undefined4 *puVar9;
    code *pcVar10;
    code **ppcVar11;
    undefined8 *puVar12;
    int32_t iVar13;
    uint64_t uVar14;
    uint64_t uVar15;
    int64_t **ppiVar16;
    int64_t in_FS_OFFSET;
    double extraout_XMM0_Qa;
    double extraout_XMM0_Qa_00;
    int64_t *extraout_XMM0_Qa_01;
    undefined auVar17 [12];
    code *pcStack104;
    uint64_t uStack96;
    int64_t **ppiStack88;
    uint64_t uStack80;
    uint64_t uStack72;
    double dStack64;
    double dStack56;
    code *pcStack48;
    
    ppiVar6 = (int64_t **)(uint64_t)_reloc.c_token;
    _reloc.c_token = _reloc.c_token + 1;
    if ((int32_t)_reloc.num_tokens <= (int32_t)_reloc.c_token) {
        reloc.color_box = (code)0x64;
        return ppiVar6;
    }
    ppiVar6 = (int64_t **)func_0x08090034(_reloc.c_token, reloc..LC4);
    if ((int32_t)ppiVar6 == 0) {
        if ((int32_t)_reloc.c_token < (int32_t)_reloc.num_tokens) {
            do {
                ppiVar6 = (int64_t **)func_0x08090034(_reloc.c_token, reloc..LC4);
                if ((int32_t)ppiVar6 != 0) break;
                uVar3 = func_0x08090034(reloc.set_colorbox_tbl, _reloc.c_token);
    // switch table (14 cases) at 0x8012700
                switch(uVar3) {
                default:
                    func_0x08090034(_reloc.c_token, "invali");
                    goto code_r0x080004cc;
                case 1:
                    *(undefined *)0x8090055 = 0x76;
                    _reloc.c_token = _reloc.c_token + 1;
                    ppiVar6 = (int64_t **)(uint64_t)_reloc.num_tokens;
                    break;
                case 2:
                    *(undefined *)0x8090055 = 0x68;
                    _reloc.c_token = _reloc.c_token + 1;
                    ppiVar6 = (int64_t **)(uint64_t)_reloc.num_tokens;
                    break;
                case 3:
                    reloc.color_box = (code)0x64;
                    _reloc.c_token = _reloc.c_token + 1;
                    ppiVar6 = (int64_t **)(uint64_t)_reloc.num_tokens;
                    break;
                case 4:
code_r0x08000430:
                    reloc.color_box = (code)0x75;
                    _reloc.c_token = _reloc.c_token + 1;
                    ppiVar6 = (int64_t **)(uint64_t)_reloc.num_tokens;
                    break;
                case 5:
                    ppiVar6 = (int64_t **)(uint64_t)_reloc.num_tokens;
                    *(undefined *)0x8090056 = 1;
                    iVar4 = _reloc.c_token + 1;
                    if (iVar4 < (int32_t)_reloc.num_tokens) {
                        _reloc.c_token = iVar4;
                        iVar4 = func_0x08090034(iVar4, reloc..LC4);
                        if (iVar4 != 0) goto code_r0x080003aa;
                        *(int32_t *)0x8090058 = func_0x08090034();
                        if (0 < *(int32_t *)0x8090058) goto code_r0x08000365;
                        *(int32_t *)0x8090058 = 0;
                        func_0x08090034(_reloc.c_token, "");
                        goto code_r0x08000430;
                    }
                    _reloc.c_token = _reloc.c_token + 2;
                    break;
                case 6:
                    *(int32_t *)0x8090058 = -1;
code_r0x080003aa:
                    _reloc.c_token = _reloc.c_token + 1;
                    ppiVar6 = (int64_t **)(uint64_t)_reloc.num_tokens;
                    break;
                case 7:
                    *(undefined *)0x8090056 = 0;
                    _reloc.c_token = _reloc.c_token + 1;
                    ppiVar6 = (int64_t **)(uint64_t)_reloc.num_tokens;
                    break;
                case 8:
                    _reloc.c_token = _reloc.c_token + 1;
                    if (((int32_t)_reloc.c_token < (int32_t)_reloc.num_tokens) &&
                       (iVar4 = func_0x08090034(_reloc.c_token, reloc..LC4), iVar4 == 0)) {
                        func_0x08090034(reloc.set_colorbox_tbl, 3, 3);
code_r0x08000365:
                        ppiVar6 = (int64_t **)(uint64_t)_reloc.num_tokens;
                        break;
                    }
code_r0x080004cc:
                    func_0x08090034(_reloc.c_token, "");
code_r0x080004e0:
                    func_0x08090034(_reloc.c_token, "");
                    uStack96 = 0;
                    pcStack48 = reloc..rodata;
                    pcVar10 = reloc..LC4;
                    _reloc.dgrid3d_mode = 0;
                    reloc.dgrid3d_kdensity = (code)0x0;
                    _reloc.c_token = _reloc.c_token + 1;
                    uVar14 = (uint64_t)_reloc.dgrid3d_row_fineness;
                    dStack64 = _reloc.dgrid3d_x_scale;
                    ppiVar6 = (int64_t **)(uint64_t)_reloc.dgrid3d_col_fineness;
                    uVar15 = (uint64_t)_reloc.dgrid3d_norm_value;
                    dStack56 = _reloc.dgrid3d_y_scale;
                    if ((int32_t)_reloc.num_tokens <= (int32_t)_reloc.c_token) goto code_r0x080005d0;
                    goto code_r0x08000570;
                case 9:
                    _reloc.c_token = _reloc.c_token + 1;
                    if (((int32_t)_reloc.c_token < (int32_t)_reloc.num_tokens) &&
                       (iVar4 = func_0x08090034(_reloc.c_token, reloc..LC4), iVar4 == 0)) {
                        func_0x08090034(reloc.dgrid3d_mode, 3, 3);
                        ppiVar6 = (int64_t **)(uint64_t)_reloc.num_tokens;
                        break;
                    }
                    goto code_r0x080004e0;
                case 10:
                    _reloc.dgrid3d_norm_value = CONCAT31(*(unkuint3 *)0x80900b5, 1);
                    _reloc.c_token = _reloc.c_token + 2;
                    ppiVar6 = (int64_t **)(uint64_t)_reloc.num_tokens;
                    break;
                case 0xb:
                    _reloc.dgrid3d_norm_value = (uint32_t)*(unkuint3 *)0x80900b5 << 8;
                    _reloc.c_token = _reloc.c_token + 2;
                    ppiVar6 = (int64_t **)(uint64_t)_reloc.num_tokens;
                    break;
                case 0xc:
                    _reloc.equals = 1;
                    _reloc.c_token = _reloc.c_token + 1;
                    ppiVar6 = (int64_t **)(uint64_t)_reloc.num_tokens;
                    break;
                case 0xd:
                    _reloc.equals = 0;
                    _reloc.c_token = _reloc.c_token + 1;
                    ppiVar6 = (int64_t **)(uint64_t)_reloc.num_tokens;
                }
            } while ((int32_t)_reloc.c_token < (int32_t)ppiVar6);
        }
        if (reloc.color_box != (code)0x6e) {
            return ppiVar6;
        }
    }
    reloc.color_box = (code)0x64;
    return ppiVar6;
    while( true ) {
        uStack96 = (uint64_t)(iVar13 + 1);
        _reloc.c_token = _reloc.c_token + 1;
        if ((int32_t)_reloc.num_tokens <= (int32_t)_reloc.c_token) break;
code_r0x08000570:
        uStack72 = 0x8000578;
        iVar4 = func_0x08090034(_reloc.c_token, reloc..LC4);
        if (iVar4 != 0) break;
        uStack72 = 0x800058e;
        uVar5 = func_0x08090034(reloc.dgrid3d_mode_tbl, _reloc.c_token);
        if (uVar5 == 8) goto code_r0x080006c0;
        _reloc.c_token = _reloc.c_token + 1;
        _reloc.dgrid3d_mode = uVar5;
        if (uVar5 == 2) goto code_r0x080006ac;
        if ((int32_t)uVar5 < 3) {
            if (uVar5 != 1) goto code_r0x080006c0;
            if ((int32_t)_reloc.num_tokens <= (int32_t)_reloc.c_token) break;
            uStack72 = 0x8000740;
            iVar4 = func_0x08090034(_reloc.c_token, reloc..LC4);
            if (iVar4 != 0) goto code_r0x080006ac;
code_r0x08000716:
            uStack72 = 0x800071b;
            uVar5 = func_0x08090034();
            uVar15 = (uint64_t)uVar5;
            if ((int32_t)_reloc.num_tokens <= (int32_t)_reloc.c_token) break;
            goto code_r0x08000570;
        }
        if (uVar5 - 3 < 5) {
            if ((int32_t)_reloc.num_tokens <= (int32_t)_reloc.c_token) break;
            uStack72 = 0x800067c;
            iVar4 = func_0x08090034(_reloc.c_token, reloc..LC4);
            if (iVar4 == 0) {
                uStack72 = 0x80007d2;
                iVar4 = func_0x08090034(_reloc.c_token, "kdens$ity2d");
                if (iVar4 != 0) {
                    reloc.dgrid3d_kdensity = (code)0x1;
                    _reloc.c_token = _reloc.c_token + 1;
                }
            }
            if ((int32_t)_reloc.num_tokens <= (int32_t)_reloc.c_token) break;
            uStack72 = 0x800069e;
            iVar4 = func_0x08090034(_reloc.c_token, reloc..LC4);
            if (iVar4 == 0) {
                uStack72 = 0x8000775;
                func_0x08090034();
                uStack72 = 0x800078c;
                dStack64 = extraout_XMM0_Qa;
                iVar4 = func_0x08090034(_reloc.c_token, reloc..LC9);
                if (iVar4 == 0) {
                    dStack56 = dStack64;
                    if ((int32_t)_reloc.num_tokens <= (int32_t)_reloc.c_token) break;
                } else {
                    _reloc.c_token = _reloc.c_token + 1;
                    uStack72 = 0x800082c;
                    func_0x08090034();
                    dStack56 = extraout_XMM0_Qa_00;
                    if ((int32_t)_reloc.num_tokens <= (int32_t)_reloc.c_token) break;
                }
            } else {
code_r0x080006ac:
                if ((int32_t)_reloc.num_tokens <= (int32_t)_reloc.c_token) break;
            }
            goto code_r0x08000570;
        }
code_r0x080006c0:
        uStack72 = 0x80006d2;
        iVar4 = func_0x08090034(_reloc.c_token, reloc..LC9);
        iVar13 = (int32_t)uStack96;
        if (iVar4 == 0) {
            if (iVar13 == 0) {
                uStack72 = 0x8000755;
                ppiVar6 = (int64_t **)func_0x08090034();
                uVar14 = (uint64_t)ppiVar6 & 0xffffffff;
                goto code_r0x080006ac;
            }
            if (iVar13 != 1) {
                if (iVar13 == 2) goto code_r0x08000716;
                goto code_r0x0800086b;
            }
            uStack72 = 0x80007fd;
            uVar5 = func_0x08090034();
            ppiVar6 = (int64_t **)(uint64_t)uVar5;
            if ((int32_t)_reloc.num_tokens <= (int32_t)_reloc.c_token) break;
            goto code_r0x08000570;
        }
    }
code_r0x080005d0:
    if (((int32_t)uVar14 - 2U < 999) && ((int32_t)ppiVar6 - 2U < 999)) {
        ppiVar7 = (int64_t **)(uint64_t)_reloc.dgrid3d_mode;
        if (_reloc.dgrid3d_mode == 0) {
            _reloc.dgrid3d_mode = 1;
        }
        if ((0.00000000 <= dStack64) && (0.00000000 <= dStack56)) {
            _reloc.dgrid3d_x_scale = dStack64;
            _reloc.dgrid3d_y_scale = dStack56;
            _reloc.dgrid3d_row_fineness = (int32_t)uVar14;
            _reloc.dgrid3d_col_fineness = (int32_t)ppiVar6;
            _reloc.dgrid3d_norm_value = (int32_t)uVar15;
            reloc.dgrid3d = (code)0x1;
            return ppiVar7;
        }
    } else {
        uStack72 = 0x800085a;
        func_0x08090034(0xffffffff, "Number of grid points must be in [2:1000] - not changed!");
    }
    uStack72 = 0x800086b;
    func_0x08090034(0xffffffff, "Scale factors must be greater than zero - not changed!");
code_r0x0800086b:
    uStack72 = 0x800087f;
    func_0x08090034(_reloc.c_token, "Unrecognized keyword or unexpected value");
    _reloc.c_token = _reloc.c_token + 1;
    ppcVar11 = &pcStack104;
    pcStack104 = reloc..LC4;
    ppiStack88 = ppiVar6;
    uStack80 = uVar15;
    uStack72 = uVar14;
    iVar4 = func_0x08090034(_reloc.c_token, "back$head");
    if ((((((iVar4 == 0) && (iVar4 = func_0x08090034(_reloc.c_token, "front"), iVar4 == 0)) &&
          (iVar4 = func_0x08090034(_reloc.c_token, "from"), iVar4 == 0)) &&
         ((iVar4 = func_0x08090034(_reloc.c_token, reloc..LC16), iVar4 == 0 &&
          (iVar4 = func_0x08090034(_reloc.c_token, reloc..LC17), iVar4 == 0)))) &&
        ((iVar4 = func_0x08090034(_reloc.c_token, reloc..LC18), iVar4 == 0 &&
         ((iVar4 = func_0x08090034(_reloc.c_token, "size"), iVar4 == 0 &&
          (iVar4 = func_0x08090034(_reloc.c_token, "filled"), iVar4 == 0)))))) &&
       ((iVar4 = func_0x08090034(_reloc.c_token, "empty"), iVar4 == 0 &&
        ((((iVar4 = func_0x08090034(_reloc.c_token, reloc..LC22), iVar4 == 0 &&
           (iVar4 = func_0x08090034(_reloc.c_token, "arrowstyle"), iVar4 == 0)) &&
          (iVar4 = func_0x08090034(_reloc.c_token, "head$s"), iVar4 == 0)) &&
         ((iVar4 = func_0x08090034(_reloc.c_token, "nohead"), iVar4 == 0 &&
          (iVar4 = func_0x08090034(_reloc.c_token, "nobo$rder"), iVar4 == 0)))))))) {
        ppiVar7 = (int64_t **)func_0x08090034();
        uVar14 = (uint64_t)ppiVar7 & 0xffffffff;
        if ((int32_t)ppiVar7 < 1) {
            func_0x08090034(_reloc.c_token, "tag must be > 0");
            goto code_r0x08000cf8;
        }
        ppiVar6 = _reloc.first_arrow;
        if (_reloc.first_arrow != (int64_t **)0x0) goto code_r0x080008de;
    } else {
        uVar14 = 0;
        ppiVar7 = _reloc.first_arrow;
        if (_reloc.first_arrow != (int64_t **)0x0) {
            do {
                iVar4 = (int32_t)uVar14;
                uVar5 = iVar4 + 1;
                uVar14 = (uint64_t)uVar5;
                ppiVar6 = _reloc.first_arrow;
                if (*(uint32_t *)(ppiVar7 + 1) != uVar5) goto code_r0x080008de;
                ppiVar7 = (int64_t **)*ppiVar7;
                auVar17 = CONCAT48(iVar4, ppiVar7);
                if (ppiVar7 == (int64_t **)0x0) goto code_r0x08000b78;
            } while( true );
        }
        uVar14 = 1;
    }
    ppiVar8 = (int64_t **)func_0x08090034(0x108, "arrow");
    pcVar10 = (code *)(int64_t **)0x0;
    ppiVar7 = ppiVar8;
code_r0x0800091a:
    _reloc.first_arrow = ppiVar7;
    *(int32_t *)(ppiVar8 + 1) = (int32_t)uVar14;
    *ppiVar8 = (int64_t *)pcVar10;
    ppiVar8[4] = (int64_t *)0x0;
    ppiVar8[5] = (int64_t *)0x0;
    ppiVar8[6] = (int64_t *)0x0;
    ppiVar8[7] = (int64_t *)0x0;
    *(undefined4 *)(ppiVar8 + 8) = 0;
    ppiVar8[9] = (int64_t *)0x0;
    ppiVar8[10] = (int64_t *)0x0;
    ppiVar8[0xb] = (int64_t *)0x0;
    ppiVar8[0xc] = (int64_t *)0x0;
    *(undefined8 *)((int64_t)ppiVar8 + 0xc) = 3;
    *(undefined8 *)((int64_t)ppiVar8 + 0x14) = 0;
    ppiVar7 = (int64_t **)func_0x08090034();
    pcVar10 = (code *)ppiVar8;
code_r0x08000980:
    if ((int32_t)_reloc.num_tokens <= (int32_t)_reloc.c_token) {
        return ppiVar7;
    }
    uVar15 = 0;
    uVar14 = 0;
    ppiVar6 = (int64_t **)((int64_t)pcVar10 + 0x68);
    uVar5 = _reloc.c_token;
code_r0x080009f8:
    ppiVar7 = (int64_t **)func_0x08090034(uVar5, reloc..LC4);
    if ((int32_t)ppiVar7 != 0) {
        return ppiVar7;
    }
    iVar4 = func_0x08090034(_reloc.c_token, "from");
    if ((iVar4 == 0) && (iVar4 = func_0x08090034(_reloc.c_token, reloc..LC16), iVar4 == 0)) {
        iVar4 = func_0x08090034(_reloc.c_token, reloc..LC17);
        if ((iVar4 != 0) || (iVar4 = func_0x08090034(_reloc.c_token, reloc..LC18), iVar4 != 0)) {
            if ((char)uVar15 != '\0') goto code_r0x08000b63;
            iVar4 = func_0x08090034(_reloc.c_token, reloc..LC18);
            *(uint32_t *)((int64_t)pcVar10 + 0xc) = (uint32_t)(iVar4 != 0);
            _reloc.c_token = _reloc.c_token + 1;
            if (((int32_t)_reloc.num_tokens <= (int32_t)_reloc.c_token) ||
               (iVar4 = func_0x08090034(_reloc.c_token, reloc..LC4), iVar4 != 0)) goto code_r0x08000dfd;
            uVar15 = 1;
            ppiVar7 = (int64_t **)func_0x08090034();
            uVar5 = _reloc.c_token;
            if ((int32_t)_reloc.num_tokens <= (int32_t)_reloc.c_token) {
                return ppiVar7;
            }
            goto code_r0x080009f8;
        }
        iVar4 = func_0x08090034(_reloc.c_token, "len$gth");
        if (iVar4 == 0) {
code_r0x08000cf8:
            iVar4 = func_0x08090034(_reloc.c_token, "ang$le");
            uVar2 = _reloc.c_token;
            if (iVar4 == 0) {
                ppiVar7 = (int64_t **)func_0x08090034(ppiVar6, 1);
                uVar5 = _reloc.c_token;
                if (_reloc.c_token == uVar2) {
                    if ((int32_t)_reloc.num_tokens <= (int32_t)_reloc.c_token) {
                        return ppiVar7;
                    }
                    ppiVar7 = (int64_t **)func_0x08090034(_reloc.c_token, reloc..LC4);
                    uVar5 = _reloc.c_token;
                    if ((int32_t)ppiVar7 == 0) goto code_r0x08000e11;
                }
            } else {
                _reloc.c_token = _reloc.c_token + 1;
                ppiVar7 = (int64_t **)func_0x08090034();
                uVar5 = _reloc.c_token;
                *(int64_t **)((int64_t)pcVar10 + 0x60) = extraout_XMM0_Qa_01;
            }
            goto code_r0x080009ec;
        }
        if ((char)uVar15 != '\0') goto code_r0x08000b63;
        _reloc.c_token = _reloc.c_token + 1;
        uVar15 = 1;
        *(undefined4 *)((int64_t)pcVar10 + 0xc) = 2;
        ppiVar7 = (int64_t **)func_0x08090034((int64_t **)((int64_t)pcVar10 + 0x38), 0, 1);
        uVar5 = _reloc.c_token;
    } else {
        if ((char)uVar14 != '\0') goto code_r0x08000b63;
        _reloc.c_token = _reloc.c_token + 1;
        if (((int32_t)_reloc.num_tokens <= (int32_t)_reloc.c_token) ||
           (iVar4 = func_0x08090034(_reloc.c_token, reloc..LC4), iVar4 != 0)) {
            func_0x08090034(_reloc.c_token, "start coordinates expected");
code_r0x08000dfd:
            func_0x08090034(_reloc.c_token, "end coordinates expected");
code_r0x08000e11:
            ppiVar7 = (int64_t **)(uint64_t)_reloc.c_token;
            func_0x08090034(ppiVar7, "wrong argument in set arrow");
            goto code_r0x08000e30;
        }
        uVar14 = 1;
        ppiVar7 = (int64_t **)func_0x08090034();
        uVar5 = _reloc.c_token;
    }
code_r0x080009ec:
    if ((int32_t)_reloc.num_tokens <= (int32_t)uVar5) {
        return ppiVar7;
    }
    goto code_r0x080009f8;
code_r0x08000b63:
    auVar17 = func_0x08090034(_reloc.c_token, "duplicate or contradictory arguments");
code_r0x08000b78:
    ppiVar7 = SUB128(auVar17, 0);
    uVar14 = (uint64_t)(SUB124(auVar17 >> 0x40, 0) + 2);
code_r0x080008de:
    ppiVar16 = (int64_t **)0x0;
    while (pcVar10 = (code *)ppiVar6, *(int32_t *)(int64_t **)((int64_t)pcVar10 + 8) < (int32_t)uVar14) {
        ppiVar6 = *(int64_t ***)pcVar10;
        ppiVar16 = (int64_t **)pcVar10;
        if (ppiVar6 == (int64_t **)0x0) {
            ppiVar8 = (int64_t **)func_0x08090034(0x108, "arrow");
            goto code_r0x08000916;
        }
    }
    if (*(int32_t *)(int64_t **)((int64_t)pcVar10 + 8) != (int32_t)uVar14) goto code_r0x08000ae9;
    goto code_r0x08000980;
code_r0x08000ae9:
    ppiVar8 = (int64_t **)func_0x08090034(0x108, "arrow");
    ppiVar6 = (int64_t **)pcVar10;
    ppiVar7 = ppiVar8;
    if (ppiVar16 != (int64_t **)0x0) {
code_r0x08000916:
        *ppiVar16 = (int64_t *)ppiVar8;
        pcVar10 = (code *)ppiVar6;
        ppiVar7 = _reloc.first_arrow;
    }
    goto code_r0x0800091a;
code_r0x08000e30:
    *(int64_t ***)((int64_t)ppcVar11 + -8) = ppiVar6;
    *(uint64_t *)((int64_t)ppcVar11 + -0x10) = uVar14;
    *(code **)((int64_t)ppcVar11 + -0x18) = pcVar10;
    *(undefined8 *)((int64_t)ppcVar11 + -0x20) = *(undefined8 *)(in_FS_OFFSET + 0x28);
    *(undefined8 *)((int64_t)ppcVar11 + -0x40) = 0x8000e56;
    uVar14 = func_0x08090034();
    *(undefined8 *)((int64_t)ppcVar11 + -0x40) = 0x8000e67;
    iVar4 = func_0x08090034(_reloc.c_token, uVar14);
    if (iVar4 == 0) {
        *(undefined8 *)((int64_t)ppcVar11 + -0x40) = 0x8000e90;
        func_0x08090034((undefined *)((int64_t)ppcVar11 + -0x38), 1, 0x10, "%smi$n");
        *(undefined8 *)((int64_t)ppcVar11 + -0x40) = 0x8000e9e;
        iVar4 = func_0x08090034(_reloc.c_token, (undefined *)((int64_t)ppcVar11 + -0x38));
        if (iVar4 == 0) {
            *(undefined8 *)((int64_t)ppcVar11 + -0x40) = 0x8000efe;
            func_0x08090034((undefined *)((int64_t)ppcVar11 + -0x38), 1, 0x10, "%sma$x");
            *(undefined8 *)((int64_t)ppcVar11 + -0x40) = 0x8000f0c;
            iVar4 = func_0x08090034(_reloc.c_token, (undefined *)((int64_t)ppcVar11 + -0x38));
            if (iVar4 == 0) {
                *(undefined8 *)((int64_t)ppcVar11 + -0x40) = 0x8000f9e;
                func_0x08090034((undefined *)((int64_t)ppcVar11 + -0x38), 1, 0x10, "%sfix");
                *(undefined8 *)((int64_t)ppcVar11 + -0x40) = 0x8000fac;
                iVar4 = func_0x08090034(_reloc.c_token, (undefined *)((int64_t)ppcVar11 + -0x38));
                if (iVar4 == 0) {
                    *(undefined8 *)((int64_t)ppcVar11 + -0x40) = 0x8000fe6;
                    func_0x08090034((undefined *)((int64_t)ppcVar11 + -0x38), 1, 0x10, "%sfixmi$n");
                    *(undefined8 *)((int64_t)ppcVar11 + -0x40) = 0x8000ff4;
                    iVar4 = func_0x08090034(_reloc.c_token, (undefined *)((int64_t)ppcVar11 + -0x38));
                    if (iVar4 == 0) {
                        *(undefined8 *)((int64_t)ppcVar11 + -0x40) = 0x800102e;
                        func_0x08090034((undefined *)((int64_t)ppcVar11 + -0x38), 1, 0x10, "%sfixma$x");
                        *(undefined8 *)((int64_t)ppcVar11 + -0x40) = 0x800103c;
                        iVar4 = func_0x08090034(_reloc.c_token, (undefined *)((int64_t)ppcVar11 + -0x38));
                        ppiVar8 = (int64_t **)0x0;
                        ppiVar6 = (int64_t **)((int64_t)ppcVar11 + -0x38);
                        if (iVar4 != 0) {
                            *(uint32_t *)((int64_t)ppiVar7 + 4) = *(uint32_t *)((int64_t)ppiVar7 + 4) | 8;
                            ppiVar8 = (int64_t **)0x1;
                            _reloc.c_token = _reloc.c_token + 1;
                            ppiVar6 = (int64_t **)((int64_t)ppcVar11 + -0x38);
                        }
                    } else {
                        *(uint32_t *)((int64_t)ppiVar7 + 4) = *(uint32_t *)((int64_t)ppiVar7 + 4) | 4;
                        ppiVar8 = (int64_t **)0x1;
                        _reloc.c_token = _reloc.c_token + 1;
                        ppiVar6 = (int64_t **)((int64_t)ppcVar11 + -0x38);
                    }
                } else {
                    *(uint32_t *)((int64_t)ppiVar7 + 4) = *(uint32_t *)((int64_t)ppiVar7 + 4) | 0xc;
                    ppiVar8 = (int64_t **)0x1;
                    _reloc.c_token = _reloc.c_token + 1;
                    ppiVar6 = (int64_t **)((int64_t)ppcVar11 + -0x38);
                }
            } else {
                *(uint32_t *)((int64_t)ppiVar7 + 4) = *(uint32_t *)((int64_t)ppiVar7 + 4) | 2;
                ppiVar8 = (int64_t **)0x1;
                _reloc.c_token = _reloc.c_token + 1;
                *(undefined4 *)((int64_t)ppiVar7 + 0x54) = 0;
                ppiVar6 = (int64_t **)((int64_t)ppcVar11 + -0x38);
            }
        } else {
            *(uint32_t *)((int64_t)ppiVar7 + 4) = *(uint32_t *)((int64_t)ppiVar7 + 4) | 1;
            ppiVar8 = (int64_t **)0x1;
            _reloc.c_token = _reloc.c_token + 1;
            *(undefined4 *)(ppiVar7 + 10) = 0;
            ppiVar6 = (int64_t **)((int64_t)ppcVar11 + -0x38);
        }
    } else {
        *(undefined4 *)((int64_t)ppiVar7 + 4) = 3;
        ppiVar7[10] = (int64_t *)0x0;
        _reloc.c_token = _reloc.c_token + 1;
        *(undefined8 *)((int64_t)ppcVar11 + -0x40) = 0x8000f5a;
        iVar4 = func_0x08090034(_reloc.c_token, "noext$end");
        ppiVar8 = (int64_t **)0x1;
        if (iVar4 != 0) {
            *(uint32_t *)((int64_t)ppiVar7 + 4) = *(uint32_t *)((int64_t)ppiVar7 + 4) | 0xc;
            _reloc.c_token = _reloc.c_token + 1;
        }
    }
    if (*(int64_t *)((int64_t)ppcVar11 + -0x20) == *(int64_t *)(in_FS_OFFSET + 0x28)) {
        return ppiVar8;
    }
    *(undefined8 *)((int64_t)ppcVar11 + -0x40) = 0x8001064;
    func_0x08090034();
    _reloc.c_token = _reloc.c_token + 1;
    if ((int32_t)_reloc.num_tokens <= (int32_t)_reloc.c_token) {
code_r0x0800108b:
        puVar9 = (undefined4 *)0x8090120;
        do {
            *puVar9 = 3;
            puVar9 = puVar9 + 0xaa;
        } while (puVar9 != (undefined4 *)0x8091e58);
        if (_reloc.num_parallel_axes < 1) {
            return (int64_t **)0x8091e58;
        }
        uVar5 = _reloc.num_parallel_axes - 1;
        ppiVar6 = (int64_t **)(_reloc.parallel_axis_array + 4);
        iVar1 = _reloc.parallel_axis_array + 0x2ac;
        do {
            *(undefined4 *)ppiVar6 = 3;
            ppiVar6 = ppiVar6 + 0x55;
        } while ((int64_t **)(iVar1 + (uint64_t)uVar5 * 0x2a8) != ppiVar6);
        return ppiVar6;
    }
    *(undefined8 *)((int64_t)ppcVar11 + -0x48) = 0x800110c;
    iVar4 = func_0x08090034(_reloc.c_token, reloc..LC4);
    if (iVar4 != 0) goto code_r0x0800108b;
    *(undefined8 *)((int64_t)ppcVar11 + -0x48) = 0x8001126;
    ppiVar8 = (int64_t **)func_0x08090034(_reloc.c_token, reloc..LC41);
    if ((int32_t)ppiVar8 != 0) {
code_r0x0800112a:
        _reloc.c_token = _reloc.c_token + 1;
        *(undefined4 *)0x80903c8 = 3;
        _reloc.default_fillstyle = 0;
        *(undefined4 *)0x8090670 = 3;
        _reloc.eval_link_function = 0;
        return ppiVar8;
    }
    *(undefined8 *)((int64_t)ppcVar11 + -0x48) = 0x8001172;
    ppiVar8 = (int64_t **)func_0x08090034(_reloc.c_token, reloc..LC42);
    if ((int32_t)ppiVar8 != 0) goto code_r0x0800112a;
    *(undefined8 *)((int64_t)ppcVar11 + -0x48) = 0x8001188;
    iVar4 = func_0x08090034(_reloc.c_token, "paxis");
    if (iVar4 == 0) {
        *(undefined8 *)((int64_t)ppcVar11 + -0x48) = 0x80012c2;
        iVar4 = func_0x08090034(_reloc.c_token, reloc..LC44);
        if (iVar4 == 0) {
            *(undefined8 *)((int64_t)ppcVar11 + -0x48) = 0x80012dc;
            iVar4 = func_0x08090034(_reloc.c_token, "noext$end");
            if (iVar4 == 0) {
                *(undefined8 *)((int64_t)ppcVar11 + -0x48) = 0x80012f6;
                iVar4 = func_0x08090034(_reloc.c_token, "ke$epfix");
                if (iVar4 != 0) {
                    ppiVar6 = (int64_t **)0x8090120;
                    do {
                        *(uint32_t *)ppiVar6 = *(uint32_t *)ppiVar6 | 3;
                        ppiVar6 = ppiVar6 + 0x55;
                    } while (ppiVar6 != (int64_t **)0x8091e58);
                    if (0 < _reloc.num_parallel_axes) {
                        uVar5 = _reloc.num_parallel_axes - 1;
                        ppiVar6 = (int64_t **)(_reloc.parallel_axis_array + 4);
                        iVar1 = _reloc.parallel_axis_array + 0x2ac;
                        do {
                            *(uint32_t *)ppiVar6 = *(uint32_t *)ppiVar6 | 3;
                            ppiVar6 = ppiVar6 + 0x55;
                        } while (ppiVar6 != (int64_t **)(iVar1 + (uint64_t)uVar5 * 0x2a8));
                    }
                    goto code_r0x0800134f;
                }
                goto code_r0x080011d5;
            }
        }
        ppiVar6 = (int64_t **)0x8090120;
        do {
            *(uint32_t *)ppiVar6 = *(uint32_t *)ppiVar6 | 0xc;
            ppiVar6 = ppiVar6 + 0x55;
        } while (ppiVar6 != (int64_t **)0x8091e58);
        if (0 < _reloc.num_parallel_axes) {
            uVar5 = _reloc.num_parallel_axes - 1;
            ppiVar6 = (int64_t **)(_reloc.parallel_axis_array + 4);
            iVar1 = _reloc.parallel_axis_array + 0x2ac;
            do {
                *(uint32_t *)ppiVar6 = *(uint32_t *)ppiVar6 | 0xc;
                ppiVar6 = ppiVar6 + 0x55;
            } while ((int64_t **)(iVar1 + (uint64_t)uVar5 * 0x2a8) != ppiVar6);
        }
code_r0x0800134f:
        _reloc.c_token = _reloc.c_token + 1;
        return ppiVar6;
    }
    ppiVar8 = (int64_t **)(uint64_t)_reloc.c_token;
    _reloc.c_token = _reloc.c_token + 1;
    if ((int32_t)_reloc.num_tokens <= (int32_t)_reloc.c_token) {
code_r0x0800135b:
        if (_reloc.num_parallel_axes < 1) {
            return ppiVar8;
        }
        uVar5 = _reloc.num_parallel_axes - 1;
        ppiVar6 = (int64_t **)(_reloc.parallel_axis_array + 4);
        iVar1 = _reloc.parallel_axis_array + 0x2ac;
        do {
            *(undefined4 *)ppiVar6 = 3;
            ppiVar6 = ppiVar6 + 0x55;
        } while (ppiVar6 != (int64_t **)(iVar1 + (uint64_t)uVar5 * 0x2a8));
        return ppiVar6;
    }
    *(undefined8 *)((int64_t)ppcVar11 + -0x48) = 0x80011b7;
    ppiVar8 = (int64_t **)func_0x08090034(_reloc.c_token, reloc..LC4);
    if ((int32_t)ppiVar8 != 0) goto code_r0x0800135b;
    *(undefined8 *)((int64_t)ppcVar11 + -0x48) = 0x80011c4;
    iVar4 = func_0x08090034();
    iVar4 = iVar4 + -1;
    if ((-1 < iVar4) && (iVar4 < _reloc.num_parallel_axes)) {
        ppiVar6 = (int64_t **)((int64_t)iVar4 * 0x2a8 + _reloc.parallel_axis_array);
        *(undefined4 *)((int64_t)ppiVar6 + 4) = 3;
        return ppiVar6;
    }
code_r0x080011d5:
    puVar12 = (undefined8 *)((int64_t)ppcVar11 + -0x48);
    ppcVar11 = (code **)((int64_t)ppcVar11 + -0x48);
    *puVar12 = 0x80011e1;
    pcVar10 = (code *)ppiVar7;
    ppiVar7 = (int64_t **)reloc.default_circle;
    goto code_r0x08000e30;
}


// WARNING: Possible PIC construction at 0x080011dc: Changing call to branch
// WARNING: Possible PIC construction at 0x08001204: Changing call to branch
// WARNING: Possible PIC construction at 0x0800122c: Changing call to branch
// WARNING: Possible PIC construction at 0x08001254: Changing call to branch
// WARNING: Possible PIC construction at 0x0800127c: Changing call to branch
// WARNING: Removing unreachable block (ram,0x08001259)
// WARNING: Removing unreachable block (ram,0x08001261)
// WARNING: Removing unreachable block (ram,0x08001275)
// WARNING: Removing unreachable block (ram,0x08001231)
// WARNING: Removing unreachable block (ram,0x08001239)
// WARNING: Removing unreachable block (ram,0x0800124d)
// WARNING: Removing unreachable block (ram,0x08001209)
// WARNING: Removing unreachable block (ram,0x08001211)
// WARNING: Removing unreachable block (ram,0x08001225)
// WARNING: Removing unreachable block (ram,0x080011e1)
// WARNING: Removing unreachable block (ram,0x080011e9)
// WARNING: Removing unreachable block (ram,0x080011fd)
// WARNING: Removing unreachable block (ram,0x08001281)
// WARNING: Removing unreachable block (ram,0x08001289)
// WARNING: Removing unreachable block (ram,0x0800129d)

int64_t ** sym.set_dgrid3d(int64_t arg7)
{
    int64_t iVar1;
    uint32_t uVar2;
    int32_t iVar3;
    uint32_t uVar4;
    int64_t **ppiVar5;
    int64_t **ppiVar6;
    undefined4 *puVar7;
    int64_t **ppiVar8;
    code *pcVar9;
    code **ppcVar10;
    undefined8 *puVar11;
    int32_t iVar12;
    uint64_t uVar13;
    uint64_t uVar14;
    int64_t **ppiVar15;
    int64_t in_FS_OFFSET;
    double extraout_XMM0_Qa;
    double extraout_XMM0_Qa_00;
    int64_t *extraout_XMM0_Qa_01;
    undefined auVar16 [12];
    code *pcStack96;
    uint64_t uStack88;
    int64_t **ppiStack80;
    uint64_t uStack72;
    uint64_t uStack64;
    double dStack56;
    double dStack48;
    
    uStack88 = 0;
    pcVar9 = reloc..LC4;
    _reloc.dgrid3d_mode = 0;
    reloc.dgrid3d_kdensity = (code)0x0;
    _reloc.c_token = _reloc.c_token + 1;
    uVar13 = (uint64_t)_reloc.dgrid3d_row_fineness;
    dStack56 = _reloc.dgrid3d_x_scale;
    ppiVar8 = (int64_t **)(uint64_t)_reloc.dgrid3d_col_fineness;
    uVar14 = (uint64_t)_reloc.dgrid3d_norm_value;
    dStack48 = _reloc.dgrid3d_y_scale;
    if ((int32_t)_reloc.c_token < _reloc.num_tokens) {
code_r0x08000570:
        do {
            while( true ) {
                uStack64 = 0x8000578;
                iVar3 = func_0x08090034(_reloc.c_token, reloc..LC4);
                if (iVar3 != 0) goto code_r0x080005d0;
                uStack64 = 0x800058e;
                uVar4 = func_0x08090034(reloc.dgrid3d_mode_tbl, _reloc.c_token);
                if (uVar4 == 8) goto code_r0x080006c0;
                _reloc.c_token = _reloc.c_token + 1;
                _reloc.dgrid3d_mode = uVar4;
                if (uVar4 != 2) break;
code_r0x080006ac:
                if (_reloc.num_tokens <= (int32_t)_reloc.c_token) goto code_r0x080005d0;
            }
            if ((int32_t)uVar4 < 3) {
                if (uVar4 == 1) {
                    if (_reloc.num_tokens <= (int32_t)_reloc.c_token) break;
                    uStack64 = 0x8000740;
                    iVar3 = func_0x08090034(_reloc.c_token, reloc..LC4);
                    if (iVar3 != 0) goto code_r0x080006ac;
                } else {
code_r0x080006c0:
                    uStack64 = 0x80006d2;
                    iVar3 = func_0x08090034(_reloc.c_token, reloc..LC9);
                    iVar12 = (int32_t)uStack88;
                    if (iVar3 != 0) {
                        uStack88 = (uint64_t)(iVar12 + 1);
                        _reloc.c_token = _reloc.c_token + 1;
                        if (_reloc.num_tokens <= (int32_t)_reloc.c_token) break;
                        goto code_r0x08000570;
                    }
                    if (iVar12 == 0) {
                        uStack64 = 0x8000755;
                        ppiVar8 = (int64_t **)func_0x08090034();
                        uVar13 = (uint64_t)ppiVar8 & 0xffffffff;
                        goto code_r0x080006ac;
                    }
                    if (iVar12 == 1) {
                        uStack64 = 0x80007fd;
                        uVar4 = func_0x08090034();
                        ppiVar8 = (int64_t **)(uint64_t)uVar4;
                        if (_reloc.num_tokens <= (int32_t)_reloc.c_token) break;
                        goto code_r0x08000570;
                    }
                    if (iVar12 != 2) goto code_r0x0800086b;
                }
                uStack64 = 0x800071b;
                uVar4 = func_0x08090034();
                uVar14 = (uint64_t)uVar4;
                if (_reloc.num_tokens <= (int32_t)_reloc.c_token) break;
                goto code_r0x08000570;
            }
            if (4 < uVar4 - 3) goto code_r0x080006c0;
            if (_reloc.num_tokens <= (int32_t)_reloc.c_token) break;
            uStack64 = 0x800067c;
            iVar3 = func_0x08090034(_reloc.c_token, reloc..LC4);
            if (iVar3 == 0) {
                uStack64 = 0x80007d2;
                iVar3 = func_0x08090034(_reloc.c_token, "kdens$ity2d");
                if (iVar3 != 0) {
                    reloc.dgrid3d_kdensity = (code)0x1;
                    _reloc.c_token = _reloc.c_token + 1;
                }
            }
            if (_reloc.num_tokens <= (int32_t)_reloc.c_token) break;
            uStack64 = 0x800069e;
            iVar3 = func_0x08090034(_reloc.c_token, reloc..LC4);
            if (iVar3 != 0) goto code_r0x080006ac;
            uStack64 = 0x8000775;
            func_0x08090034();
            uStack64 = 0x800078c;
            dStack56 = extraout_XMM0_Qa;
            iVar3 = func_0x08090034(_reloc.c_token, reloc..LC9);
            if (iVar3 != 0) {
                _reloc.c_token = _reloc.c_token + 1;
                uStack64 = 0x800082c;
                func_0x08090034();
                dStack48 = extraout_XMM0_Qa_00;
                if (_reloc.num_tokens <= (int32_t)_reloc.c_token) break;
                goto code_r0x08000570;
            }
            dStack48 = dStack56;
        } while ((int32_t)_reloc.c_token < _reloc.num_tokens);
    }
code_r0x080005d0:
    if (((int32_t)uVar13 - 2U < 999) && ((int32_t)ppiVar8 - 2U < 999)) {
        ppiVar5 = (int64_t **)(uint64_t)_reloc.dgrid3d_mode;
        if (_reloc.dgrid3d_mode == 0) {
            _reloc.dgrid3d_mode = 1;
        }
        if ((0.00000000 <= dStack56) && (0.00000000 <= dStack48)) {
            _reloc.dgrid3d_x_scale = dStack56;
            _reloc.dgrid3d_y_scale = dStack48;
            _reloc.dgrid3d_row_fineness = (int32_t)uVar13;
            _reloc.dgrid3d_col_fineness = (int32_t)ppiVar8;
            _reloc.dgrid3d_norm_value = (int32_t)uVar14;
            reloc.dgrid3d = (code)0x1;
            return ppiVar5;
        }
    } else {
        uStack64 = 0x800085a;
        func_0x08090034(0xffffffff, "Number of grid points must be in [2:1000] - not changed!");
    }
    uStack64 = 0x800086b;
    func_0x08090034(0xffffffff, "Scale factors must be greater than zero - not changed!");
code_r0x0800086b:
    uStack64 = 0x800087f;
    func_0x08090034(_reloc.c_token, "Unrecognized keyword or unexpected value");
    _reloc.c_token = _reloc.c_token + 1;
    ppcVar10 = &pcStack96;
    pcStack96 = reloc..LC4;
    ppiStack80 = ppiVar8;
    uStack72 = uVar14;
    uStack64 = uVar13;
    iVar3 = func_0x08090034(_reloc.c_token, "back$head");
    if ((((((iVar3 == 0) && (iVar3 = func_0x08090034(_reloc.c_token, "front"), iVar3 == 0)) &&
          (iVar3 = func_0x08090034(_reloc.c_token, "from"), iVar3 == 0)) &&
         ((iVar3 = func_0x08090034(_reloc.c_token, reloc..LC16), iVar3 == 0 &&
          (iVar3 = func_0x08090034(_reloc.c_token, reloc..LC17), iVar3 == 0)))) &&
        ((iVar3 = func_0x08090034(_reloc.c_token, reloc..LC18), iVar3 == 0 &&
         ((iVar3 = func_0x08090034(_reloc.c_token, "size"), iVar3 == 0 &&
          (iVar3 = func_0x08090034(_reloc.c_token, "filled"), iVar3 == 0)))))) &&
       ((iVar3 = func_0x08090034(_reloc.c_token, "empty"), iVar3 == 0 &&
        ((((iVar3 = func_0x08090034(_reloc.c_token, reloc..LC22), iVar3 == 0 &&
           (iVar3 = func_0x08090034(_reloc.c_token, "arrowstyle"), iVar3 == 0)) &&
          (iVar3 = func_0x08090034(_reloc.c_token, "head$s"), iVar3 == 0)) &&
         ((iVar3 = func_0x08090034(_reloc.c_token, "nohead"), iVar3 == 0 &&
          (iVar3 = func_0x08090034(_reloc.c_token, "nobo$rder"), iVar3 == 0)))))))) {
        ppiVar5 = (int64_t **)func_0x08090034();
        uVar13 = (uint64_t)ppiVar5 & 0xffffffff;
        if ((int32_t)ppiVar5 < 1) {
            func_0x08090034(_reloc.c_token, "tag must be > 0");
            goto code_r0x08000cf8;
        }
        ppiVar8 = _reloc.first_arrow;
        if (_reloc.first_arrow != (int64_t **)0x0) goto code_r0x080008de;
    } else {
        uVar13 = 0;
        ppiVar5 = _reloc.first_arrow;
        if (_reloc.first_arrow != (int64_t **)0x0) {
            do {
                iVar3 = (int32_t)uVar13;
                uVar4 = iVar3 + 1;
                uVar13 = (uint64_t)uVar4;
                ppiVar8 = _reloc.first_arrow;
                if (*(uint32_t *)(ppiVar5 + 1) != uVar4) goto code_r0x080008de;
                ppiVar5 = (int64_t **)*ppiVar5;
                auVar16 = CONCAT48(iVar3, ppiVar5);
                if (ppiVar5 == (int64_t **)0x0) goto code_r0x08000b78;
            } while( true );
        }
        uVar13 = 1;
    }
    ppiVar6 = (int64_t **)func_0x08090034(0x108, "arrow");
    pcVar9 = (code *)(int64_t **)0x0;
    ppiVar5 = ppiVar6;
code_r0x0800091a:
    _reloc.first_arrow = ppiVar5;
    *(int32_t *)(ppiVar6 + 1) = (int32_t)uVar13;
    *ppiVar6 = (int64_t *)pcVar9;
    ppiVar6[4] = (int64_t *)0x0;
    ppiVar6[5] = (int64_t *)0x0;
    ppiVar6[6] = (int64_t *)0x0;
    ppiVar6[7] = (int64_t *)0x0;
    *(undefined4 *)(ppiVar6 + 8) = 0;
    ppiVar6[9] = (int64_t *)0x0;
    ppiVar6[10] = (int64_t *)0x0;
    ppiVar6[0xb] = (int64_t *)0x0;
    ppiVar6[0xc] = (int64_t *)0x0;
    *(undefined8 *)((int64_t)ppiVar6 + 0xc) = 3;
    *(undefined8 *)((int64_t)ppiVar6 + 0x14) = 0;
    ppiVar5 = (int64_t **)func_0x08090034();
    pcVar9 = (code *)ppiVar6;
code_r0x08000980:
    if (_reloc.num_tokens <= (int32_t)_reloc.c_token) {
        return ppiVar5;
    }
    uVar14 = 0;
    uVar13 = 0;
    ppiVar8 = (int64_t **)((int64_t)pcVar9 + 0x68);
    uVar4 = _reloc.c_token;
code_r0x080009f8:
    ppiVar5 = (int64_t **)func_0x08090034(uVar4, reloc..LC4);
    if ((int32_t)ppiVar5 != 0) {
        return ppiVar5;
    }
    iVar3 = func_0x08090034(_reloc.c_token, "from");
    if ((iVar3 == 0) && (iVar3 = func_0x08090034(_reloc.c_token, reloc..LC16), iVar3 == 0)) {
        iVar3 = func_0x08090034(_reloc.c_token, reloc..LC17);
        if ((iVar3 != 0) || (iVar3 = func_0x08090034(_reloc.c_token, reloc..LC18), iVar3 != 0)) {
            if ((char)uVar14 != '\0') goto code_r0x08000b63;
            iVar3 = func_0x08090034(_reloc.c_token, reloc..LC18);
            *(uint32_t *)((int64_t)pcVar9 + 0xc) = (uint32_t)(iVar3 != 0);
            _reloc.c_token = _reloc.c_token + 1;
            if ((_reloc.num_tokens <= (int32_t)_reloc.c_token) ||
               (iVar3 = func_0x08090034(_reloc.c_token, reloc..LC4), iVar3 != 0)) goto code_r0x08000dfd;
            uVar14 = 1;
            ppiVar5 = (int64_t **)func_0x08090034();
            uVar4 = _reloc.c_token;
            if (_reloc.num_tokens <= (int32_t)_reloc.c_token) {
                return ppiVar5;
            }
            goto code_r0x080009f8;
        }
        iVar3 = func_0x08090034(_reloc.c_token, "len$gth");
        if (iVar3 != 0) {
            if ((char)uVar14 == '\0') {
                _reloc.c_token = _reloc.c_token + 1;
                uVar14 = 1;
                *(undefined4 *)((int64_t)pcVar9 + 0xc) = 2;
                ppiVar5 = (int64_t **)func_0x08090034((int64_t **)((int64_t)pcVar9 + 0x38), 0, 1);
                uVar4 = _reloc.c_token;
                goto code_r0x080009ec;
            }
            goto code_r0x08000b63;
        }
code_r0x08000cf8:
        iVar3 = func_0x08090034(_reloc.c_token, "ang$le");
        uVar2 = _reloc.c_token;
        if (iVar3 == 0) {
            ppiVar5 = (int64_t **)func_0x08090034(ppiVar8, 1);
            uVar4 = _reloc.c_token;
            if (_reloc.c_token == uVar2) {
                if (_reloc.num_tokens <= (int32_t)_reloc.c_token) {
                    return ppiVar5;
                }
                ppiVar5 = (int64_t **)func_0x08090034(_reloc.c_token, reloc..LC4);
                uVar4 = _reloc.c_token;
                if ((int32_t)ppiVar5 == 0) goto code_r0x08000e11;
            }
        } else {
            _reloc.c_token = _reloc.c_token + 1;
            ppiVar5 = (int64_t **)func_0x08090034();
            uVar4 = _reloc.c_token;
            *(int64_t **)((int64_t)pcVar9 + 0x60) = extraout_XMM0_Qa_01;
        }
    } else {
        if ((char)uVar13 != '\0') goto code_r0x08000b63;
        _reloc.c_token = _reloc.c_token + 1;
        if ((_reloc.num_tokens <= (int32_t)_reloc.c_token) ||
           (iVar3 = func_0x08090034(_reloc.c_token, reloc..LC4), iVar3 != 0)) {
            func_0x08090034(_reloc.c_token, "start coordinates expected");
code_r0x08000dfd:
            func_0x08090034(_reloc.c_token, "end coordinates expected");
code_r0x08000e11:
            ppiVar5 = (int64_t **)(uint64_t)_reloc.c_token;
            func_0x08090034(ppiVar5, "wrong argument in set arrow");
            goto code_r0x08000e30;
        }
        uVar13 = 1;
        ppiVar5 = (int64_t **)func_0x08090034();
        uVar4 = _reloc.c_token;
    }
code_r0x080009ec:
    if (_reloc.num_tokens <= (int32_t)uVar4) {
        return ppiVar5;
    }
    goto code_r0x080009f8;
code_r0x08000e30:
    *(int64_t ***)((int64_t)ppcVar10 + -8) = ppiVar8;
    *(uint64_t *)((int64_t)ppcVar10 + -0x10) = uVar13;
    *(code **)((int64_t)ppcVar10 + -0x18) = pcVar9;
    *(undefined8 *)((int64_t)ppcVar10 + -0x20) = *(undefined8 *)(in_FS_OFFSET + 0x28);
    *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x8000e56;
    uVar13 = func_0x08090034();
    *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x8000e67;
    iVar3 = func_0x08090034(_reloc.c_token, uVar13);
    if (iVar3 == 0) {
        *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x8000e90;
        func_0x08090034((undefined *)((int64_t)ppcVar10 + -0x38), 1, 0x10, "%smi$n");
        *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x8000e9e;
        iVar3 = func_0x08090034(_reloc.c_token, (undefined *)((int64_t)ppcVar10 + -0x38));
        if (iVar3 == 0) {
            *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x8000efe;
            func_0x08090034((undefined *)((int64_t)ppcVar10 + -0x38), 1, 0x10, "%sma$x");
            *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x8000f0c;
            iVar3 = func_0x08090034(_reloc.c_token, (undefined *)((int64_t)ppcVar10 + -0x38));
            if (iVar3 == 0) {
                *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x8000f9e;
                func_0x08090034((undefined *)((int64_t)ppcVar10 + -0x38), 1, 0x10, "%sfix");
                *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x8000fac;
                iVar3 = func_0x08090034(_reloc.c_token, (undefined *)((int64_t)ppcVar10 + -0x38));
                if (iVar3 == 0) {
                    *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x8000fe6;
                    func_0x08090034((undefined *)((int64_t)ppcVar10 + -0x38), 1, 0x10, "%sfixmi$n");
                    *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x8000ff4;
                    iVar3 = func_0x08090034(_reloc.c_token, (undefined *)((int64_t)ppcVar10 + -0x38));
                    if (iVar3 == 0) {
                        *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x800102e;
                        func_0x08090034((undefined *)((int64_t)ppcVar10 + -0x38), 1, 0x10, "%sfixma$x");
                        *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x800103c;
                        iVar3 = func_0x08090034(_reloc.c_token, (undefined *)((int64_t)ppcVar10 + -0x38));
                        ppiVar6 = (int64_t **)0x0;
                        ppiVar8 = (int64_t **)((int64_t)ppcVar10 + -0x38);
                        if (iVar3 != 0) {
                            *(uint32_t *)((int64_t)ppiVar5 + 4) = *(uint32_t *)((int64_t)ppiVar5 + 4) | 8;
                            ppiVar6 = (int64_t **)0x1;
                            _reloc.c_token = _reloc.c_token + 1;
                            ppiVar8 = (int64_t **)((int64_t)ppcVar10 + -0x38);
                        }
                    } else {
                        *(uint32_t *)((int64_t)ppiVar5 + 4) = *(uint32_t *)((int64_t)ppiVar5 + 4) | 4;
                        ppiVar6 = (int64_t **)0x1;
                        _reloc.c_token = _reloc.c_token + 1;
                        ppiVar8 = (int64_t **)((int64_t)ppcVar10 + -0x38);
                    }
                } else {
                    *(uint32_t *)((int64_t)ppiVar5 + 4) = *(uint32_t *)((int64_t)ppiVar5 + 4) | 0xc;
                    ppiVar6 = (int64_t **)0x1;
                    _reloc.c_token = _reloc.c_token + 1;
                    ppiVar8 = (int64_t **)((int64_t)ppcVar10 + -0x38);
                }
            } else {
                *(uint32_t *)((int64_t)ppiVar5 + 4) = *(uint32_t *)((int64_t)ppiVar5 + 4) | 2;
                ppiVar6 = (int64_t **)0x1;
                _reloc.c_token = _reloc.c_token + 1;
                *(undefined4 *)((int64_t)ppiVar5 + 0x54) = 0;
                ppiVar8 = (int64_t **)((int64_t)ppcVar10 + -0x38);
            }
        } else {
            *(uint32_t *)((int64_t)ppiVar5 + 4) = *(uint32_t *)((int64_t)ppiVar5 + 4) | 1;
            ppiVar6 = (int64_t **)0x1;
            _reloc.c_token = _reloc.c_token + 1;
            *(undefined4 *)(ppiVar5 + 10) = 0;
            ppiVar8 = (int64_t **)((int64_t)ppcVar10 + -0x38);
        }
    } else {
        *(undefined4 *)((int64_t)ppiVar5 + 4) = 3;
        ppiVar5[10] = (int64_t *)0x0;
        _reloc.c_token = _reloc.c_token + 1;
        *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x8000f5a;
        iVar3 = func_0x08090034(_reloc.c_token, "noext$end");
        ppiVar6 = (int64_t **)0x1;
        if (iVar3 != 0) {
            *(uint32_t *)((int64_t)ppiVar5 + 4) = *(uint32_t *)((int64_t)ppiVar5 + 4) | 0xc;
            _reloc.c_token = _reloc.c_token + 1;
        }
    }
    if (*(int64_t *)((int64_t)ppcVar10 + -0x20) == *(int64_t *)(in_FS_OFFSET + 0x28)) {
        return ppiVar6;
    }
    *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x8001064;
    func_0x08090034();
    _reloc.c_token = _reloc.c_token + 1;
    if (_reloc.num_tokens <= (int32_t)_reloc.c_token) {
code_r0x0800108b:
        puVar7 = (undefined4 *)0x8090120;
        do {
            *puVar7 = 3;
            puVar7 = puVar7 + 0xaa;
        } while (puVar7 != (undefined4 *)0x8091e58);
        if (_reloc.num_parallel_axes < 1) {
            return (int64_t **)0x8091e58;
        }
        uVar4 = _reloc.num_parallel_axes - 1;
        ppiVar8 = (int64_t **)(_reloc.parallel_axis_array + 4);
        iVar1 = _reloc.parallel_axis_array + 0x2ac;
        do {
            *(undefined4 *)ppiVar8 = 3;
            ppiVar8 = ppiVar8 + 0x55;
        } while ((int64_t **)(iVar1 + (uint64_t)uVar4 * 0x2a8) != ppiVar8);
        return ppiVar8;
    }
    *(undefined8 *)((int64_t)ppcVar10 + -0x48) = 0x800110c;
    iVar3 = func_0x08090034(_reloc.c_token, reloc..LC4);
    if (iVar3 != 0) goto code_r0x0800108b;
    *(undefined8 *)((int64_t)ppcVar10 + -0x48) = 0x8001126;
    ppiVar6 = (int64_t **)func_0x08090034(_reloc.c_token, reloc..LC41);
    if ((int32_t)ppiVar6 != 0) {
code_r0x0800112a:
        _reloc.c_token = _reloc.c_token + 1;
        *(undefined4 *)0x80903c8 = 3;
        _reloc.default_fillstyle = 0;
        *(undefined4 *)0x8090670 = 3;
        _reloc.eval_link_function = 0;
        return ppiVar6;
    }
    *(undefined8 *)((int64_t)ppcVar10 + -0x48) = 0x8001172;
    ppiVar6 = (int64_t **)func_0x08090034(_reloc.c_token, reloc..LC42);
    if ((int32_t)ppiVar6 != 0) goto code_r0x0800112a;
    *(undefined8 *)((int64_t)ppcVar10 + -0x48) = 0x8001188;
    iVar3 = func_0x08090034(_reloc.c_token, "paxis");
    if (iVar3 == 0) {
        *(undefined8 *)((int64_t)ppcVar10 + -0x48) = 0x80012c2;
        iVar3 = func_0x08090034(_reloc.c_token, reloc..LC44);
        if (iVar3 == 0) {
            *(undefined8 *)((int64_t)ppcVar10 + -0x48) = 0x80012dc;
            iVar3 = func_0x08090034(_reloc.c_token, "noext$end");
            if (iVar3 == 0) {
                *(undefined8 *)((int64_t)ppcVar10 + -0x48) = 0x80012f6;
                iVar3 = func_0x08090034(_reloc.c_token, "ke$epfix");
                if (iVar3 != 0) {
                    ppiVar8 = (int64_t **)0x8090120;
                    do {
                        *(uint32_t *)ppiVar8 = *(uint32_t *)ppiVar8 | 3;
                        ppiVar8 = ppiVar8 + 0x55;
                    } while (ppiVar8 != (int64_t **)0x8091e58);
                    if (0 < _reloc.num_parallel_axes) {
                        uVar4 = _reloc.num_parallel_axes - 1;
                        ppiVar8 = (int64_t **)(_reloc.parallel_axis_array + 4);
                        iVar1 = _reloc.parallel_axis_array + 0x2ac;
                        do {
                            *(uint32_t *)ppiVar8 = *(uint32_t *)ppiVar8 | 3;
                            ppiVar8 = ppiVar8 + 0x55;
                        } while (ppiVar8 != (int64_t **)(iVar1 + (uint64_t)uVar4 * 0x2a8));
                    }
                    goto code_r0x0800134f;
                }
                goto code_r0x080011d5;
            }
        }
        ppiVar8 = (int64_t **)0x8090120;
        do {
            *(uint32_t *)ppiVar8 = *(uint32_t *)ppiVar8 | 0xc;
            ppiVar8 = ppiVar8 + 0x55;
        } while (ppiVar8 != (int64_t **)0x8091e58);
        if (0 < _reloc.num_parallel_axes) {
            uVar4 = _reloc.num_parallel_axes - 1;
            ppiVar8 = (int64_t **)(_reloc.parallel_axis_array + 4);
            iVar1 = _reloc.parallel_axis_array + 0x2ac;
            do {
                *(uint32_t *)ppiVar8 = *(uint32_t *)ppiVar8 | 0xc;
                ppiVar8 = ppiVar8 + 0x55;
            } while ((int64_t **)(iVar1 + (uint64_t)uVar4 * 0x2a8) != ppiVar8);
        }
code_r0x0800134f:
        _reloc.c_token = _reloc.c_token + 1;
        return ppiVar8;
    }
    ppiVar6 = (int64_t **)(uint64_t)_reloc.c_token;
    _reloc.c_token = _reloc.c_token + 1;
    if (_reloc.num_tokens <= (int32_t)_reloc.c_token) {
code_r0x0800135b:
        if (_reloc.num_parallel_axes < 1) {
            return ppiVar6;
        }
        uVar4 = _reloc.num_parallel_axes - 1;
        ppiVar8 = (int64_t **)(_reloc.parallel_axis_array + 4);
        iVar1 = _reloc.parallel_axis_array + 0x2ac;
        do {
            *(undefined4 *)ppiVar8 = 3;
            ppiVar8 = ppiVar8 + 0x55;
        } while (ppiVar8 != (int64_t **)(iVar1 + (uint64_t)uVar4 * 0x2a8));
        return ppiVar8;
    }
    *(undefined8 *)((int64_t)ppcVar10 + -0x48) = 0x80011b7;
    ppiVar6 = (int64_t **)func_0x08090034(_reloc.c_token, reloc..LC4);
    if ((int32_t)ppiVar6 != 0) goto code_r0x0800135b;
    *(undefined8 *)((int64_t)ppcVar10 + -0x48) = 0x80011c4;
    iVar3 = func_0x08090034();
    iVar3 = iVar3 + -1;
    if ((-1 < iVar3) && (iVar3 < _reloc.num_parallel_axes)) {
        ppiVar8 = (int64_t **)((int64_t)iVar3 * 0x2a8 + _reloc.parallel_axis_array);
        *(undefined4 *)((int64_t)ppiVar8 + 4) = 3;
        return ppiVar8;
    }
code_r0x080011d5:
    puVar11 = (undefined8 *)((int64_t)ppcVar10 + -0x48);
    ppcVar10 = (code **)((int64_t)ppcVar10 + -0x48);
    *puVar11 = 0x80011e1;
    pcVar9 = (code *)ppiVar5;
    ppiVar5 = (int64_t **)reloc.default_circle;
    goto code_r0x08000e30;
code_r0x08000b63:
    auVar16 = func_0x08090034(_reloc.c_token, "duplicate or contradictory arguments");
code_r0x08000b78:
    ppiVar5 = SUB128(auVar16, 0);
    uVar13 = (uint64_t)(SUB124(auVar16 >> 0x40, 0) + 2);
code_r0x080008de:
    ppiVar15 = (int64_t **)0x0;
    while (pcVar9 = (code *)ppiVar8, *(int32_t *)(int64_t **)((int64_t)pcVar9 + 8) < (int32_t)uVar13) {
        ppiVar8 = *(int64_t ***)pcVar9;
        ppiVar15 = (int64_t **)pcVar9;
        if (ppiVar8 == (int64_t **)0x0) {
            ppiVar6 = (int64_t **)func_0x08090034(0x108, "arrow");
            goto code_r0x08000916;
        }
    }
    if (*(int32_t *)(int64_t **)((int64_t)pcVar9 + 8) != (int32_t)uVar13) goto code_r0x08000ae9;
    goto code_r0x08000980;
code_r0x08000ae9:
    ppiVar6 = (int64_t **)func_0x08090034(0x108, "arrow");
    ppiVar8 = (int64_t **)pcVar9;
    ppiVar5 = ppiVar6;
    if (ppiVar15 != (int64_t **)0x0) {
code_r0x08000916:
        *ppiVar15 = (int64_t *)ppiVar6;
        pcVar9 = (code *)ppiVar8;
        ppiVar5 = _reloc.first_arrow;
    }
    goto code_r0x0800091a;
}




tput */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/set.o @ 0x8000880 */
#include <stdint.h>
 
uint64_t set_dgrid3d (int64_t arg7) {
    xmm0 = arg7;
    ebp = 0;
    rbx = loc__LC4;
    eax = *(reloc.c_token);
    xmm1 = *(reloc.dgrid3d_x_scale);
    *(reloc.dgrid3d_mode) = 0;
    xmm2 = *(reloc.dgrid3d_y_scale);
    *(reloc.dgrid3d_kdensity) = 0;
    edi = rax + 1;
    r14d = *(reloc.dgrid3d_row_fineness);
    *(rsp) = xmm1;
    *(reloc.c_token) = edi;
    r12d = *(reloc.dgrid3d_col_fineness);
    r13d = *(reloc.dgrid3d_norm_value);
    *((rsp + 8)) = xmm2;
    if (edi >= *(reloc.num_tokens)) {
        goto label_0;
    }
label_1:
    rsi = rbx;
    eax = sm_palette ();
    if (eax != 0) {
        goto label_0;
    }
    esi = *(reloc.c_token);
    rdi = reloc_dgrid3d_mode_tbl;
    eax = sm_palette ();
    if (eax == 8) {
        goto label_23;
    }
    edx = *(reloc.c_token);
    *(reloc.dgrid3d_mode) = eax;
    edi = rdx + 1;
    *(reloc.c_token) = edi;
    if (eax == 2) {
        goto label_24;
    }
    if (eax > 2) {
        goto label_25;
    }
    if (eax != 1) {
        goto label_23;
    }
    if (edi < *(reloc.num_tokens)) {
        goto label_26;
    }
    do {
label_0:
        eax = r14 - 2;
        if (eax > 0x3e6) {
            goto label_27;
        }
        eax = r12 - 2;
        if (eax > 0x3e6) {
            goto label_27;
        }
        eax = *(reloc.dgrid3d_mode);
        if (eax == 0) {
            goto label_28;
        }
label_4:
        xmm0 = 0;
        __asm ("comisd xmm0, xmmword [rsp]");
        if (eax > 0) {
            goto label_29;
        }
        __asm ("comisd xmm0, xmmword [rsp + 8]");
        if (eax > 0) {
            goto label_29;
        }
        xmm5 = *(rsp);
        xmm6 = *((rsp + 8));
        *(reloc.dgrid3d_row_fineness) = r14d;
        *(reloc.dgrid3d_col_fineness) = r12d;
        *(reloc.dgrid3d_norm_value) = r13d;
        *(reloc.dgrid3d) = 1;
        *(reloc.dgrid3d_x_scale) = xmm5;
        *(reloc.dgrid3d_y_scale) = xmm6;
        return eax;
label_25:
        eax -= 3;
        if (eax > 4) {
            goto label_23;
        }
    } while (edi >= *(reloc.num_tokens));
    rsi = rbx;
    eax = sm_palette ();
    if (eax == 0) {
        goto label_30;
    }
label_5:
    edi = *(reloc.c_token);
label_6:
    if (*(reloc.num_tokens) <= edi) {
        goto label_0;
    }
    rsi = rbx;
    eax = sm_palette ();
    if (eax == 0) {
        goto label_31;
    }
label_2:
    edi = *(reloc.c_token);
label_24:
    if (*(reloc.num_tokens) > edi) {
        goto label_1;
    }
    goto label_0;
label_23:
    edi = *(reloc.c_token);
    rsi = loc__LC9;
    eax = sm_palette ();
    if (eax == 0) {
        goto label_32;
    }
    eax = *(reloc.c_token);
    ebp++;
    edi = rax + 1;
    *(reloc.c_token) = edi;
    if (*(reloc.num_tokens) > edi) {
        goto label_1;
    }
    goto label_0;
label_32:
    if (ebp == 0) {
        goto label_33;
    }
    if (ebp == 1) {
        goto label_34;
    }
    if (ebp != 2) {
        goto label_35;
    }
label_3:
    eax = sm_palette ();
    edi = *(reloc.c_token);
    r13d = eax;
    if (*(reloc.num_tokens) > edi) {
        goto label_1;
    }
    goto label_0;
label_26:
    rsi = rbx;
    eax = sm_palette ();
    if (eax != 0) {
        goto label_2;
    }
    goto label_3;
label_33:
    rax = sm_palette ();
    r12 = rax;
    r14d = eax;
    goto label_2;
label_28:
    *(reloc.dgrid3d_mode) = 1;
    goto label_4;
label_31:
    sm_palette ();
    edi = *(reloc.c_token);
    rsi = loc__LC9;
    *(rsp) = xmm0;
    eax = sm_palette ();
    if (eax != 0) {
        goto label_36;
    }
    xmm7 = *(rsp);
    edi = *(reloc.c_token);
    *((rsp + 8)) = xmm7;
    if (*(reloc.num_tokens) > edi) {
        goto label_1;
    }
    goto label_0;
label_30:
    edi = *(reloc.c_token);
    rsi = "kdens$ity2d";
    eax = sm_palette ();
    if (eax == 0) {
        goto label_5;
    }
    eax = *(reloc.c_token);
    *(reloc.dgrid3d_kdensity) = 1;
    edi = rax + 1;
    *(reloc.c_token) = edi;
    goto label_6;
label_34:
    eax = sm_palette ();
    edi = *(reloc.c_token);
    r12d = eax;
    if (*(reloc.num_tokens) > edi) {
        goto label_1;
    }
    goto label_0;
label_36:
    *(reloc.c_token)++;
    eax = sm_palette ();
    edi = *(reloc.c_token);
    *((rsp + 8)) = xmm0;
    if (*(reloc.num_tokens) > edi) {
        goto label_1;
    }
    goto label_0;
label_27:
    rsi = "Number of grid points must be in [2:1000] - not changed!";
    edi |= 0xffffffff;
    eax = 0;
    eax = sm_palette ();
label_29:
    rsi = "Scale factors must be greater than zero - not changed!";
    edi |= 0xffffffff;
    eax = 0;
    eax = sm_palette ();
label_35:
    edi = *(reloc.c_token);
    rsi = "Unrecognized keyword or unexpected value";
    eax = 0;
    sm_palette ();
    eax = *(reloc.c_token);
    rsi = "back$head";
    edi = rax + 1;
    *(reloc.c_token) = edi;
    eax = sm_palette (rbx, rbp, r12, r13);
    if (eax == 0) {
        goto label_37;
    }
label_14:
    r12 = *(reloc.first_arrow);
    ebp = 0;
    rax = r12;
    if (r12 != 0) {
        goto label_38;
    }
    goto label_39;
    do {
        rax = *(rax);
        if (rax == 0) {
            goto label_40;
        }
label_38:
        edx = ebp;
        ebp++;
    } while (*((rax + 8)) == ebp);
label_13:
    r14d = 0;
    while (r13 != 0) {
        r12 = r13;
        if (*((r12 + 8)) >= ebp) {
            goto label_41;
        }
        r13 = *(r12);
        r14 = r12;
    }
    rsi = "arrow";
    edi = 0x108;
    rax = sm_palette ();
    rbx = rax;
label_10:
    *(r12) = rbx;
label_11:
    *((rbx + 8)) = ebp;
    rdi = rbx + 0x68;
    *(rbx) = r13;
    *((rbx + 0x20)) = 0;
    *((rbx + 0x28)) = 0;
    *((rbx + 0x30)) = 0;
    *((rbx + 0x38)) = 0;
    *((rbx + 0x40)) = 0;
    *((rbx + 0x48)) = 0;
    *((rbx + 0x50)) = 0;
    *((rbx + 0x58)) = 0;
    *((rbx + 0x60)) = 0;
    *((rbx + 0xc)) = 3;
    *((rbx + 0x14)) = 0;
    sm_palette ();
label_9:
    edi = *(reloc.c_token);
    if (edi >= *(reloc.num_tokens)) {
        goto label_16;
    }
    r13d = 0;
    ebp = 0;
    r12 = rbx + 0x68;
    while (eax != 0) {
label_7:
        edi = *(reloc.c_token);
        if (bpl != 0) {
            goto label_42;
        }
        edi++;
        *(reloc.c_token) = edi;
        if (edi >= *(reloc.num_tokens)) {
            goto label_43;
        }
        rsi = loc__LC4;
        eax = sm_palette ();
        if (eax != 0) {
            goto label_44;
        }
        rdi = rbx + 0x10;
        sm_palette ();
        edi = *(reloc.c_token);
label_15:
        if (*(reloc.num_tokens) <= edi) {
            goto label_16;
        }
label_8:
        rsi = loc__LC4;
        eax = sm_palette ();
        if (eax != 0) {
            goto label_16;
        }
        edi = *(reloc.c_token);
        rsi = "from";
        eax = sm_palette ();
    }
    edi = *(reloc.c_token);
    rsi = loc__LC16;
    eax = sm_palette ();
    if (eax != 0) {
        goto label_7;
    }
    edi = *(reloc.c_token);
    rsi = loc__LC17;
    eax = sm_palette ();
    if (eax == 0) {
        goto label_45;
    }
label_12:
    edi = *(reloc.c_token);
    if (r13b != 0) {
        goto label_42;
    }
    rsi = loc__LC18;
    eax = sm_palette ();
    al = (eax != 0) ? 1 : 0;
    eax = (int32_t) al;
    *((rbx + 0xc)) = eax;
    eax = *(reloc.c_token);
    edi = rax + 1;
    *(reloc.c_token) = edi;
    if (edi >= *(reloc.num_tokens)) {
        goto label_46;
    }
    rsi = loc__LC4;
    eax = sm_palette ();
    if (eax != 0) {
        goto label_46;
    }
    rdi = rbx + 0x38;
    r13d = 1;
    sm_palette ();
    edi = *(reloc.c_token);
    if (*(reloc.num_tokens) > edi) {
        goto label_8;
    }
label_16:
    return rax;
label_41:
    rbx = r12;
    if (*(reloc.num_tokens) == edi) {
        goto label_9;
    }
    rsi = "arrow";
    edi = 0x108;
    r13 = r12;
    r12 = r14;
    rax = sm_palette ();
    rbx = rax;
    if (r14 != 0) {
        goto label_10;
    }
    *(reloc.first_arrow) = rbx;
    goto label_11;
label_45:
    edi = *(reloc.c_token);
    rsi = loc__LC18;
    eax = sm_palette ();
    if (eax != 0) {
        goto label_12;
    }
    edi = *(reloc.c_token);
    rsi = "len$gth";
    eax = sm_palette ();
    if (eax == 0) {
        goto label_47;
    }
    edi = *(reloc.c_token);
    if (r13b == 0) {
        goto label_48;
    }
label_42:
    rsi = "duplicate or contradictory arguments";
    eax = 0;
    rax = sm_palette ();
label_40:
    ebp = rdx + 2;
    goto label_13;
label_37:
    edi = *(reloc.c_token);
    rsi = "front";
    eax = sm_palette ();
    if (eax != 0) {
        goto label_14;
    }
    edi = *(reloc.c_token);
    rsi = "from";
    eax = sm_palette ();
    if (eax != 0) {
        goto label_14;
    }
    edi = *(reloc.c_token);
    rsi = loc__LC16;
    eax = sm_palette ();
    if (eax != 0) {
        goto label_14;
    }
    edi = *(reloc.c_token);
    rsi = loc__LC17;
    eax = sm_palette ();
    if (eax != 0) {
        goto label_14;
    }
    edi = *(reloc.c_token);
    rsi = loc__LC18;
    eax = sm_palette ();
    if (eax != 0) {
        goto label_14;
    }
    edi = *(reloc.c_token);
    rsi = "size";
    eax = sm_palette ();
    if (eax != 0) {
        goto label_14;
    }
    edi = *(reloc.c_token);
    rsi = "filled";
    eax = sm_palette ();
    if (eax != 0) {
        goto label_14;
    }
    edi = *(reloc.c_token);
    rsi = "empty";
    eax = sm_palette ();
    if (eax != 0) {
        goto label_14;
    }
    edi = *(reloc.c_token);
    rsi = loc__LC22;
    eax = sm_palette ();
    if (eax != 0) {
        goto label_14;
    }
    edi = *(reloc.c_token);
    rsi = "arrowstyle";
    eax = sm_palette ();
    if (eax != 0) {
        goto label_14;
    }
    edi = *(reloc.c_token);
    rsi = "head$s";
    eax = sm_palette ();
    if (eax != 0) {
        goto label_14;
    }
    edi = *(reloc.c_token);
    rsi = "nohead";
    eax = sm_palette ();
    if (eax != 0) {
        goto label_14;
    }
    edi = *(reloc.c_token);
    rsi = "nobo$rder";
    eax = sm_palette ();
    if (eax != 0) {
        goto label_14;
    }
    eax = sm_palette ();
    if (eax > 0) {
        goto label_49;
    }
    edi = *(reloc.c_token);
    rsi = "tag must be > 0";
    eax = 0;
    rax = sm_palette ();
label_47:
    edi = *(reloc.c_token);
    rsi = "ang$le";
    eax = sm_palette ();
    if (eax != 0) {
        goto label_50;
    }
    rdi = r12;
    esi = 1;
    r14d = *(reloc.c_token);
    sm_palette ();
    edi = *(reloc.c_token);
    if (edi != r14d) {
        goto label_15;
    }
    if (edi >= *(reloc.num_tokens)) {
        goto label_16;
    }
    rsi = loc__LC4;
    eax = sm_palette ();
    if (eax == 0) {
        goto label_51;
    }
    edi = *(reloc.c_token);
    goto label_15;
label_39:
    do {
        rsi = "arrow";
        edi = 0x108;
        r13d = 0;
        rax = sm_palette ();
        rbx = rax;
        *(reloc.first_arrow) = rbx;
        goto label_11;
label_50:
        *(reloc.c_token)++;
        sm_palette ();
        edi = *(reloc.c_token);
        *((rbx + 0x60)) = xmm0;
        goto label_15;
label_49:
        r12 = *(reloc.first_arrow);
    } while (r12 == 0);
    goto label_13;
label_48:
    edi++;
    edx = 1;
    esi = 0;
    r13d = 1;
    *((rbx + 0xc)) = 2;
    *(reloc.c_token) = edi;
    rdi = rbx + 0x38;
    eax = sm_palette ();
    edi = *(reloc.c_token);
    goto label_15;
label_44:
    edi = *(reloc.c_token);
label_43:
    rsi = "start coordinates expected";
    eax = 0;
    eax = sm_palette ();
label_46:
    edi = *(reloc.c_token);
    rsi = "end coordinates expected";
    eax = 0;
    eax = sm_palette ();
label_51:
    edi = *(reloc.c_token);
    rsi = "wrong argument in set arrow";
    eax = 0;
    sm_palette ();
label_19:
    rbx = rdi;
    edi = *((rdi + 0x18c));
    rax = *(fs:0x28);
    *((rsp + 0x18)) = rax;
    eax = 0;
    rax = sm_palette (rbx, rbp);
    edi = *(reloc.c_token);
    rsi = rax;
    eax = sm_palette ();
    if (eax != 0) {
        goto label_52;
    }
    r12 = rsp;
    esi = 1;
    eax = 0;
    r8 = rbp;
    rdi = r12;
    rcx = "%smi$n";
    edx = 0x10;
    sm_palette ();
    edi = *(reloc.c_token);
    rsi = r12;
    eax = sm_palette ();
    if (eax == 0) {
        goto label_53;
    }
    *((rbx + 4)) |= 1;
    eax = 1;
    *(reloc.c_token)++;
    *((rbx + 0x50)) = 0;
    do {
label_17:
        rdx = *((rsp + 0x18));
        rdx ^= *(fs:0x28);
        if (*(reloc.c_token) != 0) {
            goto label_54;
        }
        return rax;
label_53:
        esi = 1;
        rdi = r12;
        eax = 0;
        r8 = rbp;
        rcx = "%sma$x";
        edx = 0x10;
        sm_palette ();
        edi = *(reloc.c_token);
        rsi = r12;
        eax = sm_palette ();
        if (eax == 0) {
            goto label_55;
        }
        *((rbx + 4)) |= 2;
        eax = 1;
        *(reloc.c_token)++;
        *((rbx + 0x54)) = 0;
    } while (1);
label_52:
    eax = *(reloc.c_token);
    *((rbx + 4)) = 3;
    rsi = "noext$end";
    *((rbx + 0x50)) = 0;
    edi = rax + 1;
    *(reloc.c_token) = edi;
    eax = sm_palette ();
    r8d = eax;
    eax = 1;
    if (r8d == 0) {
        goto label_17;
    }
    *((rbx + 4)) |= 0xc;
    *(reloc.c_token)++;
    goto label_17;
label_55:
    esi = 1;
    rdi = r12;
    eax = 0;
    r8 = rbp;
    rcx = "%sfix";
    edx = 0x10;
    sm_palette ();
    edi = *(reloc.c_token);
    rsi = r12;
    eax = sm_palette ();
    if (eax != 0) {
        *((rbx + 4)) |= 0xc;
        eax = 1;
        *(reloc.c_token)++;
        goto label_17;
    }
    esi = 1;
    rdi = r12;
    eax = 0;
    r8 = rbp;
    rcx = "%sfixmi$n";
    edx = 0x10;
    sm_palette ();
    edi = *(reloc.c_token);
    rsi = r12;
    eax = sm_palette ();
    if (eax != 0) {
        *((rbx + 4)) |= 4;
        eax = 1;
        *(reloc.c_token)++;
        goto label_17;
    }
    r8 = rbp;
    rcx = "%sfixma$x";
    rdi = r12;
    eax = 0;
    edx = 0x10;
    esi = 1;
    sm_palette ();
    edi = *(reloc.c_token);
    rsi = r12;
    eax = sm_palette ();
    r8d = eax;
    eax = 0;
    if (r8d == 0) {
        goto label_17;
    }
    *((rbx + 4)) |= 8;
    eax = 1;
    *(reloc.c_token)++;
    goto label_17;
label_54:
    sm_palette ();
    eax = *(reloc.c_token);
    edi = rax + 1;
    *(reloc.c_token) = edi;
    if (edi < *(reloc.num_tokens)) {
        goto label_56;
    }
label_18:
    rax = 0x08090120;
    rdx = rax + 0x1d38;
    do {
        *(rax) = 3;
        rax += 0x2a8;
    } while (rdx != rax);
    edx = *(reloc.num_parallel_axes);
    if (edx <= 0) {
        goto label_20;
    }
    edx--;
    rcx = *(reloc.parallel_axis_array);
    rdx *= 0x2a8;
    rax = rcx + 4;
    rdx = rcx + rdx + 0x2ac;
    do {
        *(rax) = 3;
        rax += 0x2a8;
    } while (rdx != rax);
label_20:
    return rax;
label_56:
    rsi = loc__LC4;
    eax = sm_palette ();
    if (eax != 0) {
        goto label_18;
    }
    edi = *(reloc.c_token);
    rsi = loc__LC41;
    eax = sm_palette ();
    while (eax != 0) {
        *(reloc.c_token)++;
        *(0x080903c8) = 3;
        *(0x08090670) = 3;
        *(reloc.default_fillstyle) = 0;
        *(reloc.eval_link_function) = 0;
        return rax;
        edi = *(reloc.c_token);
        rsi = loc__LC42;
        eax = sm_palette ();
    }
    edi = *(reloc.c_token);
    rsi = "paxis";
    eax = sm_palette ();
    if (eax == 0) {
        goto label_57;
    }
    eax = *(reloc.c_token);
    edi = rax + 1;
    *(reloc.c_token) = edi;
    if (edi >= *(reloc.num_tokens)) {
        goto label_58;
    }
    rsi = loc__LC4;
    eax = sm_palette ();
    if (eax != 0) {
        goto label_58;
    }
    eax = sm_palette ();
    eax--;
    if (eax >= 0) {
        if (*(reloc.num_parallel_axes) > eax) {
            goto label_59;
        }
    }
label_21:
    rdi = reloc_default_circle;
    al = set_autoscale_axis ();
    goto label_19;
    if (al != 0) {
        goto label_20;
    }
    rdi = reloc_isanumber;
    al = set_autoscale_axis ();
    goto label_19;
    if (al != 0) {
        goto label_20;
    }
    rdi = reloc_axis_array;
    al = set_autoscale_axis ();
    goto label_19;
    if (al != 0) {
        goto label_20;
    }
    rdi = 0x0809110c;
    al = set_autoscale_axis ();
    goto label_19;
    if (al != 0) {
        goto label_20;
    }
    rdi = 0x08090e64;
    al = set_autoscale_axis ();
    goto label_19;
    if (al != 0) {
        goto label_20;
    }
    rdi = reloc_term_start_multiplot;
    al = set_autoscale_axis ();
    goto label_19;
    if (al != 0) {
        goto label_20;
    }
    rdi = 0x080913b4;
    al = set_autoscale_axis ();
    goto label_19;
    if (al != 0) {
        goto label_20;
    }
    rdi = 0x0809165c;
    al = set_autoscale_axis ();
    goto label_19;
    if (al != 0) {
        goto label_20;
    }
    rdi = 0x08091904;
    al = set_autoscale_axis ();
    goto label_19;
    if (al != 0) {
        goto label_20;
    }
    rdi = 0x08091bac;
    al = set_autoscale_axis ();
    goto label_19;
    if (al != 0) {
        goto label_20;
    }
    edi = *(reloc.c_token);
    rsi = "Invalid axis";
    sm_palette ();
label_57:
    edi = *(reloc.c_token);
    rsi = loc__LC44;
    eax = sm_palette ();
    if (eax != 0) {
        goto label_60;
    }
    edi = *(reloc.c_token);
    rsi = "noext$end";
    eax = sm_palette ();
    if (eax != 0) {
        goto label_60;
    }
    edi = *(reloc.c_token);
    rsi = "ke$epfix";
    eax = sm_palette ();
    if (eax == 0) {
        goto label_21;
    }
    rax = 0x08090120;
    rdx = rax + 0x1d38;
    do {
        *(rax) |= 3;
        rax += 0x2a8;
    } while (rax != rdx);
    edx = *(reloc.num_parallel_axes);
    if (edx <= 0) {
        goto label_22;
    }
    edx--;
    rcx = *(reloc.parallel_axis_array);
    rdx *= 0x2a8;
    rax = rcx + 4;
    rdx = rcx + rdx + 0x2ac;
    do {
        *(rax) |= 3;
        rax += 0x2a8;
    } while (rax != rdx);
label_22:
    *(reloc.c_token)++;
    goto label_20;
label_58:
    edx = *(reloc.num_parallel_axes);
    if (edx <= 0) {
        goto label_20;
    }
    edx--;
    rcx = *(reloc.parallel_axis_array);
    rdx *= 0x2a8;
    rax = rcx + 4;
    rdx = rcx + rdx + 0x2ac;
    do {
        *(rax) = 3;
        rax += 0x2a8;
    } while (rax != rdx);
    goto label_20;
label_60:
    rax = 0x08090120;
    rdx = rax + 0x1d38;
    do {
        *(rax) |= 0xc;
        rax += 0x2a8;
    } while (rax != rdx);
    edx = *(reloc.num_parallel_axes);
    if (edx <= 0) {
        goto label_22;
    }
    edx--;
    rcx = *(reloc.parallel_axis_array);
    rdx *= 0x2a8;
    rax = rcx + 4;
    rdx = rcx + rdx + 0x2ac;
    do {
        *(rax) |= 0xc;
        rax += 0x2a8;
    } while (rdx != rax);
    goto label_22;
label_59:
    rax = (int64_t) eax;
    rax *= 0x2a8;
    rax += *(reloc.parallel_axis_array);
    *((rax + 4)) = 3;
    goto label_20;
}
   p p pd pd pdg pdg pdg  pdg  pdg @ pdg @ pdg @  pdg @  pdg @ s pdg @ s pdg @ sy pdg @ sy pdg @ sym pdg @ sym pdg @ sym. pdg @ sym. pdg @ sym.s pdg @ sym.s pdg @ sym.se pdg @ sym.se pdg @ sym.set pdg @ sym.set pdg @ sym.set_ pdg @ sym.set_ pdg @ sym.set_a pdg @ sym.set_a pdg @ sym.set_au pdg @ sym.set_au pdg @ sym.set_aut pdg @ sym.set_aut pdg @ sym.set_auto pdg @ sym.set_auto pdg @ sym.set_autos pdg @ sym.set_autos pdg @ sym.set_autosc pdg @ sym.set_autosc pdg @ sym.set_autosca pdg @ sym.set_autosca pdg @ sym.set_autoscal pdg @ sym.set_autoscal pdg @ sym.set_autoscale pdg @ sym.set_autoscale
// WARNING: Possible PIC construction at 0x080011dc: Changing call to branch
// WARNING: Possible PIC construction at 0x08001204: Changing call to branch
// WARNING: Possible PIC construction at 0x0800122c: Changing call to branch
// WARNING: Possible PIC construction at 0x08001254: Changing call to branch
// WARNING: Possible PIC construction at 0x0800127c: Changing call to branch
// WARNING: Removing unreachable block (ram,0x08001259)
// WARNING: Removing unreachable block (ram,0x08001261)
// WARNING: Removing unreachable block (ram,0x08001275)
// WARNING: Removing unreachable block (ram,0x08001231)
// WARNING: Removing unreachable block (ram,0x08001239)
// WARNING: Removing unreachable block (ram,0x0800124d)
// WARNING: Removing unreachable block (ram,0x08001209)
// WARNING: Removing unreachable block (ram,0x08001211)
// WARNING: Removing unreachable block (ram,0x08001225)
// WARNING: Removing unreachable block (ram,0x080011e1)
// WARNING: Removing unreachable block (ram,0x080011e9)
// WARNING: Removing unreachable block (ram,0x080011fd)
// WARNING: Removing unreachable block (ram,0x08001281)
// WARNING: Removing unreachable block (ram,0x08001289)
// WARNING: Removing unreachable block (ram,0x0800129d)

int64_t ** sym.set_dgrid3d(int64_t arg7)
{
    int64_t iVar1;
    uint32_t uVar2;
    int32_t iVar3;
    uint32_t uVar4;
    int64_t **ppiVar5;
    int64_t **ppiVar6;
    undefined4 *puVar7;
    int64_t **ppiVar8;
    code *pcVar9;
    code **ppcVar10;
    undefined8 *puVar11;
    int32_t iVar12;
    uint64_t uVar13;
    uint64_t uVar14;
    int64_t **ppiVar15;
    int64_t in_FS_OFFSET;
    double extraout_XMM0_Qa;
    double extraout_XMM0_Qa_00;
    int64_t *extraout_XMM0_Qa_01;
    undefined auVar16 [12];
    code *pcStack96;
    uint64_t uStack88;
    int64_t **ppiStack80;
    uint64_t uStack72;
    uint64_t uStack64;
    double dStack56;
    double dStack48;
    
    uStack88 = 0;
    pcVar9 = reloc..LC4;
    _reloc.dgrid3d_mode = 0;
    reloc.dgrid3d_kdensity = (code)0x0;
    _reloc.c_token = _reloc.c_token + 1;
    uVar13 = (uint64_t)_reloc.dgrid3d_row_fineness;
    dStack56 = _reloc.dgrid3d_x_scale;
    ppiVar8 = (int64_t **)(uint64_t)_reloc.dgrid3d_col_fineness;
    uVar14 = (uint64_t)_reloc.dgrid3d_norm_value;
    dStack48 = _reloc.dgrid3d_y_scale;
    if ((int32_t)_reloc.c_token < _reloc.num_tokens) {
code_r0x08000570:
        do {
            while( true ) {
                uStack64 = 0x8000578;
                iVar3 = func_0x08090034(_reloc.c_token, reloc..LC4);
                if (iVar3 != 0) goto code_r0x080005d0;
                uStack64 = 0x800058e;
                uVar4 = func_0x08090034(reloc.dgrid3d_mode_tbl, _reloc.c_token);
                if (uVar4 == 8) goto code_r0x080006c0;
                _reloc.c_token = _reloc.c_token + 1;
                _reloc.dgrid3d_mode = uVar4;
                if (uVar4 != 2) break;
code_r0x080006ac:
                if (_reloc.num_tokens <= (int32_t)_reloc.c_token) goto code_r0x080005d0;
            }
            if ((int32_t)uVar4 < 3) {
                if (uVar4 == 1) {
                    if (_reloc.num_tokens <= (int32_t)_reloc.c_token) break;
                    uStack64 = 0x8000740;
                    iVar3 = func_0x08090034(_reloc.c_token, reloc..LC4);
                    if (iVar3 != 0) goto code_r0x080006ac;
                } else {
code_r0x080006c0:
                    uStack64 = 0x80006d2;
                    iVar3 = func_0x08090034(_reloc.c_token, reloc..LC9);
                    iVar12 = (int32_t)uStack88;
                    if (iVar3 != 0) {
                        uStack88 = (uint64_t)(iVar12 + 1);
                        _reloc.c_token = _reloc.c_token + 1;
                        if (_reloc.num_tokens <= (int32_t)_reloc.c_token) break;
                        goto code_r0x08000570;
                    }
                    if (iVar12 == 0) {
                        uStack64 = 0x8000755;
                        ppiVar8 = (int64_t **)func_0x08090034();
                        uVar13 = (uint64_t)ppiVar8 & 0xffffffff;
                        goto code_r0x080006ac;
                    }
                    if (iVar12 == 1) {
                        uStack64 = 0x80007fd;
                        uVar4 = func_0x08090034();
                        ppiVar8 = (int64_t **)(uint64_t)uVar4;
                        if (_reloc.num_tokens <= (int32_t)_reloc.c_token) break;
                        goto code_r0x08000570;
                    }
                    if (iVar12 != 2) goto code_r0x0800086b;
                }
                uStack64 = 0x800071b;
                uVar4 = func_0x08090034();
                uVar14 = (uint64_t)uVar4;
                if (_reloc.num_tokens <= (int32_t)_reloc.c_token) break;
                goto code_r0x08000570;
            }
            if (4 < uVar4 - 3) goto code_r0x080006c0;
            if (_reloc.num_tokens <= (int32_t)_reloc.c_token) break;
            uStack64 = 0x800067c;
            iVar3 = func_0x08090034(_reloc.c_token, reloc..LC4);
            if (iVar3 == 0) {
                uStack64 = 0x80007d2;
                iVar3 = func_0x08090034(_reloc.c_token, "kdens$ity2d");
                if (iVar3 != 0) {
                    reloc.dgrid3d_kdensity = (code)0x1;
                    _reloc.c_token = _reloc.c_token + 1;
                }
            }
            if (_reloc.num_tokens <= (int32_t)_reloc.c_token) break;
            uStack64 = 0x800069e;
            iVar3 = func_0x08090034(_reloc.c_token, reloc..LC4);
            if (iVar3 != 0) goto code_r0x080006ac;
            uStack64 = 0x8000775;
            func_0x08090034();
            uStack64 = 0x800078c;
            dStack56 = extraout_XMM0_Qa;
            iVar3 = func_0x08090034(_reloc.c_token, reloc..LC9);
            if (iVar3 != 0) {
                _reloc.c_token = _reloc.c_token + 1;
                uStack64 = 0x800082c;
                func_0x08090034();
                dStack48 = extraout_XMM0_Qa_00;
                if (_reloc.num_tokens <= (int32_t)_reloc.c_token) break;
                goto code_r0x08000570;
            }
            dStack48 = dStack56;
        } while ((int32_t)_reloc.c_token < _reloc.num_tokens);
    }
code_r0x080005d0:
    if (((int32_t)uVar13 - 2U < 999) && ((int32_t)ppiVar8 - 2U < 999)) {
        ppiVar5 = (int64_t **)(uint64_t)_reloc.dgrid3d_mode;
        if (_reloc.dgrid3d_mode == 0) {
            _reloc.dgrid3d_mode = 1;
        }
        if ((0.00000000 <= dStack56) && (0.00000000 <= dStack48)) {
            _reloc.dgrid3d_x_scale = dStack56;
            _reloc.dgrid3d_y_scale = dStack48;
            _reloc.dgrid3d_row_fineness = (int32_t)uVar13;
            _reloc.dgrid3d_col_fineness = (int32_t)ppiVar8;
            _reloc.dgrid3d_norm_value = (int32_t)uVar14;
            reloc.dgrid3d = (code)0x1;
            return ppiVar5;
        }
    } else {
        uStack64 = 0x800085a;
        func_0x08090034(0xffffffff, "Number of grid points must be in [2:1000] - not changed!");
    }
    uStack64 = 0x800086b;
    func_0x08090034(0xffffffff, "Scale factors must be greater than zero - not changed!");
code_r0x0800086b:
    uStack64 = 0x800087f;
    func_0x08090034(_reloc.c_token, "Unrecognized keyword or unexpected value");
    _reloc.c_token = _reloc.c_token + 1;
    ppcVar10 = &pcStack96;
    pcStack96 = reloc..LC4;
    ppiStack80 = ppiVar8;
    uStack72 = uVar14;
    uStack64 = uVar13;
    iVar3 = func_0x08090034(_reloc.c_token, "back$head");
    if ((((((iVar3 == 0) && (iVar3 = func_0x08090034(_reloc.c_token, "front"), iVar3 == 0)) &&
          (iVar3 = func_0x08090034(_reloc.c_token, "from"), iVar3 == 0)) &&
         ((iVar3 = func_0x08090034(_reloc.c_token, reloc..LC16), iVar3 == 0 &&
          (iVar3 = func_0x08090034(_reloc.c_token, reloc..LC17), iVar3 == 0)))) &&
        ((iVar3 = func_0x08090034(_reloc.c_token, reloc..LC18), iVar3 == 0 &&
         ((iVar3 = func_0x08090034(_reloc.c_token, "size"), iVar3 == 0 &&
          (iVar3 = func_0x08090034(_reloc.c_token, "filled"), iVar3 == 0)))))) &&
       ((iVar3 = func_0x08090034(_reloc.c_token, "empty"), iVar3 == 0 &&
        ((((iVar3 = func_0x08090034(_reloc.c_token, reloc..LC22), iVar3 == 0 &&
           (iVar3 = func_0x08090034(_reloc.c_token, "arrowstyle"), iVar3 == 0)) &&
          (iVar3 = func_0x08090034(_reloc.c_token, "head$s"), iVar3 == 0)) &&
         ((iVar3 = func_0x08090034(_reloc.c_token, "nohead"), iVar3 == 0 &&
          (iVar3 = func_0x08090034(_reloc.c_token, "nobo$rder"), iVar3 == 0)))))))) {
        ppiVar5 = (int64_t **)func_0x08090034();
        uVar13 = (uint64_t)ppiVar5 & 0xffffffff;
        if ((int32_t)ppiVar5 < 1) {
            func_0x08090034(_reloc.c_token, "tag must be > 0");
            goto code_r0x08000cf8;
        }
        ppiVar8 = _reloc.first_arrow;
        if (_reloc.first_arrow != (int64_t **)0x0) goto code_r0x080008de;
    } else {
        uVar13 = 0;
        ppiVar5 = _reloc.first_arrow;
        if (_reloc.first_arrow != (int64_t **)0x0) {
            do {
                iVar3 = (int32_t)uVar13;
                uVar4 = iVar3 + 1;
                uVar13 = (uint64_t)uVar4;
                ppiVar8 = _reloc.first_arrow;
                if (*(uint32_t *)(ppiVar5 + 1) != uVar4) goto code_r0x080008de;
                ppiVar5 = (int64_t **)*ppiVar5;
                auVar16 = CONCAT48(iVar3, ppiVar5);
                if (ppiVar5 == (int64_t **)0x0) goto code_r0x08000b78;
            } while( true );
        }
        uVar13 = 1;
    }
    ppiVar6 = (int64_t **)func_0x08090034(0x108, "arrow");
    pcVar9 = (code *)(int64_t **)0x0;
    ppiVar5 = ppiVar6;
code_r0x0800091a:
    _reloc.first_arrow = ppiVar5;
    *(int32_t *)(ppiVar6 + 1) = (int32_t)uVar13;
    *ppiVar6 = (int64_t *)pcVar9;
    ppiVar6[4] = (int64_t *)0x0;
    ppiVar6[5] = (int64_t *)0x0;
    ppiVar6[6] = (int64_t *)0x0;
    ppiVar6[7] = (int64_t *)0x0;
    *(undefined4 *)(ppiVar6 + 8) = 0;
    ppiVar6[9] = (int64_t *)0x0;
    ppiVar6[10] = (int64_t *)0x0;
    ppiVar6[0xb] = (int64_t *)0x0;
    ppiVar6[0xc] = (int64_t *)0x0;
    *(undefined8 *)((int64_t)ppiVar6 + 0xc) = 3;
    *(undefined8 *)((int64_t)ppiVar6 + 0x14) = 0;
    ppiVar5 = (int64_t **)func_0x08090034();
    pcVar9 = (code *)ppiVar6;
code_r0x08000980:
    if (_reloc.num_tokens <= (int32_t)_reloc.c_token) {
        return ppiVar5;
    }
    uVar14 = 0;
    uVar13 = 0;
    ppiVar8 = (int64_t **)((int64_t)pcVar9 + 0x68);
    uVar4 = _reloc.c_token;
code_r0x080009f8:
    ppiVar5 = (int64_t **)func_0x08090034(uVar4, reloc..LC4);
    if ((int32_t)ppiVar5 != 0) {
        return ppiVar5;
    }
    iVar3 = func_0x08090034(_reloc.c_token, "from");
    if ((iVar3 == 0) && (iVar3 = func_0x08090034(_reloc.c_token, reloc..LC16), iVar3 == 0)) {
        iVar3 = func_0x08090034(_reloc.c_token, reloc..LC17);
        if ((iVar3 != 0) || (iVar3 = func_0x08090034(_reloc.c_token, reloc..LC18), iVar3 != 0)) {
            if ((char)uVar14 != '\0') goto code_r0x08000b63;
            iVar3 = func_0x08090034(_reloc.c_token, reloc..LC18);
            *(uint32_t *)((int64_t)pcVar9 + 0xc) = (uint32_t)(iVar3 != 0);
            _reloc.c_token = _reloc.c_token + 1;
            if ((_reloc.num_tokens <= (int32_t)_reloc.c_token) ||
               (iVar3 = func_0x08090034(_reloc.c_token, reloc..LC4), iVar3 != 0)) goto code_r0x08000dfd;
            uVar14 = 1;
            ppiVar5 = (int64_t **)func_0x08090034();
            uVar4 = _reloc.c_token;
            if (_reloc.num_tokens <= (int32_t)_reloc.c_token) {
                return ppiVar5;
            }
            goto code_r0x080009f8;
        }
        iVar3 = func_0x08090034(_reloc.c_token, "len$gth");
        if (iVar3 != 0) {
            if ((char)uVar14 == '\0') {
                _reloc.c_token = _reloc.c_token + 1;
                uVar14 = 1;
                *(undefined4 *)((int64_t)pcVar9 + 0xc) = 2;
                ppiVar5 = (int64_t **)func_0x08090034((int64_t **)((int64_t)pcVar9 + 0x38), 0, 1);
                uVar4 = _reloc.c_token;
                goto code_r0x080009ec;
            }
            goto code_r0x08000b63;
        }
code_r0x08000cf8:
        iVar3 = func_0x08090034(_reloc.c_token, "ang$le");
        uVar2 = _reloc.c_token;
        if (iVar3 == 0) {
            ppiVar5 = (int64_t **)func_0x08090034(ppiVar8, 1);
            uVar4 = _reloc.c_token;
            if (_reloc.c_token == uVar2) {
                if (_reloc.num_tokens <= (int32_t)_reloc.c_token) {
                    return ppiVar5;
                }
                ppiVar5 = (int64_t **)func_0x08090034(_reloc.c_token, reloc..LC4);
                uVar4 = _reloc.c_token;
                if ((int32_t)ppiVar5 == 0) goto code_r0x08000e11;
            }
        } else {
            _reloc.c_token = _reloc.c_token + 1;
            ppiVar5 = (int64_t **)func_0x08090034();
            uVar4 = _reloc.c_token;
            *(int64_t **)((int64_t)pcVar9 + 0x60) = extraout_XMM0_Qa_01;
        }
    } else {
        if ((char)uVar13 != '\0') goto code_r0x08000b63;
        _reloc.c_token = _reloc.c_token + 1;
        if ((_reloc.num_tokens <= (int32_t)_reloc.c_token) ||
           (iVar3 = func_0x08090034(_reloc.c_token, reloc..LC4), iVar3 != 0)) {
            func_0x08090034(_reloc.c_token, "start coordinates expected");
code_r0x08000dfd:
            func_0x08090034(_reloc.c_token, "end coordinates expected");
code_r0x08000e11:
            ppiVar5 = (int64_t **)(uint64_t)_reloc.c_token;
            func_0x08090034(ppiVar5, "wrong argument in set arrow");
            goto code_r0x08000e30;
        }
        uVar13 = 1;
        ppiVar5 = (int64_t **)func_0x08090034();
        uVar4 = _reloc.c_token;
    }
code_r0x080009ec:
    if (_reloc.num_tokens <= (int32_t)uVar4) {
        return ppiVar5;
    }
    goto code_r0x080009f8;
code_r0x08000e30:
    *(int64_t ***)((int64_t)ppcVar10 + -8) = ppiVar8;
    *(uint64_t *)((int64_t)ppcVar10 + -0x10) = uVar13;
    *(code **)((int64_t)ppcVar10 + -0x18) = pcVar9;
    *(undefined8 *)((int64_t)ppcVar10 + -0x20) = *(undefined8 *)(in_FS_OFFSET + 0x28);
    *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x8000e56;
    uVar13 = func_0x08090034();
    *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x8000e67;
    iVar3 = func_0x08090034(_reloc.c_token, uVar13);
    if (iVar3 == 0) {
        *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x8000e90;
        func_0x08090034((undefined *)((int64_t)ppcVar10 + -0x38), 1, 0x10, "%smi$n");
        *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x8000e9e;
        iVar3 = func_0x08090034(_reloc.c_token, (undefined *)((int64_t)ppcVar10 + -0x38));
        if (iVar3 == 0) {
            *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x8000efe;
            func_0x08090034((undefined *)((int64_t)ppcVar10 + -0x38), 1, 0x10, "%sma$x");
            *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x8000f0c;
            iVar3 = func_0x08090034(_reloc.c_token, (undefined *)((int64_t)ppcVar10 + -0x38));
            if (iVar3 == 0) {
                *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x8000f9e;
                func_0x08090034((undefined *)((int64_t)ppcVar10 + -0x38), 1, 0x10, "%sfix");
                *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x8000fac;
                iVar3 = func_0x08090034(_reloc.c_token, (undefined *)((int64_t)ppcVar10 + -0x38));
                if (iVar3 == 0) {
                    *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x8000fe6;
                    func_0x08090034((undefined *)((int64_t)ppcVar10 + -0x38), 1, 0x10, "%sfixmi$n");
                    *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x8000ff4;
                    iVar3 = func_0x08090034(_reloc.c_token, (undefined *)((int64_t)ppcVar10 + -0x38));
                    if (iVar3 == 0) {
                        *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x800102e;
                        func_0x08090034((undefined *)((int64_t)ppcVar10 + -0x38), 1, 0x10, "%sfixma$x");
                        *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x800103c;
                        iVar3 = func_0x08090034(_reloc.c_token, (undefined *)((int64_t)ppcVar10 + -0x38));
                        ppiVar6 = (int64_t **)0x0;
                        ppiVar8 = (int64_t **)((int64_t)ppcVar10 + -0x38);
                        if (iVar3 != 0) {
                            *(uint32_t *)((int64_t)ppiVar5 + 4) = *(uint32_t *)((int64_t)ppiVar5 + 4) | 8;
                            ppiVar6 = (int64_t **)0x1;
                            _reloc.c_token = _reloc.c_token + 1;
                            ppiVar8 = (int64_t **)((int64_t)ppcVar10 + -0x38);
                        }
                    } else {
                        *(uint32_t *)((int64_t)ppiVar5 + 4) = *(uint32_t *)((int64_t)ppiVar5 + 4) | 4;
                        ppiVar6 = (int64_t **)0x1;
                        _reloc.c_token = _reloc.c_token + 1;
                        ppiVar8 = (int64_t **)((int64_t)ppcVar10 + -0x38);
                    }
                } else {
                    *(uint32_t *)((int64_t)ppiVar5 + 4) = *(uint32_t *)((int64_t)ppiVar5 + 4) | 0xc;
                    ppiVar6 = (int64_t **)0x1;
                    _reloc.c_token = _reloc.c_token + 1;
                    ppiVar8 = (int64_t **)((int64_t)ppcVar10 + -0x38);
                }
            } else {
                *(uint32_t *)((int64_t)ppiVar5 + 4) = *(uint32_t *)((int64_t)ppiVar5 + 4) | 2;
                ppiVar6 = (int64_t **)0x1;
                _reloc.c_token = _reloc.c_token + 1;
                *(undefined4 *)((int64_t)ppiVar5 + 0x54) = 0;
                ppiVar8 = (int64_t **)((int64_t)ppcVar10 + -0x38);
            }
        } else {
            *(uint32_t *)((int64_t)ppiVar5 + 4) = *(uint32_t *)((int64_t)ppiVar5 + 4) | 1;
            ppiVar6 = (int64_t **)0x1;
            _reloc.c_token = _reloc.c_token + 1;
            *(undefined4 *)(ppiVar5 + 10) = 0;
            ppiVar8 = (int64_t **)((int64_t)ppcVar10 + -0x38);
        }
    } else {
        *(undefined4 *)((int64_t)ppiVar5 + 4) = 3;
        ppiVar5[10] = (int64_t *)0x0;
        _reloc.c_token = _reloc.c_token + 1;
        *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x8000f5a;
        iVar3 = func_0x08090034(_reloc.c_token, "noext$end");
        ppiVar6 = (int64_t **)0x1;
        if (iVar3 != 0) {
            *(uint32_t *)((int64_t)ppiVar5 + 4) = *(uint32_t *)((int64_t)ppiVar5 + 4) | 0xc;
            _reloc.c_token = _reloc.c_token + 1;
        }
    }
    if (*(int64_t *)((int64_t)ppcVar10 + -0x20) == *(int64_t *)(in_FS_OFFSET + 0x28)) {
        return ppiVar6;
    }
    *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x8001064;
    func_0x08090034();
    _reloc.c_token = _reloc.c_token + 1;
    if (_reloc.num_tokens <= (int32_t)_reloc.c_token) {
code_r0x0800108b:
        puVar7 = (undefined4 *)0x8090120;
        do {
            *puVar7 = 3;
            puVar7 = puVar7 + 0xaa;
        } while (puVar7 != (undefined4 *)0x8091e58);
        if (_reloc.num_parallel_axes < 1) {
            return (int64_t **)0x8091e58;
        }
        uVar4 = _reloc.num_parallel_axes - 1;
        ppiVar8 = (int64_t **)(_reloc.parallel_axis_array + 4);
        iVar1 = _reloc.parallel_axis_array + 0x2ac;
        do {
            *(undefined4 *)ppiVar8 = 3;
            ppiVar8 = ppiVar8 + 0x55;
        } while ((int64_t **)(iVar1 + (uint64_t)uVar4 * 0x2a8) != ppiVar8);
        return ppiVar8;
    }
    *(undefined8 *)((int64_t)ppcVar10 + -0x48) = 0x800110c;
    iVar3 = func_0x08090034(_reloc.c_token, reloc..LC4);
    if (iVar3 != 0) goto code_r0x0800108b;
    *(undefined8 *)((int64_t)ppcVar10 + -0x48) = 0x8001126;
    ppiVar6 = (int64_t **)func_0x08090034(_reloc.c_token, reloc..LC41);
    if ((int32_t)ppiVar6 != 0) {
code_r0x0800112a:
        _reloc.c_token = _reloc.c_token + 1;
        *(undefined4 *)0x80903c8 = 3;
        _reloc.default_fillstyle = 0;
        *(undefined4 *)0x8090670 = 3;
        _reloc.eval_link_function = 0;
        return ppiVar6;
    }
    *(undefined8 *)((int64_t)ppcVar10 + -0x48) = 0x8001172;
    ppiVar6 = (int64_t **)func_0x08090034(_reloc.c_token, reloc..LC42);
    if ((int32_t)ppiVar6 != 0) goto code_r0x0800112a;
    *(undefined8 *)((int64_t)ppcVar10 + -0x48) = 0x8001188;
    iVar3 = func_0x08090034(_reloc.c_token, "paxis");
    if (iVar3 == 0) {
        *(undefined8 *)((int64_t)ppcVar10 + -0x48) = 0x80012c2;
        iVar3 = func_0x08090034(_reloc.c_token, reloc..LC44);
        if (iVar3 == 0) {
            *(undefined8 *)((int64_t)ppcVar10 + -0x48) = 0x80012dc;
            iVar3 = func_0x08090034(_reloc.c_token, "noext$end");
            if (iVar3 == 0) {
                *(undefined8 *)((int64_t)ppcVar10 + -0x48) = 0x80012f6;
                iVar3 = func_0x08090034(_reloc.c_token, "ke$epfix");
                if (iVar3 != 0) {
                    ppiVar8 = (int64_t **)0x8090120;
                    do {
                        *(uint32_t *)ppiVar8 = *(uint32_t *)ppiVar8 | 3;
                        ppiVar8 = ppiVar8 + 0x55;
                    } while (ppiVar8 != (int64_t **)0x8091e58);
                    if (0 < _reloc.num_parallel_axes) {
                        uVar4 = _reloc.num_parallel_axes - 1;
                        ppiVar8 = (int64_t **)(_reloc.parallel_axis_array + 4);
                        iVar1 = _reloc.parallel_axis_array + 0x2ac;
                        do {
                            *(uint32_t *)ppiVar8 = *(uint32_t *)ppiVar8 | 3;
                            ppiVar8 = ppiVar8 + 0x55;
                        } while (ppiVar8 != (int64_t **)(iVar1 + (uint64_t)uVar4 * 0x2a8));
                    }
                    goto code_r0x0800134f;
                }
                goto code_r0x080011d5;
            }
        }
        ppiVar8 = (int64_t **)0x8090120;
        do {
            *(uint32_t *)ppiVar8 = *(uint32_t *)ppiVar8 | 0xc;
            ppiVar8 = ppiVar8 + 0x55;
        } while (ppiVar8 != (int64_t **)0x8091e58);
        if (0 < _reloc.num_parallel_axes) {
            uVar4 = _reloc.num_parallel_axes - 1;
            ppiVar8 = (int64_t **)(_reloc.parallel_axis_array + 4);
            iVar1 = _reloc.parallel_axis_array + 0x2ac;
            do {
                *(uint32_t *)ppiVar8 = *(uint32_t *)ppiVar8 | 0xc;
                ppiVar8 = ppiVar8 + 0x55;
            } while ((int64_t **)(iVar1 + (uint64_t)uVar4 * 0x2a8) != ppiVar8);
        }
code_r0x0800134f:
        _reloc.c_token = _reloc.c_token + 1;
        return ppiVar8;
    }
    ppiVar6 = (int64_t **)(uint64_t)_reloc.c_token;
    _reloc.c_token = _reloc.c_token + 1;
    if (_reloc.num_tokens <= (int32_t)_reloc.c_token) {
code_r0x0800135b:
        if (_reloc.num_parallel_axes < 1) {
            return ppiVar6;
        }
        uVar4 = _reloc.num_parallel_axes - 1;
        ppiVar8 = (int64_t **)(_reloc.parallel_axis_array + 4);
        iVar1 = _reloc.parallel_axis_array + 0x2ac;
        do {
            *(undefined4 *)ppiVar8 = 3;
            ppiVar8 = ppiVar8 + 0x55;
        } while (ppiVar8 != (int64_t **)(iVar1 + (uint64_t)uVar4 * 0x2a8));
        return ppiVar8;
    }
    *(undefined8 *)((int64_t)ppcVar10 + -0x48) = 0x80011b7;
    ppiVar6 = (int64_t **)func_0x08090034(_reloc.c_token, reloc..LC4);
    if ((int32_t)ppiVar6 != 0) goto code_r0x0800135b;
    *(undefined8 *)((int64_t)ppcVar10 + -0x48) = 0x80011c4;
    iVar3 = func_0x08090034();
    iVar3 = iVar3 + -1;
    if ((-1 < iVar3) && (iVar3 < _reloc.num_parallel_axes)) {
        ppiVar8 = (int64_t **)((int64_t)iVar3 * 0x2a8 + _reloc.parallel_axis_array);
        *(undefined4 *)((int64_t)ppiVar8 + 4) = 3;
        return ppiVar8;
    }
code_r0x080011d5:
    puVar11 = (undefined8 *)((int64_t)ppcVar10 + -0x48);
    ppcVar10 = (code **)((int64_t)ppcVar10 + -0x48);
    *puVar11 = 0x80011e1;
    pcVar9 = (code *)ppiVar5;
    ppiVar5 = (int64_t **)reloc.default_circle;
    goto code_r0x08000e30;
code_r0x08000b63:
    auVar16 = func_0x08090034(_reloc.c_token, "duplicate or contradictory arguments");
code_r0x08000b78:
    ppiVar5 = SUB128(auVar16, 0);
    uVar13 = (uint64_t)(SUB124(auVar16 >> 0x40, 0) + 2);
code_r0x080008de:
    ppiVar15 = (int64_t **)0x0;
    while (pcVar9 = (code *)ppiVar8, *(int32_t *)(int64_t **)((int64_t)pcVar9 + 8) < (int32_t)uVar13) {
        ppiVar8 = *(int64_t ***)pcVar9;
        ppiVar15 = (int64_t **)pcVar9;
        if (ppiVar8 == (int64_t **)0x0) {
            ppiVar6 = (int64_t **)func_0x08090034(0x108, "arrow");
            goto code_r0x08000916;
        }
    }
    if (*(int32_t *)(int64_t **)((int64_t)pcVar9 + 8) != (int32_t)uVar13) goto code_r0x08000ae9;
    goto code_r0x08000980;
code_r0x08000ae9:
    ppiVar6 = (int64_t **)func_0x08090034(0x108, "arrow");
    ppiVar8 = (int64_t **)pcVar9;
    ppiVar5 = ppiVar6;
    if (ppiVar15 != (int64_t **)0x0) {
code_r0x08000916:
        *ppiVar15 = (int64_t *)ppiVar6;
        pcVar9 = (code *)ppiVar8;
        ppiVar5 = _reloc.first_arrow;
    }
    goto code_r0x0800091a;
}




// WARNING: Possible PIC construction at 0x080011dc: Changing call to branch
// WARNING: Possible PIC construction at 0x08001204: Changing call to branch
// WARNING: Possible PIC construction at 0x0800122c: Changing call to branch
// WARNING: Possible PIC construction at 0x08001254: Changing call to branch
// WARNING: Possible PIC construction at 0x0800127c: Changing call to branch
// WARNING: Removing unreachable block (ram,0x08001259)
// WARNING: Removing unreachable block (ram,0x08001261)
// WARNING: Removing unreachable block (ram,0x08001275)
// WARNING: Removing unreachable block (ram,0x08001231)
// WARNING: Removing unreachable block (ram,0x08001239)
// WARNING: Removing unreachable block (ram,0x0800124d)
// WARNING: Removing unreachable block (ram,0x08001209)
// WARNING: Removing unreachable block (ram,0x08001211)
// WARNING: Removing unreachable block (ram,0x08001225)
// WARNING: Removing unreachable block (ram,0x080011e1)
// WARNING: Removing unreachable block (ram,0x080011e9)
// WARNING: Removing unreachable block (ram,0x080011fd)
// WARNING: Removing unreachable block (ram,0x08001281)
// WARNING: Removing unreachable block (ram,0x08001289)
// WARNING: Removing unreachable block (ram,0x0800129d)

int64_t ** sym.set_dgrid3d(int64_t arg7)
{
    int64_t iVar1;
    uint32_t uVar2;
    int32_t iVar3;
    uint32_t uVar4;
    int64_t **ppiVar5;
    int64_t **ppiVar6;
    undefined4 *puVar7;
    int64_t **ppiVar8;
    code *pcVar9;
    code **ppcVar10;
    undefined8 *puVar11;
    int32_t iVar12;
    uint64_t uVar13;
    uint64_t uVar14;
    int64_t **ppiVar15;
    int64_t in_FS_OFFSET;
    double extraout_XMM0_Qa;
    double extraout_XMM0_Qa_00;
    int64_t *extraout_XMM0_Qa_01;
    undefined auVar16 [12];
    code *pcStack96;
    uint64_t uStack88;
    int64_t **ppiStack80;
    uint64_t uStack72;
    uint64_t uStack64;
    double dStack56;
    double dStack48;
    
    uStack88 = 0;
    pcVar9 = reloc..LC4;
    _reloc.dgrid3d_mode = 0;
    reloc.dgrid3d_kdensity = (code)0x0;
    _reloc.c_token = _reloc.c_token + 1;
    uVar13 = (uint64_t)_reloc.dgrid3d_row_fineness;
    dStack56 = _reloc.dgrid3d_x_scale;
    ppiVar8 = (int64_t **)(uint64_t)_reloc.dgrid3d_col_fineness;
    uVar14 = (uint64_t)_reloc.dgrid3d_norm_value;
    dStack48 = _reloc.dgrid3d_y_scale;
    if ((int32_t)_reloc.c_token < _reloc.num_tokens) {
code_r0x08000570:
        do {
            while( true ) {
                uStack64 = 0x8000578;
                iVar3 = func_0x08090034(_reloc.c_token, reloc..LC4);
                if (iVar3 != 0) goto code_r0x080005d0;
                uStack64 = 0x800058e;
                uVar4 = func_0x08090034(reloc.dgrid3d_mode_tbl, _reloc.c_token);
                if (uVar4 == 8) goto code_r0x080006c0;
                _reloc.c_token = _reloc.c_token + 1;
                _reloc.dgrid3d_mode = uVar4;
                if (uVar4 != 2) break;
code_r0x080006ac:
                if (_reloc.num_tokens <= (int32_t)_reloc.c_token) goto code_r0x080005d0;
            }
            if ((int32_t)uVar4 < 3) {
                if (uVar4 == 1) {
                    if (_reloc.num_tokens <= (int32_t)_reloc.c_token) break;
                    uStack64 = 0x8000740;
                    iVar3 = func_0x08090034(_reloc.c_token, reloc..LC4);
                    if (iVar3 != 0) goto code_r0x080006ac;
                } else {
code_r0x080006c0:
                    uStack64 = 0x80006d2;
                    iVar3 = func_0x08090034(_reloc.c_token, reloc..LC9);
                    iVar12 = (int32_t)uStack88;
                    if (iVar3 != 0) {
                        uStack88 = (uint64_t)(iVar12 + 1);
                        _reloc.c_token = _reloc.c_token + 1;
                        if (_reloc.num_tokens <= (int32_t)_reloc.c_token) break;
                        goto code_r0x08000570;
                    }
                    if (iVar12 == 0) {
                        uStack64 = 0x8000755;
                        ppiVar8 = (int64_t **)func_0x08090034();
                        uVar13 = (uint64_t)ppiVar8 & 0xffffffff;
                        goto code_r0x080006ac;
                    }
                    if (iVar12 == 1) {
                        uStack64 = 0x80007fd;
                        uVar4 = func_0x08090034();
                        ppiVar8 = (int64_t **)(uint64_t)uVar4;
                        if (_reloc.num_tokens <= (int32_t)_reloc.c_token) break;
                        goto code_r0x08000570;
                    }
                    if (iVar12 != 2) goto code_r0x0800086b;
                }
                uStack64 = 0x800071b;
                uVar4 = func_0x08090034();
                uVar14 = (uint64_t)uVar4;
                if (_reloc.num_tokens <= (int32_t)_reloc.c_token) break;
                goto code_r0x08000570;
            }
            if (4 < uVar4 - 3) goto code_r0x080006c0;
            if (_reloc.num_tokens <= (int32_t)_reloc.c_token) break;
            uStack64 = 0x800067c;
            iVar3 = func_0x08090034(_reloc.c_token, reloc..LC4);
            if (iVar3 == 0) {
                uStack64 = 0x80007d2;
                iVar3 = func_0x08090034(_reloc.c_token, "kdens$ity2d");
                if (iVar3 != 0) {
                    reloc.dgrid3d_kdensity = (code)0x1;
                    _reloc.c_token = _reloc.c_token + 1;
                }
            }
            if (_reloc.num_tokens <= (int32_t)_reloc.c_token) break;
            uStack64 = 0x800069e;
            iVar3 = func_0x08090034(_reloc.c_token, reloc..LC4);
            if (iVar3 != 0) goto code_r0x080006ac;
            uStack64 = 0x8000775;
            func_0x08090034();
            uStack64 = 0x800078c;
            dStack56 = extraout_XMM0_Qa;
            iVar3 = func_0x08090034(_reloc.c_token, reloc..LC9);
            if (iVar3 != 0) {
                _reloc.c_token = _reloc.c_token + 1;
                uStack64 = 0x800082c;
                func_0x08090034();
                dStack48 = extraout_XMM0_Qa_00;
                if (_reloc.num_tokens <= (int32_t)_reloc.c_token) break;
                goto code_r0x08000570;
            }
            dStack48 = dStack56;
        } while ((int32_t)_reloc.c_token < _reloc.num_tokens);
    }
code_r0x080005d0:
    if (((int32_t)uVar13 - 2U < 999) && ((int32_t)ppiVar8 - 2U < 999)) {
        ppiVar5 = (int64_t **)(uint64_t)_reloc.dgrid3d_mode;
        if (_reloc.dgrid3d_mode == 0) {
            _reloc.dgrid3d_mode = 1;
        }
        if ((0.00000000 <= dStack56) && (0.00000000 <= dStack48)) {
            _reloc.dgrid3d_x_scale = dStack56;
            _reloc.dgrid3d_y_scale = dStack48;
            _reloc.dgrid3d_row_fineness = (int32_t)uVar13;
            _reloc.dgrid3d_col_fineness = (int32_t)ppiVar8;
            _reloc.dgrid3d_norm_value = (int32_t)uVar14;
            reloc.dgrid3d = (code)0x1;
            return ppiVar5;
        }
    } else {
        uStack64 = 0x800085a;
        func_0x08090034(0xffffffff, "Number of grid points must be in [2:1000] - not changed!");
    }
    uStack64 = 0x800086b;
    func_0x08090034(0xffffffff, "Scale factors must be greater than zero - not changed!");
code_r0x0800086b:
    uStack64 = 0x800087f;
    func_0x08090034(_reloc.c_token, "Unrecognized keyword or unexpected value");
    _reloc.c_token = _reloc.c_token + 1;
    ppcVar10 = &pcStack96;
    pcStack96 = reloc..LC4;
    ppiStack80 = ppiVar8;
    uStack72 = uVar14;
    uStack64 = uVar13;
    iVar3 = func_0x08090034(_reloc.c_token, "back$head");
    if ((((((iVar3 == 0) && (iVar3 = func_0x08090034(_reloc.c_token, "front"), iVar3 == 0)) &&
          (iVar3 = func_0x08090034(_reloc.c_token, "from"), iVar3 == 0)) &&
         ((iVar3 = func_0x08090034(_reloc.c_token, reloc..LC16), iVar3 == 0 &&
          (iVar3 = func_0x08090034(_reloc.c_token, reloc..LC17), iVar3 == 0)))) &&
        ((iVar3 = func_0x08090034(_reloc.c_token, reloc..LC18), iVar3 == 0 &&
         ((iVar3 = func_0x08090034(_reloc.c_token, "size"), iVar3 == 0 &&
          (iVar3 = func_0x08090034(_reloc.c_token, "filled"), iVar3 == 0)))))) &&
       ((iVar3 = func_0x08090034(_reloc.c_token, "empty"), iVar3 == 0 &&
        ((((iVar3 = func_0x08090034(_reloc.c_token, reloc..LC22), iVar3 == 0 &&
           (iVar3 = func_0x08090034(_reloc.c_token, "arrowstyle"), iVar3 == 0)) &&
          (iVar3 = func_0x08090034(_reloc.c_token, "head$s"), iVar3 == 0)) &&
         ((iVar3 = func_0x08090034(_reloc.c_token, "nohead"), iVar3 == 0 &&
          (iVar3 = func_0x08090034(_reloc.c_token, "nobo$rder"), iVar3 == 0)))))))) {
        ppiVar5 = (int64_t **)func_0x08090034();
        uVar13 = (uint64_t)ppiVar5 & 0xffffffff;
        if ((int32_t)ppiVar5 < 1) {
            func_0x08090034(_reloc.c_token, "tag must be > 0");
            goto code_r0x08000cf8;
        }
        ppiVar8 = _reloc.first_arrow;
        if (_reloc.first_arrow != (int64_t **)0x0) goto code_r0x080008de;
    } else {
        uVar13 = 0;
        ppiVar5 = _reloc.first_arrow;
        if (_reloc.first_arrow != (int64_t **)0x0) {
            do {
                iVar3 = (int32_t)uVar13;
                uVar4 = iVar3 + 1;
                uVar13 = (uint64_t)uVar4;
                ppiVar8 = _reloc.first_arrow;
                if (*(uint32_t *)(ppiVar5 + 1) != uVar4) goto code_r0x080008de;
                ppiVar5 = (int64_t **)*ppiVar5;
                auVar16 = CONCAT48(iVar3, ppiVar5);
                if (ppiVar5 == (int64_t **)0x0) goto code_r0x08000b78;
            } while( true );
        }
        uVar13 = 1;
    }
    ppiVar6 = (int64_t **)func_0x08090034(0x108, "arrow");
    pcVar9 = (code *)(int64_t **)0x0;
    ppiVar5 = ppiVar6;
code_r0x0800091a:
    _reloc.first_arrow = ppiVar5;
    *(int32_t *)(ppiVar6 + 1) = (int32_t)uVar13;
    *ppiVar6 = (int64_t *)pcVar9;
    ppiVar6[4] = (int64_t *)0x0;
    ppiVar6[5] = (int64_t *)0x0;
    ppiVar6[6] = (int64_t *)0x0;
    ppiVar6[7] = (int64_t *)0x0;
    *(undefined4 *)(ppiVar6 + 8) = 0;
    ppiVar6[9] = (int64_t *)0x0;
    ppiVar6[10] = (int64_t *)0x0;
    ppiVar6[0xb] = (int64_t *)0x0;
    ppiVar6[0xc] = (int64_t *)0x0;
    *(undefined8 *)((int64_t)ppiVar6 + 0xc) = 3;
    *(undefined8 *)((int64_t)ppiVar6 + 0x14) = 0;
    ppiVar5 = (int64_t **)func_0x08090034();
    pcVar9 = (code *)ppiVar6;
code_r0x08000980:
    if (_reloc.num_tokens <= (int32_t)_reloc.c_token) {
        return ppiVar5;
    }
    uVar14 = 0;
    uVar13 = 0;
    ppiVar8 = (int64_t **)((int64_t)pcVar9 + 0x68);
    uVar4 = _reloc.c_token;
code_r0x080009f8:
    ppiVar5 = (int64_t **)func_0x08090034(uVar4, reloc..LC4);
    if ((int32_t)ppiVar5 != 0) {
        return ppiVar5;
    }
    iVar3 = func_0x08090034(_reloc.c_token, "from");
    if ((iVar3 == 0) && (iVar3 = func_0x08090034(_reloc.c_token, reloc..LC16), iVar3 == 0)) {
        iVar3 = func_0x08090034(_reloc.c_token, reloc..LC17);
        if ((iVar3 != 0) || (iVar3 = func_0x08090034(_reloc.c_token, reloc..LC18), iVar3 != 0)) {
            if ((char)uVar14 != '\0') goto code_r0x08000b63;
            iVar3 = func_0x08090034(_reloc.c_token, reloc..LC18);
            *(uint32_t *)((int64_t)pcVar9 + 0xc) = (uint32_t)(iVar3 != 0);
            _reloc.c_token = _reloc.c_token + 1;
            if ((_reloc.num_tokens <= (int32_t)_reloc.c_token) ||
               (iVar3 = func_0x08090034(_reloc.c_token, reloc..LC4), iVar3 != 0)) goto code_r0x08000dfd;
            uVar14 = 1;
            ppiVar5 = (int64_t **)func_0x08090034();
            uVar4 = _reloc.c_token;
            if (_reloc.num_tokens <= (int32_t)_reloc.c_token) {
                return ppiVar5;
            }
            goto code_r0x080009f8;
        }
        iVar3 = func_0x08090034(_reloc.c_token, "len$gth");
        if (iVar3 != 0) {
            if ((char)uVar14 == '\0') {
                _reloc.c_token = _reloc.c_token + 1;
                uVar14 = 1;
                *(undefined4 *)((int64_t)pcVar9 + 0xc) = 2;
                ppiVar5 = (int64_t **)func_0x08090034((int64_t **)((int64_t)pcVar9 + 0x38), 0, 1);
                uVar4 = _reloc.c_token;
                goto code_r0x080009ec;
            }
            goto code_r0x08000b63;
        }
code_r0x08000cf8:
        iVar3 = func_0x08090034(_reloc.c_token, "ang$le");
        uVar2 = _reloc.c_token;
        if (iVar3 == 0) {
            ppiVar5 = (int64_t **)func_0x08090034(ppiVar8, 1);
            uVar4 = _reloc.c_token;
            if (_reloc.c_token == uVar2) {
                if (_reloc.num_tokens <= (int32_t)_reloc.c_token) {
                    return ppiVar5;
                }
                ppiVar5 = (int64_t **)func_0x08090034(_reloc.c_token, reloc..LC4);
                uVar4 = _reloc.c_token;
                if ((int32_t)ppiVar5 == 0) goto code_r0x08000e11;
            }
        } else {
            _reloc.c_token = _reloc.c_token + 1;
            ppiVar5 = (int64_t **)func_0x08090034();
            uVar4 = _reloc.c_token;
            *(int64_t **)((int64_t)pcVar9 + 0x60) = extraout_XMM0_Qa_01;
        }
    } else {
        if ((char)uVar13 != '\0') goto code_r0x08000b63;
        _reloc.c_token = _reloc.c_token + 1;
        if ((_reloc.num_tokens <= (int32_t)_reloc.c_token) ||
           (iVar3 = func_0x08090034(_reloc.c_token, reloc..LC4), iVar3 != 0)) {
            func_0x08090034(_reloc.c_token, "start coordinates expected");
code_r0x08000dfd:
            func_0x08090034(_reloc.c_token, "end coordinates expected");
code_r0x08000e11:
            ppiVar5 = (int64_t **)(uint64_t)_reloc.c_token;
            func_0x08090034(ppiVar5, "wrong argument in set arrow");
            goto code_r0x08000e30;
        }
        uVar13 = 1;
        ppiVar5 = (int64_t **)func_0x08090034();
        uVar4 = _reloc.c_token;
    }
code_r0x080009ec:
    if (_reloc.num_tokens <= (int32_t)uVar4) {
        return ppiVar5;
    }
    goto code_r0x080009f8;
code_r0x08000e30:
    *(int64_t ***)((int64_t)ppcVar10 + -8) = ppiVar8;
    *(uint64_t *)((int64_t)ppcVar10 + -0x10) = uVar13;
    *(code **)((int64_t)ppcVar10 + -0x18) = pcVar9;
    *(undefined8 *)((int64_t)ppcVar10 + -0x20) = *(undefined8 *)(in_FS_OFFSET + 0x28);
    *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x8000e56;
    uVar13 = func_0x08090034();
    *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x8000e67;
    iVar3 = func_0x08090034(_reloc.c_token, uVar13);
    if (iVar3 == 0) {
        *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x8000e90;
        func_0x08090034((undefined *)((int64_t)ppcVar10 + -0x38), 1, 0x10, "%smi$n");
        *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x8000e9e;
        iVar3 = func_0x08090034(_reloc.c_token, (undefined *)((int64_t)ppcVar10 + -0x38));
        if (iVar3 == 0) {
            *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x8000efe;
            func_0x08090034((undefined *)((int64_t)ppcVar10 + -0x38), 1, 0x10, "%sma$x");
            *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x8000f0c;
            iVar3 = func_0x08090034(_reloc.c_token, (undefined *)((int64_t)ppcVar10 + -0x38));
            if (iVar3 == 0) {
                *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x8000f9e;
                func_0x08090034((undefined *)((int64_t)ppcVar10 + -0x38), 1, 0x10, "%sfix");
                *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x8000fac;
                iVar3 = func_0x08090034(_reloc.c_token, (undefined *)((int64_t)ppcVar10 + -0x38));
                if (iVar3 == 0) {
                    *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x8000fe6;
                    func_0x08090034((undefined *)((int64_t)ppcVar10 + -0x38), 1, 0x10, "%sfixmi$n");
                    *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x8000ff4;
                    iVar3 = func_0x08090034(_reloc.c_token, (undefined *)((int64_t)ppcVar10 + -0x38));
                    if (iVar3 == 0) {
                        *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x800102e;
                        func_0x08090034((undefined *)((int64_t)ppcVar10 + -0x38), 1, 0x10, "%sfixma$x");
                        *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x800103c;
                        iVar3 = func_0x08090034(_reloc.c_token, (undefined *)((int64_t)ppcVar10 + -0x38));
                        ppiVar6 = (int64_t **)0x0;
                        ppiVar8 = (int64_t **)((int64_t)ppcVar10 + -0x38);
                        if (iVar3 != 0) {
                            *(uint32_t *)((int64_t)ppiVar5 + 4) = *(uint32_t *)((int64_t)ppiVar5 + 4) | 8;
                            ppiVar6 = (int64_t **)0x1;
                            _reloc.c_token = _reloc.c_token + 1;
                            ppiVar8 = (int64_t **)((int64_t)ppcVar10 + -0x38);
                        }
                    } else {
                        *(uint32_t *)((int64_t)ppiVar5 + 4) = *(uint32_t *)((int64_t)ppiVar5 + 4) | 4;
                        ppiVar6 = (int64_t **)0x1;
                        _reloc.c_token = _reloc.c_token + 1;
                        ppiVar8 = (int64_t **)((int64_t)ppcVar10 + -0x38);
                    }
                } else {
                    *(uint32_t *)((int64_t)ppiVar5 + 4) = *(uint32_t *)((int64_t)ppiVar5 + 4) | 0xc;
                    ppiVar6 = (int64_t **)0x1;
                    _reloc.c_token = _reloc.c_token + 1;
                    ppiVar8 = (int64_t **)((int64_t)ppcVar10 + -0x38);
                }
            } else {
                *(uint32_t *)((int64_t)ppiVar5 + 4) = *(uint32_t *)((int64_t)ppiVar5 + 4) | 2;
                ppiVar6 = (int64_t **)0x1;
                _reloc.c_token = _reloc.c_token + 1;
                *(undefined4 *)((int64_t)ppiVar5 + 0x54) = 0;
                ppiVar8 = (int64_t **)((int64_t)ppcVar10 + -0x38);
            }
        } else {
            *(uint32_t *)((int64_t)ppiVar5 + 4) = *(uint32_t *)((int64_t)ppiVar5 + 4) | 1;
            ppiVar6 = (int64_t **)0x1;
            _reloc.c_token = _reloc.c_token + 1;
            *(undefined4 *)(ppiVar5 + 10) = 0;
            ppiVar8 = (int64_t **)((int64_t)ppcVar10 + -0x38);
        }
    } else {
        *(undefined4 *)((int64_t)ppiVar5 + 4) = 3;
        ppiVar5[10] = (int64_t *)0x0;
        _reloc.c_token = _reloc.c_token + 1;
        *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x8000f5a;
        iVar3 = func_0x08090034(_reloc.c_token, "noext$end");
        ppiVar6 = (int64_t **)0x1;
        if (iVar3 != 0) {
            *(uint32_t *)((int64_t)ppiVar5 + 4) = *(uint32_t *)((int64_t)ppiVar5 + 4) | 0xc;
            _reloc.c_token = _reloc.c_token + 1;
        }
    }
    if (*(int64_t *)((int64_t)ppcVar10 + -0x20) == *(int64_t *)(in_FS_OFFSET + 0x28)) {
        return ppiVar6;
    }
    *(undefined8 *)((int64_t)ppcVar10 + -0x40) = 0x8001064;
    func_0x08090034();
    _reloc.c_token = _reloc.c_token + 1;
    if (_reloc.num_tokens <= (int32_t)_reloc.c_token) {
code_r0x0800108b:
        puVar7 = (undefined4 *)0x8090120;
        do {
            *puVar7 = 3;
            puVar7 = puVar7 + 0xaa;
        } while (puVar7 != (undefined4 *)0x8091e58);
        if (_reloc.num_parallel_axes < 1) {
            return (int64_t **)0x8091e58;
        }
        uVar4 = _reloc.num_parallel_axes - 1;
        ppiVar8 = (int64_t **)(_reloc.parallel_axis_array + 4);
        iVar1 = _reloc.parallel_axis_array + 0x2ac;
        do {
            *(undefined4 *)ppiVar8 = 3;
            ppiVar8 = ppiVar8 + 0x55;
        } while ((int64_t **)(iVar1 + (uint64_t)uVar4 * 0x2a8) != ppiVar8);
        return ppiVar8;
    }
    *(undefined8 *)((int64_t)ppcVar10 + -0x48) = 0x800110c;
    iVar3 = func_0x08090034(_reloc.c_token, reloc..LC4);
    if (iVar3 != 0) goto code_r0x0800108b;
    *(undefined8 *)((int64_t)ppcVar10 + -0x48) = 0x8001126;
    ppiVar6 = (int64_t **)func_0x08090034(_reloc.c_token, reloc..LC41);
    if ((int32_t)ppiVar6 != 0) {
code_r0x0800112a:
        _reloc.c_token = _reloc.c_token + 1;
        *(undefined4 *)0x80903c8 = 3;
        _reloc.default_fillstyle = 0;
        *(undefined4 *)0x8090670 = 3;
        _reloc.eval_link_function = 0;
        return ppiVar6;
    }
    *(undefined8 *)((int64_t)ppcVar10 + -0x48) = 0x8001172;
    ppiVar6 = (int64_t **)func_0x08090034(_reloc.c_token, reloc..LC42);
    if ((int32_t)ppiVar6 != 0) goto code_r0x0800112a;
    *(undefined8 *)((int64_t)ppcVar10 + -0x48) = 0x8001188;
    iVar3 = func_0x08090034(_reloc.c_token, "paxis");
    if (iVar3 == 0) {
        *(undefined8 *)((int64_t)ppcVar10 + -0x48) = 0x80012c2;
        iVar3 = func_0x08090034(_reloc.c_token, reloc..LC44);
        if (iVar3 == 0) {
            *(undefined8 *)((int64_t)ppcVar10 + -0x48) = 0x80012dc;
            iVar3 = func_0x08090034(_reloc.c_token, "noext$end");
            if (iVar3 == 0) {
                *(undefined8 *)((int64_t)ppcVar10 + -0x48) = 0x80012f6;
                iVar3 = func_0x08090034(_reloc.c_token, "ke$epfix");
                if (iVar3 != 0) {
                    ppiVar8 = (int64_t **)0x8090120;
                    do {
                        *(uint32_t *)ppiVar8 = *(uint32_t *)ppiVar8 | 3;
                        ppiVar8 = ppiVar8 + 0x55;
                    } while (ppiVar8 != (int64_t **)0x8091e58);
                    if (0 < _reloc.num_parallel_axes) {
                        uVar4 = _reloc.num_parallel_axes - 1;
                        ppiVar8 = (int64_t **)(_reloc.parallel_axis_array + 4);
                        iVar1 = _reloc.parallel_axis_array + 0x2ac;
                        do {
                            *(uint32_t *)ppiVar8 = *(uint32_t *)ppiVar8 | 3;
                            ppiVar8 = ppiVar8 + 0x55;
                        } while (ppiVar8 != (int64_t **)(iVar1 + (uint64_t)uVar4 * 0x2a8));
                    }
                    goto code_r0x0800134f;
                }
                goto code_r0x080011d5;
            }
        }
        ppiVar8 = (int64_t **)0x8090120;
        do {
            *(uint32_t *)ppiVar8 = *(uint32_t *)ppiVar8 | 0xc;
            ppiVar8 = ppiVar8 + 0x55;
        } while (ppiVar8 != (int64_t **)0x8091e58);
        if (0 < _reloc.num_parallel_axes) {
            uVar4 = _reloc.num_parallel_axes - 1;
            ppiVar8 = (int64_t **)(_reloc.parallel_axis_array + 4);
            iVar1 = _reloc.parallel_axis_array + 0x2ac;
            do {
                *(uint32_t *)ppiVar8 = *(uint32_t *)ppiVar8 | 0xc;
                ppiVar8 = ppiVar8 + 0x55;
            } while ((int64_t **)(iVar1 + (uint64_t)uVar4 * 0x2a8) != ppiVar8);
        }
code_r0x0800134f:
        _reloc.c_token = _reloc.c_token + 1;
        return ppiVar8;
    }
    ppiVar6 = (int64_t **)(uint64_t)_reloc.c_token;
    _reloc.c_token = _reloc.c_token + 1;
    if (_reloc.num_tokens <= (int32_t)_reloc.c_token) {
code_r0x0800135b:
        if (_reloc.num_parallel_axes < 1) {
            return ppiVar6;
        }
        uVar4 = _reloc.num_parallel_axes - 1;
        ppiVar8 = (int64_t **)(_reloc.parallel_axis_array + 4);
        iVar1 = _reloc.parallel_axis_array + 0x2ac;
        do {
            *(undefined4 *)ppiVar8 = 3;
            ppiVar8 = ppiVar8 + 0x55;
        } while (ppiVar8 != (int64_t **)(iVar1 + (uint64_t)uVar4 * 0x2a8));
        return ppiVar8;
    }
    *(undefined8 *)((int64_t)ppcVar10 + -0x48) = 0x80011b7;
    ppiVar6 = (int64_t **)func_0x08090034(_reloc.c_token, reloc..LC4);
    if ((int32_t)ppiVar6 != 0) goto code_r0x0800135b;
    *(undefined8 *)((int64_t)ppcVar10 + -0x48) = 0x80011c4;
    iVar3 = func_0x08090034();
    iVar3 = iVar3 + -1;
    if ((-1 < iVar3) && (iVar3 < _reloc.num_parallel_axes)) {
        ppiVar8 = (int64_t **)((int64_t)iVar3 * 0x2a8 + _reloc.parallel_axis_array);
        *(undefined4 *)((int64_t)ppiVar8 + 4) = 3;
        return ppiVar8;
    }
code_r0x080011d5:
    puVar11 = (undefined8 *)((int64_t)ppcVar10 + -0x48);
    ppcVar10 = (code **)((int64_t)ppcVar10 + -0x48);
    *puVar11 = 0x80011e1;
    pcVar9 = (code *)ppiVar5;
    ppiVar5 = (int64_t **)reloc.default_circle;
    goto code_r0x08000e30;
code_r0x08000b63:
    auVar16 = func_0x08090034(_reloc.c_token, "duplicate or contradictory arguments");
code_r0x08000b78:
    ppiVar5 = SUB128(auVar16, 0);
    uVar13 = (uint64_t)(SUB124(auVar16 >> 0x40, 0) + 2);
code_r0x080008de:
    ppiVar15 = (int64_t **)0x0;
    while (pcVar9 = (code *)ppiVar8, *(int32_t *)(int64_t **)((int64_t)pcVar9 + 8) < (int32_t)uVar13) {
        ppiVar8 = *(int64_t ***)pcVar9;
        ppiVar15 = (int64_t **)pcVar9;
        if (ppiVar8 == (int64_t **)0x0) {
            ppiVar6 = (int64_t **)func_0x08090034(0x108, "arrow");
            goto code_r0x08000916;
        }
    }
    if (*(int32_t *)(int64_t **)((int64_t)pcVar9 + 8) != (int32_t)uVar13) goto code_r0x08000ae9;
    goto code_r0x08000980;
code_r0x08000ae9:
    ppiVar6 = (int64_t **)func_0x08090034(0x108, "arrow");
    ppiVar8 = (int64_t **)pcVar9;
    ppiVar5 = ppiVar6;
    if (ppiVar15 != (int64_t **)0x0) {
code_r0x08000916:
        *ppiVar15 = (int64_t *)ppiVar6;
        pcVar9 = (code *)ppiVar8;
        ppiVar5 = _reloc.first_arrow;
    }
    goto code_r0x0800091a;
}




void sym.set_dashtype(int64_t arg7, int64_t arg8)
{
    int64_t iVar1;
    int32_t iVar2;
    uint32_t uVar3;
    int32_t iVar4;
    undefined4 uVar5;
    int64_t **ppiVar6;
    int64_t **unaff_RBX;
    int64_t **unaff_RBP;
    int64_t **unaff_R12;
    int64_t **unaff_R13;
    int32_t unaff_R14D;
    int64_t in_FS_OFFSET;
    
    iVar1 = *(int64_t *)(in_FS_OFFSET + 0x28);
    _reloc.c_token = _reloc.c_token + 1;
    if (_reloc.c_token < _reloc.num_tokens) {
        uVar3 = func_0x08090034(arg7, arg8, _reloc.c_token, reloc..LC4);
        unaff_R13 = (int64_t **)(uint64_t)uVar3;
        if (uVar3 == 0) {
            unaff_R14D = func_0x08090034();
            ppiVar6 = _reloc.first_custom_dashtype;
            if (0 < unaff_R14D) {
                if (_reloc.first_custom_dashtype == (int64_t **)0x0) {
                    unaff_RBP = (int64_t **)func_0x08090034(0x38, "dashtype");
                } else {
                    unaff_RBX = _reloc.first_custom_dashtype;
                    unaff_R12 = (int64_t **)0x0;
                    while (ppiVar6 = unaff_RBX, *(int32_t *)(ppiVar6 + 1) < unaff_R14D) {
                        unaff_RBX = (int64_t **)*ppiVar6;
                        unaff_R12 = ppiVar6;
                        if (unaff_RBX == (int64_t **)0x0) goto code_r0x080022c0;
                    }
                    unaff_RBX = (int64_t **)0x0;
                    unaff_RBP = ppiVar6;
                    if (*(int32_t *)(ppiVar6 + 1) == unaff_R14D) goto code_r0x080021e3;
                    unaff_RBP = (int64_t **)func_0x08090034(0x38, "dashtype");
                    if (unaff_R12 != (int64_t **)0x0) goto code_r0x080022dd;
                }
                unaff_R12 = (int64_t **)0x0;
                _reloc.first_custom_dashtype = unaff_RBP;
                goto code_r0x08002190;
            }
        }
    }
    func_0x08090034(_reloc.c_token, "tag must be > zero");
code_r0x08002337:
    ppiVar6 = (int64_t **)func_0x08090034();
    do {
        _reloc.first_custom_dashtype = ppiVar6;
        func_0x08090034(unaff_RBP);
        do {
            func_0x08090034(_reloc.c_token, "Extraneous arguments to set dashtype");
code_r0x080022c0:
            ppiVar6 = unaff_RBX;
            unaff_RBP = (int64_t **)func_0x08090034(0x38, "dashtype");
code_r0x080022dd:
            *unaff_R12 = (int64_t *)unaff_RBP;
code_r0x08002190:
            *(int32_t *)(unaff_RBP + 1) = unaff_R14D;
            *(undefined4 *)((int64_t)unaff_RBP + 0xc) = 0xffffffff;
            unaff_RBP[6] = (int64_t *)0x0;
            *unaff_RBP = (int64_t *)ppiVar6;
            unaff_RBX = (int64_t **)0x1;
            unaff_RBP[2] = (int64_t *)0x0;
            unaff_RBP[3] = (int64_t *)0x0;
            *(undefined4 *)(unaff_RBP + 4) = 0;
            *(undefined4 *)((int64_t)unaff_RBP + 0x24) = 0;
            *(undefined4 *)(unaff_RBP + 5) = 0;
            *(undefined4 *)((int64_t)unaff_RBP + 0x2c) = 0;
code_r0x080021e3:
            iVar4 = func_0x08090034(_reloc.c_token, "def$ault");
            if (iVar4 != 0) {
                ppiVar6 = (int64_t **)*unaff_RBP;
                if (_reloc.first_custom_dashtype != unaff_RBP) {
                    *unaff_R12 = *unaff_RBP;
                    ppiVar6 = _reloc.first_custom_dashtype;
                }
                _reloc.first_custom_dashtype = ppiVar6;
                func_0x08090034();
                iVar4 = _reloc.c_token + 1;
                _reloc.c_token = iVar4;
                if (iVar4 < _reloc.num_tokens) goto code_r0x08002274;
code_r0x08002216:
                if (iVar1 == *(int64_t *)(in_FS_OFFSET + 0x28)) {
                    return;
                }
                goto code_r0x08002337;
            }
            uVar5 = func_0x08090034();
            iVar2 = _reloc.num_tokens;
            iVar4 = _reloc.c_token;
            *(undefined4 *)((int64_t)unaff_RBP + 0xc) = uVar5;
            unaff_R13 = unaff_RBX;
            if (iVar2 <= iVar4) goto code_r0x08002216;
code_r0x08002274:
            iVar4 = func_0x08090034(iVar4, reloc..LC4);
            if (iVar4 != 0) goto code_r0x08002216;
        } while ((int32_t)unaff_R13 == 0);
        ppiVar6 = (int64_t **)*unaff_RBP;
        if (_reloc.first_custom_dashtype != unaff_RBP) {
            *unaff_R12 = *unaff_RBP;
            ppiVar6 = _reloc.first_custom_dashtype;
        }
    } while( true );
}


// WARNING: Control flow encountered bad instruction data
// WARNING: Possible PIC construction at 0x0800269f: Changing call to branch
// WARNING: Possible PIC construction at 0x080026e6: Changing call to branch
// WARNING: Possible PIC construction at 0x08002727: Changing call to branch
// WARNING: Possible PIC construction at 0x08002751: Changing call to branch
// WARNING: Possible PIC construction at 0x08002778: Changing call to branch
// WARNING: Possible PIC construction at 0x080027a4: Changing call to branch
// WARNING: Possible PIC construction at 0x08002895: Changing call to branch
// WARNING: Possible PIC construction at 0x08002814: Changing call to branch
// WARNING: Possible PIC construction at 0x08002830: Changing call to branch
// WARNING: Possible PIC construction at 0x0800284c: Changing call to branch
// WARNING: Possible PIC construction at 0x08002868: Changing call to branch
// WARNING: Possible PIC construction at 0x080027f2: Changing call to branch
// WARNING: Removing unreachable block (ram,0x0800286d)
// WARNING: Removing unreachable block (ram,0x0800287a)
// WARNING: Removing unreachable block (ram,0x0800287e)
// WARNING: Removing unreachable block (ram,0x08002851)
// WARNING: Removing unreachable block (ram,0x08002859)
// WARNING: Removing unreachable block (ram,0x08002835)
// WARNING: Removing unreachable block (ram,0x0800283d)
// WARNING: Removing unreachable block (ram,0x08002819)
// WARNING: Removing unreachable block (ram,0x0800289a)
// WARNING: Removing unreachable block (ram,0x08002821)
// WARNING: Removing unreachable block (ram,0x080027a9)
// WARNING: Removing unreachable block (ram,0x0800277d)
// WARNING: Removing unreachable block (ram,0x08002756)
// WARNING: Removing unreachable block (ram,0x08002765)
// WARNING: Removing unreachable block (ram,0x08002883)
// WARNING: Removing unreachable block (ram,0x08002778)
// WARNING: Removing unreachable block (ram,0x0800272c)
// WARNING: Removing unreachable block (ram,0x08002730)
// WARNING: Removing unreachable block (ram,0x080027d0)
// WARNING: Removing unreachable block (ram,0x080027e5)
// WARNING: Removing unreachable block (ram,0x0800274a)
// WARNING: Removing unreachable block (ram,0x080026eb)
// WARNING: Removing unreachable block (ram,0x080026a4)
// WARNING: Removing unreachable block (ram,0x08002720)
// WARNING: Removing unreachable block (ram,0x080026bd)
// WARNING: Removing unreachable block (ram,0x080026c9)
// WARNING: Removing unreachable block (ram,0x08002700)
// WARNING: Removing unreachable block (ram,0x08002706)
// WARNING: Removing unreachable block (ram,0x080026f6)
// WARNING: Removing unreachable block (ram,0x080026ce)
// WARNING: Removing unreachable block (ram,0x080026e6)
// WARNING: Removing unreachable block (ram,0x080027f7)
// WARNING: Removing unreachable block (ram,0x08002800)

void sym.set_decimalsign(void)
{
    char *pcVar1;
    char in_AL;
    unkbyte7 in_RAX;
    int64_t in_FS_OFFSET;
    
    _reloc.c_token = _reloc.c_token + 1;
    *(char *)CONCAT71(in_RAX, in_AL) = *(char *)CONCAT71(in_RAX, in_AL) + in_AL;
    *(char *)CONCAT71(in_RAX, in_AL) = *(char *)CONCAT71(in_RAX, in_AL) + in_AL;
    pcVar1 = (char *)(in_FS_OFFSET + CONCAT71(in_RAX, in_AL));
    *pcVar1 = *pcVar1 + in_AL;
    pcVar1 = (char *)(CONCAT71(in_RAX, in_AL) + CONCAT71(in_RAX, in_AL));
    *pcVar1 = *pcVar1 + in_AL;
    *(char *)CONCAT71(in_RAX, in_AL) = *(char *)CONCAT71(in_RAX, in_AL) + in_AL;
    *(char *)CONCAT71(in_RAX, in_AL) = *(char *)CONCAT71(in_RAX, in_AL) + in_AL;
    // WARNING: Bad instruction - Truncating control flow here
    halt_baddata();
}




 @ dd @ dd @  dd @  dd @ s dd @ s dd @ sy dd @ sy dd @ sym dd @ sym dd @ sym. dd @ sym. dd @ sym.s dd @ sym.s dd @ sym.se dd @ sym.se dd @ sym.set dd @ sym.set dd @ sym.set_ dd @ sym.set_ dd @ sym.set_v dd @ sym.set_v dd @ sym.set_vi dd @ sym.set_vi dd @ sym.set_vie dd @ sym.set_vie dd @ sym.set_view dd @ sym.set_viewopendir /proc/x/fd: No such file or directory
WARNING: r_list_purge: assertion 'list' failed (line 67)


void sym.set_ticscale(void)
{
    int32_t iVar1;
    undefined8 *puVar2;
    undefined8 *puVar3;
    double *pdVar4;
    double *pdVar5;
    code *pcVar6;
    code *pcVar7;
    double dVar8;
    double dVar9;
    undefined8 uVar10;
    
    _reloc.c_token = _reloc.c_token + 1;
    iVar1 = func_0x08090034(_reloc.c_token, "def$ault");
    dVar8 = _reloc..LC191;
    uVar10 = _reloc..LC1;
    if (iVar1 == 0) {
        dVar8 = (double)func_0x08090034();
        iVar1 = func_0x08090034(_reloc.c_token, reloc..LC9);
        if (iVar1 == 0) {
            dVar9 = _reloc..LC191 * dVar8;
        } else {
            _reloc.c_token = _reloc.c_token + 1;
            dVar9 = (double)func_0x08090034();
        }
        pdVar4 = (double *)reloc.epsilon_abs;
        do {
            *pdVar4 = dVar8;
            pdVar5 = pdVar4 + 0x55;
            pdVar4[1] = dVar9;
            pdVar4 = pdVar5;
        } while (pdVar5 != (double *)0x80917ac);
        pcVar6 = reloc.ticscale;
        while( true ) {
            iVar1 = func_0x08090034(_reloc.c_token, reloc..LC9);
            if (iVar1 == 0) break;
            _reloc.c_token = _reloc.c_token + 1;
            pcVar7 = pcVar6 + 8;
            uVar10 = func_0x08090034();
            *(undefined8 *)(pcVar6 + 0x10) = uVar10;
            pcVar6 = pcVar7;
            if (pcVar7 == reloc.df_separators) {
                return;
            }
        }
    } else {
        _reloc.c_token = _reloc.c_token + 1;
        puVar2 = (undefined8 *)reloc.epsilon_abs;
        do {
            *puVar2 = uVar10;
            puVar3 = puVar2 + 0x55;
            puVar2[1] = dVar8;
            puVar2 = puVar3;
        } while (puVar3 != (undefined8 *)0x8091fa4);
        _reloc.ticscale = uVar10;
        _reloc.default_axis_zeroaxis = dVar8;
        _reloc.missing_val = uVar10;
        _reloc.df_separators = uVar10;
        _reloc.df_commentschars = uVar10;
    }
    return;
}






// WARNING: Control flow encountered bad instruction data
// WARNING: Possible PIC construction at 0x08005a97: Changing call to branch
// WARNING: Possible PIC construction at 0x08005acc: Changing call to branch
// WARNING: Possible PIC construction at 0x08004c4f: Changing call to branch
// WARNING: Possible PIC construction at 0x08004ca8: Changing call to branch
// WARNING: Possible PIC construction at 0x08004cdc: Changing call to branch
// WARNING: Possible PIC construction at 0x08004d19: Changing call to branch
// WARNING: Possible PIC construction at 0x08004d67: Changing call to branch
// WARNING: Possible PIC construction at 0x08004dae: Changing call to branch
// WARNING: Possible PIC construction at 0x08005a6f: Changing call to branch
// WARNING: Possible PIC construction at 0x080059fd: Changing call to branch
// WARNING: Possible PIC construction at 0x08005a23: Changing call to branch
// WARNING: Possible PIC construction at 0x08005a45: Changing call to branch
// WARNING: Possible PIC construction at 0x080053bd: Changing call to branch
// WARNING: Possible PIC construction at 0x08004f2c: Changing call to branch
// WARNING: Possible PIC construction at 0x0800524d: Changing call to branch
// WARNING: Possible PIC construction at 0x0800533d: Changing call to branch
// WARNING: Possible PIC construction at 0x0800567f: Changing call to branch
// WARNING: Possible PIC construction at 0x080056eb: Changing call to branch
// WARNING: Possible PIC construction at 0x08005908: Changing call to branch
// WARNING: Possible PIC construction at 0x0800593b: Changing call to branch
// WARNING: Possible PIC construction at 0x08004e8b: Changing call to branch
// WARNING: Possible PIC construction at 0x08004b72: Changing call to branch
// WARNING: Possible PIC construction at 0x08004b9c: Changing call to branch
// WARNING: Possible PIC construction at 0x08004bda: Changing call to branch
// WARNING: Possible PIC construction at 0x080052de: Changing call to branch
// WARNING: Possible PIC construction at 0x08004fa3: Changing call to branch
// WARNING: Possible PIC construction at 0x08005013: Changing call to branch
// WARNING: Possible PIC construction at 0x08004e23: Changing call to branch
// WARNING: Possible PIC construction at 0x0800505d: Changing call to branch
// WARNING: Possible PIC construction at 0x080050ca: Changing call to branch
// WARNING: Possible PIC construction at 0x08005111: Changing call to branch
// WARNING: Possible PIC construction at 0x08005992: Changing call to branch
// WARNING: Possible PIC construction at 0x08005165: Changing call to branch
// WARNING: Possible PIC construction at 0x080051f0: Changing call to branch
// WARNING: Possible PIC construction at 0x080052a9: Changing call to branch
// WARNING: Possible PIC construction at 0x08004ec8: Changing call to branch
// WARNING: Possible PIC construction at 0x08004ef8: Changing call to branch
// WARNING: Possible PIC construction at 0x08005556: Changing call to branch
// WARNING: Possible PIC construction at 0x0800558c: Changing call to branch
// WARNING: Possible PIC construction at 0x0800540f: Changing call to branch
// WARNING: Possible PIC construction at 0x08005b1d: Changing call to branch
// WARNING: Possible PIC construction at 0x08005c16: Changing call to branch
// WARNING: Possible PIC construction at 0x08005c5e: Changing call to branch
// WARNING: Possible PIC construction at 0x08005cba: Changing call to branch
// WARNING: Possible PIC construction at 0x08005ce6: Changing call to branch
// WARNING: Possible PIC construction at 0x08005f20: Changing call to branch
// WARNING: Possible PIC construction at 0x08005fbd: Changing call to branch
// WARNING: Possible PIC construction at 0x08006024: Changing call to branch
// WARNING: Possible PIC construction at 0x0800606d: Changing call to branch
// WARNING: Possible PIC construction at 0x0800611d: Changing call to branch
// WARNING: Possible PIC construction at 0x0800618d: Changing call to branch
// WARNING: Possible PIC construction at 0x08006235: Changing call to branch
// WARNING: Possible PIC construction at 0x08006261: Changing call to branch
// WARNING: Possible PIC construction at 0x0800628b: Changing call to branch
// WARNING: Possible PIC construction at 0x0800630d: Changing call to branch
// WARNING: Possible PIC construction at 0x0800634d: Changing call to branch
// WARNING: Possible PIC construction at 0x08006393: Changing call to branch
// WARNING: Possible PIC construction at 0x080063f9: Changing call to branch
// WARNING: Possible PIC construction at 0x08006213: Changing call to branch
// WARNING: Possible PIC construction at 0x080060d5: Changing call to branch
// WARNING: Possible PIC construction at 0x08006179: Changing call to branch
// WARNING: Possible PIC construction at 0x08005dd0: Changing call to branch
// WARNING: Possible PIC construction at 0x08005e28: Changing call to branch
// WARNING: Possible PIC construction at 0x08005e9e: Changing call to branch
// WARNING: Possible PIC construction at 0x08005b9d: Changing call to branch
// WARNING: Possible PIC construction at 0x08005bc4: Changing call to branch
// WARNING: Removing unreachable block (ram,0x08005ba2)
// WARNING: Removing unreachable block (ram,0x08005baa)
// WARNING: Removing unreachable block (ram,0x08005bc4)
// WARNING: Removing unreachable block (ram,0x08005ea3)
// WARNING: Removing unreachable block (ram,0x08005ecc)
// WARNING: Removing unreachable block (ram,0x08005efd)
// WARNING: Removing unreachable block (ram,0x08005f0d)
// WARNING: Removing unreachable block (ram,0x08005eda)
// WARNING: Removing unreachable block (ram,0x08005ea7)
// WARNING: Removing unreachable block (ram,0x08005e2d)
// WARNING: Removing unreachable block (ram,0x08005e56)
// WARNING: Removing unreachable block (ram,0x08005e91)
// WARNING: Removing unreachable block (ram,0x08005e6c)
// WARNING: Removing unreachable block (ram,0x08005e31)
// WARNING: Removing unreachable block (ram,0x08005dd5)
// WARNING: Removing unreachable block (ram,0x080060da)
// WARNING: Removing unreachable block (ram,0x0800616c)
// WARNING: Removing unreachable block (ram,0x080060f3)
// WARNING: Removing unreachable block (ram,0x080063fe)
// WARNING: Removing unreachable block (ram,0x08006408)
// WARNING: Removing unreachable block (ram,0x08006440)
// WARNING: Removing unreachable block (ram,0x0800640e)
// WARNING: Removing unreachable block (ram,0x08006398)
// WARNING: Removing unreachable block (ram,0x080063f0)
// WARNING: Removing unreachable block (ram,0x080063be)
// WARNING: Removing unreachable block (ram,0x08006430)
// WARNING: Removing unreachable block (ram,0x080063d5)
// WARNING: Removing unreachable block (ram,0x080063dd)
// WARNING: Removing unreachable block (ram,0x080063e9)
// WARNING: Removing unreachable block (ram,0x08006352)
// WARNING: Removing unreachable block (ram,0x08006384)
// WARNING: Removing unreachable block (ram,0x08006356)
// WARNING: Removing unreachable block (ram,0x08006312)
// WARNING: Removing unreachable block (ram,0x08006340)
// WARNING: Removing unreachable block (ram,0x08006316)
// WARNING: Removing unreachable block (ram,0x08006378)
// WARNING: Removing unreachable block (ram,0x0800632c)
// WARNING: Removing unreachable block (ram,0x08006290)
// WARNING: Removing unreachable block (ram,0x08006266)
// WARNING: Removing unreachable block (ram,0x080062c8)
// WARNING: Removing unreachable block (ram,0x08006300)
// WARNING: Removing unreachable block (ram,0x080062de)
// WARNING: Removing unreachable block (ram,0x0800626a)
// WARNING: Removing unreachable block (ram,0x08006284)
// WARNING: Removing unreachable block (ram,0x0800623a)
// WARNING: Removing unreachable block (ram,0x0800623e)
// WARNING: Removing unreachable block (ram,0x080061f0)
// WARNING: Removing unreachable block (ram,0x08006218)
// WARNING: Removing unreachable block (ram,0x08006226)
// WARNING: Removing unreachable block (ram,0x08006204)
// WARNING: Removing unreachable block (ram,0x08006254)
// WARNING: Removing unreachable block (ram,0x08006192)
// WARNING: Removing unreachable block (ram,0x080061c1)
// WARNING: Removing unreachable block (ram,0x080062a0)
// WARNING: Removing unreachable block (ram,0x080061d5)
// WARNING: Removing unreachable block (ram,0x08006232)
// WARNING: Removing unreachable block (ram,0x080061ea)
// WARNING: Removing unreachable block (ram,0x080062bd)
// WARNING: Removing unreachable block (ram,0x08006122)
// WARNING: Removing unreachable block (ram,0x0800613e)
// WARNING: Removing unreachable block (ram,0x0800617e)
// WARNING: Removing unreachable block (ram,0x08006154)
// WARNING: Removing unreachable block (ram,0x08006126)
// WARNING: Removing unreachable block (ram,0x08006072)
// WARNING: Removing unreachable block (ram,0x08006090)
// WARNING: Removing unreachable block (ram,0x08006110)
// WARNING: Removing unreachable block (ram,0x080060a6)
// WARNING: Removing unreachable block (ram,0x08006076)
// WARNING: Removing unreachable block (ram,0x08006029)
// WARNING: Removing unreachable block (ram,0x08005fe8)
// WARNING: Removing unreachable block (ram,0x0800602d)
// WARNING: Removing unreachable block (ram,0x08006060)
// WARNING: Removing unreachable block (ram,0x08006043)
// WARNING: Removing unreachable block (ram,0x08005ffb)
// WARNING: Removing unreachable block (ram,0x08005fc2)
// WARNING: Removing unreachable block (ram,0x080060c0)
// WARNING: Removing unreachable block (ram,0x08005fd0)
// WARNING: Removing unreachable block (ram,0x08006007)
// WARNING: Removing unreachable block (ram,0x08006017)
// WARNING: Removing unreachable block (ram,0x08005fdf)
// WARNING: Removing unreachable block (ram,0x08005f25)
// WARNING: Removing unreachable block (ram,0x08005fb0)
// WARNING: Removing unreachable block (ram,0x08005f58)
// WARNING: Removing unreachable block (ram,0x08005f7a)
// WARNING: Removing unreachable block (ram,0x08005f98)
// WARNING: Removing unreachable block (ram,0x08005fa4)
// WARNING: Removing unreachable block (ram,0x08005f86)
// WARNING: Removing unreachable block (ram,0x08005ceb)
// WARNING: Removing unreachable block (ram,0x08005cf3)
// WARNING: Removing unreachable block (ram,0x08005f12)
// WARNING: Removing unreachable block (ram,0x08005d5b)
// WARNING: Removing unreachable block (ram,0x08005cbf)
// WARNING: Removing unreachable block (ram,0x08005dc0)
// WARNING: Removing unreachable block (ram,0x08005cd9)
// WARNING: Removing unreachable block (ram,0x08005c63)
// WARNING: Removing unreachable block (ram,0x08005de0)
// WARNING: Removing unreachable block (ram,0x08005e1b)
// WARNING: Removing unreachable block (ram,0x08005df6)
// WARNING: Removing unreachable block (ram,0x08005c6b)
// WARNING: Removing unreachable block (ram,0x08005c8b)
// WARNING: Removing unreachable block (ram,0x08005c90)
// WARNING: Removing unreachable block (ram,0x08005c9c)
// WARNING: Removing unreachable block (ram,0x08005da0)
// WARNING: Removing unreachable block (ram,0x08005f20)
// WARNING: Removing unreachable block (ram,0x08005db4)
// WARNING: Removing unreachable block (ram,0x08005cb0)
// WARNING: Removing unreachable block (ram,0x08005b22)
// WARNING: Removing unreachable block (ram,0x08005b2a)
// WARNING: Removing unreachable block (ram,0x08005c00)
// WARNING: Removing unreachable block (ram,0x08005b44)
// WARNING: Removing unreachable block (ram,0x08005c1b)
// WARNING: Removing unreachable block (ram,0x08005b52)
// WARNING: Removing unreachable block (ram,0x08005b74)
// WARNING: Removing unreachable block (ram,0x08005b68)
// WARNING: Removing unreachable block (ram,0x08005b79)
// WARNING: Removing unreachable block (ram,0x08005b5e)
// WARNING: Removing unreachable block (ram,0x08005c0d)
// WARNING: Removing unreachable block (ram,0x08005414)
// WARNING: Removing unreachable block (ram,0x08005591)
// WARNING: Removing unreachable block (ram,0x0800575e)
// WARNING: Removing unreachable block (ram,0x08005a28)
// WARNING: Removing unreachable block (ram,0x08005778)
// WARNING: Removing unreachable block (ram,0x08005599)
// WARNING: Removing unreachable block (ram,0x0800555b)
// WARNING: Removing unreachable block (ram,0x0800556b)
// WARNING: Removing unreachable block (ram,0x0800556f)
// WARNING: Removing unreachable block (ram,0x080055ae)
// WARNING: Removing unreachable block (ram,0x080055ba)
// WARNING: Removing unreachable block (ram,0x080055c1)
// WARNING: Removing unreachable block (ram,0x0800557f)
// WARNING: Removing unreachable block (ram,0x08004efd)
// WARNING: Removing unreachable block (ram,0x08005408)
// WARNING: Removing unreachable block (ram,0x08004f05)
// WARNING: Removing unreachable block (ram,0x08005540)
// WARNING: Removing unreachable block (ram,0x08004ecd)
// WARNING: Removing unreachable block (ram,0x08004ed1)
// WARNING: Removing unreachable block (ram,0x08004eeb)
// WARNING: Removing unreachable block (ram,0x080052ae)
// WARNING: Removing unreachable block (ram,0x080051f5)
// WARNING: Removing unreachable block (ram,0x0800516a)
// WARNING: Removing unreachable block (ram,0x08005172)
// WARNING: Removing unreachable block (ram,0x0800517b)
// WARNING: Removing unreachable block (ram,0x0800519f)
// WARNING: Removing unreachable block (ram,0x08005642)
// WARNING: Removing unreachable block (ram,0x08005650)
// WARNING: Removing unreachable block (ram,0x080051b8)
// WARNING: Removing unreachable block (ram,0x08005997)
// WARNING: Removing unreachable block (ram,0x08005116)
// WARNING: Removing unreachable block (ram,0x0800512f)
// WARNING: Removing unreachable block (ram,0x080050cf)
// WARNING: Removing unreachable block (ram,0x08005070)
// WARNING: Removing unreachable block (ram,0x08005085)
// WARNING: Removing unreachable block (ram,0x080050f6)
// WARNING: Removing unreachable block (ram,0x08005062)
// WARNING: Removing unreachable block (ram,0x0800506a)
// WARNING: Removing unreachable block (ram,0x08004e28)
// WARNING: Removing unreachable block (ram,0x08005280)
// WARNING: Removing unreachable block (ram,0x08004e30)
// WARNING: Removing unreachable block (ram,0x08005040)
// WARNING: Removing unreachable block (ram,0x0800508c)
// WARNING: Removing unreachable block (ram,0x08005158)
// WARNING: Removing unreachable block (ram,0x080050a6)
// WARNING: Removing unreachable block (ram,0x08005992)
// WARNING: Removing unreachable block (ram,0x080050b3)
// WARNING: Removing unreachable block (ram,0x08005050)
// WARNING: Removing unreachable block (ram,0x08005018)
// WARNING: Removing unreachable block (ram,0x08004fa8)
// WARNING: Removing unreachable block (ram,0x08004fac)
// WARNING: Removing unreachable block (ram,0x08004e3f)
// WARNING: Removing unreachable block (ram,0x08004fcc)
// WARNING: Removing unreachable block (ram,0x080052e3)
// WARNING: Removing unreachable block (ram,0x08004bdf)
// WARNING: Removing unreachable block (ram,0x080059ba)
// WARNING: Removing unreachable block (ram,0x08004bf0)
// WARNING: Removing unreachable block (ram,0x08004c20)
// WARNING: Removing unreachable block (ram,0x08004ba1)
// WARNING: Removing unreachable block (ram,0x080052d0)
// WARNING: Removing unreachable block (ram,0x08004ba9)
// WARNING: Removing unreachable block (ram,0x08005a4a)
// WARNING: Removing unreachable block (ram,0x08004bc3)
// WARNING: Removing unreachable block (ram,0x08004b77)
// WARNING: Removing unreachable block (ram,0x08004f80)
// WARNING: Removing unreachable block (ram,0x08005008)
// WARNING: Removing unreachable block (ram,0x08005013)
// WARNING: Removing unreachable block (ram,0x08004f96)
// WARNING: Removing unreachable block (ram,0x08004b7f)
// WARNING: Removing unreachable block (ram,0x08004e90)
// WARNING: Removing unreachable block (ram,0x08005940)
// WARNING: Removing unreachable block (ram,0x0800594b)
// WARNING: Removing unreachable block (ram,0x0800590d)
// WARNING: Removing unreachable block (ram,0x08005911)
// WARNING: Removing unreachable block (ram,0x08005956)
// WARNING: Removing unreachable block (ram,0x08005965)
// WARNING: Removing unreachable block (ram,0x08005927)
// WARNING: Removing unreachable block (ram,0x080056f0)
// WARNING: Removing unreachable block (ram,0x080056ff)
// WARNING: Removing unreachable block (ram,0x08005684)
// WARNING: Removing unreachable block (ram,0x08005739)
// WARNING: Removing unreachable block (ram,0x0800568c)
// WARNING: Removing unreachable block (ram,0x080056a6)
// WARNING: Removing unreachable block (ram,0x080057e0)
// WARNING: Removing unreachable block (ram,0x080058fb)
// WARNING: Removing unreachable block (ram,0x080057eb)
// WARNING: Removing unreachable block (ram,0x08005a02)
// WARNING: Removing unreachable block (ram,0x080057f6)
// WARNING: Removing unreachable block (ram,0x08005a09)
// WARNING: Removing unreachable block (ram,0x08005876)
// WARNING: Removing unreachable block (ram,0x080056b1)
// WARNING: Removing unreachable block (ram,0x080056b9)
// WARNING: Removing unreachable block (ram,0x08005975)
// WARNING: Removing unreachable block (ram,0x080056c7)
// WARNING: Removing unreachable block (ram,0x080056e3)
// WARNING: Removing unreachable block (ram,0x08005342)
// WARNING: Removing unreachable block (ram,0x080055ff)
// WARNING: Removing unreachable block (ram,0x0800534a)
// WARNING: Removing unreachable block (ram,0x08005672)
// WARNING: Removing unreachable block (ram,0x08005364)
// WARNING: Removing unreachable block (ram,0x08005a1a)
// WARNING: Removing unreachable block (ram,0x08005376)
// WARNING: Removing unreachable block (ram,0x08005252)
// WARNING: Removing unreachable block (ram,0x080052f0)
// WARNING: Removing unreachable block (ram,0x08005330)
// WARNING: Removing unreachable block (ram,0x08005306)
// WARNING: Removing unreachable block (ram,0x0800525a)
// WARNING: Removing unreachable block (ram,0x08004f31)
// WARNING: Removing unreachable block (ram,0x08004e53)
// WARNING: Removing unreachable block (ram,0x08004f39)
// WARNING: Removing unreachable block (ram,0x08005240)
// WARNING: Removing unreachable block (ram,0x08004f53)
// WARNING: Removing unreachable block (ram,0x080053c2)
// WARNING: Removing unreachable block (ram,0x08005624)
// WARNING: Removing unreachable block (ram,0x080053ca)
// WARNING: Removing unreachable block (ram,0x08004f1f)
// WARNING: Removing unreachable block (ram,0x080053e4)
// WARNING: Removing unreachable block (ram,0x08005a74)
// WARNING: Removing unreachable block (ram,0x08004db3)
// WARNING: Removing unreachable block (ram,0x08004dbb)
// WARNING: Removing unreachable block (ram,0x08004d6c)
// WARNING: Removing unreachable block (ram,0x08004d74)
// WARNING: Removing unreachable block (ram,0x08004d93)
// WARNING: Removing unreachable block (ram,0x08004d1e)
// WARNING: Removing unreachable block (ram,0x080059ce)
// WARNING: Removing unreachable block (ram,0x08004d26)
// WARNING: Removing unreachable block (ram,0x080059eb)
// WARNING: Removing unreachable block (ram,0x08004d4c)
// WARNING: Removing unreachable block (ram,0x08004ce1)
// WARNING: Removing unreachable block (ram,0x08004ce9)
// WARNING: Removing unreachable block (ram,0x080053b0)
// WARNING: Removing unreachable block (ram,0x08004d03)
// WARNING: Removing unreachable block (ram,0x08004cad)
// WARNING: Removing unreachable block (ram,0x08004cb5)
// WARNING: Removing unreachable block (ram,0x08004fe0)
// WARNING: Removing unreachable block (ram,0x08004ccf)
// WARNING: Removing unreachable block (ram,0x08004c54)
// WARNING: Removing unreachable block (ram,0x08004c5c)
// WARNING: Removing unreachable block (ram,0x08004ea8)
// WARNING: Removing unreachable block (ram,0x08004ebb)
// WARNING: Removing unreachable block (ram,0x08004c6c)
// WARNING: Removing unreachable block (ram,0x08004e10)
// WARNING: Removing unreachable block (ram,0x08004e19)
// WARNING: Removing unreachable block (ram,0x08004c72)
// WARNING: Removing unreachable block (ram,0x08004b68)
// WARNING: Removing unreachable block (ram,0x08004c7b)
// WARNING: Removing unreachable block (ram,0x080058c5)
// WARNING: Removing unreachable block (ram,0x080058d6)
// WARNING: Removing unreachable block (ram,0x08004c40)
// WARNING: Removing unreachable block (ram,0x08004dd0)
// WARNING: Removing unreachable block (ram,0x08004dd7)
// WARNING: Removing unreachable block (ram,0x08004c84)
// WARNING: Removing unreachable block (ram,0x08004e80)
// WARNING: Removing unreachable block (ram,0x08004c9b)
// WARNING: Removing unreachable block (ram,0x08005ad1)
// WARNING: Removing unreachable block (ram,0x08005b00)
// WARNING: Removing unreachable block (ram,0x08005ad5)
// WARNING: Removing unreachable block (ram,0x08005b10)
// WARNING: Removing unreachable block (ram,0x08005aeb)
// WARNING: Removing unreachable block (ram,0x08005a9c)
// WARNING: Removing unreachable block (ram,0x08005aa0)
// WARNING: Removing unreachable block (ram,0x08005b90)
// WARNING: Removing unreachable block (ram,0x08005aba)
// WARNING: Removing unreachable block (ram,0x08005bc9)
// WARNING: Removing unreachable block (ram,0x08005abf)
// WARNING: Removing unreachable block (ram,0x08005bd3)
// WARNING: Removing unreachable block (ram,0x08005bf0)
// WARNING: Removing unreachable block (ram,0x08004ac0)
// WARNING: Removing unreachable block (ram,0x08005430)
// WARNING: Removing unreachable block (ram,0x080057a8)
// WARNING: Removing unreachable block (ram,0x080057c3)
// WARNING: Removing unreachable block (ram,0x080057af)
// WARNING: Removing unreachable block (ram,0x08005440)
// WARNING: Removing unreachable block (ram,0x08005453)
// WARNING: Removing unreachable block (ram,0x08005457)
// WARNING: Removing unreachable block (ram,0x080055cf)
// WARNING: Removing unreachable block (ram,0x08005655)
// WARNING: Removing unreachable block (ram,0x0800570f)
// WARNING: Removing unreachable block (ram,0x0800565e)
// WARNING: Removing unreachable block (ram,0x080055d5)
// WARNING: Removing unreachable block (ram,0x080055ef)
// WARNING: Removing unreachable block (ram,0x08005460)
// WARNING: Removing unreachable block (ram,0x08005450)
// WARNING: Removing unreachable block (ram,0x0800546c)
// WARNING: Removing unreachable block (ram,0x08005790)
// WARNING: Removing unreachable block (ram,0x08005477)
// WARNING: Removing unreachable block (ram,0x08005495)
// WARNING: Removing unreachable block (ram,0x0800549d)
// WARNING: Removing unreachable block (ram,0x080054b4)
// WARNING: Removing unreachable block (ram,0x08005528)
// WARNING: Removing unreachable block (ram,0x08004b04)
// WARNING: Removing unreachable block (ram,0x08005a3c)
// WARNING: Removing unreachable block (ram,0x08004b13)
// WARNING: Removing unreachable block (ram,0x08004b30)
// WARNING: Removing unreachable block (ram,0x08004de0)
// WARNING: Removing unreachable block (ram,0x08005a5e)
// WARNING: Removing unreachable block (ram,0x08005a63)
// WARNING: Removing unreachable block (ram,0x08004df7)
// WARNING: Removing unreachable block (ram,0x08004b3c)
// WARNING: Removing unreachable block (ram,0x08004c48)

void sym.set_object(undefined8 placeholder_0, undefined8 placeholder_1, undefined8 placeholder_2,
                   undefined8 placeholder_3, int64_t arg11)
{
    char cVar1;
    char *pcVar2;
    int64_t in_FS_OFFSET;
    
    pcVar2 = (char *)(uint64_t)_reloc.c_token;
    cVar1 = (char)_reloc.c_token;
    _reloc.c_token = _reloc.c_token + 1;
    *pcVar2 = *pcVar2 + cVar1;
    *pcVar2 = *pcVar2 + cVar1;
    pcVar2[in_FS_OFFSET] = pcVar2[in_FS_OFFSET] + cVar1;
    *(char *)((int64_t)pcVar2 * 2) = *(char *)((int64_t)pcVar2 * 2) + cVar1;
    *pcVar2 = *pcVar2 + cVar1;
    *pcVar2 = *pcVar2 + cVar1;
    // WARNING: Bad instruction - Truncating control flow here
    halt_baddata();
}


