char sym.utf8_getmore(int64_t arg1, int64_t arg2, int64_t arg3, undefined8 placeholder_3, int64_t arg5)
{
    uint8_t *puVar1;
    uint8_t uVar2;
    uint32_t uVar3;
    uint64_t uVar4;
    int64_t iVar5;
    int64_t iVar6;
    uint8_t *puVar7;
    char cVar8;
    int64_t in_FS_OFFSET;
    uint64_t auStack56 [4];
    undefined8 uStack24;
    int64_t iStack16;
    
    // [01] -r-x section size 2483 named .text
    puVar7 = *(uint8_t **)arg2;
    iStack16 = *(int64_t *)(in_FS_OFFSET + 0x28);
    auStack56[0] = 0x80;
    uVar3 = (int32_t)arg3 - 1;
    auStack56[1] = 0x800;
    puVar1 = puVar7 + (uint64_t)uVar3 + 1;
    auStack56[2] = 0x10000;
    auStack56[3] = 0x200000;
    uStack24 = 0x4000000;
    do {
        uVar2 = *puVar7;
        if ((uVar2 & 0xc0) != 0x80) goto code_r0x080000d0;
        puVar7 = puVar7 + 1;
        uVar4 = *(int64_t *)arg1 << 6 | (uint64_t)(uVar2 & 0x3f);
        *(uint64_t *)arg1 = uVar4;
        *(uint8_t **)arg2 = puVar7;
    } while (puVar7 != puVar1);
    if (uVar4 < auStack56[(int32_t)uVar3]) {
code_r0x080000d0:
        *(undefined8 *)arg1 = 0xffff;
        cVar8 = '\0';
    } else {
        cVar8 = '\x01';
    }
    if (iStack16 != *(int64_t *)(in_FS_OFFSET + 0x28)) {
        func_0x08010acc();
        cVar8 = '\x11';
        iVar5 = func_0x08010acc(0, reloc..LC0);
        if (iVar5 != 0) {
            cVar8 = '\x10';
            iVar6 = func_0x08010acc(iVar5, reloc..LC1);
            if (iVar6 == 0) {
                iVar6 = func_0x08010acc(iVar5, reloc..LC2);
                cVar8 = (iVar6 == 0) + '\x10';
            }
            iVar6 = func_0x08010acc(iVar5, "sjis");
            if ((iVar6 == 0) && (iVar6 = func_0x08010acc(iVar5, "SJIS"), iVar6 == 0)) {
                iVar6 = func_0x08010acc(iVar5, reloc..LC4);
                if (iVar6 != 0) {
                    cVar8 = '\x0f';
                }
            } else {
                cVar8 = '\x0f';
            }
            iVar6 = func_0x08010acc(iVar5, reloc..LC13);
            if (iVar6 == 0) {
                iVar6 = func_0x08010acc(iVar5, reloc..LC5);
                if (iVar6 != 0) {
                    cVar8 = '\x06';
                }
            } else {
                cVar8 = '\x06';
            }
            iVar6 = func_0x08010acc(iVar5, reloc..LC12);
            if (iVar6 != 0) {
                cVar8 = '\x05';
            }
            iVar6 = func_0x08010acc(iVar5, reloc..LC11);
            if (iVar6 != 0) {
                cVar8 = '\a';
            }
            iVar6 = func_0x08010acc(iVar5, "1250");
            if (iVar6 != 0) {
                cVar8 = '\t';
            }
            iVar6 = func_0x08010acc(iVar5, "1251");
            if (iVar6 != 0) {
                cVar8 = '\n';
            }
            iVar6 = func_0x08010acc(iVar5, "1252");
            if (iVar6 != 0) {
                cVar8 = '\v';
            }
            iVar6 = func_0x08010acc(iVar5, "1254");
            if (iVar6 != 0) {
                cVar8 = '\f';
            }
            iVar5 = func_0x08010acc(iVar5, reloc..LC6);
            if (iVar5 != 0) {
                cVar8 = '\b';
            }
        }
        return cVar8;
    }
    return cVar8;
}


char sym.encoding_from_locale(void)
{
    int64_t iVar1;
    int64_t iVar2;
    char cVar3;
    
    cVar3 = '\x11';
    iVar1 = func_0x08010acc(0, reloc..LC0);
    if (iVar1 != 0) {
        cVar3 = '\x10';
        iVar2 = func_0x08010acc(iVar1, reloc..LC1);
        if (iVar2 == 0) {
            iVar2 = func_0x08010acc(iVar1, reloc..LC2);
            cVar3 = (iVar2 == 0) + '\x10';
        }
        iVar2 = func_0x08010acc(iVar1, "sjis");
        if ((iVar2 == 0) && (iVar2 = func_0x08010acc(iVar1, "SJIS"), iVar2 == 0)) {
            iVar2 = func_0x08010acc(iVar1, reloc..LC4);
            if (iVar2 != 0) {
                cVar3 = '\x0f';
            }
        } else {
            cVar3 = '\x0f';
        }
        iVar2 = func_0x08010acc(iVar1, reloc..LC13);
        if (iVar2 == 0) {
            iVar2 = func_0x08010acc(iVar1, reloc..LC5);
            if (iVar2 != 0) {
                cVar3 = '\x06';
            }
        } else {
            cVar3 = '\x06';
        }
        iVar2 = func_0x08010acc(iVar1, reloc..LC12);
        if (iVar2 != 0) {
            cVar3 = '\x05';
        }
        iVar2 = func_0x08010acc(iVar1, reloc..LC11);
        if (iVar2 != 0) {
            cVar3 = '\a';
        }
        iVar2 = func_0x08010acc(iVar1, "1250");
        if (iVar2 != 0) {
            cVar3 = '\t';
        }
        iVar2 = func_0x08010acc(iVar1, "1251");
        if (iVar2 != 0) {
            cVar3 = '\n';
        }
        iVar2 = func_0x08010acc(iVar1, "1252");
        if (iVar2 != 0) {
            cVar3 = '\v';
        }
        iVar2 = func_0x08010acc(iVar1, "1254");
        if (iVar2 != 0) {
            cVar3 = '\f';
        }
        iVar1 = func_0x08010acc(iVar1, reloc..LC6);
        if (iVar1 != 0) {
            cVar3 = '\b';
        }
    }
    return cVar3;
}


void sym.init_special_chars(void)
{
    int64_t iVar1;
    undefined *puVar2;
    undefined *puVar3;
    uint8_t *unaff_RBP;
    uint8_t *puVar4;
    uint8_t *puVar5;
    code *unaff_R12;
    undefined *unaff_R13;
    int64_t in_FS_OFFSET;
    bool bVar6;
    bool bVar7;
    uint8_t uVar8;
    
    uVar8 = 0;
    puVar2 = (undefined *)*(BADSPACEBASE **)0x20;
    do {
        *(undefined **)(puVar2 + -8) = unaff_R13;
        *(code **)(puVar2 + -0x10) = unaff_R12;
        unaff_R12 = reloc.degree_sign;
        *(uint8_t **)(puVar2 + -0x18) = unaff_RBP;
        puVar3 = puVar2 + -0x48;
        *(undefined8 *)(puVar2 + -0x20) = *(undefined8 *)(in_FS_OFFSET + 0x28);
        unaff_R13 = puVar2 + -0x23;
        *(undefined8 *)(puVar2 + -0x50) = 0x8000317;
        iVar1 = func_0x08010acc(0, reloc..LC0);
        puVar2[-0x21] = 0;
        *(undefined2 *)(puVar2 + -0x23) = 0xb0c2;
        *(undefined8 *)(puVar2 + -0x48) = 3;
        *(undefined8 *)(puVar2 + -0x40) = 8;
        *(undefined **)(puVar2 + -0x38) = unaff_R13;
        *(code **)(puVar2 + -0x30) = reloc.degree_sign;
        if (iVar1 == 0) {
            _reloc.degree_sign = 0;
            switch(_reloc.encoding) {
            case 5:
            case 6:
            case 7:
                _reloc.degree_sign = 0xf8;
                break;
            case 8:
            case 0xf:
                break;
            default:
                _reloc.degree_sign = 0xb0;
                break;
            case 0xd:
            case 0xe:
                _reloc.degree_sign = 0x9c;
                break;
            case 0x10:
                _reloc.degree_sign = 0xb0c2;
            }
        } else {
            *(undefined8 *)(puVar2 + -0x50) = 0x8000354;
            unaff_RBP = (uint8_t *)func_0x08010acc(0xe);
            bVar6 = false;
            bVar7 = unaff_RBP == (uint8_t *)0x0;
            if (!bVar7) {
                iVar1 = 6;
                puVar4 = unaff_RBP;
                puVar5 = (uint8_t *)"UTF-8";
                do {
                    if (iVar1 == 0) break;
                    iVar1 = iVar1 + -1;
                    bVar6 = *puVar4 < *puVar5;
                    bVar7 = *puVar4 == *puVar5;
                    puVar4 = puVar4 + (uint64_t)uVar8 * -2 + 1;
                    puVar5 = puVar5 + (uint64_t)uVar8 * -2 + 1;
                } while (bVar7);
                if ((!bVar6 && !bVar7) == bVar6) {
                    *(undefined8 *)(puVar2 + -0x50) = 0x80004a0;
                    func_0x08010acc(reloc.degree_sign, unaff_R13, 8);
                } else {
                    *(undefined8 *)(puVar2 + -0x50) = 0x8000388;
                    unaff_R12 = (code *)func_0x08010acc(unaff_RBP, "UTF-8");
                    if (unaff_R12 == (code *)0xffffffffffffffff) {
                        *(undefined8 *)(puVar2 + -0x50) = 0x8000516;
                        func_0x08010acc(0xffffffff, "iconv_open failed for %s", unaff_RBP);
                    } else {
                        *(undefined8 *)(puVar2 + -0x50) = 0x80003af;
                        iVar1 = func_0x08010acc(unaff_R12, puVar2 + -0x38, puVar2 + -0x48, puVar2 + -0x30, 
                                                puVar2 + -0x40);
                        if (iVar1 == -1) {
                            *(undefined8 *)(puVar2 + -0x50) = 0x8000533;
                            func_0x08010acc(0xffffffff, "iconv failed to convert degree sign");
                        }
                        *(undefined8 *)(puVar2 + -0x50) = 0x80003c1;
                        func_0x08010acc(unaff_R12);
                    }
                }
            }
        }
        if (_reloc.encoding == 0xb) {
            _reloc.minus_sign = obj.minus_1252.11164;
code_r0x08000446:
            _reloc.micro = (char *)0x8000ba4;
        } else {
            if (_reloc.encoding == 0x10) {
                _reloc.minus_sign = obj.minus_utf8.11163;
                _reloc.micro = "Âµ";
            } else {
                _reloc.minus_sign = (code *)0x0;
                switch(_reloc.encoding) {
                default:
                    _reloc.micro = "u";
                    break;
                case 1:
                case 3:
                case 4:
                case 9:
                case 10:
                case 0xb:
                case 0xc:
                    goto code_r0x08000446;
                case 5:
                case 6:
                    _reloc.micro = (char *)0x8000ba2;
                }
            }
        }
        if (*(int64_t *)(puVar2 + -0x20) == *(int64_t *)(in_FS_OFFSET + 0x28)) {
            return;
        }
        *(undefined8 *)(puVar2 + -0x50) = 0x800053d;
        func_0x08010acc();
        *(undefined8 *)(puVar2 + -0x58) = 0x800054d;
        _reloc.encoding = func_0x08010acc();
        puVar2 = puVar2 + -0x48;
        if (_reloc.encoding == 0x11) {
            _reloc.encoding = 0;
            puVar2 = puVar3;
        }
    } while( true );
}


void sym.init_encoding(void)
{
    int64_t iVar1;
    uint8_t *unaff_RBP;
    uint8_t *puVar2;
    uint8_t *puVar3;
    code *unaff_R12;
    undefined *unaff_R13;
    int64_t in_FS_OFFSET;
    bool bVar4;
    bool bVar5;
    uint8_t uVar6;
    
    uVar6 = 0;
    do {
        *(undefined8 *)((int64_t)*(undefined **)0x20 + -0x10) = 0x800054d;
        _reloc.encoding = func_0x08010acc();
        if (_reloc.encoding == 0x11) {
            _reloc.encoding = 0;
        }
        *(undefined **)((int64_t)*(undefined **)0x20 + -8) = unaff_R13;
        *(code **)((int64_t)*(undefined **)0x20 + -0x10) = unaff_R12;
        unaff_R12 = reloc.degree_sign;
        *(uint8_t **)((int64_t)*(undefined **)0x20 + -0x18) = unaff_RBP;
        *(undefined8 *)((int64_t)*(undefined **)0x20 + -0x20) = *(undefined8 *)(in_FS_OFFSET + 0x28);
        unaff_R13 = (undefined *)((int64_t)*(undefined **)0x20 + -0x23);
        *(undefined8 *)((int64_t)*(undefined **)0x20 + -0x50) = 0x8000317;
        iVar1 = func_0x08010acc(0, reloc..LC0);
        *(undefined *)((int64_t)*(undefined **)0x20 + -0x21) = 0;
        *(undefined2 *)((int64_t)*(undefined **)0x20 + -0x23) = 0xb0c2;
        *(undefined8 *)((int64_t)*(undefined **)0x20 + -0x48) = 3;
        *(undefined8 *)((int64_t)*(undefined **)0x20 + -0x40) = 8;
        *(undefined **)((int64_t)*(undefined **)0x20 + -0x38) = unaff_R13;
        *(code **)((int64_t)*(undefined **)0x20 + -0x30) = reloc.degree_sign;
        if (iVar1 == 0) {
            _reloc.degree_sign = 0;
            switch(_reloc.encoding) {
            case 5:
            case 6:
            case 7:
                _reloc.degree_sign = 0xf8;
                break;
            case 8:
            case 0xf:
                break;
            default:
                _reloc.degree_sign = 0xb0;
                break;
            case 0xd:
            case 0xe:
                _reloc.degree_sign = 0x9c;
                break;
            case 0x10:
                _reloc.degree_sign = 0xb0c2;
            }
        } else {
            *(undefined8 *)((int64_t)*(undefined **)0x20 + -0x50) = 0x8000354;
            unaff_RBP = (uint8_t *)func_0x08010acc(0xe);
            bVar4 = false;
            bVar5 = unaff_RBP == (uint8_t *)0x0;
            if (!bVar5) {
                iVar1 = 6;
                puVar2 = unaff_RBP;
                puVar3 = (uint8_t *)"UTF-8";
                do {
                    if (iVar1 == 0) break;
                    iVar1 = iVar1 + -1;
                    bVar4 = *puVar2 < *puVar3;
                    bVar5 = *puVar2 == *puVar3;
                    puVar2 = puVar2 + (uint64_t)uVar6 * -2 + 1;
                    puVar3 = puVar3 + (uint64_t)uVar6 * -2 + 1;
                } while (bVar5);
                if ((!bVar4 && !bVar5) == bVar4) {
                    *(undefined8 *)((int64_t)*(undefined **)0x20 + -0x50) = 0x80004a0;
                    func_0x08010acc(reloc.degree_sign, unaff_R13, 8);
                } else {
                    *(undefined8 *)((int64_t)*(undefined **)0x20 + -0x50) = 0x8000388;
                    unaff_R12 = (code *)func_0x08010acc(unaff_RBP, "UTF-8");
                    if (unaff_R12 == (code *)0xffffffffffffffff) {
                        *(undefined8 *)((int64_t)*(undefined **)0x20 + -0x50) = 0x8000516;
                        func_0x08010acc(0xffffffff, "iconv_open failed for %s", unaff_RBP);
                    } else {
                        *(undefined8 *)((int64_t)*(undefined **)0x20 + -0x50) = 0x80003af;
                        iVar1 = func_0x08010acc(unaff_R12, (undefined *)((int64_t)*(undefined **)0x20 + -0x38), 
                                                (undefined *)((int64_t)*(undefined **)0x20 + -0x48), 
                                                (undefined *)((int64_t)*(undefined **)0x20 + -0x30), 
                                                (undefined *)((int64_t)*(undefined **)0x20 + -0x40));
                        if (iVar1 == -1) {
                            *(undefined8 *)((int64_t)*(undefined **)0x20 + -0x50) = 0x8000533;
                            func_0x08010acc(0xffffffff, "iconv failed to convert degree sign");
                        }
                        *(undefined8 *)((int64_t)*(undefined **)0x20 + -0x50) = 0x80003c1;
                        func_0x08010acc(unaff_R12);
                    }
                }
            }
        }
        if (_reloc.encoding == 0xb) {
            _reloc.minus_sign = obj.minus_1252.11164;
code_r0x08000446:
            _reloc.micro = (char *)0x8000ba4;
        } else {
            if (_reloc.encoding == 0x10) {
                _reloc.minus_sign = obj.minus_utf8.11163;
                _reloc.micro = "Âµ";
            } else {
                _reloc.minus_sign = (code *)0x0;
                switch(_reloc.encoding) {
                default:
                    _reloc.micro = "u";
                    break;
                case 1:
                case 3:
                case 4:
                case 9:
                case 10:
                case 0xb:
                case 0xc:
                    goto code_r0x08000446;
                case 5:
                case 6:
                    _reloc.micro = (char *)0x8000ba2;
                }
            }
        }
        if (*(int64_t *)((int64_t)*(undefined **)0x20 + -0x20) == *(int64_t *)(in_FS_OFFSET + 0x28)) {
            return;
        }
        *(undefined8 *)((int64_t)*(undefined **)0x20 + -0x50) = 0x800053d;
        func_0x08010acc();
        *(undefined **)0x20 = (BADSPACEBASE *)((int64_t)*(undefined **)0x20 + -0x48);
    } while( true );
}


char * sym.latex_input_encoding(uint32_t arg1)
{
    uint8_t uVar1;
    uint8_t *puVar2;
    
    // switch table (18 cases) at 0x8000b58
    switch(arg1) {
    default:
        return (char *)0x0;
    case 1:
        return "latin1";
    case 2:
        return "latin2";
    case 3:
        return "latin5";
    case 4:
        return "latin9";
    case 5:
        return "cp437de";
    case 6:
        return "cp850";
    case 7:
        return "cp852";
    case 9:
        return "cp1250";
    case 10:
        return "cp1251";
    case 0xb:
        return "cp1252";
    case 0xd:
        return "koi8-r";
    case 0xe:
        return "koi8-u";
    case 0x10:
        return "utf8x";
    case 0x11:
        puVar2 = (uint8_t *)0xffffffff;
        func_0x08010acc(0xffffffff, "invalid input encoding used");
    }
    do {
        uVar1 = *puVar2;
        if (uVar1 == 0) {
            return (char *)(uint64_t)uVar1;
        }
        puVar2 = puVar2 + 1;
    } while (-1 < (char)uVar1);
    return (char *)0x1;
}


char sym.contains8bit(int64_t arg1)
{
    char cVar1;
    
    do {
        cVar1 = *(char *)arg1;
        if (cVar1 == '\0') {
            return cVar1;
        }
        arg1 = arg1 + 1;
    } while (-1 < cVar1);
    return '\x01';
}


char sym.utf8toulong(int64_t arg1, int64_t arg2)
{
    uint8_t uVar1;
    uint8_t *puVar2;
    uint32_t uVar3;
    uint64_t uVar4;
    int64_t iVar5;
    int64_t iVar6;
    uint8_t *puVar7;
    int32_t iVar8;
    char cVar9;
    int64_t in_FS_OFFSET;
    uint64_t auStack56 [5];
    int64_t iStack16;
    
    puVar2 = *(uint8_t **)arg2;
    *(uint8_t **)arg2 = puVar2 + 1;
    uVar1 = *puVar2;
    if (-1 < (char)uVar1) {
        *(uint64_t *)arg1 = (uint64_t)uVar1;
        return '\x01';
    }
    if ((uVar1 & 0xe0) == 0xc0) {
        iVar8 = 1;
        *(uint64_t *)arg1 = (uint64_t)(uVar1 & 0x1f);
    } else {
        if ((uVar1 & 0xf0) == 0xe0) {
            iVar8 = 2;
            *(uint64_t *)arg1 = (uint64_t)(uVar1 & 0xf);
        } else {
            uVar3 = (uint32_t)uVar1;
            if ((uVar1 & 0xf8) == 0xf0) {
                iVar8 = 3;
                *(uint64_t *)arg1 = (uint64_t)(uVar3 & 7);
            } else {
                if ((uVar1 & 0xfc) == 0xf8) {
                    iVar8 = 4;
                    *(uint64_t *)arg1 = (uint64_t)(uVar3 & 3);
                } else {
                    if ((uVar1 & 0xfe) != 0xfc) {
                        *(undefined8 *)arg1 = 0xffff;
                        return '\0';
                    }
                    iVar8 = 5;
                    *(uint64_t *)arg1 = (uint64_t)(uVar3 & 1);
                }
            }
        }
    }
    puVar7 = *(uint8_t **)arg2;
    iStack16 = *(int64_t *)(in_FS_OFFSET + 0x28);
    auStack56[0] = 0x80;
    auStack56[1] = 0x800;
    puVar2 = puVar7 + (uint64_t)(iVar8 - 1U) + 1;
    auStack56[2] = 0x10000;
    auStack56[3] = 0x200000;
    auStack56[4] = 0x4000000;
    do {
        uVar1 = *puVar7;
        if ((uVar1 & 0xc0) != 0x80) goto code_r0x080000d0;
        puVar7 = puVar7 + 1;
        uVar4 = *(int64_t *)arg1 << 6 | (uint64_t)(uVar1 & 0x3f);
        *(uint64_t *)arg1 = uVar4;
        *(uint8_t **)arg2 = puVar7;
    } while (puVar7 != puVar2);
    if (uVar4 < auStack56[(int32_t)(iVar8 - 1U)]) {
code_r0x080000d0:
        *(undefined8 *)arg1 = 0xffff;
        cVar9 = '\0';
    } else {
        cVar9 = '\x01';
    }
    if (iStack16 != *(int64_t *)(in_FS_OFFSET + 0x28)) {
        func_0x08010acc();
        cVar9 = '\x11';
        iVar5 = func_0x08010acc(0, reloc..LC0);
        if (iVar5 != 0) {
            cVar9 = '\x10';
            iVar6 = func_0x08010acc(iVar5, reloc..LC1);
            if (iVar6 == 0) {
                iVar6 = func_0x08010acc(iVar5, reloc..LC2);
                cVar9 = (iVar6 == 0) + '\x10';
            }
            iVar6 = func_0x08010acc(iVar5, "sjis");
            if ((iVar6 == 0) && (iVar6 = func_0x08010acc(iVar5, "SJIS"), iVar6 == 0)) {
                iVar6 = func_0x08010acc(iVar5, reloc..LC4);
                if (iVar6 != 0) {
                    cVar9 = '\x0f';
                }
            } else {
                cVar9 = '\x0f';
            }
            iVar6 = func_0x08010acc(iVar5, reloc..LC13);
            if (iVar6 == 0) {
                iVar6 = func_0x08010acc(iVar5, reloc..LC5);
                if (iVar6 != 0) {
                    cVar9 = '\x06';
                }
            } else {
                cVar9 = '\x06';
            }
            iVar6 = func_0x08010acc(iVar5, reloc..LC12);
            if (iVar6 != 0) {
                cVar9 = '\x05';
            }
            iVar6 = func_0x08010acc(iVar5, reloc..LC11);
            if (iVar6 != 0) {
                cVar9 = '\a';
            }
            iVar6 = func_0x08010acc(iVar5, "1250");
            if (iVar6 != 0) {
                cVar9 = '\t';
            }
            iVar6 = func_0x08010acc(iVar5, "1251");
            if (iVar6 != 0) {
                cVar9 = '\n';
            }
            iVar6 = func_0x08010acc(iVar5, "1252");
            if (iVar6 != 0) {
                cVar9 = '\v';
            }
            iVar6 = func_0x08010acc(iVar5, "1254");
            if (iVar6 != 0) {
                cVar9 = '\f';
            }
            iVar5 = func_0x08010acc(iVar5, reloc..LC6);
            if (iVar5 != 0) {
                cVar9 = '\b';
            }
        }
        return cVar9;
    }
    return cVar9;
}


undefined8 sym.ucs4toutf8(uint32_t arg1, int64_t arg2)
{
    uint8_t uVar1;
    
    uVar1 = (uint8_t)arg1;
    if (arg1 < 0x80) {
        *(uint8_t *)arg2 = uVar1;
        return 1;
    }
    if (arg1 < 0x800) {
        *(uint8_t *)(arg2 + 1) = uVar1 & 0x3f | 0x80;
        *(uint8_t *)arg2 = (uint8_t)(arg1 >> 6) | 0xc0;
        return 2;
    }
    if (arg1 < 0x10000) {
        *(uint8_t *)arg2 = (uint8_t)(arg1 >> 0xc) | 0xe0;
        *(uint8_t *)(arg2 + 2) = uVar1 & 0x3f | 0x80;
        *(uint8_t *)(arg2 + 1) = (uint8_t)(arg1 >> 6) & 0x3f | 0x80;
        return 3;
    }
    if (0x10ffff < arg1) {
        return 0;
    }
    *(uint8_t *)arg2 = (uint8_t)(arg1 >> 0x12) | 0xf0;
    *(uint8_t *)(arg2 + 1) = (uint8_t)(arg1 >> 0xc) & 0x3f | 0x80;
    *(uint8_t *)(arg2 + 3) = uVar1 & 0x3f | 0x80;
    *(uint8_t *)(arg2 + 2) = (uint8_t)(arg1 >> 6) & 0x3f | 0x80;
    return 4;
}


int64_t sym.strlen_utf8(int64_t arg1)
{
    uint8_t uVar1;
    int32_t iVar2;
    uint8_t *puVar3;
    
    uVar1 = *(uint8_t *)arg1;
    if (uVar1 != 0) {
        iVar2 = 0;
        puVar3 = (uint8_t *)(arg1 + 1);
        do {
            iVar2 = iVar2 + (uint32_t)((uVar1 & 0xc0) != 0x80);
            uVar1 = *puVar3;
            puVar3 = puVar3 + 1;
        } while (uVar1 != 0);
        return (int64_t)iVar2;
    }
    return 0;
}


uint32_t sym.truncate_to_one_utf8_char(int64_t arg1)
{
    int32_t iVar1;
    int64_t iVar2;
    uint32_t extraout_EDX;
    uint8_t uVar3;
    int64_t in_FS_OFFSET;
    undefined4 uStack44;
    undefined2 uStack40;
    char cStack38;
    undefined auStack37 [4];
    undefined uStack33;
    int64_t iStack32;
    
    iStack32 = *(int64_t *)(in_FS_OFFSET + 0x28);
    func_0x08010acc(&uStack40, arg1, 8);
    if ((uStack40 == 0x555c) && (cStack38 == '+')) {
        func_0x08010acc(auStack37, reloc..LC33, &uStack44);
        iVar1 = func_0x08010acc(uStack44, &uStack40);
        *(undefined *)((int64_t)&uStack40 + (int64_t)iVar1) = 0;
    } else {
        if ((char)uStack40 < '\0') {
            uStack33 = 0;
            iVar2 = 1;
            do {
                if (((int32_t)*(char *)((int64_t)&uStack40 + iVar2) & 0xc0U) != 0x80) {
                    *(undefined *)((int64_t)&uStack40 + (int64_t)(int32_t)iVar2) = 0;
                    break;
                }
                iVar2 = iVar2 + 1;
            } while (iVar2 != 7);
        } else {
            uStack40 = uStack40 & 0xff;
        }
    }
    func_0x08010acc(arg1, &uStack40);
    uVar3 = (uint8_t)arg1;
    if (iStack32 != *(int64_t *)(in_FS_OFFSET + 0x28)) {
        func_0x08010acc();
        return uVar3 - 0x81 & 0xffffff00 | (uint32_t)(uVar3 - 0x81 < 0x1f) |
               extraout_EDX & 0xffffff00 | (uint32_t)(uVar3 - 0xe1 < 0xe);
    }
    return 0;
}


uint32_t sym.is_sjis_lead_byte(undefined8 placeholder_0, undefined8 placeholder_1, int64_t arg3)
{
    return (uint8_t)placeholder_0 - 0x81 & 0xffffff00 | (uint32_t)((uint8_t)placeholder_0 - 0x81 < 0x1f) |
           CONCAT31((unkint3)((uint64_t)arg3 >> 8), (uint8_t)placeholder_0 - 0xe1 < 0xe);
}


int64_t sym.strlen_sjis(int64_t arg1)
{
    uint8_t uVar1;
    int32_t iVar2;
    int32_t iVar3;
    int32_t iVar4;
    uint32_t uVar5;
    
    uVar5 = (uint32_t)*(uint8_t *)arg1;
    if (*(uint8_t *)arg1 == 0) {
        return 0;
    }
    iVar2 = 0;
    iVar4 = 0;
    do {
        while ((iVar3 = iVar2, uVar5 - 0x81 < 0x1f || (uVar5 - 0xe1 < 0xe))) {
            uVar1 = *(uint8_t *)(arg1 + (iVar4 + 2));
            uVar5 = (uint32_t)uVar1;
            iVar2 = iVar3 + 1;
            iVar4 = iVar4 + 2;
            if (uVar1 == 0) goto code_r0x080009e4;
        }
        uVar1 = *(uint8_t *)(arg1 + (iVar4 + 1));
        uVar5 = (uint32_t)uVar1;
        iVar2 = iVar3 + 1;
        iVar4 = iVar4 + 1;
    } while (uVar1 != 0);
code_r0x080009e4:
    return (int64_t)(iVar3 + 1);
}


