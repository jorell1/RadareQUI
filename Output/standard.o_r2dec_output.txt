/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/standard.o @ 0x8000040 */
#include <stdint.h>
 
int64_t carlson_elliptic_rf (int64_t arg9, int64_t arg8, int64_t arg7) {
    int64_t var_8h;
    int64_t var_10h;
    int64_t var_18h;
    int64_t var_20h;
    int64_t var_28h;
    xmm2 = arg9;
    xmm1 = arg8;
    xmm0 = arg7;
    /* [01] -r-x section size 18271 named .text */
    __asm ("movapd xmm4, xmm0");
    __asm ("movapd xmm5, xmm2");
    xmm7 = 0;
    xmm8 = *(loc..LC1);
    xmm11 = *(loc..LC2);
    xmm10 = .rodata.cst16;
    xmm9 = *(loc..LC4);
    do {
label_0:
        __asm ("ucomisd xmm7, xmm4");
        __asm ("movapd xmm12, xmm4");
        __asm ("sqrtsd xmm12, xmm12");
        if (? > ?) {
            goto label_4;
        }
label_1:
        __asm ("ucomisd xmm7, xmm1");
        __asm ("movapd xmm6, xmm1");
        __asm ("sqrtsd xmm6, xmm6");
        if (? > ?) {
            goto label_5;
        }
label_3:
        __asm ("ucomisd xmm7, xmm5");
        __asm ("movapd xmm2, xmm5");
        __asm ("sqrtsd xmm2, xmm2");
        if (? > ?) {
            goto label_6;
        }
label_2:
        __asm ("movapd xmm3, xmm6");
        __asm ("addsd xmm3, xmm2");
        __asm ("mulsd xmm2, xmm6");
        __asm ("mulsd xmm3, xmm12");
        __asm ("addsd xmm2, xmm3");
        __asm ("addsd xmm4, xmm2");
        __asm ("addsd xmm1, xmm2");
        __asm ("addsd xmm2, xmm5");
        __asm ("mulsd xmm4, xmm8");
        __asm ("mulsd xmm1, xmm8");
        __asm ("movapd xmm5, xmm2");
        __asm ("mulsd xmm5, xmm8");
        __asm ("movapd xmm0, xmm4");
        __asm ("addsd xmm0, xmm1");
        __asm ("addsd xmm0, xmm5");
        __asm ("mulsd xmm0, xmm11");
        __asm ("movapd xmm2, xmm0");
        __asm ("subsd xmm2, xmm4");
        __asm ("divsd xmm2, xmm0");
        __asm ("movapd xmm3, xmm2");
        __asm ("andpd xmm3, xmm10");
        __asm ("comisd xmm3, xmm9");
    } while (? > ?);
    __asm ("movapd xmm3, xmm0");
    __asm ("subsd xmm3, xmm1");
    __asm ("divsd xmm3, xmm0");
    __asm ("movapd xmm6, xmm3");
    __asm ("andpd xmm6, xmm10");
    __asm ("comisd xmm6, xmm9");
    if (? > ?) {
        goto label_0;
    }
    __asm ("movapd xmm6, xmm0");
    __asm ("subsd xmm6, xmm5");
    __asm ("divsd xmm6, xmm0");
    __asm ("movapd xmm12, xmm6");
    __asm ("andpd xmm12, xmm10");
    __asm ("comisd xmm12, xmm9");
    if (? > ?) {
        goto label_0;
    }
    __asm ("mulsd xmm2, xmm3");
    __asm ("movapd xmm1, xmm6");
    xmm4 = *(loc..LC7);
    __asm ("mulsd xmm1, xmm6");
    __asm ("ucomisd xmm7, xmm0");
    __asm ("movapd xmm3, xmm2");
    __asm ("mulsd xmm2, xmm6");
    __asm ("subsd xmm3, xmm1");
    xmm1 = *(loc..LC5);
    __asm ("mulsd xmm1, xmm3");
    __asm ("subsd xmm1, qword [loc..LC6]");
    __asm ("mulsd xmm4, xmm2");
    __asm ("mulsd xmm2, qword [loc..LC9]");
    __asm ("subsd xmm1, xmm4");
    __asm ("mulsd xmm1, xmm3");
    __asm ("addsd xmm1, qword [loc..LC8]");
    __asm ("addsd xmm2, xmm1");
    __asm ("movapd xmm1, xmm0");
    __asm ("sqrtsd xmm1, xmm1");
    while (1) {
        __asm ("movapd xmm0, xmm2");
        __asm ("divsd xmm0, xmm1");
        return;
label_4:
        __asm ("movapd xmm0, xmm4");
        *((rsp + 0x18)) = xmm5;
        *((rsp + 0x10)) = xmm1;
        *((rsp + 8)) = xmm12;
        *(rsp) = xmm4;
        sqrt ();
        rax = *(loc..LC4);
        xmm7 = 0;
        xmm10 = .rodata.cst16;
        xmm5 = *((rsp + 0x18));
        xmm1 = *((rsp + 0x10));
        xmm9 = rax;
        rax = *(loc..LC2);
        xmm4 = *(rsp);
        xmm12 = *((rsp + 8));
        xmm11 = rax;
        rax = *(loc..LC1);
        xmm8 = rax;
        goto label_1;
label_6:
        __asm ("movapd xmm0, xmm5");
        *((rsp + 0x28)) = xmm1;
        *((rsp + 0x20)) = xmm4;
        *((rsp + 0x18)) = xmm2;
        *((rsp + 0x10)) = xmm6;
        *((rsp + 8)) = xmm12;
        *(rsp) = xmm5;
        sqrt ();
        rax = *(loc..LC4);
        xmm5 = *(rsp);
        xmm7 = 0;
        xmm10 = .rodata.cst16;
        xmm1 = *((rsp + 0x28));
        xmm9 = rax;
        rax = *(loc..LC2);
        xmm4 = *((rsp + 0x20));
        xmm2 = *((rsp + 0x18));
        xmm6 = *((rsp + 0x10));
        xmm11 = rax;
        rax = *(loc..LC1);
        xmm12 = *((rsp + 8));
        xmm8 = rax;
        goto label_2;
label_5:
        __asm ("movapd xmm0, xmm1");
        *((rsp + 0x20)) = xmm5;
        *((rsp + 0x18)) = xmm4;
        *((rsp + 0x10)) = xmm6;
        *((rsp + 8)) = xmm12;
        *(rsp) = xmm1;
        sqrt ();
        rax = *(loc..LC4);
        xmm1 = *(rsp);
        xmm7 = 0;
        xmm10 = .rodata.cst16;
        xmm5 = *((rsp + 0x20));
        xmm9 = rax;
        rax = *(loc..LC2);
        xmm4 = *((rsp + 0x18));
        xmm6 = *((rsp + 0x10));
        xmm12 = *((rsp + 8));
        xmm11 = rax;
        rax = *(loc..LC1);
        xmm8 = rax;
        goto label_3;
        *((rsp + 8)) = xmm1;
        *(rsp) = xmm2;
        sqrt ();
        xmm1 = *((rsp + 8));
        xmm2 = *(rsp);
    }
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/standard.o @ 0x8000360 */
#include <stdint.h>
 
int64_t carlson_elliptic_rc (int64_t arg8, int64_t arg7) {
    int64_t var_8h;
    int64_t var_10h;
    int64_t var_18h;
    int64_t var_20h;
    int64_t var_28h;
    xmm1 = arg8;
    xmm0 = arg7;
    xmm4 = 0;
    __asm ("movapd xmm3, xmm0");
    xmm9 = *(loc..LC8);
    __asm ("comisd xmm1, xmm4");
    __asm ("movapd xmm10, xmm9");
    if (? <= ?) {
        goto label_5;
    }
label_0:
    xmm5 = *(loc..LC1);
    xmm7 = .rodata.cst16;
    xmm8 = *(loc..LC2);
    xmm6 = *(loc..LC11);
    do {
        __asm ("ucomisd xmm4, xmm3");
        __asm ("movapd xmm2, xmm3");
        __asm ("sqrtsd xmm2, xmm2");
        if (? > ?) {
            goto label_6;
        }
label_2:
        __asm ("ucomisd xmm4, xmm1");
        __asm ("movapd xmm11, xmm1");
        __asm ("addsd xmm2, xmm2");
        __asm ("sqrtsd xmm11, xmm11");
        if (? > ?) {
            goto label_7;
        }
label_1:
        __asm ("mulsd xmm2, xmm11");
        __asm ("addsd xmm2, xmm1");
        __asm ("addsd xmm3, xmm2");
        __asm ("addsd xmm2, xmm1");
        __asm ("mulsd xmm3, xmm5");
        __asm ("movapd xmm1, xmm2");
        __asm ("mulsd xmm1, xmm5");
        __asm ("movapd xmm0, xmm3");
        __asm ("addsd xmm0, xmm1");
        __asm ("movapd xmm2, xmm1");
        __asm ("addsd xmm0, xmm1");
        __asm ("mulsd xmm0, xmm8");
        __asm ("subsd xmm2, xmm0");
        __asm ("divsd xmm2, xmm0");
        __asm ("movapd xmm11, xmm2");
        __asm ("andpd xmm11, xmm7");
        __asm ("comisd xmm11, xmm6");
    } while (? > ?);
    xmm1 = *(loc..LC12);
    __asm ("ucomisd xmm4, xmm0");
    __asm ("mulsd xmm1, xmm2");
    __asm ("addsd xmm1, qword [loc..LC13]");
    __asm ("mulsd xmm1, xmm2");
    __asm ("addsd xmm1, qword [loc..LC14]");
    __asm ("mulsd xmm1, xmm2");
    __asm ("mulsd xmm2, xmm2");
    __asm ("addsd xmm1, qword [loc..LC15]");
    __asm ("mulsd xmm2, xmm1");
    __asm ("movapd xmm1, xmm0");
    __asm ("sqrtsd xmm1, xmm1");
    __asm ("addsd xmm9, xmm2");
    __asm ("mulsd xmm10, xmm9");
    while (1) {
        __asm ("movapd xmm0, xmm10");
        __asm ("divsd xmm0, xmm1");
        return;
label_5:
        __asm ("ucomisd xmm4, xmm0");
        __asm ("movapd xmm2, xmm0");
        __asm ("movapd xmm10, xmm0");
        __asm ("subsd xmm2, xmm1");
        __asm ("sqrtsd xmm10, xmm10");
        __asm ("xorpd xmm1, xmmword [loc..LC10]");
        if (? > ?) {
            goto label_8;
        }
label_3:
        __asm ("ucomisd xmm4, xmm2");
        __asm ("movapd xmm3, xmm2");
        __asm ("sqrtsd xmm3, xmm3");
        if (? > ?) {
            goto label_9;
        }
label_4:
        xmm9 = *(loc..LC8);
        __asm ("divsd xmm10, xmm3");
        __asm ("movapd xmm3, xmm2");
        goto label_0;
label_7:
        __asm ("movapd xmm0, xmm1");
        *((rsp + 0x28)) = xmm9;
        *((rsp + 0x20)) = xmm3;
        *((rsp + 0x18)) = xmm10;
        *((rsp + 0x10)) = xmm11;
        *((rsp + 8)) = xmm2;
        *(rsp) = xmm1;
        sqrt ();
        rax = *(loc..LC11);
        xmm1 = *(rsp);
        xmm4 = 0;
        xmm9 = *((rsp + 0x28));
        xmm7 = .rodata.cst16;
        xmm6 = rax;
        rax = *(loc..LC2);
        xmm3 = *((rsp + 0x20));
        xmm10 = *((rsp + 0x18));
        xmm11 = *((rsp + 0x10));
        xmm8 = rax;
        rax = *(loc..LC1);
        xmm2 = *((rsp + 8));
        xmm5 = rax;
        goto label_1;
label_6:
        __asm ("movapd xmm0, xmm3");
        *((rsp + 0x20)) = xmm9;
        *((rsp + 0x18)) = xmm1;
        *((rsp + 0x10)) = xmm10;
        *((rsp + 8)) = xmm2;
        *(rsp) = xmm3;
        sqrt ();
        rax = *(loc..LC11);
        xmm3 = *(rsp);
        xmm4 = 0;
        xmm9 = *((rsp + 0x20));
        xmm7 = .rodata.cst16;
        xmm6 = rax;
        rax = *(loc..LC2);
        xmm1 = *((rsp + 0x18));
        xmm10 = *((rsp + 0x10));
        xmm2 = *((rsp + 8));
        xmm8 = rax;
        rax = *(loc..LC1);
        xmm5 = rax;
        goto label_2;
        *((rsp + 8)) = xmm1;
        *(rsp) = xmm10;
        sqrt ();
        xmm1 = *((rsp + 8));
        xmm10 = *(rsp);
    }
label_8:
    *((rsp + 0x10)) = xmm1;
    *((rsp + 8)) = xmm2;
    *(rsp) = xmm10;
    sqrt ();
    xmm1 = *((rsp + 0x10));
    xmm2 = *((rsp + 8));
    xmm4 = 0;
    xmm10 = *(rsp);
    goto label_3;
label_9:
    __asm ("movapd xmm0, xmm2");
    *((rsp + 0x18)) = xmm1;
    *((rsp + 0x10)) = xmm3;
    *((rsp + 8)) = xmm10;
    *(rsp) = xmm2;
    sqrt ();
    xmm1 = *((rsp + 0x18));
    xmm3 = *((rsp + 0x10));
    xmm4 = 0;
    xmm10 = *((rsp + 8));
    xmm2 = *(rsp);
    goto label_4;
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/standard.o @ 0x8000670 */
#include <stdint.h>
 
int64_t f_real (int64_t arg7) {
    int64_t var_8h_5;
    int64_t var_10h_5;
    int64_t var_18h_5;
    int64_t var_20h_2;
    int64_t var_28h_4;
    int64_t var_30h;
    int64_t var_48h;
    int64_t var_8h_4;
    int64_t var_10h_4;
    int64_t var_18h_4;
    int64_t var_20h;
    int64_t var_38h;
    int64_t var_8h_3;
    int64_t var_10h_3;
    int64_t var_28h_3;
    int64_t var_8h_2;
    int64_t var_10h_2;
    int64_t var_28h_2;
    int64_t var_8h;
    int64_t var_10h;
    int64_t var_28h;
    int64_t var_18h_3;
    int64_t var_18h_2;
    int64_t var_18h;
    xmm0 = arg7;
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x18)) = rax;
    eax = 0;
    rdi = rsp;
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    xmm1 = 0;
    rdi = rbp;
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    rax = *((rsp + 0x18));
    rax ^= *(fs:0x28);
    if (? == ?) {
        return rax;
    }
    sqrt ();
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x18)) = rax;
    eax = 0;
    rdi = rsp;
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    xmm1 = 0;
    rdi = rbp;
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    rax = *((rsp + 0x18));
    rax ^= *(fs:0x28);
    if (? == ?) {
        return rax;
    }
    sqrt ();
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x18)) = rax;
    eax = 0;
    rdi = rsp;
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    xmm1 = 0;
    rdi = rbp;
    __asm ("divsd xmm0, qword [reloc.ang2rad]");
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    rax = *((rsp + 0x18));
    rax ^= *(fs:0x28);
    if (? == ?) {
        return rax;
    }
    sqrt ();
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x28)) = rax;
    eax = 0;
    rbp = rsp + 0x10;
    rdi = rbp;
    sqrt ();
    rdi = rbp;
    sqrt ();
    rdi = rbp;
    *((rsp + 8)) = xmm0;
    sqrt ();
    xmm1 = *((rsp + 8));
    rdi = rbp;
    __asm ("xorpd xmm1, xmmword [loc..LC10]");
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    rax = *((rsp + 0x28));
    rax ^= *(fs:0x28);
    if (? == ?) {
        return rax;
    }
    sqrt ();
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x28)) = rax;
    eax = 0;
    rbp = rsp + 0x10;
    rdi = rbp;
    sqrt ();
    rdi = rbp;
    sqrt ();
    __asm ("mulsd xmm0, qword [reloc.ang2rad]");
    sqrt ();
    rdi = rbp;
    *(rsp) = xmm0;
    sqrt ();
    __asm ("mulsd xmm0, qword [reloc.ang2rad]");
    sqrt ();
    xmm1 = *(rsp);
    rdi = rbp;
    __asm ("mulsd xmm1, xmm0");
    *((rsp + 8)) = xmm1;
    sqrt ();
    __asm ("mulsd xmm0, qword [reloc.ang2rad]");
    sqrt ();
    rdi = rbp;
    *(rsp) = xmm0;
    sqrt ();
    __asm ("mulsd xmm0, qword [reloc.ang2rad]");
    sqrt ();
    __asm ("mulsd xmm0, qword [rsp]");
    xmm1 = *((rsp + 8));
    rdi = rbp;
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    rax = *((rsp + 0x28));
    rax ^= *(fs:0x28);
    if (? == ?) {
        return rax;
    }
    rax = sqrt ();
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x28)) = rax;
    eax = 0;
    rbp = rsp + 0x10;
    rdi = rbp;
    sqrt (rbx);
    rdi = rbp;
    sqrt ();
    __asm ("mulsd xmm0, qword [reloc.ang2rad]");
    sqrt ();
    rdi = rbp;
    rbx = xmm0;
    sqrt ();
    __asm ("mulsd xmm0, qword [reloc.ang2rad]");
    sqrt ();
    xmm1 = rbx;
    rdi = rbp;
    __asm ("xorpd xmm1, xmmword [loc..LC10]");
    __asm ("mulsd xmm1, xmm0");
    *((rsp + 8)) = xmm1;
    sqrt ();
    __asm ("mulsd xmm0, qword [reloc.ang2rad]");
    sqrt ();
    rdi = rbp;
    *(rsp) = xmm0;
    sqrt ();
    __asm ("mulsd xmm0, qword [reloc.ang2rad]");
    sqrt ();
    __asm ("mulsd xmm0, qword [rsp]");
    xmm1 = *((rsp + 8));
    rdi = rbp;
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    rax = *((rsp + 0x28));
    rax ^= *(fs:0x28);
    if (? == ?) {
        return rax;
    }
    sqrt ();
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x38)) = rax;
    eax = 0;
    rbp = rsp + 0x20;
    rdi = rbp;
    sqrt ();
    rdi = rbp;
    sqrt ();
    xmm3 = 0;
    __asm ("ucomisd xmm0, xmm3");
    __asm ("jp 0x8000a50");
    if (? != ?) {
        goto label_10;
    }
    rdi = rbp;
    sqrt ();
    __asm ("mulsd xmm0, qword [reloc.ang2rad]");
    sqrt ();
    rdi = rbp;
    xmm1 = 0;
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    do {
label_0:
        rax = *((rsp + 0x38));
        rax ^= *(fs:0x28);
        if (? != ?) {
            goto label_11;
        }
        return rax;
label_10:
        xmm0 = *(reloc.ang2rad);
        rdi = rbp;
        __asm ("addsd xmm0, xmm0");
        *((rsp + 8)) = xmm0;
        sqrt ();
        __asm ("mulsd xmm0, qword [rsp + 8]");
        sqrt ();
        rdi = rbp;
        *((rsp + 8)) = xmm0;
        xmm0 = *(reloc.ang2rad);
        __asm ("movapd xmm5, xmm0");
        __asm ("addsd xmm5, xmm0");
        *((rsp + 0x10)) = xmm5;
        sqrt ();
        __asm ("mulsd xmm0, qword [rsp + 0x10]");
        sqrt ();
        xmm2 = *((rsp + 8));
        xmm6 = 0;
        __asm ("addsd xmm2, xmm0");
        __asm ("ucomisd xmm2, xmm6");
        __asm ("jp 0x8000ad0");
        if (? != ?) {
            goto label_12;
        }
        rdi = rbp;
        *(reloc.undefined) = 1;
        sqrt ();
    } while (1);
label_12:
    xmm0 = *(reloc.ang2rad);
    rdi = rbp;
    *((rsp + 0x10)) = xmm2;
    __asm ("addsd xmm0, xmm0");
    *((rsp + 8)) = xmm0;
    sqrt ();
    __asm ("mulsd xmm0, qword [rsp + 8]");
    sqrt ();
    xmm2 = *((rsp + 0x10));
    rdi = rbp;
    __asm ("movapd xmm1, xmm0");
    xmm0 = *(reloc.ang2rad);
    __asm ("divsd xmm1, xmm2");
    *((rsp + 0x18)) = xmm2;
    __asm ("addsd xmm0, xmm0");
    *((rsp + 8)) = xmm0;
    *((rsp + 0x10)) = xmm1;
    sqrt ();
    __asm ("mulsd xmm0, qword [rsp + 8]");
    sqrt ();
    xmm2 = *((rsp + 0x18));
    xmm1 = *((rsp + 0x10));
    rdi = rbp;
    __asm ("divsd xmm0, xmm2");
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    goto label_0;
label_11:
    sqrt ();
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x48)) = rax;
    eax = 0;
    rbp = rsp + 0x30;
    rdi = rbp;
    sqrt ();
    rdi = rbp;
    sqrt ();
    rdi = rbp;
    *(rsp) = xmm0;
    sqrt ();
    xmm1 = 0;
    xmm2 = *(rsp);
    __asm ("ucomisd xmm0, xmm1");
    __asm ("movapd xmm3, xmm0");
    __asm ("jp 0x8000d80");
    if (? != ?) {
        goto label_13;
    }
    xmm4 = *(loc..LC8);
    __asm ("movapd xmm0, xmm2");
    __asm ("andpd xmm0, xmmword [loc..LC3]");
    __asm ("comisd xmm4, xmm0");
    if (? >= ?) {
        goto label_14;
    }
    __asm ("ucomisd xmm2, xmm1");
    __asm ("movapd xmm7, xmm3");
    __asm ("mulsd xmm7, xmm3");
    __asm ("jp 0x8000c60");
    if (? != ?) {
label_1:
        goto label_2;
    }
    __asm ("addsd xmm7, xmm4");
    __asm ("ucomisd xmm1, xmm7");
    __asm ("movapd xmm4, xmm7");
    __asm ("sqrtsd xmm4, xmm4");
    if (? > ?) {
        goto label_15;
    }
label_6:
    __asm ("subsd xmm4, xmm3");
    __asm ("movapd xmm0, xmm4");
    sqrt ();
    rdi = rbp;
    __asm ("movapd xmm1, xmm0");
    xmm0 = 0;
    __asm ("xorpd xmm1, xmmword [loc..LC10]");
    __asm ("divsd xmm1, qword [reloc.ang2rad]");
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    do {
label_3:
        rax = *((rsp + 0x48));
        rax ^= *(fs:0x28);
        if (? != ?) {
            goto label_16;
        }
        return rax;
label_2:
        __asm ("movapd xmm5, xmm2");
        __asm ("addsd xmm5, xmm4");
        __asm ("mulsd xmm5, xmm5");
        __asm ("addsd xmm5, xmm7");
        __asm ("ucomisd xmm1, xmm5");
        __asm ("movapd xmm6, xmm5");
        __asm ("sqrtsd xmm6, xmm6");
        if (? > ?) {
            goto label_17;
        }
label_4:
        xmm8 = *(loc..LC17);
        __asm ("subsd xmm2, xmm4");
        __asm ("mulsd xmm6, xmm8");
        __asm ("mulsd xmm2, xmm2");
        __asm ("addsd xmm2, xmm7");
        __asm ("ucomisd xmm1, xmm2");
        __asm ("movapd xmm7, xmm2");
        __asm ("sqrtsd xmm7, xmm7");
        if (? > ?) {
            goto label_18;
        }
label_5:
        __asm ("mulsd xmm7, xmm8");
        __asm ("movapd xmm8, xmm6");
        __asm ("movapd xmm0, xmm4");
        __asm ("ucomisd xmm1, xmm5");
        __asm ("subsd xmm8, xmm7");
        __asm ("minsd xmm0, xmm8");
        __asm ("movapd xmm8, xmm0");
        if (? > ?) {
            goto label_19;
        }
label_8:
        __asm ("ucomisd xmm1, xmm2");
        if (? > ?) {
            goto label_20;
        }
label_9:
        __asm ("comisd xmm3, xmm1");
        __asm ("addsd xmm6, xmm7");
        __asm ("movapd xmm5, xmm4");
        if (? < ?) {
            xmm5 = *(loc..LC16);
        }
        __asm ("movapd xmm0, xmm6");
        __asm ("mulsd xmm0, xmm6");
        __asm ("subsd xmm0, xmm4");
        __asm ("ucomisd xmm1, xmm0");
        __asm ("movapd xmm3, xmm0");
        __asm ("sqrtsd xmm3, xmm3");
        if (? > ?) {
            goto label_21;
        }
label_7:
        __asm ("addsd xmm3, xmm6");
        *(rsp) = xmm5;
        *((rsp + 8)) = xmm8;
        __asm ("movapd xmm0, xmm3");
        sqrt ();
        xmm5 = *(rsp);
        xmm8 = *((rsp + 8));
        __asm ("movapd xmm1, xmm0");
        __asm ("mulsd xmm1, xmm5");
        __asm ("movapd xmm0, xmm8");
        __asm ("divsd xmm1, qword [reloc.ang2rad]");
        *(rsp) = xmm1;
        sqrt ();
        xmm1 = *(rsp);
        rdi = rbp;
        __asm ("divsd xmm0, qword [reloc.ang2rad]");
        rax = sqrt ();
        rdi = rax;
        sqrt ();
    } while (1);
label_13:
    __asm ("ucomisd xmm2, xmm1");
    __asm ("movapd xmm7, xmm3");
    xmm4 = *(loc..LC8);
    __asm ("mulsd xmm7, xmm3");
    __asm ("jnp 0x8000bf4");
    goto label_1;
    goto label_2;
label_14:
    __asm ("movapd xmm0, xmm2");
    sqrt ();
    rdi = rbp;
    xmm1 = 0;
    __asm ("divsd xmm0, qword [reloc.ang2rad]");
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    goto label_3;
label_16:
    sqrt ();
label_17:
    __asm ("movapd xmm0, xmm5");
    *((rsp + 0x28)) = xmm4;
    *((rsp + 0x20)) = xmm7;
    *((rsp + 0x18)) = xmm3;
    *((rsp + 0x10)) = xmm2;
    *((rsp + 8)) = xmm6;
    *(rsp) = xmm5;
    sqrt ();
    xmm4 = *((rsp + 0x28));
    xmm5 = *(rsp);
    xmm1 = 0;
    xmm7 = *((rsp + 0x20));
    xmm3 = *((rsp + 0x18));
    xmm2 = *((rsp + 0x10));
    xmm6 = *((rsp + 8));
    goto label_4;
label_18:
    __asm ("movapd xmm0, xmm2");
    *((rsp + 0x28)) = xmm4;
    *((rsp + 0x20)) = xmm3;
    *((rsp + 0x18)) = xmm7;
    *((rsp + 0x10)) = xmm6;
    *((rsp + 8)) = xmm5;
    *(rsp) = xmm2;
    sqrt ();
    rax = *(loc..LC17);
    xmm2 = *(rsp);
    xmm1 = 0;
    xmm4 = *((rsp + 0x28));
    xmm3 = *((rsp + 0x20));
    xmm7 = *((rsp + 0x18));
    xmm6 = *((rsp + 0x10));
    xmm8 = rax;
    xmm5 = *((rsp + 8));
    goto label_5;
label_15:
    __asm ("movapd xmm0, xmm7");
    *((rsp + 8)) = xmm3;
    *(rsp) = xmm4;
    sqrt ();
    xmm3 = *((rsp + 8));
    xmm4 = *(rsp);
    goto label_6;
label_21:
    *((rsp + 0x18)) = xmm5;
    *((rsp + 0x10)) = xmm6;
    *((rsp + 8)) = xmm8;
    *(rsp) = xmm3;
    sqrt ();
    xmm5 = *((rsp + 0x18));
    xmm6 = *((rsp + 0x10));
    xmm8 = *((rsp + 8));
    xmm3 = *(rsp);
    goto label_7;
label_19:
    *((rsp + 0x18)) = xmm0;
    __asm ("movapd xmm0, xmm5");
    *((rsp + 0x28)) = xmm4;
    *((rsp + 0x20)) = xmm3;
    *((rsp + 0x10)) = xmm7;
    *((rsp + 8)) = xmm2;
    *(rsp) = xmm6;
    sqrt ();
    xmm4 = *((rsp + 0x28));
    xmm6 = *(rsp);
    xmm1 = 0;
    xmm3 = *((rsp + 0x20));
    xmm8 = *((rsp + 0x18));
    xmm7 = *((rsp + 0x10));
    xmm2 = *((rsp + 8));
    goto label_8;
label_20:
    __asm ("movapd xmm0, xmm2");
    *((rsp + 0x20)) = xmm4;
    *((rsp + 0x18)) = xmm3;
    *((rsp + 0x10)) = xmm8;
    *((rsp + 8)) = xmm7;
    *(rsp) = xmm6;
    sqrt ();
    xmm4 = *((rsp + 0x20));
    xmm6 = *(rsp);
    xmm1 = 0;
    xmm3 = *((rsp + 0x18));
    xmm8 = *((rsp + 0x10));
    xmm7 = *((rsp + 8));
    goto label_9;
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/standard.o @ 0x8000f90 */
#include <stdint.h>
 
int64_t f_acos (int64_t arg7) {
    int64_t var_8h;
    int64_t var_10h;
    int64_t var_18h;
    int64_t var_20h;
    int64_t var_28h;
    int64_t var_30h;
    int64_t var_38h;
    int64_t var_40h;
    int64_t var_58h;
    xmm0 = arg7;
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x58)) = rax;
    eax = 0;
    rbp = rsp + 0x40;
    rdi = rbp;
    sqrt ();
    rdi = rbp;
    sqrt ();
    rdi = rbp;
    *((rsp + 8)) = xmm0;
    sqrt ();
    xmm1 = 0;
    xmm2 = *((rsp + 8));
    __asm ("ucomisd xmm0, xmm1");
    __asm ("movapd xmm5, xmm0");
    __asm ("jp 0x8001160");
    if (? != ?) {
        goto label_5;
    }
    xmm6 = *(loc..LC8);
    __asm ("movapd xmm0, xmm2");
    __asm ("andpd xmm0, xmmword [loc..LC3]");
    __asm ("comisd xmm6, xmm0");
    if (? >= ?) {
        goto label_6;
    }
label_0:
    __asm ("movapd xmm4, xmm2");
    __asm ("movapd xmm7, xmm5");
    __asm ("addsd xmm4, xmm6");
    __asm ("mulsd xmm7, xmm5");
    __asm ("mulsd xmm4, xmm4");
    __asm ("addsd xmm4, xmm7");
    __asm ("ucomisd xmm1, xmm4");
    __asm ("movapd xmm8, xmm4");
    __asm ("sqrtsd xmm8, xmm8");
    if (? > ?) {
        goto label_7;
    }
    xmm9 = *(loc..LC17);
    __asm ("subsd xmm2, xmm6");
    __asm ("mulsd xmm8, xmm9");
    __asm ("mulsd xmm2, xmm2");
    __asm ("addsd xmm2, xmm7");
    __asm ("ucomisd xmm1, xmm2");
    __asm ("movapd xmm3, xmm2");
    __asm ("sqrtsd xmm3, xmm3");
    if (? > ?) {
        goto label_8;
    }
label_2:
    __asm ("mulsd xmm3, xmm9");
    __asm ("ucomisd xmm1, xmm4");
    __asm ("movapd xmm7, xmm8");
    __asm ("addsd xmm7, xmm3");
    if (? > ?) {
        goto label_9;
    }
label_3:
    __asm ("subsd xmm8, xmm3");
    __asm ("comisd xmm8, xmm6");
    if (? <= ?) {
        goto label_10;
    }
    __asm ("movapd xmm8, xmm6");
    do {
        __asm ("movapd xmm0, xmm1");
        xmm3 = *(loc..LC16);
        __asm ("cmplesd xmm0, xmm5");
        __asm ("andpd xmm3, xmm0");
        __asm ("andnpd xmm0, xmm6");
        __asm ("orpd xmm3, xmm0");
        __asm ("movapd xmm0, xmm7");
        __asm ("mulsd xmm0, xmm7");
        __asm ("subsd xmm0, xmm6");
        __asm ("ucomisd xmm1, xmm0");
        __asm ("movapd xmm4, xmm0");
        __asm ("sqrtsd xmm4, xmm4");
        if (? > ?) {
            goto label_11;
        }
label_4:
        __asm ("addsd xmm4, xmm7");
        *((rsp + 8)) = xmm3;
        *((rsp + 0x10)) = xmm8;
        __asm ("movapd xmm0, xmm4");
        sqrt ();
        xmm3 = *((rsp + 8));
        xmm8 = *((rsp + 0x10));
        __asm ("movapd xmm1, xmm0");
        __asm ("mulsd xmm1, xmm3");
        __asm ("movapd xmm0, xmm8");
        __asm ("divsd xmm1, qword [reloc.ang2rad]");
        *((rsp + 8)) = xmm1;
        sqrt ();
        xmm1 = *((rsp + 8));
        rdi = rbp;
        __asm ("divsd xmm0, qword [reloc.ang2rad]");
        rax = sqrt ();
        rdi = rax;
        sqrt ();
label_1:
        rax = *((rsp + 0x58));
        rax ^= *(fs:0x28);
        if (? != ?) {
            goto label_12;
        }
        return rax;
label_10:
        xmm0 = *(loc..LC16);
        __asm ("maxsd xmm0, xmm8");
        __asm ("movapd xmm8, xmm0");
    } while (1);
label_5:
    xmm6 = *(loc..LC8);
    goto label_0;
label_6:
    __asm ("movapd xmm0, xmm2");
    sqrt ();
    rdi = rbp;
    xmm1 = 0;
    __asm ("divsd xmm0, qword [reloc.ang2rad]");
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    goto label_1;
label_12:
    sqrt ();
label_7:
    __asm ("movapd xmm0, xmm4");
    *((rsp + 0x30)) = xmm6;
    *((rsp + 0x28)) = xmm5;
    *((rsp + 0x20)) = xmm2;
    *((rsp + 0x18)) = xmm8;
    *((rsp + 0x10)) = xmm7;
    *((rsp + 8)) = xmm4;
    sqrt ();
    xmm2 = *((rsp + 0x20));
    xmm6 = *((rsp + 0x30));
    xmm1 = 0;
    xmm7 = *((rsp + 0x10));
    xmm8 = *((rsp + 0x18));
    __asm ("subsd xmm2, xmm6");
    xmm4 = *((rsp + 8));
    xmm9 = *(loc..LC17);
    xmm5 = *((rsp + 0x28));
    __asm ("mulsd xmm8, xmm9");
    __asm ("movapd xmm3, xmm2");
    __asm ("mulsd xmm3, xmm2");
    __asm ("movapd xmm2, xmm3");
    __asm ("addsd xmm2, xmm7");
    __asm ("ucomisd xmm1, xmm2");
    __asm ("sqrtsd xmm3, xmm2");
    if (? <= ?) {
        goto label_2;
    }
    __asm ("movapd xmm0, xmm2");
    *((rsp + 0x38)) = xmm9;
    *((rsp + 0x28)) = xmm8;
    *((rsp + 0x20)) = xmm5;
    *((rsp + 0x18)) = xmm3;
    *((rsp + 0x10)) = xmm4;
    *((rsp + 8)) = xmm2;
    sqrt ();
    xmm3 = *((rsp + 0x18));
    xmm9 = *((rsp + 0x38));
    xmm1 = 0;
    xmm4 = *((rsp + 0x10));
    xmm8 = *((rsp + 0x28));
    __asm ("mulsd xmm3, xmm9");
    xmm2 = *((rsp + 8));
    xmm5 = *((rsp + 0x20));
    __asm ("ucomisd xmm1, xmm4");
    __asm ("movapd xmm7, xmm8");
    xmm6 = *((rsp + 0x30));
    __asm ("addsd xmm7, xmm3");
    if (? <= ?) {
        goto label_13;
    }
    __asm ("movapd xmm0, xmm4");
    *((rsp + 0x28)) = xmm7;
    *((rsp + 0x20)) = xmm3;
    *((rsp + 0x18)) = xmm8;
    *((rsp + 0x10)) = xmm5;
    sqrt ();
    xmm2 = *((rsp + 8));
    xmm1 = 0;
    xmm5 = *((rsp + 0x10));
    xmm8 = *((rsp + 0x18));
    xmm3 = *((rsp + 0x20));
    __asm ("ucomisd xmm1, xmm2");
    xmm7 = *((rsp + 0x28));
    xmm6 = *((rsp + 0x30));
    if (? <= ?) {
        goto label_3;
    }
    do {
label_13:
        __asm ("movapd xmm0, xmm2");
        *((rsp + 0x28)) = xmm6;
        *((rsp + 0x20)) = xmm7;
        *((rsp + 0x18)) = xmm3;
        *((rsp + 0x10)) = xmm8;
        *((rsp + 8)) = xmm5;
        sqrt ();
        xmm6 = *((rsp + 0x28));
        xmm1 = 0;
        xmm7 = *((rsp + 0x20));
        xmm3 = *((rsp + 0x18));
        xmm8 = *((rsp + 0x10));
        xmm5 = *((rsp + 8));
        goto label_3;
label_9:
        __asm ("movapd xmm0, xmm4");
        *((rsp + 0x28)) = xmm6;
        *((rsp + 0x20)) = xmm7;
        *((rsp + 0x18)) = xmm3;
        *((rsp + 0x10)) = xmm8;
        *((rsp + 8)) = xmm5;
        sqrt ();
        xmm5 = *((rsp + 8));
        xmm1 = 0;
        xmm8 = *((rsp + 0x10));
        xmm3 = *((rsp + 0x18));
        xmm7 = *((rsp + 0x20));
        xmm6 = *((rsp + 0x28));
        goto label_3;
label_8:
        __asm ("movapd xmm0, xmm2");
        *((rsp + 0x30)) = xmm9;
        *((rsp + 0x28)) = xmm6;
        *((rsp + 0x20)) = xmm8;
        *((rsp + 0x18)) = xmm5;
        *((rsp + 0x10)) = xmm3;
        *((rsp + 8)) = xmm2;
        sqrt ();
        xmm3 = *((rsp + 0x10));
        xmm9 = *((rsp + 0x30));
        xmm8 = *((rsp + 0x20));
        xmm2 = *((rsp + 8));
        __asm ("mulsd xmm3, xmm9");
        xmm5 = *((rsp + 0x18));
        xmm6 = *((rsp + 0x28));
        __asm ("movapd xmm7, xmm3");
        __asm ("addsd xmm7, xmm8");
    } while (1);
label_11:
    *((rsp + 0x20)) = xmm7;
    *((rsp + 0x18)) = xmm3;
    *((rsp + 0x10)) = xmm8;
    *((rsp + 8)) = xmm4;
    sqrt ();
    xmm7 = *((rsp + 0x20));
    xmm3 = *((rsp + 0x18));
    xmm8 = *((rsp + 0x10));
    xmm4 = *((rsp + 8));
    goto label_4;
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/standard.o @ 0x8001430 */
#include <stdint.h>
 
int64_t f_atan (int64_t arg7) {
    int64_t var_8h_5;
    int64_t var_10h_6;
    int64_t var_18h_3;
    int64_t var_20h_3;
    int64_t var_28h_6;
    int64_t var_30h_3;
    int64_t var_48h_3;
    int64_t var_8h_4;
    int64_t var_10h_5;
    int64_t var_18h_2;
    int64_t var_20h_2;
    int64_t var_28h_5;
    int64_t var_30h_2;
    int64_t var_48h_2;
    int64_t var_8h_3;
    int64_t var_10h_4;
    int64_t var_28h_4;
    int64_t var_8h_2;
    int64_t var_10h_3;
    int64_t var_28h_3;
    int64_t var_8h_6;
    int64_t var_10h_2;
    int64_t var_28h_2;
    int64_t var_8h;
    int64_t var_10h;
    int64_t var_18h;
    int64_t var_20h;
    int64_t var_28h;
    int64_t var_30h;
    int64_t var_48h;
    xmm0 = arg7;
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x48)) = rax;
    eax = 0;
    rbp = rsp + 0x30;
    rdi = rbp;
    sqrt ();
    rdi = rbp;
    sqrt ();
    rdi = rbp;
    *((rsp + 8)) = xmm0;
    sqrt ();
    xmm4 = 0;
    xmm3 = *((rsp + 8));
    __asm ("ucomisd xmm0, xmm4");
    __asm ("movapd xmm2, xmm0");
    __asm ("jnp 0x80015d0");
    while (? != ?) {
        __asm ("ucomisd xmm3, xmm4");
        __asm ("jp 0x80014b0");
        if (? == ?) {
            xmm1 = *(loc..LC8);
            __asm ("movapd xmm0, xmm2");
            __asm ("andpd xmm0, xmmword [loc..LC3]");
            __asm ("comisd xmm0, xmm1");
            if (? >= ?) {
                goto label_6;
            }
            __asm ("movapd xmm0, xmm3");
        } else {
            __asm ("comisd xmm3, xmm4");
            if (? >= ?) {
                goto label_7;
            }
            xmm1 = *(loc..LC10);
            __asm ("movapd xmm0, xmm3");
            __asm ("xorpd xmm0, xmm1");
            __asm ("xorpd xmm2, xmm1");
            xmm1 = *(loc..LC8);
        }
label_1:
        __asm ("movapd xmm6, xmm0");
        __asm ("movapd xmm7, xmm2");
        __asm ("movapd xmm5, xmm1");
        *((rsp + 0x28)) = xmm3;
        __asm ("mulsd xmm6, xmm0");
        __asm ("addsd xmm0, xmm0");
        *((rsp + 0x20)) = xmm1;
        __asm ("mulsd xmm7, xmm2");
        *((rsp + 0x10)) = xmm2;
        __asm ("subsd xmm5, xmm6");
        *((rsp + 0x18)) = xmm6;
        __asm ("subsd xmm5, xmm7");
        __asm ("divsd xmm0, xmm5");
        sqrt ();
        xmm2 = *((rsp + 0x10));
        xmm1 = *((rsp + 0x20));
        *((rsp + 8)) = xmm0;
        xmm6 = *((rsp + 0x18));
        __asm ("movapd xmm0, xmm2");
        __asm ("subsd xmm2, xmm1");
        __asm ("addsd xmm0, xmm1");
        __asm ("mulsd xmm2, xmm2");
        __asm ("mulsd xmm0, xmm0");
        __asm ("addsd xmm2, xmm6");
        __asm ("addsd xmm0, xmm6");
        __asm ("divsd xmm0, xmm2");
        sqrt ();
        xmm5 = *((rsp + 8));
        xmm4 = 0;
        xmm1 = *(loc..LC1);
        xmm3 = *((rsp + 0x28));
        __asm ("mulsd xmm1, xmm0");
        __asm ("comisd xmm4, xmm5");
        if (? > ?) {
            __asm ("addsd xmm5, qword [loc..LC18]");
        }
        __asm ("comisd xmm4, xmm3");
        if (? > ?) {
            xmm0 = *(loc..LC10);
            __asm ("xorpd xmm5, xmm0");
            __asm ("xorpd xmm1, xmm0");
        }
        __asm ("mulsd xmm5, qword [loc..LC17]");
        rdi = rbp;
        __asm ("movapd xmm0, xmm5");
        __asm ("divsd xmm0, qword [reloc.ang2rad]");
        rax = sqrt ();
        rdi = rax;
        sqrt ();
label_0:
        rax = *((rsp + 0x48));
        rax ^= *(fs:0x28);
        if (? != ?) {
            goto label_8;
        }
        return rax;
    }
    __asm ("movapd xmm0, xmm3");
    sqrt ();
    xmm4 = 0;
    rdi = rbp;
    __asm ("divsd xmm0, qword [reloc.ang2rad]");
    __asm ("movapd xmm1, xmm4");
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    goto label_0;
label_6:
    rdi = rbp;
    __asm ("movapd xmm1, xmm4");
    __asm ("movapd xmm0, xmm4");
    *(reloc.undefined) = 1;
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    goto label_0;
label_7:
    xmm1 = *(loc..LC8);
    __asm ("movapd xmm0, xmm3");
    goto label_1;
label_8:
    sqrt ();
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x28)) = rax;
    eax = 0;
    rbp = rsp + 0x10;
    rdi = rbp;
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    rdi = rbp;
    *(rsp) = xmm0;
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    xmm1 = *(rsp);
    xmm2 = 0;
    edx = 0;
    __asm ("ucomisd xmm1, xmm2");
    __asm ("setnp al");
    if (? != ?) {
        eax = edx;
    }
    if (al == 0) {
        goto label_9;
    }
    __asm ("ucomisd xmm0, xmm2");
    __asm ("setnp al");
    if (al == 0) {
        edx = eax;
    }
    while (1) {
label_9:
        sqrt ();
        xmm1 = 0;
        rdi = rbp;
        __asm ("divsd xmm0, qword [reloc.ang2rad]");
        rax = sqrt ();
        rdi = rax;
        sqrt ();
        rax = *((rsp + 0x28));
        rax ^= *(fs:0x28);
        if (dl != 0) {
            goto label_10;
        }
        return rax;
        esi = 0;
        rdi = rbp;
        *((rsp + 8)) = xmm0;
        *(reloc.undefined) = 1;
        rax = sqrt ();
        rdi = rax;
        sqrt ();
        xmm0 = *((rsp + 8));
        xmm1 = *(rsp);
    }
label_10:
    rax = sqrt ();
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x28)) = rax;
    eax = 0;
    rbp = rsp + 0x10;
    rdi = rbp;
    sqrt ();
    rdi = rbp;
    sqrt ();
    sqrt ();
    rdi = rbp;
    *(rsp) = xmm0;
    sqrt ();
    sqrt ();
    xmm1 = *(rsp);
    rdi = rbp;
    __asm ("mulsd xmm1, xmm0");
    *((rsp + 8)) = xmm1;
    sqrt ();
    sqrt ();
    rdi = rbp;
    *(rsp) = xmm0;
    sqrt ();
    sqrt ();
    __asm ("mulsd xmm0, qword [rsp]");
    xmm1 = *((rsp + 8));
    rdi = rbp;
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    rax = *((rsp + 0x28));
    rax ^= *(fs:0x28);
    if (dl == 0) {
        return rax;
    }
    rax = sqrt ();
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x28)) = rax;
    eax = 0;
    rbp = rsp + 0x10;
    rdi = rbp;
    sqrt ();
    rdi = rbp;
    sqrt ();
    sqrt ();
    rdi = rbp;
    *(rsp) = xmm0;
    sqrt ();
    sqrt ();
    xmm1 = *(rsp);
    rdi = rbp;
    __asm ("mulsd xmm1, xmm0");
    *((rsp + 8)) = xmm1;
    sqrt ();
    sqrt ();
    rdi = rbp;
    *(rsp) = xmm0;
    sqrt ();
    sqrt ();
    __asm ("mulsd xmm0, qword [rsp]");
    xmm1 = *((rsp + 8));
    rdi = rbp;
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    rax = *((rsp + 0x28));
    rax ^= *(fs:0x28);
    if (dl == 0) {
        return rax;
    }
    rax = sqrt ();
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x48)) = rax;
    eax = 0;
    rbp = rsp + 0x30;
    rdi = rbp;
    sqrt ();
    rdi = rbp;
    sqrt ();
    rdi = rbp;
    __asm ("movapd xmm2, xmm0");
    __asm ("addsd xmm2, xmm0");
    *((rsp + 8)) = xmm2;
    sqrt ();
    xmm2 = *((rsp + 8));
    __asm ("movapd xmm1, xmm2");
    __asm ("andpd xmm1, xmmword [loc..LC3]");
    __asm ("comisd xmm1, xmmword [loc..LC19]");
    if (dl <= 0) {
        goto label_11;
    }
    xmm1 = 0;
    xmm0 = *(loc..LC16);
    __asm ("comisd xmm1, xmm2");
    if (dl <= 0) {
        xmm0 = *(loc..LC8);
    }
    rdi = rbp;
    xmm1 = 0;
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    do {
        rax = *((rsp + 0x48));
        rax ^= *(fs:0x28);
        if (dl != 0) {
            goto label_12;
        }
        return rax;
label_11:
        __asm ("addsd xmm0, xmm0");
        rdi = rsp + 0x28;
        *((rsp + 0x10)) = xmm2;
        rsi = rsp + 0x20;
        sqrt ();
        xmm2 = *((rsp + 0x10));
        xmm4 = *((rsp + 0x20));
        xmm1 = *((rsp + 0x28));
        __asm ("movapd xmm0, xmm2");
        *((rsp + 8)) = xmm4;
        *((rsp + 0x18)) = xmm1;
        sqrt ();
        xmm3 = *((rsp + 8));
        xmm2 = *((rsp + 0x10));
        __asm ("addsd xmm3, xmm0");
        __asm ("movapd xmm0, xmm2");
        *((rsp + 8)) = xmm3;
        sqrt ();
        xmm3 = *((rsp + 8));
        xmm1 = *((rsp + 0x18));
        rdi = rbp;
        __asm ("divsd xmm0, xmm3");
        __asm ("divsd xmm1, xmm3");
        rax = sqrt ();
        rdi = rax;
        sqrt ();
    } while (1);
label_12:
    rax = sqrt ();
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x48)) = rax;
    eax = 0;
    rbp = rsp + 0x30;
    rdi = rbp;
    sqrt (rbx);
    rdi = rbp;
    sqrt ();
    rdi = rbp;
    __asm ("movapd xmm7, xmm0");
    __asm ("xorpd xmm7, xmmword [loc..LC10]");
    *(rsp) = xmm0;
    *((rsp + 8)) = xmm7;
    sqrt ();
    xmm3 = 0;
    xmm1 = *(rsp);
    __asm ("ucomisd xmm0, xmm3");
    __asm ("movapd xmm2, xmm0");
    __asm ("jp 0x8001a90");
    if (dl != 0) {
        goto label_13;
    }
    __asm ("andpd xmm1, xmmword [loc..LC3]");
    xmm0 = *(loc..LC8);
    __asm ("comisd xmm0, xmm1");
    if (dl >= 0) {
        goto label_14;
    }
    __asm ("movapd xmm1, xmm3");
    __asm ("movapd xmm0, xmm3");
    rdi = rbp;
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    *(reloc.undefined) = 1;
    do {
label_2:
        rax = *((rsp + 0x48));
        rax ^= *(fs:0x28);
        if (dl != 0) {
            goto label_15;
        }
        return rax;
label_13:
        __asm ("ucomisd xmm1, xmm3");
        __asm ("movapd xmm4, xmm2");
        __asm ("mulsd xmm4, xmm2");
        __asm ("jp 0x8001ae8");
        if (dl != 0) {
            goto label_16;
        }
        __asm ("addsd xmm4, qword [loc..LC8]");
        __asm ("ucomisd xmm3, xmm4");
        __asm ("movapd xmm1, xmm4");
        __asm ("sqrtsd xmm1, xmm1");
        if (dl > 0) {
            goto label_17;
        }
label_5:
        __asm ("addsd xmm1, xmm2");
        __asm ("movapd xmm0, xmm1");
        sqrt ();
        rdi = rbp;
        xmm1 = 0;
        __asm ("divsd xmm0, qword [reloc.ang2rad]");
        rax = sqrt ();
        rdi = rax;
        sqrt ();
    } while (1);
label_16:
    xmm5 = *(loc..LC8);
    __asm ("subsd xmm5, xmm1");
    __asm ("mulsd xmm5, xmm5");
    __asm ("addsd xmm5, xmm4");
    __asm ("ucomisd xmm3, xmm5");
    __asm ("movapd xmm1, xmm5");
    __asm ("sqrtsd xmm1, xmm1");
    if (dl > 0) {
        goto label_18;
    }
    xmm0 = *((rsp + 8));
    __asm ("subsd xmm0, qword [loc..LC8]");
    xmm7 = *(loc..LC17);
    __asm ("mulsd xmm0, xmm0");
    __asm ("mulsd xmm1, xmm7");
    __asm ("addsd xmm4, xmm0");
    __asm ("ucomisd xmm3, xmm4");
    __asm ("movapd xmm6, xmm4");
    __asm ("sqrtsd xmm6, xmm6");
    if (dl > 0) {
        goto label_19;
    }
    do {
        __asm ("mulsd xmm6, xmm7");
        __asm ("ucomisd xmm3, xmm5");
        __asm ("movapd xmm7, xmm1");
        __asm ("subsd xmm7, xmm6");
        if (dl > 0) {
            goto label_20;
        }
label_3:
        __asm ("comisd xmm2, xmm3");
        __asm ("addsd xmm6, xmm1");
        __asm ("movapd xmm0, xmm7");
        ebx -= ebx;
        *((rsp + 8)) = xmm6;
        sqrt ();
        ebx |= 1;
        xmm5 = 0;
        xmm3 = 0;
        xmm6 = *((rsp + 8));
        __asm ("movapd xmm1, xmm0");
        __asm ("cvtsi2sd xmm5, ebx");
        __asm ("xorpd xmm1, xmmword [loc..LC10]");
        __asm ("divsd xmm1, qword [reloc.ang2rad]");
        __asm ("movapd xmm0, xmm6");
        __asm ("mulsd xmm0, xmm6");
        __asm ("subsd xmm0, qword [loc..LC8]");
        *(rsp) = xmm5;
        __asm ("ucomisd xmm3, xmm0");
        __asm ("movapd xmm2, xmm0");
        __asm ("sqrtsd xmm2, xmm2");
        if (ebx > 0) {
            goto label_21;
        }
label_4:
        __asm ("addsd xmm2, xmm6");
        *((rsp + 8)) = xmm1;
        __asm ("movapd xmm0, xmm2");
        sqrt ();
        xmm1 = *((rsp + 8));
        __asm ("mulsd xmm0, qword [rsp]");
        rdi = rbp;
        __asm ("divsd xmm0, qword [reloc.ang2rad]");
        rax = sqrt ();
        rdi = rax;
        sqrt ();
        goto label_2;
label_14:
        xmm0 = *((rsp + 8));
        sqrt ();
        xmm3 = 0;
        rdi = rbp;
        __asm ("movapd xmm1, xmm0");
        __asm ("movapd xmm0, xmm3");
        __asm ("xorpd xmm1, xmmword [loc..LC10]");
        __asm ("divsd xmm1, qword [reloc.ang2rad]");
        rax = sqrt ();
        rdi = rax;
        sqrt ();
        goto label_2;
label_15:
        sqrt ();
label_18:
        __asm ("movapd xmm0, xmm5");
        *((rsp + 0x20)) = xmm4;
        *((rsp + 0x18)) = xmm2;
        *((rsp + 0x10)) = xmm1;
        *(rsp) = xmm5;
        sqrt ();
        xmm0 = *((rsp + 8));
        __asm ("subsd xmm0, qword [loc..LC8]");
        xmm3 = 0;
        xmm4 = *((rsp + 0x20));
        xmm7 = *(loc..LC17);
        xmm1 = *((rsp + 0x10));
        xmm5 = *(rsp);
        __asm ("mulsd xmm0, xmm0");
        xmm2 = *((rsp + 0x18));
        __asm ("mulsd xmm1, xmm7");
        __asm ("addsd xmm4, xmm0");
        __asm ("ucomisd xmm3, xmm4");
        __asm ("sqrtsd xmm6, xmm4");
    } while (ebx <= 0);
    __asm ("movapd xmm0, xmm4");
    *((rsp + 0x28)) = xmm7;
    *((rsp + 0x20)) = xmm6;
    *((rsp + 0x18)) = xmm1;
    *((rsp + 0x10)) = xmm2;
    *((rsp + 8)) = xmm5;
    *(rsp) = xmm4;
    sqrt ();
    xmm7 = *((rsp + 0x28));
    xmm6 = *((rsp + 0x20));
    xmm3 = 0;
    xmm5 = *((rsp + 8));
    xmm1 = *((rsp + 0x18));
    __asm ("mulsd xmm6, xmm7");
    xmm4 = *(rsp);
    xmm2 = *((rsp + 0x10));
    __asm ("ucomisd xmm3, xmm5");
    __asm ("movapd xmm7, xmm1");
    __asm ("subsd xmm7, xmm6");
    if (ebx <= 0) {
        goto label_22;
    }
    __asm ("movapd xmm0, xmm5");
    *((rsp + 0x20)) = xmm7;
    *((rsp + 0x10)) = xmm6;
    *((rsp + 8)) = xmm2;
    sqrt ();
    xmm4 = *(rsp);
    xmm3 = 0;
    xmm2 = *((rsp + 8));
    xmm6 = *((rsp + 0x10));
    xmm1 = *((rsp + 0x18));
    __asm ("ucomisd xmm3, xmm4");
    xmm7 = *((rsp + 0x20));
    if (ebx <= 0) {
        goto label_3;
    }
    do {
label_22:
        __asm ("movapd xmm0, xmm4");
        *((rsp + 0x18)) = xmm7;
        *((rsp + 0x10)) = xmm1;
        *((rsp + 8)) = xmm6;
        *(rsp) = xmm2;
        sqrt ();
        xmm7 = *((rsp + 0x18));
        xmm1 = *((rsp + 0x10));
        xmm3 = 0;
        xmm6 = *((rsp + 8));
        xmm2 = *(rsp);
        goto label_3;
label_19:
        __asm ("movapd xmm0, xmm4");
        *((rsp + 0x20)) = xmm7;
        *((rsp + 0x18)) = xmm6;
        *((rsp + 0x10)) = xmm1;
        *((rsp + 8)) = xmm2;
        *(rsp) = xmm4;
        sqrt ();
        xmm7 = *((rsp + 0x20));
        xmm6 = *((rsp + 0x18));
        xmm1 = *((rsp + 0x10));
        xmm4 = *(rsp);
        __asm ("mulsd xmm6, xmm7");
        xmm2 = *((rsp + 8));
        __asm ("movapd xmm7, xmm1");
        __asm ("subsd xmm7, xmm6");
    } while (1);
label_20:
    __asm ("movapd xmm0, xmm5");
    *((rsp + 0x18)) = xmm7;
    *((rsp + 0x10)) = xmm1;
    *((rsp + 8)) = xmm6;
    *(rsp) = xmm2;
    sqrt ();
    xmm2 = *(rsp);
    xmm3 = 0;
    xmm6 = *((rsp + 8));
    xmm1 = *((rsp + 0x10));
    xmm7 = *((rsp + 0x18));
    goto label_3;
label_21:
    *((rsp + 0x18)) = xmm6;
    *((rsp + 0x10)) = xmm2;
    *((rsp + 8)) = xmm1;
    sqrt ();
    xmm6 = *((rsp + 0x18));
    xmm2 = *((rsp + 0x10));
    xmm1 = *((rsp + 8));
    goto label_4;
label_17:
    __asm ("movapd xmm0, xmm4");
    *((rsp + 8)) = xmm2;
    *(rsp) = xmm1;
    sqrt ();
    xmm2 = *((rsp + 8));
    xmm1 = *(rsp);
    goto label_5;
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/standard.o @ 0x8001e80 */
#include <stdint.h>
 
int64_t f_acosh (int64_t arg7) {
    int64_t var_8h;
    int64_t var_10h;
    int64_t var_18h;
    int64_t var_20h;
    int64_t var_28h;
    int64_t var_30h;
    int64_t var_48h;
    xmm0 = arg7;
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x48)) = rax;
    eax = 0;
    rbp = rsp + 0x30;
    rdi = rbp;
    sqrt ();
    rdi = rbp;
    sqrt ();
    rdi = rbp;
    *(rsp) = xmm0;
    sqrt ();
    xmm3 = 0;
    xmm1 = *(rsp);
    __asm ("ucomisd xmm0, xmm3");
    __asm ("movapd xmm2, xmm0");
    __asm ("jp 0x8001f60");
    if (? != ?) {
        goto label_5;
    }
    xmm0 = *(loc..LC8);
    __asm ("movapd xmm2, xmm1");
    __asm ("andpd xmm2, xmmword [loc..LC3]");
    __asm ("comisd xmm0, xmm2");
    if (? >= ?) {
        goto label_6;
    }
    __asm ("movapd xmm2, xmm1");
    __asm ("mulsd xmm2, xmm1");
    __asm ("subsd xmm2, xmm0");
    __asm ("ucomisd xmm3, xmm2");
    __asm ("movapd xmm4, xmm2");
    __asm ("sqrtsd xmm4, xmm4");
    if (? > ?) {
        goto label_7;
    }
label_4:
    __asm ("addsd xmm4, xmm1");
    __asm ("movapd xmm0, xmm4");
    sqrt ();
    rdi = rbp;
    xmm1 = 0;
    __asm ("divsd xmm0, qword [reloc.ang2rad]");
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    do {
label_0:
        rax = *((rsp + 0x48));
        rax ^= *(fs:0x28);
        if (? != ?) {
            goto label_8;
        }
        return rax;
label_5:
        xmm7 = *(loc..LC8);
        __asm ("movapd xmm4, xmm1");
        __asm ("movapd xmm6, xmm2");
        __asm ("mulsd xmm6, xmm2");
        __asm ("addsd xmm4, xmm7");
        __asm ("mulsd xmm4, xmm4");
        __asm ("addsd xmm4, xmm6");
        __asm ("ucomisd xmm3, xmm4");
        __asm ("movapd xmm5, xmm4");
        __asm ("sqrtsd xmm5, xmm5");
        if (? > ?) {
            goto label_9;
        }
        xmm8 = *(loc..LC17);
        __asm ("subsd xmm1, xmm7");
        __asm ("mulsd xmm5, xmm8");
        __asm ("mulsd xmm1, xmm1");
        __asm ("addsd xmm1, xmm6");
        __asm ("ucomisd xmm3, xmm1");
        __asm ("movapd xmm6, xmm1");
        __asm ("sqrtsd xmm6, xmm6");
        if (? > ?) {
            goto label_10;
        }
label_1:
        __asm ("mulsd xmm6, xmm8");
        __asm ("ucomisd xmm3, xmm4");
        __asm ("movapd xmm8, xmm5");
        __asm ("addsd xmm8, xmm6");
        if (? > ?) {
            goto label_11;
        }
label_2:
        __asm ("cmpltsd xmm2, xmm3");
        __asm ("subsd xmm5, xmm6");
        xmm1 = *(loc..LC16);
        *((rsp + 8)) = xmm8;
        __asm ("andpd xmm1, xmm2");
        __asm ("andnpd xmm2, xmm7");
        __asm ("movapd xmm0, xmm5");
        __asm ("orpd xmm1, xmm2");
        *(rsp) = xmm1;
        sqrt ();
        xmm8 = *((rsp + 8));
        xmm1 = *(rsp);
        xmm3 = 0;
        rax = *(loc..LC8);
        __asm ("mulsd xmm1, xmm0");
        __asm ("movapd xmm0, xmm8");
        __asm ("mulsd xmm0, xmm8");
        xmm7 = rax;
        __asm ("divsd xmm1, qword [reloc.ang2rad]");
        __asm ("subsd xmm0, xmm7");
        __asm ("ucomisd xmm3, xmm0");
        __asm ("movapd xmm2, xmm0");
        __asm ("sqrtsd xmm2, xmm2");
        if (? > ?) {
            goto label_12;
        }
label_3:
        __asm ("addsd xmm2, xmm8");
        *(rsp) = xmm1;
        __asm ("movapd xmm0, xmm2");
        sqrt ();
        xmm1 = *(rsp);
        rdi = rbp;
        __asm ("divsd xmm0, qword [reloc.ang2rad]");
        rax = sqrt ();
        rdi = rax;
        sqrt ();
    } while (1);
label_6:
    __asm ("movapd xmm0, xmm1");
    sqrt ();
    xmm3 = 0;
    rdi = rbp;
    __asm ("movapd xmm1, xmm0");
    __asm ("movapd xmm0, xmm3");
    __asm ("divsd xmm1, qword [reloc.ang2rad]");
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    goto label_0;
label_8:
    sqrt ();
label_9:
    __asm ("movapd xmm0, xmm4");
    *((rsp + 0x20)) = xmm2;
    *((rsp + 0x18)) = xmm1;
    *((rsp + 0x10)) = xmm5;
    *((rsp + 8)) = xmm6;
    *(rsp) = xmm4;
    sqrt ();
    rax = *(loc..LC8);
    xmm1 = *((rsp + 0x18));
    xmm3 = 0;
    xmm6 = *((rsp + 8));
    xmm5 = *((rsp + 0x10));
    xmm7 = rax;
    xmm4 = *(rsp);
    xmm8 = *(loc..LC17);
    __asm ("subsd xmm1, xmm7");
    xmm2 = *((rsp + 0x20));
    __asm ("mulsd xmm5, xmm8");
    __asm ("mulsd xmm1, xmm1");
    __asm ("addsd xmm1, xmm6");
    __asm ("ucomisd xmm3, xmm1");
    __asm ("sqrtsd xmm6, xmm1");
    if (? <= ?) {
        goto label_1;
    }
    __asm ("movapd xmm0, xmm1");
    *((rsp + 0x28)) = xmm8;
    *((rsp + 0x20)) = xmm5;
    *((rsp + 0x18)) = xmm2;
    *((rsp + 0x10)) = xmm6;
    *((rsp + 8)) = xmm4;
    *(rsp) = xmm1;
    sqrt ();
    xmm8 = *((rsp + 0x28));
    xmm6 = *((rsp + 0x10));
    xmm3 = 0;
    xmm4 = *((rsp + 8));
    xmm5 = *((rsp + 0x20));
    __asm ("mulsd xmm6, xmm8");
    xmm1 = *(rsp);
    xmm2 = *((rsp + 0x18));
    __asm ("ucomisd xmm3, xmm4");
    __asm ("movapd xmm8, xmm5");
    __asm ("addsd xmm8, xmm6");
    if (? <= ?) {
        goto label_13;
    }
    __asm ("movapd xmm0, xmm4");
    *((rsp + 0x20)) = xmm8;
    *((rsp + 0x18)) = xmm5;
    *((rsp + 0x10)) = xmm6;
    *((rsp + 8)) = xmm2;
    sqrt ();
    xmm1 = *(rsp);
    xmm3 = 0;
    rax = *(loc..LC8);
    xmm2 = *((rsp + 8));
    xmm6 = *((rsp + 0x10));
    __asm ("ucomisd xmm3, xmm1");
    xmm5 = *((rsp + 0x18));
    xmm7 = rax;
    xmm8 = *((rsp + 0x20));
    if (? <= ?) {
        goto label_2;
    }
    do {
label_13:
        __asm ("movapd xmm0, xmm1");
        *((rsp + 0x18)) = xmm8;
        *((rsp + 0x10)) = xmm5;
        *((rsp + 8)) = xmm6;
        *(rsp) = xmm2;
        sqrt ();
        rax = *(loc..LC8);
        xmm2 = *(rsp);
        xmm3 = 0;
        xmm8 = *((rsp + 0x18));
        xmm5 = *((rsp + 0x10));
        xmm6 = *((rsp + 8));
        xmm7 = rax;
        goto label_2;
label_10:
        __asm ("movapd xmm0, xmm1");
        *((rsp + 0x20)) = xmm8;
        *((rsp + 0x18)) = xmm5;
        *((rsp + 0x10)) = xmm2;
        *((rsp + 8)) = xmm6;
        *(rsp) = xmm1;
        sqrt ();
        xmm6 = *((rsp + 8));
        xmm5 = *((rsp + 0x18));
        xmm8 = *((rsp + 0x20));
        xmm1 = *(rsp);
        xmm2 = *((rsp + 0x10));
        __asm ("mulsd xmm6, xmm8");
        __asm ("movapd xmm8, xmm6");
        __asm ("addsd xmm8, xmm5");
    } while (1);
label_11:
    __asm ("movapd xmm0, xmm4");
    *((rsp + 0x18)) = xmm8;
    *((rsp + 0x10)) = xmm5;
    *((rsp + 8)) = xmm6;
    *(rsp) = xmm2;
    sqrt ();
    rax = *(loc..LC8);
    xmm2 = *(rsp);
    xmm3 = 0;
    xmm6 = *((rsp + 8));
    xmm5 = *((rsp + 0x10));
    xmm8 = *((rsp + 0x18));
    xmm7 = rax;
    goto label_2;
label_12:
    *((rsp + 0x10)) = xmm8;
    *((rsp + 8)) = xmm2;
    *(rsp) = xmm1;
    sqrt ();
    xmm2 = *((rsp + 8));
    xmm1 = *(rsp);
    xmm8 = *((rsp + 0x10));
    goto label_3;
label_7:
    __asm ("movapd xmm0, xmm2");
    *((rsp + 8)) = xmm1;
    *(rsp) = xmm4;
    sqrt ();
    xmm1 = *((rsp + 8));
    xmm4 = *(rsp);
    goto label_4;
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/standard.o @ 0x8002350 */
#include <stdint.h>
 
int64_t f_atanh (int64_t arg7, int64_t arg3) {
    int64_t var_8h_2;
    int64_t var_10h_2;
    int64_t var_18h_3;
    int64_t var_20h_2;
    int64_t var_28h_2;
    int64_t var_30h_2;
    int64_t var_38h;
    int64_t var_40h;
    int64_t var_48h_2;
    int64_t var_50h;
    int64_t var_68h;
    int64_t var_18h_2;
    int64_t var_8h;
    int64_t var_10h;
    int64_t var_18h;
    int64_t var_20h;
    int64_t var_28h;
    int64_t var_30h;
    int64_t var_48h;
    xmm0 = arg7;
    rdx = arg3;
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x48)) = rax;
    eax = 0;
    rbp = rsp + 0x30;
    rdi = rbp;
    sqrt ();
    rdi = rbp;
    sqrt ();
    rdi = rbp;
    __asm ("movapd xmm1, xmm0");
    __asm ("xorpd xmm1, xmmword [loc..LC10]");
    *((rsp + 0x10)) = xmm0;
    *((rsp + 8)) = xmm1;
    sqrt ();
    xmm4 = 0;
    xmm1 = *((rsp + 8));
    xmm3 = *((rsp + 0x10));
    __asm ("ucomisd xmm0, xmm4");
    __asm ("movapd xmm2, xmm0");
    __asm ("jnp 0x8002500");
    while (? != ?) {
        __asm ("ucomisd xmm3, xmm4");
        __asm ("jp 0x80023f0");
        if (? == ?) {
            xmm5 = *(loc..LC8);
            __asm ("movapd xmm0, xmm2");
            __asm ("andpd xmm0, xmmword [loc..LC3]");
            __asm ("comisd xmm0, xmm5");
            if (? < ?) {
                goto label_6;
            }
            *(reloc.undefined) = 1;
            __asm ("movapd xmm1, xmm4");
            goto label_7;
        }
        __asm ("comisd xmm4, xmm3");
        if (? < ?) {
            __asm ("xorpd xmm2, xmmword [loc..LC10]");
            __asm ("movapd xmm1, xmm3");
        }
        xmm5 = *(loc..LC8);
label_6:
        __asm ("movapd xmm6, xmm1");
        __asm ("movapd xmm7, xmm2");
        __asm ("movapd xmm0, xmm5");
        *((rsp + 0x28)) = xmm3;
        __asm ("mulsd xmm6, xmm1");
        __asm ("addsd xmm1, xmm1");
        *((rsp + 0x20)) = xmm5;
        __asm ("mulsd xmm7, xmm2");
        *((rsp + 0x10)) = xmm2;
        __asm ("subsd xmm0, xmm6");
        *((rsp + 0x18)) = xmm6;
        __asm ("subsd xmm0, xmm7");
        __asm ("divsd xmm1, xmm0");
        __asm ("movapd xmm0, xmm1");
        sqrt ();
        xmm2 = *((rsp + 0x10));
        xmm5 = *((rsp + 0x20));
        *((rsp + 8)) = xmm0;
        xmm6 = *((rsp + 0x18));
        __asm ("movapd xmm0, xmm2");
        __asm ("subsd xmm2, xmm5");
        __asm ("addsd xmm0, xmm5");
        __asm ("mulsd xmm2, xmm2");
        __asm ("mulsd xmm0, xmm0");
        __asm ("addsd xmm2, xmm6");
        __asm ("addsd xmm0, xmm6");
        __asm ("divsd xmm0, xmm2");
        sqrt ();
        xmm1 = *((rsp + 8));
        xmm4 = 0;
        xmm3 = *((rsp + 0x28));
        __asm ("mulsd xmm0, qword [loc..LC1]");
        __asm ("comisd xmm4, xmm1");
        if (? > ?) {
            __asm ("addsd xmm1, qword [loc..LC18]");
        }
        __asm ("comisd xmm3, xmm4");
        if (? > ?) {
            __asm ("xorpd xmm1, xmmword [loc..LC10]");
            __asm ("xorpd xmm0, xmmword [loc..LC10]");
        }
        __asm ("mulsd xmm1, qword [loc..LC20]");
        rdi = rbp;
        __asm ("divsd xmm1, qword [reloc.ang2rad]");
        rax = sqrt ();
        rdi = rax;
        sqrt ();
label_0:
        rax = *((rsp + 0x48));
        rax ^= *(fs:0x28);
        if (? != ?) {
            goto label_8;
        }
        return rax;
    }
    __asm ("movapd xmm0, xmm1");
    sqrt ();
    xmm4 = 0;
    __asm ("movapd xmm1, xmm0");
    __asm ("xorpd xmm1, xmmword [loc..LC10]");
    __asm ("divsd xmm1, qword [reloc.ang2rad]");
label_7:
    rdi = rbp;
    __asm ("movapd xmm0, xmm4");
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    goto label_0;
label_8:
    rax = sqrt ();
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x18)) = rax;
    eax = 0;
    rdi = rsp;
    sqrt ();
    rdi = rbp;
    sqrt ();
    __asm ("andpd xmm0, xmmword [loc..LC3]");
    __asm ("comisd xmm0, xmmword [reloc.zero]");
    if (? > ?) {
        goto label_9;
    }
    rdi = rbp;
    sqrt ();
    xmm2 = *(loc..LC8);
    xmm3 = 0;
    __asm ("movapd xmm1, xmm2");
    __asm ("subsd xmm1, xmm0");
    __asm ("addsd xmm0, xmm2");
    __asm ("mulsd xmm1, xmm0");
    __asm ("comisd xmm1, xmm3");
    if (? <= ?) {
        goto label_10;
    }
    __asm ("movapd xmm0, xmm3");
    _text ();
    xmm3 = 0;
    rdi = rbp;
    __asm ("movapd xmm1, xmm3");
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    do {
        rax = *((rsp + 0x18));
        rax ^= *(fs:0x28);
        if (? != ?) {
            goto label_11;
        }
        return rax;
label_10:
        rdi = rbp;
        eax = sqrt ();
        *(reloc.undefined) = 1;
    } while (1);
label_9:
    rsi = "can only do elliptic integrals of reals";
    edi |= 0xffffffff;
    eax = 0;
    sqrt ();
label_11:
    sqrt ();
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x68)) = rax;
    eax = 0;
    rbp = rsp + 0x50;
    rdi = rbp;
    sqrt ();
    rdi = rbp;
    sqrt ();
    xmm8 = .rodata.cst16;
    __asm ("andpd xmm0, xmm8");
    __asm ("comisd xmm0, xmmword [reloc.zero]");
    if (edi > 0) {
        goto label_12;
    }
    rdi = rbp;
    sqrt ();
    xmm2 = *(loc..LC8);
    xmm6 = 0;
    __asm ("movapd xmm12, xmm0");
    __asm ("movapd xmm1, xmm12");
    __asm ("movapd xmm0, xmm2");
    *(rsp) = xmm12;
    __asm ("subsd xmm0, xmm12");
    __asm ("addsd xmm1, xmm2");
    __asm ("mulsd xmm1, xmm0");
    __asm ("comisd xmm1, xmm6");
    if (edi > 0) {
        goto label_13;
    }
    __asm ("comisd xmm6, xmm1");
    if (edi > 0) {
        goto label_14;
    }
    rdi = rbp;
    __asm ("movapd xmm1, xmm6");
    __asm ("movapd xmm0, xmm2");
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    do {
label_2:
        rax = *((rsp + 0x68));
        rax ^= *(fs:0x28);
        if (edi != 0) {
            goto label_15;
        }
        return rax;
label_14:
        rdi = rbp;
        *(reloc.undefined) = 1;
        sqrt ();
    } while (1);
label_13:
    __asm ("movapd xmm0, xmm6");
    *((rsp + 0x10)) = xmm1;
    _text ();
    xmm12 = *(rsp);
    xmm6 = 0;
    rax = *(loc..LC8);
    xmm1 = *((rsp + 0x10));
    *((rsp + 8)) = xmm0;
    __asm ("movapd xmm7, xmm6");
    xmm10 = *(loc..LC1);
    __asm ("mulsd xmm12, xmm12");
    xmm2 = rax;
    xmm14 = *(loc..LC22);
    xmm13 = *(loc..LC24);
    xmm11 = rax;
    xmm4 = rax;
    __asm ("movapd xmm5, xmm6");
    xmm8 = .rodata.cst16;
    *(rsp) = xmm12;
    __asm ("movapd xmm12, xmm6");
    while (edi > 0) {
label_1:
        __asm ("ucomisd xmm6, xmm5");
        __asm ("movapd xmm7, xmm5");
        __asm ("sqrtsd xmm7, xmm7");
        if (edi > 0) {
            goto label_16;
        }
label_5:
        __asm ("ucomisd xmm6, xmm1");
        __asm ("movapd xmm15, xmm1");
        __asm ("sqrtsd xmm15, xmm15");
        if (edi > 0) {
            goto label_17;
        }
label_3:
        __asm ("ucomisd xmm6, xmm4");
        __asm ("movapd xmm9, xmm4");
        __asm ("sqrtsd xmm9, xmm9");
        if (edi > 0) {
            goto label_18;
        }
label_4:
        __asm ("movapd xmm3, xmm15");
        __asm ("movapd xmm0, xmm15");
        __asm ("addsd xmm3, xmm9");
        __asm ("mulsd xmm0, xmm9");
        __asm ("mulsd xmm3, xmm7");
        __asm ("movapd xmm7, xmm3");
        __asm ("movapd xmm3, xmm11");
        __asm ("addsd xmm7, xmm0");
        __asm ("mulsd xmm11, xmm10");
        __asm ("movapd xmm0, xmm9");
        __asm ("addsd xmm4, xmm7");
        __asm ("addsd xmm5, xmm7");
        __asm ("addsd xmm7, xmm1");
        __asm ("mulsd xmm0, xmm4");
        __asm ("mulsd xmm4, xmm10");
        __asm ("movapd xmm1, xmm7");
        __asm ("mulsd xmm5, xmm10");
        __asm ("mulsd xmm1, xmm10");
        __asm ("divsd xmm3, xmm0");
        __asm ("movapd xmm0, xmm4");
        __asm ("mulsd xmm0, xmm14");
        __asm ("addsd xmm12, xmm3");
        __asm ("movapd xmm3, xmm5");
        __asm ("addsd xmm3, xmm1");
        __asm ("addsd xmm3, xmm0");
        __asm ("mulsd xmm3, qword [loc..LC23]");
        __asm ("movapd xmm9, xmm3");
        __asm ("subsd xmm9, xmm5");
        __asm ("divsd xmm9, xmm3");
        __asm ("movapd xmm0, xmm9");
        __asm ("andpd xmm0, xmm8");
        __asm ("comisd xmm0, xmm13");
    }
    __asm ("movapd xmm7, xmm3");
    __asm ("subsd xmm7, xmm1");
    __asm ("divsd xmm7, xmm3");
    __asm ("movapd xmm0, xmm7");
    __asm ("andpd xmm0, xmm8");
    __asm ("comisd xmm0, xmm13");
    if (edi > 0) {
        goto label_1;
    }
    __asm ("movapd xmm0, xmm3");
    __asm ("subsd xmm0, xmm4");
    __asm ("divsd xmm0, xmm3");
    __asm ("movapd xmm15, xmm0");
    __asm ("andpd xmm15, xmm8");
    __asm ("comisd xmm15, xmm13");
    if (edi > 0) {
        goto label_1;
    }
    __asm ("mulsd xmm7, xmm9");
    __asm ("ucomisd xmm6, xmm3");
    __asm ("movapd xmm5, xmm0");
    __asm ("mulsd xmm5, xmm0");
    __asm ("mulsd xmm12, xmm14");
    __asm ("movapd xmm4, xmm7");
    __asm ("movapd xmm1, xmm7");
    __asm ("subsd xmm4, xmm5");
    __asm ("mulsd xmm5, qword [loc..LC25]");
    __asm ("movapd xmm8, xmm4");
    __asm ("subsd xmm1, xmm5");
    __asm ("movapd xmm5, xmm1");
    __asm ("addsd xmm8, xmm1");
    xmm1 = *(loc..LC26);
    __asm ("mulsd xmm1, xmm0");
    __asm ("addsd xmm8, xmm4");
    __asm ("mulsd xmm4, qword [loc..LC27]");
    __asm ("mulsd xmm1, xmm7");
    xmm7 = *(loc..LC28);
    __asm ("mulsd xmm7, xmm8");
    __asm ("addsd xmm1, xmm4");
    xmm4 = *(loc..LC29);
    __asm ("mulsd xmm4, xmm5");
    __asm ("mulsd xmm1, xmm0");
    __asm ("subsd xmm4, qword [loc..LC30]");
    __asm ("addsd xmm1, xmm7");
    __asm ("mulsd xmm1, xmm0");
    __asm ("mulsd xmm0, qword [loc..LC31]");
    __asm ("mulsd xmm0, xmm8");
    __asm ("subsd xmm4, xmm0");
    __asm ("movapd xmm0, xmm4");
    __asm ("mulsd xmm0, xmm5");
    __asm ("addsd xmm2, xmm0");
    __asm ("addsd xmm1, xmm2");
    __asm ("mulsd xmm11, xmm1");
    __asm ("movapd xmm1, xmm3");
    __asm ("sqrtsd xmm1, xmm1");
    while (1) {
        __asm ("mulsd xmm3, xmm1");
        xmm0 = *((rsp + 8));
        rdi = rbp;
        xmm1 = 0;
        __asm ("divsd xmm11, xmm3");
        __asm ("addsd xmm11, xmm12");
        __asm ("mulsd xmm11, qword [rsp]");
        __asm ("divsd xmm11, xmm14");
        __asm ("subsd xmm0, xmm11");
        rax = sqrt ();
        rdi = rax;
        sqrt ();
        goto label_2;
label_17:
        __asm ("movapd xmm0, xmm1");
        *((rsp + 0x40)) = xmm4;
        *((rsp + 0x38)) = xmm5;
        *((rsp + 0x30)) = xmm11;
        *((rsp + 0x28)) = xmm12;
        *((rsp + 0x20)) = xmm7;
        *((rsp + 0x18)) = xmm15;
        *((rsp + 0x10)) = xmm1;
        sqrt ();
        rax = *(loc..LC8);
        xmm6 = 0;
        xmm4 = *((rsp + 0x40));
        xmm5 = *((rsp + 0x38));
        xmm11 = *((rsp + 0x30));
        xmm2 = rax;
        rax = *(loc..LC1);
        xmm12 = *((rsp + 0x28));
        xmm7 = *((rsp + 0x20));
        xmm15 = *((rsp + 0x18));
        xmm10 = rax;
        rax = *(loc..LC24);
        xmm8 = .rodata.cst16;
        xmm1 = *((rsp + 0x10));
        xmm13 = rax;
        rax = *(loc..LC22);
        xmm14 = rax;
        goto label_3;
label_18:
        __asm ("movapd xmm0, xmm4");
        *((rsp + 0x48)) = xmm1;
        *((rsp + 0x40)) = xmm5;
        *((rsp + 0x38)) = xmm11;
        *((rsp + 0x30)) = xmm12;
        *((rsp + 0x28)) = xmm7;
        *((rsp + 0x20)) = xmm9;
        *((rsp + 0x18)) = xmm15;
        *((rsp + 0x10)) = xmm4;
        sqrt ();
        rax = *(loc..LC8);
        xmm6 = 0;
        xmm1 = *((rsp + 0x48));
        xmm5 = *((rsp + 0x40));
        xmm11 = *((rsp + 0x38));
        xmm2 = rax;
        rax = *(loc..LC1);
        xmm12 = *((rsp + 0x30));
        xmm7 = *((rsp + 0x28));
        xmm9 = *((rsp + 0x20));
        xmm10 = rax;
        rax = *(loc..LC24);
        xmm8 = .rodata.cst16;
        xmm15 = *((rsp + 0x18));
        xmm4 = *((rsp + 0x10));
        xmm13 = rax;
        rax = *(loc..LC22);
        xmm14 = rax;
        goto label_4;
label_16:
        __asm ("movapd xmm0, xmm5");
        *((rsp + 0x38)) = xmm4;
        *((rsp + 0x30)) = xmm1;
        *((rsp + 0x28)) = xmm11;
        *((rsp + 0x20)) = xmm12;
        *((rsp + 0x18)) = xmm7;
        *((rsp + 0x10)) = xmm5;
        sqrt ();
        rax = *(loc..LC8);
        xmm6 = 0;
        xmm4 = *((rsp + 0x38));
        xmm1 = *((rsp + 0x30));
        xmm11 = *((rsp + 0x28));
        xmm2 = rax;
        rax = *(loc..LC1);
        xmm12 = *((rsp + 0x20));
        xmm7 = *((rsp + 0x18));
        xmm5 = *((rsp + 0x10));
        xmm8 = .rodata.cst16;
        xmm10 = rax;
        rax = *(loc..LC24);
        xmm13 = rax;
        rax = *(loc..LC22);
        xmm14 = rax;
        goto label_5;
label_12:
        rsi = "can only do elliptic integrals of reals";
        edi |= 0xffffffff;
        eax = 0;
        sqrt ();
label_15:
        sqrt ();
        __asm ("movapd xmm0, xmm3");
        *((rsp + 0x28)) = xmm1;
        *((rsp + 0x20)) = xmm11;
        *((rsp + 0x18)) = xmm12;
        *((rsp + 0x10)) = xmm3;
        sqrt ();
        rax = *(loc..LC22);
        xmm1 = *((rsp + 0x28));
        xmm11 = *((rsp + 0x20));
        xmm12 = *((rsp + 0x18));
        xmm3 = *((rsp + 0x10));
        xmm14 = rax;
    }
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/standard.o @ 0x8002be0 */
#include <stdint.h>
 
int64_t f_ellip_third (int64_t arg11, int64_t arg10, int64_t arg7, int64_t arg3) {
    int64_t var_8h;
    int64_t var_10h;
    int64_t var_18h;
    int64_t var_20h;
    int64_t var_28h;
    int64_t var_30h;
    int64_t var_38h;
    int64_t var_40h;
    int64_t var_48h;
    int64_t var_50h;
    int64_t var_58h;
    int64_t var_60h;
    int64_t var_68h;
    int64_t var_70h;
    int64_t var_78h;
    int64_t var_80h;
    int64_t var_a0h;
    int64_t var_b8h;
    xmm4 = arg11;
    xmm3 = arg10;
    xmm0 = arg7;
    rdx = arg3;
    __asm ("endbr64");
    rbp = rsp + 0x80;
    r12 = rsp + 0xa0;
    rax = *(fs:0x28);
    *((rsp + 0xb8)) = rax;
    eax = 0;
    rdi = rbp;
    sqrt (rbp);
    rdi = r12;
    sqrt ();
    rdi = rbp;
    sqrt ();
    __asm ("andpd xmm0, xmmword [loc..LC3]");
    __asm ("comisd xmm0, xmmword [reloc.zero]");
    if (? > ?) {
        goto label_8;
    }
    rdi = r12;
    sqrt ();
    __asm ("andpd xmm0, xmmword [loc..LC3]");
    __asm ("comisd xmm0, xmmword [reloc.zero]");
    if (? > ?) {
        goto label_8;
    }
    rdi = rbp;
    sqrt ();
    rdi = r12;
    *((rsp + 8)) = xmm0;
    sqrt ();
    xmm1 = *((rsp + 8));
    xmm5 = 0;
    xmm3 = *(loc..LC8);
    *((rsp + 0x40)) = xmm0;
    __asm ("subsd xmm3, xmm1");
    __asm ("addsd xmm1, qword [loc..LC8]");
    __asm ("mulsd xmm3, xmm1");
    __asm ("comisd xmm3, xmm5");
    if (? > ?) {
        xmm7 = *(loc..LC8);
        __asm ("comisd xmm7, xmm0");
        if (? > ?) {
            goto label_9;
        }
    }
    rdi = rbp;
    *(reloc.undefined) = 1;
    sqrt ();
label_1:
    rax = *((rsp + 0xb8));
    rax ^= *(fs:0x28);
    if (? != ?) {
        goto label_10;
    }
    return rax;
label_9:
    __asm ("movapd xmm2, xmm7");
    __asm ("movapd xmm1, xmm3");
    __asm ("movapd xmm0, xmm5");
    *((rsp + 8)) = xmm3;
    _text ();
    xmm5 = 0;
    xmm7 = *(loc..LC8);
    __asm ("subsd xmm7, qword [rsp + 0x40]");
    xmm3 = *((rsp + 8));
    *((rsp + 0x50)) = xmm0;
    __asm ("comisd xmm7, xmm5");
    *((rsp + 0x48)) = xmm7;
    if (? <= ?) {
        goto label_11;
    }
    rax = *(loc..LC8);
    xmm9 = *((rsp + 0x48));
    *((rsp + 0x68)) = xmm5;
    *((rsp + 0x60)) = xmm5;
    xmm2 = rax;
    *((rsp + 0x58)) = xmm5;
label_2:
    rax = *(loc..LC8);
    __asm ("movapd xmm8, xmm5");
    __asm ("movapd xmm6, xmm5");
    __asm ("movapd xmm4, xmm5");
    xmm7 = rax;
    while (? > ?) {
label_0:
        __asm ("ucomisd xmm5, xmm4");
        __asm ("movapd xmm6, xmm4");
        __asm ("sqrtsd xmm6, xmm6");
        if (? > ?) {
            goto label_12;
        }
label_4:
        __asm ("ucomisd xmm5, xmm3");
        __asm ("movapd xmm1, xmm3");
        __asm ("sqrtsd xmm1, xmm1");
        if (? > ?) {
            goto label_13;
        }
label_6:
        __asm ("ucomisd xmm5, xmm2");
        __asm ("movapd xmm13, xmm2");
        __asm ("sqrtsd xmm13, xmm13");
        if (? > ?) {
            goto label_14;
        }
label_5:
        __asm ("movapd xmm12, xmm1");
        __asm ("movapd xmm0, xmm1");
        *((rsp + 0x38)) = xmm2;
        __asm ("addsd xmm12, xmm13");
        __asm ("mulsd xmm0, xmm13");
        *((rsp + 0x30)) = xmm3;
        *((rsp + 0x28)) = xmm7;
        *((rsp + 0x20)) = xmm8;
        __asm ("mulsd xmm12, xmm6");
        *((rsp + 0x18)) = xmm4;
        __asm ("addsd xmm12, xmm0");
        __asm ("movapd xmm0, xmm6");
        __asm ("addsd xmm0, xmm1");
        __asm ("mulsd xmm1, xmm6");
        __asm ("movapd xmm6, xmm12");
        *((rsp + 0x10)) = xmm12;
        __asm ("addsd xmm0, xmm13");
        __asm ("addsd xmm6, xmm9");
        __asm ("mulsd xmm13, xmm1");
        __asm ("mulsd xmm0, xmm9");
        __asm ("movapd xmm1, xmm6");
        *((rsp + 8)) = xmm6;
        __asm ("mulsd xmm1, xmm6");
        __asm ("addsd xmm0, xmm13");
        __asm ("mulsd xmm1, xmm9");
        __asm ("mulsd xmm0, xmm0");
        carlson_elliptic_rc ();
        xmm12 = *((rsp + 0x10));
        xmm5 = 0;
        xmm4 = *((rsp + 0x18));
        xmm3 = *((rsp + 0x30));
        rax = *(loc..LC1);
        __asm ("addsd xmm4, xmm12");
        xmm6 = *((rsp + 8));
        xmm2 = *((rsp + 0x38));
        __asm ("addsd xmm3, xmm12");
        xmm10 = rax;
        xmm7 = *((rsp + 0x28));
        xmm8 = *((rsp + 0x20));
        __asm ("mulsd xmm6, xmm10");
        __asm ("addsd xmm2, xmm12");
        rax = *(loc..LC24);
        __asm ("mulsd xmm4, xmm10");
        __asm ("mulsd xmm3, xmm10");
        xmm11 = rax;
        __asm ("mulsd xmm2, xmm10");
        __asm ("mulsd xmm0, xmm7");
        __asm ("mulsd xmm7, xmm10");
        __asm ("movapd xmm9, xmm6");
        __asm ("movapd xmm6, xmm4");
        __asm ("addsd xmm6, xmm3");
        __asm ("addsd xmm8, xmm0");
        __asm ("addsd xmm6, xmm2");
        __asm ("addsd xmm6, xmm9");
        __asm ("addsd xmm6, xmm9");
        __asm ("mulsd xmm6, qword [loc..LC23]");
        __asm ("movapd xmm12, xmm6");
        __asm ("subsd xmm12, xmm4");
        __asm ("divsd xmm12, xmm6");
        __asm ("movapd xmm0, xmm12");
        __asm ("andpd xmm0, xmmword [loc..LC3]");
        __asm ("comisd xmm0, xmm11");
    }
    __asm ("movapd xmm14, xmm6");
    __asm ("subsd xmm14, xmm3");
    __asm ("divsd xmm14, xmm6");
    __asm ("movapd xmm0, xmm14");
    __asm ("andpd xmm0, xmmword [loc..LC3]");
    __asm ("comisd xmm0, xmm11");
    if (? > ?) {
        goto label_0;
    }
    __asm ("movapd xmm13, xmm6");
    __asm ("subsd xmm13, xmm2");
    __asm ("divsd xmm13, xmm6");
    __asm ("movapd xmm0, xmm13");
    __asm ("andpd xmm0, xmmword [loc..LC3]");
    __asm ("comisd xmm0, xmm11");
    if (? > ?) {
        goto label_0;
    }
    __asm ("movapd xmm0, xmm6");
    __asm ("subsd xmm0, xmm9");
    __asm ("divsd xmm0, xmm6");
    __asm ("movapd xmm1, xmm0");
    __asm ("andpd xmm1, xmmword [loc..LC3]");
    __asm ("comisd xmm1, xmm11");
    if (? > ?) {
        goto label_0;
    }
    __asm ("movapd xmm9, xmm14");
    __asm ("movapd xmm1, xmm6");
    __asm ("movapd xmm6, xmm14");
    __asm ("addsd xmm9, xmm13");
    __asm ("mulsd xmm6, xmm13");
    __asm ("movapd xmm11, xmm0");
    __asm ("addsd xmm11, xmm0");
    __asm ("ucomisd xmm5, xmm1");
    __asm ("mulsd xmm9, xmm12");
    __asm ("addsd xmm9, xmm6");
    __asm ("movapd xmm6, xmm12");
    xmm12 = *(loc..LC22);
    __asm ("mulsd xmm6, xmm14");
    __asm ("mulsd xmm8, xmm12");
    __asm ("movapd xmm15, xmm9");
    __asm ("movapd xmm14, xmm9");
    __asm ("mulsd xmm9, xmm0");
    __asm ("mulsd xmm6, xmm13");
    __asm ("movapd xmm13, xmm0");
    __asm ("mulsd xmm13, xmm0");
    __asm ("subsd xmm15, xmm13");
    __asm ("movapd xmm10, xmm13");
    __asm ("mulsd xmm10, xmm12");
    __asm ("mulsd xmm11, xmm15");
    __asm ("subsd xmm14, xmm10");
    xmm10 = *(loc..LC32);
    __asm ("addsd xmm11, xmm6");
    __asm ("mulsd xmm11, qword [loc..LC31]");
    __asm ("mulsd xmm10, xmm14");
    __asm ("subsd xmm10, qword [loc..LC30]");
    __asm ("subsd xmm10, xmm11");
    xmm11 = *(loc..LC26);
    __asm ("mulsd xmm11, xmm0");
    __asm ("subsd xmm11, qword [loc..LC33]");
    __asm ("mulsd xmm14, xmm10");
    xmm10 = *(loc..LC2);
    __asm ("addsd xmm14, qword [loc..LC8]");
    __asm ("mulsd xmm11, xmm0");
    __asm ("addsd xmm11, qword [loc..LC28]");
    __asm ("mulsd xmm6, xmm11");
    xmm11 = *(loc..LC34);
    __asm ("mulsd xmm11, xmm0");
    __asm ("mulsd xmm0, xmm10");
    __asm ("addsd xmm6, xmm14");
    __asm ("movapd xmm14, xmm10");
    __asm ("subsd xmm14, xmm11");
    __asm ("mulsd xmm13, xmm0");
    __asm ("mulsd xmm9, xmm14");
    __asm ("addsd xmm6, xmm9");
    __asm ("subsd xmm6, xmm13");
    __asm ("mulsd xmm7, xmm6");
    __asm ("movapd xmm6, xmm1");
    __asm ("sqrtsd xmm6, xmm6");
    if (? > ?) {
        goto label_15;
    }
label_7:
    __asm ("mulsd xmm1, xmm6");
    __asm ("comisd xmm5, xmmword [rsp + 0x48]");
    __asm ("divsd xmm7, xmm1");
    __asm ("movapd xmm0, xmm7");
    __asm ("addsd xmm0, xmm8");
    if (? >= ?) {
        goto label_16;
    }
label_3:
    __asm ("mulsd xmm0, qword [rsp + 0x40]");
    rdi = r12;
    xmm1 = 0;
    __asm ("divsd xmm0, xmm12");
    __asm ("addsd xmm0, qword [rsp + 0x50]");
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    goto label_1;
label_11:
    __asm ("comisd xmm5, xmm3");
    if (? > ?) {
        goto label_17;
    }
    __asm ("comisd xmm3, xmmword [loc..LC8]");
    if (? <= ?) {
        goto label_17;
    }
    __asm ("movapd xmm0, xmm3");
    __asm ("movapd xmm2, xmm3");
    __asm ("mulsd xmm0, xmm5");
    do {
        __asm ("addsd xmm3, xmm5");
        xmm7 = *((rsp + 0x48));
        *((rsp + 0x18)) = xmm2;
        __asm ("addsd xmm3, qword [loc..LC8]");
        xmm5 = *(loc..LC8);
        __asm ("subsd xmm3, xmm2");
        __asm ("divsd xmm0, xmm3");
        __asm ("movapd xmm1, xmm3");
        *((rsp + 8)) = xmm3;
        __asm ("subsd xmm1, xmm7");
        __asm ("divsd xmm5, xmm1");
        __asm ("movapd xmm1, xmm2");
        __asm ("subsd xmm1, xmm3");
        __asm ("mulsd xmm1, xmm5");
        *((rsp + 0x58)) = xmm5;
        __asm ("mulsd xmm1, xmm3");
        __asm ("movapd xmm9, xmm1");
        *((rsp + 0x60)) = xmm1;
        __asm ("addsd xmm9, xmm3");
        __asm ("mulsd xmm7, xmm9");
        *((rsp + 0x10)) = xmm9;
        __asm ("movapd xmm1, xmm7");
        __asm ("divsd xmm1, xmm3");
        carlson_elliptic_rc ();
        xmm3 = *((rsp + 8));
        xmm9 = *((rsp + 0x10));
        xmm5 = 0;
        xmm2 = *((rsp + 0x18));
        *((rsp + 0x68)) = xmm0;
        goto label_2;
label_17:
        rax = *(loc..LC8);
        __asm ("movapd xmm0, xmm5");
        xmm2 = rax;
    } while (1);
label_16:
    __asm ("mulsd xmm0, qword [rsp + 0x60]");
    __asm ("movapd xmm1, xmm3");
    *((rsp + 8)) = xmm0;
    __asm ("movapd xmm0, xmm4");
    _text ();
    xmm5 = *((rsp + 0x68));
    rax = *(loc..LC22);
    __asm ("subsd xmm5, xmm0");
    xmm12 = rax;
    __asm ("movapd xmm0, xmm5");
    __asm ("mulsd xmm0, xmm12");
    __asm ("addsd xmm0, qword [rsp + 8]");
    __asm ("mulsd xmm0, qword [rsp + 0x58]");
    goto label_3;
label_12:
    __asm ("movapd xmm0, xmm4");
    *((rsp + 0x38)) = xmm9;
    *((rsp + 0x30)) = xmm2;
    *((rsp + 0x28)) = xmm3;
    *((rsp + 0x20)) = xmm7;
    *((rsp + 0x18)) = xmm8;
    *((rsp + 0x10)) = xmm6;
    *((rsp + 8)) = xmm4;
    sqrt ();
    xmm9 = *((rsp + 0x38));
    xmm5 = 0;
    xmm2 = *((rsp + 0x30));
    xmm3 = *((rsp + 0x28));
    xmm7 = *((rsp + 0x20));
    xmm8 = *((rsp + 0x18));
    xmm6 = *((rsp + 0x10));
    xmm4 = *((rsp + 8));
    goto label_4;
label_14:
    __asm ("movapd xmm0, xmm2");
    *((rsp + 0x78)) = xmm9;
    *((rsp + 0x70)) = xmm3;
    *((rsp + 0x38)) = xmm7;
    *((rsp + 0x30)) = xmm8;
    *((rsp + 0x28)) = xmm6;
    *((rsp + 0x20)) = xmm4;
    *((rsp + 0x18)) = xmm13;
    *((rsp + 0x10)) = xmm1;
    *((rsp + 8)) = xmm2;
    sqrt ();
    xmm9 = *((rsp + 0x78));
    xmm3 = *((rsp + 0x70));
    xmm7 = *((rsp + 0x38));
    xmm8 = *((rsp + 0x30));
    xmm6 = *((rsp + 0x28));
    xmm4 = *((rsp + 0x20));
    xmm13 = *((rsp + 0x18));
    xmm1 = *((rsp + 0x10));
    xmm2 = *((rsp + 8));
    goto label_5;
label_13:
    __asm ("movapd xmm0, xmm3");
    *((rsp + 0x70)) = xmm9;
    *((rsp + 0x38)) = xmm2;
    *((rsp + 0x30)) = xmm7;
    *((rsp + 0x28)) = xmm8;
    *((rsp + 0x20)) = xmm6;
    *((rsp + 0x18)) = xmm4;
    *((rsp + 0x10)) = xmm1;
    *((rsp + 8)) = xmm3;
    eax = sqrt ();
    xmm9 = *((rsp + 0x70));
    xmm5 = 0;
    xmm2 = *((rsp + 0x38));
    xmm7 = *((rsp + 0x30));
    xmm8 = *((rsp + 0x28));
    xmm6 = *((rsp + 0x20));
    xmm4 = *((rsp + 0x18));
    xmm1 = *((rsp + 0x10));
    xmm3 = *((rsp + 8));
    goto label_6;
label_8:
    rsi = "can only do elliptic integrals of reals";
    edi |= 0xffffffff;
    eax = 0;
    sqrt ();
label_10:
    sqrt ();
label_15:
    __asm ("movapd xmm0, xmm1");
    *((rsp + 0x38)) = xmm6;
    *((rsp + 0x30)) = xmm7;
    *((rsp + 0x28)) = xmm8;
    *((rsp + 0x20)) = xmm2;
    *((rsp + 0x18)) = xmm3;
    *((rsp + 0x10)) = xmm4;
    *((rsp + 8)) = xmm1;
    sqrt ();
    rax = *(loc..LC22);
    xmm5 = 0;
    xmm6 = *((rsp + 0x38));
    xmm7 = *((rsp + 0x30));
    xmm8 = *((rsp + 0x28));
    xmm2 = *((rsp + 0x20));
    xmm3 = *((rsp + 0x18));
    xmm12 = rax;
    xmm4 = *((rsp + 0x10));
    xmm1 = *((rsp + 8));
    goto label_7;
}




/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/standard.o @ 0x8003d90 */
#include <stdint.h>
 
int64_t f_besi1 (int64_t arg7) {
    int64_t var_8h;
    int64_t var_10h;
    int64_t var_18h;
    int64_t var_20h;
    int64_t var_38h;
    xmm0 = arg7;
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x38)) = rax;
    eax = 0;
    rbp = rsp + 0x20;
    rdi = rbp;
    sqrt ();
    rdi = rbp;
    sqrt ();
    xmm2 = .rodata.cst16;
    __asm ("andpd xmm0, xmm2");
    __asm ("comisd xmm0, xmmword [reloc.zero]");
    if (? > ?) {
        goto label_1;
    }
    rdi = rbp;
    sqrt ();
    xmm2 = .rodata.cst16;
    __asm ("movapd xmm3, xmm0");
    xmm0 = *(loc..LC39);
    __asm ("andpd xmm2, xmm3");
    __asm ("comisd xmm0, xmm2");
    if (? < ?) {
        goto label_2;
    }
    xmm0 = *(loc..LC17);
    __asm ("movapd xmm7, xmm2");
    xmm4 = 0;
    rax = 0x08004968;
    xmm5 = cheb_i1_A;
    __asm ("movapd xmm6, xmm4");
    rdx = rax + 0xe0;
    __asm ("mulsd xmm7, xmm0");
    __asm ("subsd xmm7, qword [loc..LC40]");
    while (rax != rdx) {
        __asm ("movapd xmm6, xmm5");
        __asm ("movapd xmm5, xmm1");
        __asm ("movapd xmm1, xmm7");
        rax += 8;
        __asm ("mulsd xmm1, xmm5");
        __asm ("subsd xmm1, xmm6");
        __asm ("addsd xmm1, qword [rax - 8]");
    }
    __asm ("subsd xmm1, xmm6");
    *((rsp + 0x10)) = xmm4;
    *((rsp + 8)) = xmm3;
    __asm ("mulsd xmm1, xmm0");
    __asm ("movapd xmm0, xmm2");
    __asm ("mulsd xmm1, xmm2");
    *(rsp) = xmm1;
    sqrt ();
    __asm ("mulsd xmm0, qword [rsp]");
    xmm3 = *((rsp + 8));
    xmm4 = *((rsp + 0x10));
label_0:
    __asm ("comisd xmm4, xmm3");
    if (rax > rdx) {
        __asm ("xorpd xmm0, xmmword [loc..LC10]");
    }
    xmm1 = 0;
    rdi = rbp;
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    rax = *((rsp + 0x38));
    rax ^= *(fs:0x28);
    if (rax != rdx) {
        goto label_3;
    }
    return rax;
label_2:
    __asm ("movapd xmm0, xmm2");
    *((rsp + 8)) = xmm3;
    *(rsp) = xmm2;
    sqrt ();
    xmm2 = *(rsp);
    rax = 0x080047a8;
    xmm7 = *(loc..LC41);
    xmm4 = 0;
    xmm3 = *((rsp + 8));
    xmm5 = .data;
    __asm ("movapd xmm8, xmm0");
    __asm ("divsd xmm7, xmm2");
    __asm ("movapd xmm6, xmm4");
    rdx = rax + 0xc0;
    __asm ("subsd xmm7, qword [loc..LC40]");
    while (rax != rdx) {
        __asm ("movapd xmm6, xmm5");
        __asm ("movapd xmm5, xmm1");
        __asm ("movapd xmm1, xmm7");
        rax += 8;
        __asm ("mulsd xmm1, xmm5");
        __asm ("subsd xmm1, xmm6");
        __asm ("addsd xmm1, qword [rax - 8]");
    }
    __asm ("subsd xmm1, xmm6");
    xmm0 = *(loc..LC17);
    __asm ("ucomisd xmm4, xmm2");
    __asm ("movapd xmm5, xmm2");
    __asm ("sqrtsd xmm5, xmm5");
    __asm ("mulsd xmm0, xmm1");
    __asm ("mulsd xmm8, xmm0");
    while (1) {
        __asm ("movapd xmm0, xmm8");
        __asm ("divsd xmm0, xmm5");
        goto label_0;
label_1:
        rsi = "can only do bessel functions of reals";
        edi |= 0xffffffff;
        eax = 0;
        sqrt ();
label_3:
        sqrt ();
        __asm ("movapd xmm0, xmm2");
        *((rsp + 0x18)) = xmm4;
        *((rsp + 0x10)) = xmm5;
        *((rsp + 8)) = xmm8;
        *(rsp) = xmm3;
        sqrt ();
        xmm4 = *((rsp + 0x18));
        xmm5 = *((rsp + 0x10));
        xmm8 = *((rsp + 8));
        xmm3 = *(rsp);
    }
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/standard.o @ 0x8003fe0 */
#include <stdint.h>
 
int64_t f_besj0 (int64_t arg7) {
    int64_t var_20h_10;
    int64_t var_58h_8;
    int64_t var_20h_9;
    int64_t var_58h_7;
    int64_t var_20h_8;
    int64_t var_58h_6;
    int64_t var_20h_7;
    int64_t var_58h_5;
    int64_t var_20h_6;
    int64_t var_58h_4;
    int64_t var_20h_5;
    int64_t var_58h_3;
    int64_t var_20h_4;
    int64_t var_58h_2;
    int64_t var_20h_3;
    int64_t var_58h;
    uint32_t var_20h_2;
    int64_t var_28h;
    int64_t var_38h_2;
    uint32_t var_20h;
    int64_t var_28h_2;
    int64_t var_38h;
    int64_t var_18h_4;
    int64_t var_18h_3;
    int64_t var_18h_2;
    int64_t var_18h;
    xmm0 = arg7;
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x18)) = rax;
    eax = 0;
    rdi = rsp;
    sqrt ();
    rdi = rbp;
    sqrt ();
    __asm ("andpd xmm0, xmmword [loc..LC3]");
    __asm ("comisd xmm0, xmmword [reloc.zero]");
    if (? <= ?) {
        rdi = rbp;
        sqrt ();
        sqrt ();
        xmm1 = 0;
        rdi = rbp;
        rax = sqrt ();
        rdi = rax;
        sqrt ();
        rax = *((rsp + 0x18));
        rax ^= *(fs:0x28);
        if (? != ?) {
            goto label_2;
        }
        return rax;
    }
    rsi = "can only do bessel functions of reals";
    edi |= 0xffffffff;
    eax = 0;
    sqrt ();
label_2:
    sqrt ();
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x18)) = rax;
    eax = 0;
    rdi = rsp;
    sqrt ();
    rdi = rbp;
    sqrt ();
    __asm ("andpd xmm0, xmmword [loc..LC3]");
    __asm ("comisd xmm0, xmmword [reloc.zero]");
    if (edi <= 0) {
        rdi = rbp;
        sqrt ();
        sqrt ();
        xmm1 = 0;
        rdi = rbp;
        rax = sqrt ();
        rdi = rax;
        sqrt ();
        rax = *((rsp + 0x18));
        rax ^= *(fs:0x28);
        if (edi != 0) {
            goto label_3;
        }
        return rax;
    }
    rsi = "can only do bessel functions of reals";
    edi |= 0xffffffff;
    eax = 0;
    sqrt ();
label_3:
    sqrt ();
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x18)) = rax;
    eax = 0;
    rdi = rsp;
    sqrt ();
    rdi = rbp;
    sqrt ();
    __asm ("andpd xmm0, xmmword [loc..LC3]");
    __asm ("comisd xmm0, xmmword [reloc.zero]");
    if (edi > 0) {
        goto label_4;
    }
    rdi = rbp;
    sqrt ();
    xmm1 = 0;
    __asm ("comisd xmm0, xmm1");
    if (edi <= 0) {
        goto label_5;
    }
    rdi = rbp;
    sqrt ();
    sqrt ();
    rdi = rbp;
    xmm1 = 0;
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    do {
        rax = *((rsp + 0x18));
        rax ^= *(fs:0x28);
        if (edi != 0) {
            goto label_6;
        }
        return rax;
label_5:
        __asm ("movapd xmm0, xmm1");
        rdi = rbp;
        rax = sqrt ();
        rdi = rax;
        eax = sqrt ();
        *(reloc.undefined) = 1;
    } while (1);
label_4:
    rsi = "can only do bessel functions of reals";
    edi |= 0xffffffff;
    eax = 0;
    sqrt ();
label_6:
    sqrt ();
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x18)) = rax;
    eax = 0;
    rdi = rsp;
    sqrt ();
    rdi = rbp;
    sqrt ();
    __asm ("andpd xmm0, xmmword [loc..LC3]");
    __asm ("comisd xmm0, xmmword [reloc.zero]");
    if (edi > 0) {
        goto label_7;
    }
    rdi = rbp;
    sqrt ();
    xmm1 = 0;
    __asm ("comisd xmm0, xmm1");
    if (edi <= 0) {
        goto label_8;
    }
    rdi = rbp;
    sqrt ();
    sqrt ();
    rdi = rbp;
    xmm1 = 0;
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    do {
        rax = *((rsp + 0x18));
        rax ^= *(fs:0x28);
        if (edi != 0) {
            goto label_9;
        }
        return rax;
label_8:
        __asm ("movapd xmm0, xmm1");
        rdi = rbp;
        rax = sqrt ();
        rdi = rax;
        eax = sqrt ();
        *(reloc.undefined) = 1;
    } while (1);
label_7:
    rsi = "can only do bessel functions of reals";
    edi |= 0xffffffff;
    eax = 0;
    sqrt ();
label_9:
    sqrt ();
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x38)) = rax;
    eax = 0;
    rdi = rsp;
    sqrt ();
    rdi = rsp + 0x20;
    sqrt ();
    while (*((rsp + 0x20)) > 1) {
        xmm1 = 0;
        rdi = rbp;
        __asm ("movapd xmm0, xmm1");
        rax = sqrt ();
        rdi = rax;
        sqrt ();
        *(reloc.undefined) = 1;
label_0:
        rax = *((rsp + 0x38));
        rax ^= *(fs:0x28);
        if (*((rsp + 0x20)) != 1) {
            goto label_10;
        }
        return rax;
        rdi = rbp;
        sqrt ();
        __asm ("andpd xmm0, xmmword [loc..LC3]");
        __asm ("comisd xmm0, xmmword [reloc.zero]");
    }
    rdi = rbp;
    sqrt ();
    edi = *((rsp + 0x28));
    sqrt ();
    rdi = rbp;
    xmm1 = 0;
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    goto label_0;
label_10:
    sqrt ();
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x38)) = rax;
    eax = 0;
    rdi = rsp;
    sqrt ();
    rdi = rsp + 0x20;
    sqrt ();
    while (*((rsp + 0x20)) > 1) {
        xmm1 = 0;
        rdi = rbp;
        __asm ("movapd xmm0, xmm1");
        rax = sqrt ();
        rdi = rax;
        sqrt ();
        *(reloc.undefined) = 1;
label_1:
        rax = *((rsp + 0x38));
        rax ^= *(fs:0x28);
        if (*((rsp + 0x20)) != 1) {
            goto label_11;
        }
        return rax;
        rdi = rbp;
        sqrt ();
        __asm ("andpd xmm0, xmmword [loc..LC3]");
        __asm ("comisd xmm0, xmmword [reloc.zero]");
    }
    rdi = rbp;
    sqrt ();
    edi = *((rsp + 0x28));
    sqrt ();
    rdi = rbp;
    xmm1 = 0;
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    goto label_1;
label_11:
    sqrt ();
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x58)) = rax;
    eax = 0;
    rdi = rsp;
    sqrt ();
    rdi = rbp;
    sqrt ();
    rdi = rsp + 0x20;
    sqrt ();
    xmm0 = 0;
    xmm1 = 0;
    rdi = rbp;
    __asm ("cvtsi2sd xmm0, dword [rsp + 0x20]");
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    rax = *((rsp + 0x58));
    rax ^= *(fs:0x28);
    if (*((rsp + 0x20)) == 1) {
        return rax;
    }
    sqrt ();
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x58)) = rax;
    eax = 0;
    rdi = rsp;
    sqrt ();
    rdi = rbp;
    sqrt ();
    rdi = rsp + 0x20;
    sqrt ();
    xmm0 = 0;
    xmm1 = 0;
    rdi = rbp;
    __asm ("cvtsi2sd xmm0, dword [rsp + 0x24]");
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    rax = *((rsp + 0x58));
    rax ^= *(fs:0x28);
    if (*((rsp + 0x20)) == 1) {
        return rax;
    }
    sqrt ();
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x58)) = rax;
    eax = 0;
    rdi = rsp;
    sqrt ();
    rdi = rbp;
    sqrt ();
    rdi = rsp + 0x20;
    sqrt ();
    xmm0 = 0;
    xmm1 = 0;
    rdi = rbp;
    __asm ("cvtsi2sd xmm0, dword [rsp + 0x28]");
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    rax = *((rsp + 0x58));
    rax ^= *(fs:0x28);
    if (*((rsp + 0x20)) == 1) {
        return rax;
    }
    sqrt ();
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x58)) = rax;
    eax = 0;
    rdi = rsp;
    sqrt ();
    rdi = rbp;
    sqrt ();
    rdi = rsp + 0x20;
    sqrt ();
    xmm0 = 0;
    xmm1 = 0;
    rdi = rbp;
    __asm ("cvtsi2sd xmm0, dword [rsp + 0x2c]");
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    rax = *((rsp + 0x58));
    rax ^= *(fs:0x28);
    if (*((rsp + 0x20)) == 1) {
        return rax;
    }
    sqrt ();
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x58)) = rax;
    eax = 0;
    rdi = rsp;
    sqrt ();
    rdi = rbp;
    sqrt ();
    rdi = rsp + 0x20;
    sqrt ();
    xmm0 = 0;
    xmm1 = 0;
    rdi = rbp;
    __asm ("cvtsi2sd xmm0, dword [rsp + 0x30]");
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    rax = *((rsp + 0x58));
    rax ^= *(fs:0x28);
    if (*((rsp + 0x20)) == 1) {
        return rax;
    }
    sqrt ();
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x58)) = rax;
    eax = 0;
    rdi = rsp;
    sqrt ();
    rdi = rbp;
    sqrt ();
    rdi = rsp + 0x20;
    sqrt ();
    xmm0 = 0;
    xmm1 = 0;
    rdi = rbp;
    __asm ("cvtsi2sd xmm0, dword [rsp + 0x34]");
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    rax = *((rsp + 0x58));
    rax ^= *(fs:0x28);
    if (*((rsp + 0x20)) == 1) {
        return rax;
    }
    sqrt ();
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x58)) = rax;
    eax = 0;
    rdi = rsp;
    sqrt ();
    rdi = rbp;
    sqrt ();
    rdi = rsp + 0x20;
    sqrt ();
    xmm0 = 0;
    xmm1 = 0;
    rdi = rbp;
    __asm ("cvtsi2sd xmm0, dword [rsp + 0x38]");
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    rax = *((rsp + 0x58));
    rax ^= *(fs:0x28);
    if (*((rsp + 0x20)) == 1) {
        return rax;
    }
    sqrt ();
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x58)) = rax;
    eax = 0;
    rdi = rsp;
    sqrt ();
    rdi = rbp;
    sqrt ();
    rdi = rsp + 0x20;
    sqrt ();
    xmm0 = 0;
    xmm1 = 0;
    rdi = rbp;
    __asm ("cvtsi2sd xmm0, dword [rsp + 0x3c]");
    rax = sqrt ();
    rdi = rax;
    sqrt ();
    rax = *((rsp + 0x58));
    rax ^= *(fs:0x28);
    if (*((rsp + 0x20)) == 1) {
        return rax;
    }
    sqrt ();
    return void (*rsi)() ();
}


