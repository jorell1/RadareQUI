















































pdd  pdd  pdd @ pdd @ pdd @  pdd @  pdd @ s pdd @ s pdd @ sy pdd @ sy pdd @ sym pdd @ sym pdd @ sym. pdd @ sym. pdd @ sym.c pdd @ sym.c pdd @ sym.co pdd @ sym.co pdd @ sym.com pdd @ sym.com pdd @ sym.comm pdd @ sym.comm pdd @ sym.commo pdd @ sym.commo pdd @ sym.common pdd @ sym.common pdd @ sym.common_ pdd @ sym.common_ pdd @ sym.common_e pdd @ sym.common_e pdd @ sym.common_er pdd @ sym.common_er pdd @ sym.common_err pdd @ sym.common_err pdd @ sym.common_erro pdd @ sym.common_erro pdd @ sym.common_error pdd @ sym.common_error pdd @ sym.common_error_ pdd @ sym.common_error_ pdd @ sym.common_error_e pdd @ sym.common_error_e pdd @ sym.common_error_ex pdd @ sym.common_error_ex pdd @ sym.common_error_exi pdd @ sym.common_error_exi pdd @ sym.common_error_exit pdd @ sym.common_error_exit/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/util.o @ 0x8000a80 */
#include <stdint.h>
 
uint64_t common_error_exit (int64_t arg_f0h, int64_t arg11, int64_t arg10, int64_t arg9, int64_t arg8, int64_t arg6, int64_t arg5, int64_t arg3, int64_t arg4) {
    int64_t var_8h_2;
    int64_t var_ch;
    int64_t var_10h_2;
    int64_t var_18h_2;
    int64_t var_20h_2;
    int64_t var_30h_2;
    int64_t var_40h_2;
    int64_t var_50h;
    int64_t var_60h;
    int64_t var_70h;
    int64_t var_80h;
    int64_t var_90h;
    int64_t var_a8h;
    int64_t var_b0h;
    int64_t var_c0h;
    int64_t var_c8h;
    int64_t var_d0h;
    int64_t var_d8h;
    int64_t var_e0h;
    int64_t var_f0h;
    int64_t var_100h;
    int64_t var_110h;
    int64_t var_120h;
    int64_t var_130h;
    int64_t var_140h;
    int64_t var_150h;
    int64_t var_4h;
    int64_t var_8h;
    int64_t var_10h;
    int64_t var_18h;
    int64_t var_20h;
    int64_t var_30h;
    int64_t var_38h;
    int64_t var_40h;
    int64_t var_48h;
    int64_t var_50h_2;
    int64_t var_60h_2;
    int64_t var_70h_2;
    int64_t var_80h_2;
    int64_t var_90h_2;
    int64_t var_a0h;
    int64_t var_b0h_2;
    int64_t var_c0h_2;
    xmm4 = arg11;
    xmm3 = arg10;
    xmm2 = arg9;
    xmm1 = arg8;
    r9 = arg6;
    r8 = arg5;
    rdx = arg3;
    rcx = arg4;
    __asm ("endbr64");
    inline_num (rax);
    inline_num ();
    inline_num ();
    inline_num ();
    inline_num ();
    rdi = *(reloc.set_iterator);
    rax = inline_num ();
    rdi = *(reloc.plot_iterator);
    *(reloc.set_iterator) = rax;
    rax = inline_num ();
    rsi = loc__LC13;
    edi = 1;
    *(reloc.scanning_range_in_progress) = 0;
    *(reloc.plot_iterator) = rax;
    *(reloc.inside_zoom) = 0;
    inline_num ();
    edi = 2;
    inline_num ();
    al = inline_num ();
    __asm ("endbr64");
    r12 = rsi;
    *(arg_f0hx30) = rdx;
    *(arg_f0hx38) = rcx;
    *(arg_f0hx40) = r8;
    *(arg_f0hx48) = r9;
    if (al != 0) {
        *(arg_f0hx50) = xmm0;
        *(arg_f0hx60) = xmm1;
        *(arg_f0hx70) = xmm2;
        *(arg_f0hx80) = xmm3;
        *(arg_f0hx90) = xmm4;
        *(arg_f0hxa0) = xmm5;
        *(arg_f0hxb0) = xmm6;
        *(arg_f0hxc0) = xmm7;
    }
    rax = *(fs:0x28);
    *(arg_f0hx18) = rax;
    eax = 0;
    _text ();
    rbx = *(loc..LC2);
    if (rbx != 0) {
        goto label_0;
    }
    goto label_1;
    do {
        rsi = *(reloc.stderr);
        edi = 0x20;
        rbx++;
        inline_num ();
label_0:
    } while (*(rbx) != 0);
label_1:
    rdi = *(reloc.stderr);
    rcx = rsp;
    rdx = r12;
    esi = 1;
    rax = arg_f0hxf0;
    *((rsp + 8)) = rax;
    rax = arg_f0hx20;
    *((rsp + 4)) = 0x30;
    *(arg_f0hx10) = rax;
    inline_num (0x10);
    rsi = *(reloc.stderr);
    edi = 0xa;
    inline_num ();
    rdi = loc__LC14;
    inline_num ();
    rsi = *(reloc.stderr);
    edi = 0xa;
    inline_num ();
    rax = inline_num ();
    edi = *(rax);
    rax = inline_num ();
    rdi = "GPVAL_ERRMSG";
    rsi = rax;
    inline_num ();
    rax = inline_num ();
    __asm ("endbr64");
    rbx = rsi;
    *(arg_f0hxc0) = rdx;
    *(arg_f0hxc8) = rcx;
    *(arg_f0hxd0) = r8;
    *(arg_f0hxd8) = r9;
    if (al != 0) {
        *(arg_f0hxe0) = xmm0;
        *(arg_f0hxf0) = xmm1;
        *(arg_f0hx100) = xmm2;
        *(arg_f0hx110) = xmm3;
        *(arg_f0hx120) = xmm4;
        *(arg_f0hx130) = xmm5;
        *(arg_f0hx140) = xmm6;
        *(arg_f0hx150) = xmm7;
    }
    rax = *(fs:0x28);
    *(arg_f0hxa8) = rax;
    eax = 0;
    xmm0 = 0;
    rbp = arg_f0hx20;
    *(arg_f0hx20) = xmm0;
    *(arg_f0hx30) = xmm0;
    *(arg_f0hx40) = xmm0;
    *(arg_f0hx50) = xmm0;
    *(arg_f0hx60) = xmm0;
    *(arg_f0hx70) = xmm0;
    *(arg_f0hx80) = xmm0;
    *(arg_f0hx90) = xmm0;
    _text ();
    r9 = rsp + 8;
    r8 = rbx;
    rdi = rbp;
    ecx = 0x80;
    edx = 1;
    rax = arg_f0hx180;
    esi = 0x80;
    *(arg_f0hx10) = rax;
    rax = arg_f0hxb0;
    *((rsp + 8)) = 0x10;
    *(arg_f0hxc) = 0x30;
    *(arg_f0hx18) = rax;
    eax = inline_num ();
    rcx = rbp;
    esi = 1;
    eax = 0;
    rdi = *(reloc.stderr);
    rdx = "%.120s";
    inline_num ();
    edx = 2;
    rcx = *(reloc.stderr);
    esi = 1;
    rdi = loc__LC17;
    inline_num ();
    rsi = rbp;
    rdi = "GPVAL_ERRMSG";
    inline_num ();
    inline_num ();
}
   p p pd pd pdg pdg pdg  pdg  pdg @ pdg @ pdg @  pdg @  pdg @ s pdg @ s pdg @ sy pdg @ sy pdg @ sym pdg @ sym pdg @ sym. pdg @ sym. pdg @ sym.g pdg @ sym.g pdg @ sym.gp pdg @ sym.gp pdg @ sym.gpr pdg @ sym.gpr pdg @ sym.gpri pdg @ sym.gpri pdg @ sym.gprin pdg @ sym.gprin pdg @ sym.gprint pdg @ sym.gprint pdg @ sym.gprintf pdg @ sym.gprintf
void sym.gprintf(int64_t arg7, int64_t arg8, undefined8 placeholder_2, int64_t arg10, int64_t arg11,
                undefined8 placeholder_5, undefined8 placeholder_6, undefined8 placeholder_7, int64_t arg1, int64_t arg2
                , int64_t arg3, undefined8 placeholder_11, int64_t arg5, int64_t arg6)
{
    bool bVar1;
    bool bVar2;
    char cVar3;
    int64_t *piVar4;
    undefined8 extraout_RDX;
    uint8_t uVar5;
    uint8_t *puVar6;
    int32_t iVar7;
    int64_t iVar8;
    uint8_t *puVar9;
    int64_t in_FS_OFFSET;
    undefined8 extraout_XMM0_Qa;
    undefined8 extraout_XMM0_Qb;
    undefined auVar10 [16];
    int64_t iVar11;
    undefined8 uVar12;
    undefined8 in_XMM3_Qb;
    undefined8 in_XMM4_Qb;
    undefined8 in_XMM5_Qb;
    undefined8 in_XMM6_Qb;
    undefined8 in_XMM7_Qb;
    undefined4 uStack304;
    undefined4 uStack300;
    int64_t *piStack296;
    undefined *puStack288;
    int64_t iStack280;
    undefined auStack272 [16];
    undefined8 uStack256;
    undefined *puStack248;
    int64_t iStack240;
    int64_t iStack232;
    undefined auStack224 [16];
    undefined auStack208 [16];
    undefined auStack192 [16];
    undefined auStack176 [16];
    undefined auStack160 [16];
    undefined auStack144 [16];
    undefined auStack128 [16];
    undefined auStack112 [16];
    int64_t iStack96;
    int64_t iStack80;
    undefined auStack72 [24];
    int64_t iStack48;
    
    puStack248 = auStack72;
    auVar10 = (undefined  [16])0x0;
    iStack48 = *(int64_t *)(in_FS_OFFSET + 0x28);
    iStack96 = 0x8002053;
    iStack80 = arg7;
    func_0x0802fb5f(arg8, 0, puStack248);
    uVar12 = 0;
    iStack96 = 0x800206e;
    iVar8 = arg2;
    iVar11 = iStack80;
    func_0x0802fb5f(iStack80, arg1, arg2, arg3);
    if (iStack48 == *(int64_t *)(in_FS_OFFSET + 0x28)) {
        return;
    }
    iStack96 = 0x800208f;
    cVar3 = func_0x0802fb5f();
    if (cVar3 != '\0') {
        auStack224 = CONCAT88(extraout_XMM0_Qb, extraout_XMM0_Qa);
        auStack192 = CONCAT88(uVar12, iVar11);
        auStack176 = CONCAT88(in_XMM3_Qb, arg10);
        auStack160 = CONCAT88(in_XMM4_Qb, arg11);
        auStack144 = CONCAT88(in_XMM5_Qb, placeholder_5);
        auStack128 = CONCAT88(in_XMM6_Qb, placeholder_6);
        auStack112 = CONCAT88(in_XMM7_Qb, placeholder_7);
        auStack208 = auVar10;
    }
    iStack280 = *(int64_t *)(in_FS_OFFSET + 0x28);
    uStack256 = extraout_RDX;
    iStack240 = arg5;
    iStack232 = arg6;
    iStack96 = arg2;
    sym.print_line_with_error(arg1);
    func_0x0802fb5f("", 1, 9, _reloc.stderr);
    piStack296 = &iStack80;
    uStack304 = 0x10;
    puStack288 = auStack272;
    uStack300 = 0x30;
    func_0x0802fb5f(_reloc.stderr, 1, iVar8, &uStack304);
    puVar9 = (uint8_t *)0xa;
    uVar12 = _reloc.stderr;
    func_0x0802fb5f();
    iVar7 = (int32_t)uVar12;
    if (iStack280 == *(int64_t *)(in_FS_OFFSET + 0x28)) {
        return;
    }
    func_0x0802fb5f();
    uVar5 = *puVar9;
    puVar6 = puVar9;
    if (uVar5 != 0) {
        piVar4 = (int64_t *)func_0x0802fb5f();
        bVar1 = false;
        do {
            while ((*(uint8_t *)(*piVar4 + 1 + (uint64_t)uVar5 * 2) & 0x20) == 0) {
                puVar9 = puVar9 + 1;
                *puVar6 = uVar5;
                bVar1 = false;
                puVar6 = puVar6 + 1;
                uVar5 = *puVar9;
                if (uVar5 == 0) goto code_r0x08002203;
            }
            bVar2 = (bool)((bVar1 ^ 1U) & 0 < iVar7);
            if (bVar2) {
                *puVar6 = 0x20;
                puVar6 = puVar6 + 1;
                bVar1 = bVar2;
            }
            uVar5 = puVar9[1];
            puVar9 = puVar9 + 1;
        } while (uVar5 != 0);
    }
code_r0x08002203:
    *puVar6 = 0;
    return;
}
   p p pd pd pdd pdd pdd  pdd  pdd @ pdd @ pdd @  pdd @  pdd @ s pdd @ s pdd @ sy pdd @ sy pdd @ sym pdd @ sym pdd @ sym. pdd @ sym. pdd @ sym.g pdd @ sym.g pdd @ sym.gp pdd @ sym.gp pdd @ sym.gpr pdd @ sym.gpr pdd @ sym.gpri pdd @ sym.gpri pdd @ sym.gprin pdd @ sym.gprin pdd @ sym.gprint pdd @ sym.gprint pdd @ sym.gprintf pdd @ sym.gprintf/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/util.o @ 0x8002010 */
#include <stdint.h>
 
int64_t gprintf (int64_t arg11, int64_t arg10, int64_t arg8, int64_t arg7, int64_t arg6, int64_t arg5, int64_t arg1, int64_t arg2, int64_t arg3) {
    int64_t var_4h;
    int64_t var_8h_2;
    int64_t var_10h_2;
    int64_t var_18h;
    int64_t var_20h;
    int64_t var_30h;
    int64_t var_38h;
    int64_t var_40h;
    int64_t var_48h;
    int64_t var_50h;
    int64_t var_60h;
    int64_t var_70h;
    int64_t var_80h;
    int64_t var_90h;
    int64_t var_a0h;
    int64_t var_b0h;
    int64_t var_c0h;
    int64_t var_8h;
    int64_t var_10h;
    int64_t var_28h;
    xmm4 = arg11;
    xmm3 = arg10;
    xmm1 = arg8;
    xmm0 = arg7;
    r9 = arg6;
    r8 = arg5;
    rdi = arg1;
    rsi = arg2;
    rdx = arg3;
    __asm ("endbr64");
    r13 = rdx;
    r12 = rsi;
    r14 = rsp + 0x10;
    *((rsp + 8)) = xmm0;
    __asm ("movapd xmm0, xmm1");
    xmm1 = 0;
    rax = *(fs:0x28);
    *((rsp + 0x28)) = rax;
    eax = 0;
    rdi = r14;
    inline_num (rbp, r12, r13);
    rcx = r14;
    rdx = r13;
    rsi = r12;
    xmm2 = *((rsp + 8));
    rdi = rbp;
    __asm ("movapd xmm0, xmm2");
    inline_num ();
    rax = *((rsp + 0x28));
    rax ^= *(fs:0x28);
    if (? == ?) {
        return rax;
    }
    al = inline_num ();
    __asm ("endbr64");
    r12 = rsi;
    *((rsp + 0x30)) = rdx;
    *((rsp + 0x38)) = rcx;
    *((rsp + 0x40)) = r8;
    *((rsp + 0x48)) = r9;
    if (al != 0) {
        *((rsp + 0x50)) = xmm0;
        *((rsp + 0x60)) = xmm1;
        *((rsp + 0x70)) = xmm2;
        *((rsp + 0x80)) = xmm3;
        *((rsp + 0x90)) = xmm4;
        *((rsp + 0xa0)) = xmm5;
        *((rsp + 0xb0)) = xmm6;
        *((rsp + 0xc0)) = xmm7;
    }
    rax = *(fs:0x28);
    *((rsp + 0x18)) = rax;
    eax = 0;
    _text ();
    edx = 9;
    rcx = *(reloc.stderr);
    esi = 1;
    rdi = "warning: ";
    inline_num ();
    rcx = rsp;
    rdx = r12;
    esi = 1;
    rdi = *(reloc.stderr);
    rax = rsp + 0xe0;
    *((rsp + 8)) = rax;
    rax = rsp + 0x20;
    *((rsp + 4)) = 0x30;
    *((rsp + 0x10)) = rax;
    inline_num (0x10);
    rsi = *(reloc.stderr);
    edi = 0xa;
    inline_num ();
    rax = *((rsp + 0x18));
    rax ^= *(fs:0x28);
    if (al == 0) {
        return rax;
    }
    inline_num ();
    __asm ("endbr64");
    ebx = *(rdi);
    if (bl == 0) {
        goto label_1;
    }
    r12d = esi;
    rax = inline_num ();
    rcx = rbp;
    r8d = 0;
    while ((*((rdi + rdx*2 + 1)) & 0x20) != 0) {
        edx = r8d;
        edx ^= 1;
        dil = (r12d > 0) ? 1 : 0;
        dl &= dil;
        if (dl != 0) {
            *(rbp) = 0x20;
            r8d = edx;
            rbp++;
        }
        ebx = *((rcx + 1));
        rcx++;
        if (bl == 0) {
            goto label_1;
        }
label_0:
        rdi = *(rax);
        edx = (int32_t) bl;
    }
    rcx++;
    *(rbp) = bl;
    r8d = 0;
    rbp++;
    ebx = *(rcx);
    if (bl != 0) {
        goto label_0;
    }
label_1:
    *(rbp) = 0;
    return rax;
}
   p p pd pd pdg pdg pdg  pdg  pdg @ pdg @ pdg @  pdg @  pdg @ s pdg @ s pdg @ sy pdg @ sy pdg @ sym pdg @ sym pdg @ sym. pdg @ sym. pdg @ sym.p pdg @ sym.p pdg @ sym.pa pdg @ sym.pa pdg @ sym.par pdg @ sym.par pdg @ sym.pars pdg @ sym.pars pdg @ sym.parse pdg @ sym.parse pdg @ sym.parse_ pdg @ sym.parse_ pdg @ sym.parse_e pdg @ sym.parse_e pdg @ sym.parse_es pdg @ sym.parse_es pdg @ sym.parse_esc pdg @ sym.parse_esc
void sym.parse_esc(int64_t arg1, int64_t arg2, int64_t arg3)
{
    int64_t iVar1;
    int64_t iVar2;
    int32_t iVar3;
    char *pcVar4;
    char *pcVar5;
    char *pcVar6;
    char cVar7;
    int32_t extraout_EDX;
    undefined8 unaff_RBX;
    char **ppcVar8;
    char **ppcVar9;
    char **unaff_RBP;
    char **ppcVar10;
    int32_t iVar11;
    char *pcVar12;
    undefined *unaff_R12;
    undefined *unaff_R13;
    char *unaff_R14;
    char *unaff_R15;
    int64_t in_FS_OFFSET;
    
    pcVar12 = (char *)arg2;
    do {
        iVar11 = (int32_t)pcVar12;
        *(char **)((int64_t)*(undefined **)0x20 + -8) = unaff_R15;
        *(char **)((int64_t)*(undefined **)0x20 + -0x10) = unaff_R14;
        *(undefined **)((int64_t)*(undefined **)0x20 + -0x18) = unaff_R13;
        *(undefined **)((int64_t)*(undefined **)0x20 + -0x20) = unaff_R12;
        *(char ***)((int64_t)*(undefined **)0x20 + -0x28) = unaff_RBP;
        *(undefined8 *)((int64_t)*(undefined **)0x20 + -0x30) = unaff_RBX;
        *(undefined8 *)((int64_t)*(undefined **)0x20 + -0x40) = *(undefined8 *)(in_FS_OFFSET + 0x28);
        cVar7 = *(char *)arg1;
        ppcVar9 = (char **)arg1;
        if (cVar7 != '\0') {
            unaff_R13 = (undefined *)((int64_t)*(undefined **)0x20 + -0x44);
            unaff_R12 = (undefined *)((int64_t)*(undefined **)0x20 + -0x48);
            unaff_R15 = "";
            unaff_R14 = "";
            ppcVar8 = (char **)arg1;
            ppcVar10 = (char **)arg1;
code_r0x0800228b:
            do {
                iVar11 = (int32_t)pcVar12;
                if (cVar7 == '\\') {
                    cVar7 = *(char *)((int64_t)ppcVar10 + 1);
                    if (cVar7 == '\\') {
                        *(char *)ppcVar8 = '\\';
                        unaff_RBP = (char **)((int64_t)ppcVar10 + 2);
                        cVar7 = *(char *)unaff_RBP;
                        ppcVar8 = (char **)((int64_t)ppcVar8 + 1);
                    } else {
                        if (cVar7 == 'n') {
                            *(char *)ppcVar8 = '\n';
                            unaff_RBP = (char **)((int64_t)ppcVar10 + 2);
                            cVar7 = *(char *)unaff_RBP;
                            ppcVar8 = (char **)((int64_t)ppcVar8 + 1);
                        } else {
                            if (cVar7 == 'r') {
                                *(char *)ppcVar8 = '\r';
                                unaff_RBP = (char **)((int64_t)ppcVar10 + 2);
                                cVar7 = *(char *)unaff_RBP;
                                ppcVar8 = (char **)((int64_t)ppcVar8 + 1);
                            } else {
                                if (cVar7 == 't') {
                                    *(char *)ppcVar8 = '\t';
                                    unaff_RBP = (char **)((int64_t)ppcVar10 + 2);
                                    cVar7 = *(char *)unaff_RBP;
                                    ppcVar8 = (char **)((int64_t)ppcVar8 + 1);
                                } else {
                                    if (cVar7 == '\"') {
                                        *(char *)ppcVar8 = '\"';
                                        unaff_RBP = (char **)((int64_t)ppcVar10 + 2);
                                        cVar7 = *(char *)unaff_RBP;
                                        ppcVar8 = (char **)((int64_t)ppcVar8 + 1);
                                    } else {
                                        unaff_RBP = (char **)((int64_t)ppcVar10 + 1);
                                        arg1 = (int64_t)unaff_RBP;
                                        if ((uint8_t)(cVar7 - 0x30U) < 8) {
                                            pcVar12 = "";
                                            if (cVar7 != '0') {
                                                pcVar12 = "";
                                            }
                                            *(char ***)((int64_t)*(undefined **)0x20 + -0x50) = unaff_RBP;
                                            *(undefined8 *)((int64_t)*(undefined **)0x20 + -0x60) = 0x80022e6;
                                            iVar3 = func_0x0802fb5f(unaff_RBP, pcVar12, unaff_R12, unaff_R13);
                                            iVar11 = (int32_t)pcVar12;
                                            if (iVar3 < 1) {
                                                *(char *)ppcVar8 = '\\';
                                                ppcVar9 = (char **)((int64_t)ppcVar8 + 2);
                                                unaff_RBP = (char **)((int64_t)ppcVar10 + 2);
                                                *(char *)((int64_t)ppcVar8 + 1) = *(char *)((int64_t)ppcVar10 + 1);
                                            } else {
                                                iVar3 = *(int32_t *)((int64_t)*(undefined **)0x20 + -0x44);
                                                ppcVar9 = (char **)((int64_t)ppcVar8 + 1);
                                                arg1 = *(int64_t *)((int64_t)*(undefined **)0x20 + -0x50);
                                                *(char *)ppcVar8 =
                                                     (char)*(undefined4 *)((int64_t)*(undefined **)0x20 + -0x48);
                                                unaff_RBP = (char **)(iVar3 + arg1);
                                            }
                                            cVar7 = *(char *)unaff_RBP;
                                            ppcVar8 = ppcVar9;
                                            ppcVar10 = unaff_RBP;
                                            if (cVar7 == '\0') break;
                                            goto code_r0x0800228b;
                                        }
                                        if (cVar7 == 'U') {
                                            if (*(char *)((int64_t)ppcVar10 + 2) != '+') goto code_r0x08002276;
                                            *(char *)ppcVar8 = '\\';
                                            cVar7 = *(char *)((int64_t)ppcVar10 + 1);
                                            ppcVar8 = (char **)((int64_t)ppcVar8 + 1);
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else {
                    unaff_RBP = ppcVar10;
                    if (((_reloc.df_separators == 0) || (cVar7 != '\"')) || (*(char *)((int64_t)ppcVar10 + 1) != '\"'))
                    {
code_r0x08002276:
                        *(char *)ppcVar8 = cVar7;
                        unaff_RBP = (char **)((int64_t)unaff_RBP + 1);
                        cVar7 = *(char *)unaff_RBP;
                        ppcVar8 = (char **)((int64_t)ppcVar8 + 1);
                    } else {
                        *(char *)ppcVar8 = '\"';
                        unaff_RBP = (char **)((int64_t)ppcVar10 + 2);
                        cVar7 = *(char *)unaff_RBP;
                        ppcVar8 = (char **)((int64_t)ppcVar8 + 1);
                    }
                }
                ppcVar9 = ppcVar8;
                ppcVar10 = unaff_RBP;
            } while (cVar7 != '\0');
        }
        *(char *)ppcVar9 = '\0';
        if (*(int64_t *)((int64_t)*(undefined **)0x20 + -0x40) == *(int64_t *)(in_FS_OFFSET + 0x28)) {
            return;
        }
        *(undefined8 *)((int64_t)*(undefined **)0x20 + -0x60) = 0x8002425;
        func_0x0802fb5f();
        *(undefined **)((int64_t)*(undefined **)0x20 + -0x60) = unaff_R13;
        *(undefined **)((int64_t)*(undefined **)0x20 + -0x68) = unaff_R12;
        *(char ***)((int64_t)*(undefined **)0x20 + -0x70) = unaff_RBP;
        *(char ***)((int64_t)*(undefined **)0x20 + -0x78) = ppcVar9;
        pcVar6 = *(char **)arg1;
        iVar3 = *(int32_t *)(_reloc.token + 0x20 + (int64_t)extraout_EDX * 0x28) +
                *(int32_t *)(_reloc.token + 0x24 + (int64_t)extraout_EDX * 0x28);
        iVar1 = (int64_t)iVar11 * 0x28;
        pcVar12 = (char *)(int64_t)(iVar3 - *(int32_t *)(_reloc.token + 0x20 + (int64_t)iVar11 * 0x28));
        *(undefined8 *)((int64_t)*(undefined **)0x20 + -0x88) = 0x8002485;
        pcVar4 = (char *)func_0x0802fb5f(pcVar6, pcVar12, reloc..LC11);
        iVar2 = _reloc.token;
        *(char **)arg1 = pcVar4;
        iVar11 = *(int32_t *)(iVar2 + 0x20 + iVar1);
        pcVar6 = pcVar4;
        if (iVar11 + 1 < iVar3 + -1) {
            pcVar12 = pcVar4 + (uint64_t)((iVar3 - iVar11) - 3) + 1;
            pcVar5 = pcVar4;
            do {
                pcVar6 = pcVar5;
                if (pcVar5[(((int64_t)iVar11 + 1) - (int64_t)pcVar4) + _reloc.gp_input_line] == '\0') break;
                pcVar6 = pcVar5 + 1;
                *pcVar5 = pcVar5[(((int64_t)iVar11 + 1) - (int64_t)pcVar4) + _reloc.gp_input_line];
                pcVar5 = pcVar6;
            } while (pcVar6 != pcVar12);
        }
        *pcVar6 = '\0';
        if (*(char *)(_reloc.gp_input_line + *(int32_t *)(_reloc.token + 0x20 + iVar1)) != '\"') {
            pcVar12 = *(char **)arg1;
            cVar7 = *pcVar12;
            pcVar6 = pcVar12;
            while (pcVar4 = pcVar12, cVar7 != '\0') {
                while ((cVar7 != '\'' || (pcVar6[1] != '\''))) {
                    pcVar12 = pcVar4 + 1;
                    *pcVar4 = *pcVar6;
                    cVar7 = pcVar6[1];
                    pcVar6 = pcVar6 + 1;
                    pcVar4 = pcVar12;
                    if (cVar7 == '\0') goto code_r0x08002547;
                }
                *pcVar4 = '\'';
                cVar7 = pcVar6[2];
                pcVar12 = pcVar4 + 1;
                pcVar6 = pcVar6 + 2;
            }
code_r0x08002547:
            *pcVar12 = '\0';
            return;
        }
        arg1 = *(int64_t *)arg1;
        unaff_RBX = *(undefined8 *)((int64_t)*(undefined **)0x20 + -0x78);
        unaff_RBP = *(char ***)((int64_t)*(undefined **)0x20 + -0x70);
        unaff_R12 = *(undefined **)((int64_t)*(undefined **)0x20 + -0x68);
        unaff_R13 = *(undefined **)((int64_t)*(undefined **)0x20 + -0x60);
        *(undefined **)0x20 = (BADSPACEBASE *)((int64_t)*(undefined **)0x20 + -0x58);
    } while( true );
}
   p p pd pd pdd pdd pdd  pdd  pdd @ pdd @ pdd @  pdd @  pdd @ s pdd @ s pdd @ sy pdd @ sy pdd @ sym pdd @ sym pdd @ sym. pdd @ sym. pdd @ sym.p pdd @ sym.p pdd @ sym.pa pdd @ sym.pa pdd @ sym.par pdd @ sym.par pdd @ sym.pars pdd @ sym.pars pdd @ sym.parse pdd @ sym.parse pdd @ sym.parse_ pdd @ sym.parse_ pdd @ sym.parse_e pdd @ sym.parse_e pdd @ sym.parse_es pdd @ sym.parse_es pdd @ sym.parse_esc pdd @ sym.parse_esc/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/util.o @ 0x8002210 */
#include <stdint.h>
 
int64_t parse_esc (int64_t arg1, int64_t arg2, int64_t arg3) {
    int64_t var_8h;
    int64_t var_10h;
    int64_t var_14h;
    int64_t var_18h;
    rdi = arg1;
    rsi = arg2;
    rdx = arg3;
label_6:
    __asm ("endbr64");
    rbx = rdi;
    rax = *(fs:0x28);
    *((rsp + 0x18)) = rax;
    eax = 0;
    eax = *(rdi);
    if (al == 0) {
        goto label_7;
    }
    r13 = rsp + 0x14;
    r12 = rsp + 0x10;
    r15 = "%3o%n";
    r14 = "%4o%n";
    while (al != 0x5c) {
        rdx = rbx + 1;
        if (*(reloc.df_separators) != 0) {
            if (al == 0x22) {
                goto label_8;
            }
        }
label_1:
        *(rbx) = al;
        rbp++;
        eax = *(rbp);
        rbx = rdx;
label_2:
        if (al == 0) {
            goto label_7;
        }
label_0:
    }
    eax = *((rbp + 1));
    if (al == 0x5c) {
        goto label_9;
    }
    if (al == 0x6e) {
        goto label_10;
    }
    if (al == 0x72) {
        goto label_11;
    }
    if (al == 0x74) {
        goto label_12;
    }
    if (al == 0x22) {
        goto label_13;
    }
    edx = rax - 0x30;
    rdi = rbp + 1;
    if (dl > 7) {
        goto label_14;
    }
    rsi = r14;
    rcx = r13;
    rdx = r12;
    if (al != 0x30) {
        rsi = r15;
    }
    eax = 0;
    *((rsp + 8)) = rdi;
    eax = inline_num ();
    if (eax <= 0) {
        goto label_15;
    }
    eax = *((rsp + 0x10));
    rbp = *((rsp + 0x14));
    rbx++;
    rdi = *((rsp + 8));
    *((rbx - 1)) = al;
    rbp += rdi;
label_3:
    eax = *(rbp);
    if (al != 0) {
        goto label_0;
    }
label_7:
    *(rbx) = 0;
    rax = *((rsp + 0x18));
    rax ^= *(fs:0x28);
    if (al != 0) {
        goto label_16;
    }
    return rax;
label_8:
    if (*((rbp + 1)) != 0x22) {
        goto label_1;
    }
    *(rbx) = 0x22;
    rbp += 2;
    eax = *(rbp);
    rbx = rdx;
    goto label_2;
label_9:
    *(rbx) = 0x5c;
    rbp += 2;
    eax = *(rbp);
    rbx++;
    goto label_2;
label_10:
    *(rbx) = 0xa;
    rbp += 2;
    eax = *(rbp);
    rbx++;
    goto label_2;
label_11:
    *(rbx) = 0xd;
    rbp += 2;
    eax = *(rbp);
    rbx++;
    goto label_2;
label_12:
    *(rbx) = 9;
    rbp += 2;
    eax = *(rbp);
    rbx++;
    goto label_2;
label_13:
    *(rbx) = 0x22;
    rbp += 2;
    eax = *(rbp);
    rbx++;
    goto label_2;
label_14:
    if (al != 0x55) {
        goto label_2;
label_15:
        *(rbx) = 0x5c;
        eax = *((rbp + 1));
        rbx += 2;
        rbp += 2;
        *((rbx - 1)) = al;
        goto label_3;
    }
    if (*((rbp + 2)) != 0x2b) {
        rdx = rbx + 1;
        goto label_1;
    }
    *(rbx) = 0x5c;
    rbx++;
    eax = *((rbp + 1));
    goto label_2;
label_16:
    inline_num ();
    __asm ("endbr64");
    rdx = (int64_t) edx;
    rsi = (int64_t) esi;
    rdx *= 5;
    rbx = rdi;
    rax = *(reloc.token);
    rdi = *(rdi);
    r13d = *((rax + rdx*8 + 0x20));
    r13d += *((rax + rdx*8 + 0x24));
    rdx = rsi * 5;
    esi = r13d;
    esi -= *((rax + rdx*8 + 0x20));
    rbp = rdx*8;
    rsi = (int64_t) esi;
    rdx = loc__LC11;
    r12d = r13 - 1;
    rax = inline_num (rbx, rbp, r12);
    rdx = *(reloc.token);
    *(rbx) = rax;
    rcx = *((rdx + rbp + 0x20));
    edx = rcx + 1;
    if (r12d <= edx) {
        goto label_17;
    }
    r13d -= ecx;
    rcx++;
    edx = r13 - 3;
    rcx -= rax;
    rsi = rax + rdx + 1;
    while (dl != 0) {
        rax++;
        *((rax - 1)) = dl;
        if (rax == rsi) {
            goto label_17;
        }
        rdx = *(reloc.gp_input_line);
        rdx += rax;
        edx = *((rdx + rcx));
    }
label_17:
    *(rax) = 0;
    rax = *(reloc.token);
    rdx = *(reloc.gp_input_line);
    rax = *((rax + rbp + 0x20));
    if (*((rdx + rax)) == 0x22) {
        goto label_18;
    }
    rax = *(rbx);
    ecx = *(rax);
    rsi = rax;
    if (cl != 0) {
        goto label_5;
    }
    goto label_19;
    do {
label_4:
        ecx = *(rax);
        rdi = rdx;
        rdx = rax;
        rsi++;
        rax = rdi;
        *((rsi - 1)) = cl;
        ecx = *((rdx + 1));
        if (cl == 0) {
            goto label_19;
        }
label_5:
        rdx = rax + 1;
    } while (cl != 0x27);
    ecx = *((rax + 1));
    if (cl != 0x27) {
        goto label_4;
    }
    *(rsi) = cl;
    ecx = *((rdx + 1));
    rsi++;
    rax += 2;
    if (cl != 0) {
        goto label_5;
    }
label_19:
    *(rsi) = 0;
    return rax;
label_18:
    rdi = *(rbx);
    parse_esc ();
    goto label_6;
}
   p p pd pd pdg pdg pdg  pdg  pdg @ pdg @ pdg @  pdg @  pdg @ s pdg @ s pdg @ sy pdg @ sy pdg @ sym pdg @ sym pdg @ sym. pdg @ sym. pdg @ sym.e pdg @ sym.e pdg @ sym.ex pdg @ sym.ex pdg @ sym.exi pdg @ sym.exi pdg @ sym.exis pdg @ sym.exis pdg @ sym.exist pdg @ sym.exist pdg @ sym.existd pdg @ sym.existd pdg @ sym.existdi pdg @ sym.existdi pdg @ sym.existdir pdg @ sym.existdir
bool sym.existdir(void)
{
    int64_t iVar1;
    
    iVar1 = func_0x0802fb5f();
    if (iVar1 != 0) {
        func_0x0802fb5f();
    }
    return iVar1 != 0;
}
   p p pd pd pdd pdd pdd  pdd  pdd @ pdd @ pdd @  pdd @  pdd @ s pdd @ s pdd @ sy pdd @ sy pdd @ sym pdd @ sym pdd @ sym. pdd @ sym. pdd @ sym.e pdd @ sym.e pdd @ sym.ex pdd @ sym.ex pdd @ sym.exi pdd @ sym.exi pdd @ sym.exis pdd @ sym.exis pdd @ sym.exist pdd @ sym.exist pdd @ sym.existd pdd @ sym.existd pdd @ sym.existdi pdd @ sym.existdi pdd @ sym.existdir pdd @ sym.existdir/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/util.o @ 0x8002570 */
#include <stdint.h>
 
uint64_t existdir (void) {
    __asm ("endbr64");
    rax = inline_num ();
    rdi = rax;
    eax = 0;
    if (rdi != 0) {
        inline_num ();
        eax = 1;
    }
    return rax;
}
   p p pd pd pdg pdg pdg  pdg  pdg @ pdg @ pdg @  pdg @  pdg @ s pdg @ s pdg @ sy pdg @ sy pdg @ sym pdg @ sym pdg @ sym. pdg @ sym. pdg @ sym.e pdg @ sym.e pdg @ sym.ex pdg @ sym.ex pdg @ sym.exi pdg @ sym.exi pdg @ sym.exis pdg @ sym.exis pdg @ sym.exist pdg @ sym.exist pdg @ sym.existf pdg @ sym.existf pdg @ sym.existfi pdg @ sym.existfi pdg @ sym.existfil pdg @ sym.existfil pdg @ sym.existfile pdg @ sym.existfile
uint32_t sym.existfile(undefined8 param_1)
{
    uint32_t uVar1;
    
    uVar1 = func_0x0802fb5f(param_1, 0);
    return uVar1 & 0xffffff00 | (uint32_t)(uVar1 == 0);
}
   p p pd pd pdd pdd pdd  pdd  pdd @ pdd @ pdd @  pdd @  pdd @ s pdd @ s pdd @ sy pdd @ sy pdd @ sym pdd @ sym pdd @ sym. pdd @ sym. pdd @ sym.e pdd @ sym.e pdd @ sym.ex pdd @ sym.ex pdd @ sym.exi pdd @ sym.exi pdd @ sym.exis pdd @ sym.exis pdd @ sym.exist pdd @ sym.exist pdd @ sym.existf pdd @ sym.existf pdd @ sym.existfi pdd @ sym.existfi pdd @ sym.existfil pdd @ sym.existfil pdd @ sym.existfile pdd @ sym.existfile/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/util.o @ 0x80025a0 */
#include <stdint.h>
 
uint32_t existfile (void) {
    __asm ("endbr64");
    esi = 0;
    eax = inline_num ();
    al = (eax == 0) ? 1 : 0;
    return eax;
}












