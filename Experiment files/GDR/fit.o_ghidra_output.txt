void sym.fit_show(int64_t arg7, double placeholder_1, int64_t arg9, undefined8 placeholder_3, undefined8 placeholder_4,
                 undefined8 placeholder_5, undefined8 placeholder_6, undefined8 placeholder_7, int64_t arg1,
                 int64_t arg2, int64_t arg3)
{
    int64_t iVar1;
    int64_t iVar2;
    char *pcVar3;
    int64_t iVar4;
    int64_t iVar5;
    int64_t iVar6;
    double dVar7;
    
    // [01] -r-x section size 21565 named .text
    dVar7 = 0.00000000;
    if (_reloc..LC3 < (double)arg7) {
        dVar7 = ((double)arg7 - placeholder_1) / (double)arg7;
    }
    func_0x08040d6c(arg7, dVar7, (double)arg7 - placeholder_1, _obj.epsilon, arg3, 1, 
                    
                    "\n\n Iteration %d\n WSSR        : %-15g   delta(WSSR)/WSSR   : %g\n delta(WSSR) : %-15g   limit for stopping : %g\n"
                    , arg1 & 0xffffffffU);
    if (obj.fit_show_lambda != (code)0x0) {
        func_0x08040d6c(arg9, arg3, 1, "");
    }
    pcVar3 = "";
    if ((int32_t)(arg1 & 0xffffffffU) < 1) {
        pcVar3 = "";
    }
    func_0x08040d6c(arg3, 1, "", pcVar3);
    if (0 < _obj.num_params) {
        iVar6 = 0;
        iVar5 = 0;
        do {
            iVar1 = iVar5 * 8;
            iVar2 = iVar5 * 8;
            iVar5 = iVar5 + 1;
            iVar4 = _obj.par_name + iVar6;
            iVar6 = iVar6 + 0x33;
            func_0x08040d6c(*(double *)(_obj.scale_params + iVar1) * *(double *)(arg2 + iVar2), arg3, 1, "", iVar4);
        } while ((int32_t)iVar5 < _obj.num_params);
    }
    return;
}


// WARNING: Control flow encountered bad instruction data
// WARNING: Possible PIC construction at 0x08000221: Changing call to branch
// WARNING: Possible PIC construction at 0x080002a4: Changing call to branch
// WARNING: Removing unreachable block (ram,0x080002a9)
// WARNING: Removing unreachable block (ram,0x080002b2)
// WARNING: Removing unreachable block (ram,0x080002c0)
// WARNING: Removing unreachable block (ram,0x080002b8)
// WARNING: [r2ghidra] Var arg_e0h is stack pointer based, which is not supported for decompilation.

void sym.Dblfn(undefined8 placeholder_0, int64_t arg8, int64_t arg9, int64_t arg10, int64_t arg11,
              undefined8 placeholder_5, undefined8 placeholder_6, undefined8 placeholder_7, int64_t arg1, int64_t arg2,
              int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6)
{
    char in_AL;
    char cVar1;
    uint8_t uVar2;
    char *pcVar3;
    undefined4 *puVar4;
    undefined4 *puVar5;
    int64_t in_FS_OFFSET;
    undefined8 in_XMM0_Qb;
    undefined8 in_XMM1_Qb;
    undefined8 in_XMM2_Qb;
    undefined8 in_XMM3_Qb;
    undefined8 in_XMM4_Qb;
    undefined8 in_XMM5_Qb;
    undefined8 in_XMM6_Qb;
    undefined8 in_XMM7_Qb;
    undefined auVar6 [16];
    undefined4 uStack216;
    undefined4 uStack212;
    undefined *puStack208;
    char *pcStack200;
    int64_t iStack192;
    char acStack184 [8];
    int64_t iStack176;
    int64_t iStack168;
    int64_t iStack160;
    int64_t iStack152;
    int64_t iStack144;
    undefined auStack136 [16];
    undefined auStack120 [16];
    undefined auStack104 [16];
    undefined auStack88 [16];
    undefined auStack72 [16];
    undefined auStack56 [16];
    undefined auStack40 [16];
    undefined auStack24 [16];
    
    puVar4 = &uStack216;
    puVar5 = &uStack216;
    iStack176 = arg2;
    iStack168 = arg3;
    iStack160 = arg4;
    iStack152 = arg5;
    iStack144 = arg6;
    if (in_AL != '\0') {
        auStack136 = CONCAT88(in_XMM0_Qb, placeholder_0);
        auStack120 = CONCAT88(in_XMM1_Qb, arg8);
        auStack104 = CONCAT88(in_XMM2_Qb, arg9);
        auStack88 = CONCAT88(in_XMM3_Qb, arg10);
        auStack72 = CONCAT88(in_XMM4_Qb, arg11);
        auStack56 = CONCAT88(in_XMM5_Qb, placeholder_5);
        auStack40 = CONCAT88(in_XMM6_Qb, placeholder_6);
        auStack24 = CONCAT88(in_XMM7_Qb, placeholder_7);
    }
    iStack192 = *(int64_t *)(in_FS_OFFSET + 0x28);
    uStack216 = 8;
    puStack208 = &stack0x00000008;
    pcStack200 = acStack184;
    uStack212 = 0x30;
    if (_reloc.fit_verbosity == 1) {
        puVar5 = (undefined4 *)arg4;
        if (reloc.fit_suppress_log == (code)0x0) {
            puStack208 = &stack0x00000008;
            pcStack200 = acStack184;
            uStack216 = 8;
            uStack212 = 0x30;
            func_0x08040d6c(_obj.log_f, 1, arg1);
            puVar5 = puVar4;
        }
        if (iStack192 == *(int64_t *)(in_FS_OFFSET + 0x28)) {
            return;
        }
        auVar6 = func_0x08040d6c();
        arg1 = (int64_t)SUB168(auVar6 >> 0x40, 0);
        pcStack200 = SUB168(auVar6, 0);
    }
    cVar1 = (char)pcStack200;
    *pcStack200 = *pcStack200 + cVar1;
    *pcStack200 = *pcStack200 + cVar1;
    *pcStack200 = *pcStack200 + cVar1;
    *pcStack200 = *pcStack200 + cVar1;
    *pcStack200 = *pcStack200 + cVar1;
    *pcStack200 = *pcStack200 + cVar1;
    *pcStack200 = *pcStack200 + cVar1;
    *pcStack200 = *pcStack200 + cVar1;
    *pcStack200 = *pcStack200 + cVar1;
    *pcStack200 = *pcStack200 + cVar1;
    *pcStack200 = *pcStack200 + cVar1;
    *pcStack200 = *pcStack200 + cVar1;
    *pcStack200 = *pcStack200 + cVar1;
    *pcStack200 = *pcStack200 + cVar1;
    *pcStack200 = *pcStack200 + cVar1;
    *pcStack200 = *pcStack200 + cVar1;
    *pcStack200 = *pcStack200 + cVar1;
    *pcStack200 = *pcStack200 + cVar1;
    *pcStack200 = *pcStack200 + cVar1;
    *pcStack200 = *pcStack200 + cVar1;
    uVar2 = cVar1 + *pcStack200;
    _uVar2 = (int32_t *)((uint64_t)pcStack200 & 0xffffffffffffff00 | (uint64_t)uVar2);
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *_uVar2 = *_uVar2 + (int32_t)_uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *_uVar2 = *_uVar2 + (int32_t)_uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    pcVar3 = (char *)((uint64_t)pcStack200 & 0xffffff00 | (uint64_t)uVar2);
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *(uint8_t *)arg1 = *(char *)arg1 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *(uint8_t *)puVar5 = *(char *)puVar5 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    // WARNING: Bad instruction - Truncating control flow here
    halt_baddata();
}


uint8_t * sym.log_axis_restriction
                    (int64_t arg7, int64_t arg8, undefined8 placeholder_2, undefined8 placeholder_3,
                    undefined8 placeholder_4, undefined8 placeholder_5, undefined8 placeholder_6,
                    undefined8 placeholder_7, int64_t arg1, uint32_t arg2, int64_t arg3)
{
    uint8_t uVar1;
    uint8_t *puVar2;
    int64_t iVar3;
    code *pcVar4;
    uint8_t *puVar5;
    uint8_t *puVar6;
    int64_t in_FS_OFFSET;
    undefined auStack136 [88];
    int64_t iStack48;
    
    iStack48 = *(int64_t *)(in_FS_OFFSET + 0x28);
    if (arg2 == 1) {
        pcVar4 = reloc.axis_array + (int64_t)_reloc.y_axis * 0x2a8;
        func_0x08040d6c(arg1, 1, "        %s range restricted to [");
        if ((arg3 & 1U) != 0) goto code_r0x08000436;
code_r0x08000450:
        if (*(int32_t *)(pcVar4 + 0x16c) != 1) goto code_r0x08000356;
        func_0x08040d6c(0x22, arg1);
        func_0x08040d6c(arg7, auStack136, 0x50, _reloc.timefmt);
        func_0x08040d6c(auStack136, arg1);
        func_0x08040d6c(0x22, arg1);
        func_0x08040d6c(reloc..LC9, 1, 3, arg1);
        if ((arg3 & 2U) == 0) goto code_r0x08000396;
    } else {
        pcVar4 = reloc.axis_array + (int64_t)_reloc.x_axis * 0x2a8;
        func_0x08040d6c(arg1, 1, "        %s range restricted to [");
        if ((arg3 & 1U) == 0) {
            if ((int32_t)arg2 < 2) goto code_r0x08000450;
code_r0x08000356:
            func_0x08040d6c(arg1, 1, reloc..LC10);
        } else {
code_r0x08000436:
            func_0x08040d6c(0x2a, arg1);
        }
        func_0x08040d6c(reloc..LC9, 1, 3, arg1);
        if ((arg3 & 2U) == 0) {
            if ((int32_t)arg2 < 2) {
code_r0x08000396:
                if (*(int32_t *)(pcVar4 + 0x16c) == 1) {
                    func_0x08040d6c(0x22, arg1);
                    func_0x08040d6c(arg8, auStack136, 0x50, _reloc.timefmt);
                    func_0x08040d6c(auStack136, arg1);
                    func_0x08040d6c(0x22, arg1);
                    goto code_r0x080003c1;
                }
            }
            func_0x08040d6c(arg8, arg1, 1, reloc..LC10);
            goto code_r0x080003c1;
        }
    }
    func_0x08040d6c(0x2a, arg1);
code_r0x080003c1:
    puVar5 = (uint8_t *)0x1;
    pcVar4 = reloc..LC11;
    func_0x08040d6c(reloc..LC11, 1, 2, arg1);
    if (iStack48 == *(int64_t *)(in_FS_OFFSET + 0x28)) {
        return (uint8_t *)0x0;
    }
    func_0x08040d6c();
    puVar6 = *(uint8_t **)pcVar4;
    uVar1 = *puVar6;
    do {
        if (0x3d < uVar1) {
code_r0x08000574:
            puVar2 = (uint8_t *)func_0x08040d6c(puVar6, reloc..LC12);
            *(uint8_t **)pcVar4 = puVar2;
            if (puVar2 == (uint8_t *)0x0) {
                iVar3 = func_0x08040d6c(puVar6);
                puVar2 = puVar6 + iVar3;
                *(uint8_t **)pcVar4 = puVar2;
            }
            *puVar5 = *puVar2;
            puVar5 = *(uint8_t **)pcVar4;
            *(uint8_t **)pcVar4 = puVar5 + 1;
            *puVar5 = 0;
            return puVar6;
        }
        if ((0x2000000100000200U >> ((uint64_t)uVar1 & 0x3f) & 1) == 0) {
            if ((uVar1 < 0xe) && ((0x2401U >> ((uint64_t)uVar1 & 0x3f) & 1) != 0)) {
                return (uint8_t *)0x0;
            }
            goto code_r0x08000574;
        }
        uVar1 = puVar6[1];
        puVar6 = puVar6 + 1;
    } while( true );
}


void sym.ctrlc_handle(void)
{
    func_0x08040d6c(2, sym.ctrlc_handle);
    reloc.ctrlc_flag = (code)0x1;
    return;
}


// WARNING: Control flow encountered bad instruction data

void sym.setvar(int64_t arg1)
{
    uint8_t uVar1;
    int32_t *piVar2;
    uint8_t *puVar3;
    char *in_RCX;
    char *in_RDX;
    
    uVar1 = *(uint8_t *)arg1;
    while (puVar3 = (uint8_t *)(uint64_t)uVar1, uVar1 != 0) {
        if ((uVar1 + 0xa5 & 0xfd) == 0) {
            *(char *)arg1 = '_';
        }
        uVar1 = *(uint8_t *)(arg1 + 1);
        arg1 = arg1 + 1;
        in_RDX = (char *)arg1;
    }
    *puVar3 = *puVar3;
    *puVar3 = *puVar3;
    *puVar3 = *puVar3;
    *puVar3 = *puVar3;
    *puVar3 = *puVar3;
    *puVar3 = *puVar3;
    *puVar3 = *puVar3;
    *puVar3 = *puVar3;
    *puVar3 = *puVar3;
    *puVar3 = *puVar3;
    *puVar3 = *puVar3;
    *puVar3 = *puVar3;
    *puVar3 = *puVar3;
    *puVar3 = *puVar3;
    *puVar3 = *puVar3;
    *puVar3 = *puVar3;
    *puVar3 = *puVar3;
    *puVar3 = *puVar3;
    *puVar3 = *puVar3;
    *puVar3 = *puVar3;
    uVar1 = *puVar3;
    piVar2 = (int32_t *)(uint64_t)uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *piVar2 = *piVar2 + (uint32_t)uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *piVar2 = *piVar2 + (uint32_t)uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *in_RDX = *in_RDX + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *in_RCX = *in_RCX + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    *(uint8_t *)piVar2 = *(char *)piVar2 + uVar1;
    // WARNING: Bad instruction - Truncating control flow here
    halt_baddata();
}


// WARNING: Control flow encountered bad instruction data
// WARNING: Possible PIC construction at 0x0800063f: Changing call to branch
// WARNING: Possible PIC construction at 0x08000672: Changing call to branch
// WARNING: Removing unreachable block (ram,0x08000644)
// WARNING: Removing unreachable block (ram,0x08000677)

void sym.setvarerr(int64_t arg7, undefined8 placeholder_1, undefined8 placeholder_2, undefined8 placeholder_3,
                  undefined8 placeholder_4, undefined8 placeholder_5, undefined8 placeholder_6, undefined8 placeholder_7
                  , int64_t arg1)
{
    char cVar1;
    uint8_t uVar2;
    char *in_RAX;
    char *pcVar3;
    char *in_RCX;
    undefined in_DL;
    undefined in_DH;
    unkbyte6 in_register_00000012;
    
    cVar1 = (char)in_RAX;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    uVar2 = cVar1 + *in_RAX;
    _uVar2 = (int32_t *)((uint64_t)in_RAX & 0xffffffffffffff00 | (uint64_t)uVar2);
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *_uVar2 = *_uVar2 + (int32_t)_uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *_uVar2 = *_uVar2 + (int32_t)_uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    pcVar3 = (char *)((uint64_t)in_RAX & 0xffffff00 | (uint64_t)uVar2);
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *(uint8_t *)CONCAT62(in_register_00000012, CONCAT11(in_DH, in_DL)) =
         *(char *)CONCAT62(in_register_00000012, CONCAT11(in_DH, in_DL)) + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *in_RCX = *in_RCX + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    // WARNING: Bad instruction - Truncating control flow here
    halt_baddata();
}


// WARNING: Control flow encountered bad instruction data
// WARNING: Possible PIC construction at 0x080006b4: Changing call to branch
// WARNING: Possible PIC construction at 0x080006d0: Changing call to branch
// WARNING: Removing unreachable block (ram,0x080006b9)
// WARNING: Removing unreachable block (ram,0x080006d5)

void sym.setvarcovar(int64_t arg7, undefined8 placeholder_1, undefined8 placeholder_2, undefined8 placeholder_3,
                    undefined8 placeholder_4, undefined8 placeholder_5, undefined8 placeholder_6,
                    undefined8 placeholder_7, int64_t arg1, int64_t arg2)
{
    char cVar1;
    uint8_t uVar2;
    char *in_RAX;
    char *pcVar3;
    char *in_RCX;
    undefined in_DL;
    undefined in_DH;
    unkbyte6 in_register_00000012;
    
    cVar1 = (char)in_RAX;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    uVar2 = cVar1 + *in_RAX;
    _uVar2 = (int32_t *)((uint64_t)in_RAX & 0xffffffffffffff00 | (uint64_t)uVar2);
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *_uVar2 = *_uVar2 + (int32_t)_uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *_uVar2 = *_uVar2 + (int32_t)_uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    pcVar3 = (char *)((uint64_t)in_RAX & 0xffffff00 | (uint64_t)uVar2);
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *(uint8_t *)CONCAT62(in_register_00000012, CONCAT11(in_DH, in_DL)) =
         *(char *)CONCAT62(in_register_00000012, CONCAT11(in_DH, in_DL)) + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *in_RCX = *in_RCX + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    // WARNING: Bad instruction - Truncating control flow here
    halt_baddata();
}


int64_t sym.pack_float(int64_t arg1)
{
    char *pcVar1;
    int64_t iVar2;
    int64_t iVar3;
    uint32_t uVar4;
    uint32_t uVar5;
    int64_t iVar6;
    uint32_t *puVar7;
    char *pcVar8;
    uint32_t *puVar9;
    uint32_t *puVar10;
    undefined8 extraout_RDX;
    uint32_t *unaff_RBX;
    uint64_t in_RSI;
    int64_t iVar11;
    code *pcVar12;
    int32_t iVar13;
    int32_t iVar14;
    int32_t iVar15;
    int32_t iVar16;
    int64_t in_FS_OFFSET;
    bool bVar17;
    double extraout_XMM0_Qa;
    double dVar18;
    int64_t arg7;
    double dVar19;
    undefined in_XMM1 [16];
    undefined auVar20 [16];
    int64_t in_XMM2_Qa;
    double in_XMM3_Qa;
    undefined8 in_XMM4_Qa;
    undefined8 in_XMM5_Qa;
    undefined8 in_XMM6_Qa;
    undefined8 in_XMM7_Qa;
    int64_t iStack392;
    uint32_t auStack384 [4];
    undefined8 uStack368;
    undefined8 uStack360;
    uint64_t uStack352;
    undefined2 uStack344;
    int64_t iStack120;
    uint32_t *puStack104;
    int64_t iStack88;
    uint32_t auStack44 [3];
    int64_t iStack32;
    
    iStack32 = *(int64_t *)(in_FS_OFFSET + 0x28);
    puVar7 = (uint32_t *)arg1;
    if ((int32_t)_reloc..data < 0) {
        unaff_RBX = auStack44;
        puVar7 = unaff_RBX;
        func_0x08040d6c(_reloc..LC17, unaff_RBX, 0xc, 1, 0xc, "");
        puVar10 = unaff_RBX;
        do {
            puVar9 = puVar10;
            uVar4 = *puVar9 + 0xfefefeff & ~*puVar9;
            uVar5 = uVar4 & 0x80808080;
            puVar10 = puVar9 + 1;
        } while (uVar5 == 0);
        bVar17 = (uVar4 & 0x8080) == 0;
        if (bVar17) {
            uVar5 = uVar5 >> 0x10;
        }
        if (bVar17) {
            puVar10 = (uint32_t *)((int64_t)puVar9 + 6);
        }
        in_RSI = (uint64_t)(uVar5 & 0xffffff00);
        _reloc..data = (uint32_t)
                       ((int64_t)puVar10 +
                        ((-3 - (uint64_t)CARRY1((uint8_t)uVar5, (uint8_t)uVar5)) - (int64_t)unaff_RBX) == 9);
    }
    iVar14 = (int32_t)puVar7;
    if (_reloc..data != 0) {
        in_RSI = 0x65;
        iVar11 = arg1;
        iVar6 = func_0x08040d6c();
        iVar14 = (int32_t)iVar11;
        if (iVar6 == 0) {
            in_RSI = 0x45;
            iVar11 = arg1;
            iVar6 = func_0x08040d6c();
            iVar14 = (int32_t)iVar11;
            if (iVar6 == 0) goto code_r0x08000768;
        }
        if (*(char *)(iVar6 + 2) == '0') {
            pcVar8 = (char *)(iVar6 + 2);
            do {
                pcVar1 = pcVar8 + 1;
                *pcVar8 = *pcVar1;
                pcVar8 = pcVar8 + 1;
            } while (*pcVar1 != '\0');
        }
    }
code_r0x08000768:
    if (iStack32 == *(int64_t *)(in_FS_OFFSET + 0x28)) {
        return arg1;
    }
    func_0x08040d6c();
    dVar19 = SUB168(in_XMM1, 0);
    iStack120 = *(int64_t *)(in_FS_OFFSET + 0x28);
    iStack392 = in_XMM2_Qa;
    puStack104 = unaff_RBX;
    iStack88 = arg1;
    if ((iVar14 + 2U & 0xfffffffd) == 0) {
        uStack352 = uStack352 & 0xffffffffffffff00;
        auStack384[0] = str.iter______chisq_______delta_lim._0_4_;
        auStack384[1] = str.iter______chisq_______delta_lim._4_4_;
        auStack384[2] = str.iter______chisq_______delta_lim._8_4_;
        auStack384[3] = str.iter______chisq_______delta_lim._12_4_;
        uStack368 = str.iter______chisq_______delta_lim._16_8_;
        uStack360 = str.iter______chisq_______delta_lim._24_8_;
        if (obj.fit_show_lambda != (code)0x0) {
            uStack352 = 0x206164626d616c20;
            uStack344 = 0x20;
        }
        func_0x08040d6c(str.iter______chisq_______delta_lim._16_8_, auStack384);
        iVar11 = SUB168(in_XMM1, 0);
        puVar7 = auStack384;
        do {
            puVar10 = puVar7;
            uVar4 = *puVar10 + 0xfefefeff & ~*puVar10;
            uVar5 = uVar4 & 0x80808080;
            puVar7 = puVar10 + 1;
        } while (uVar5 == 0);
        bVar17 = (uVar4 & 0x8080) == 0;
        if (bVar17) {
            uVar5 = uVar5 >> 0x10;
        }
        if (bVar17) {
            puVar7 = (uint32_t *)((int64_t)puVar10 + 6);
        }
        iVar16 = (int32_t)auStack384;
        iVar15 = (((int32_t)puVar7 + -3) - (uint32_t)CARRY1((uint8_t)uVar5, (uint8_t)uVar5)) - iVar16;
        if (0 < _obj.num_params) {
            iVar13 = 0;
            do {
                func_0x08040d6c(auStack384, 0x100, 1, 0x100, "");
                puVar7 = auStack384;
                do {
                    puVar10 = puVar7;
                    uVar4 = *puVar10 + 0xfefefeff & ~*puVar10;
                    uVar5 = uVar4 & 0x80808080;
                    puVar7 = puVar10 + 1;
                } while (uVar5 == 0);
                bVar17 = (uVar4 & 0x8080) == 0;
                if (bVar17) {
                    uVar5 = uVar5 >> 0x10;
                }
                if (bVar17) {
                    puVar7 = (uint32_t *)((int64_t)puVar10 + 6);
                }
                iVar15 = iVar15 + ((((int32_t)puVar7 + -3) - (uint32_t)CARRY1((uint8_t)uVar5, (uint8_t)uVar5)) - iVar16)
                ;
                if ((_reloc.fit_wrap <= iVar15) && (0 < _reloc.fit_wrap)) {
                    iVar15 = 4;
                    func_0x08040d6c(extraout_RDX, 1, "", 4, 0x20);
                }
                iVar13 = iVar13 + 1;
                func_0x08040d6c(auStack384, extraout_RDX);
                iVar11 = SUB168(in_XMM1, 0);
            } while (iVar13 < _obj.num_params);
        }
        iVar6 = 10;
        func_0x08040d6c(10, extraout_RDX);
        if (iVar14 == -2) goto code_r0x08000acd;
    }
    pcVar12 = reloc..LC21;
    dVar19 = extraout_XMM0_Qa - dVar19;
    in_XMM3_Qa = extraout_XMM0_Qa * _obj.epsilon;
    dVar18 = _reloc.epsilon_abs + in_XMM3_Qa;
    if (iVar14 < 0) {
        iVar14 = 0x2a;
        pcVar12 = reloc..LC22;
    }
    puVar7 = auStack384 + 1;
    func_0x08040d6c(dVar18, dVar19, auStack384, 0x100, 1, 0x100, pcVar12, iVar14);
    dVar19 = dVar19 / dVar18;
    auVar20 = ZEXT816((uint64_t)dVar19);
    func_0x08040d6c(extraout_XMM0_Qa, dVar19, puVar7, 0xfc, 1, 0xfc, "");
    puVar10 = auStack384;
    if (obj.fit_show_lambda != (code)0x0) {
        do {
            puVar9 = puVar10;
            uVar4 = *puVar9 + 0xfefefeff & ~*puVar9;
            uVar5 = uVar4 & 0x80808080;
            puVar10 = puVar9 + 1;
        } while (uVar5 == 0);
        bVar17 = (uVar4 & 0x8080) == 0;
        if (bVar17) {
            uVar5 = uVar5 >> 0x10;
        }
        if (bVar17) {
            puVar10 = (uint32_t *)((int64_t)puVar9 + 6);
        }
        iVar11 = (int64_t)puVar10 + ((-3 - (uint64_t)CARRY1((uint8_t)uVar5, (uint8_t)uVar5)) - (int64_t)auStack384);
        func_0x08040d6c(iStack392, iVar11 + (int64_t)auStack384, 0x100 - iVar11, 1, 0xffffffffffffffff, "");
    }
    iVar14 = 0;
    do {
        iVar14 = iVar14 + 1;
        sym.pack_float((int64_t)puVar7 + 1);
        puVar7 = (uint32_t *)func_0x08040d6c((int64_t)puVar7 + 1, 0x65);
        if (2 < iVar14) break;
    } while (puVar7 != (uint32_t *)0x0);
    func_0x08040d6c(auStack384);
    iVar11 = SUB168(auVar20, 0);
    puVar7 = auStack384;
    do {
        puVar10 = puVar7;
        uVar4 = *puVar10 + 0xfefefeff & ~*puVar10;
        uVar5 = uVar4 & 0x80808080;
        puVar7 = puVar10 + 1;
    } while (uVar5 == 0);
    bVar17 = (uVar4 & 0x8080) == 0;
    if (bVar17) {
        uVar5 = uVar5 >> 0x10;
    }
    if (bVar17) {
        puVar7 = (uint32_t *)((int64_t)puVar10 + 6);
    }
    iVar15 = (int32_t)auStack384;
    iVar14 = (((int32_t)puVar7 + -3) - (uint32_t)CARRY1((uint8_t)uVar5, (uint8_t)uVar5)) - iVar15;
    if (0 < _obj.num_params) {
        iVar6 = 0;
        do {
            func_0x08040d6c(*(double *)(_obj.scale_params + iVar6 * 8) * *(double *)(in_RSI + iVar6 * 8), auStack384, 
                            0x100, 1, 0x100, "");
            sym.pack_float((int64_t)auStack384);
            puVar7 = auStack384;
            do {
                puVar10 = puVar7;
                uVar4 = *puVar10 + 0xfefefeff & ~*puVar10;
                uVar5 = uVar4 & 0x80808080;
                puVar7 = puVar10 + 1;
            } while (uVar5 == 0);
            bVar17 = (uVar4 & 0x8080) == 0;
            if (bVar17) {
                uVar5 = uVar5 >> 0x10;
            }
            if (bVar17) {
                puVar7 = (uint32_t *)((int64_t)puVar10 + 6);
            }
            iVar14 = iVar14 + ((((int32_t)puVar7 + -3) - (uint32_t)CARRY1((uint8_t)uVar5, (uint8_t)uVar5)) - iVar15);
            if ((_reloc.fit_wrap <= iVar14) && (0 < _reloc.fit_wrap)) {
                iVar14 = 4;
                func_0x08040d6c(extraout_RDX, 1, "", 4, 0x20);
            }
            iVar6 = iVar6 + 1;
            func_0x08040d6c(auStack384, extraout_RDX);
            iVar11 = SUB168(auVar20, 0);
        } while ((int32_t)iVar6 < _obj.num_params);
    }
    iVar6 = 10;
    func_0x08040d6c(10, extraout_RDX);
code_r0x08000acd:
    if (iStack120 == *(int64_t *)(in_FS_OFFSET + 0x28)) {
        return 0;
    }
    func_0x08040d6c();
    if (_reloc.fit_verbosity == 4) {
        sym.fit_show(arg7, iVar11, in_XMM2_Qa, in_XMM3_Qa, in_XMM4_Qa, in_XMM5_Qa, in_XMM6_Qa, in_XMM7_Qa, iVar6, _obj.a
                     , _reloc.stderr);
    } else {
        sym.fit_show_brief(arg7, iVar11, in_XMM2_Qa, in_XMM3_Qa, in_XMM4_Qa, in_XMM5_Qa, in_XMM6_Qa, in_XMM7_Qa, iVar6, 
                           _obj.a, _reloc.stderr);
    }
    reloc.ctrlc_flag = (code)0x0;
    do {
        while( true ) {
            func_0x08040d6c("\n\n(S)top fit, (C)ontinue, (E)xecute FIT_SCRIPT:  ", 1, 0x31, _reloc.stderr);
            iVar14 = func_0x08040d6c(_reloc.stdin);
            if (0x65 < iVar14) break;
            if (iVar14 < 0x43) {
                if (iVar14 == -1) goto code_r0x08000dd5;
            } else {
                switch(iVar14) {
                case 0x43:
                case 99:
                    func_0x08040d6c("", 1, 10, _reloc.stderr);
                    return 1;
                case 0x45:
                case 0x65:
                    pcVar8 = _reloc.fit_script;
                    if ((_reloc.fit_script == (char *)0x0) &&
                       (pcVar8 = (char *)func_0x08040d6c(""), pcVar8 == (char *)0x0)) {
                        pcVar8 = "";
                    }
                    iVar11 = 0;
                    func_0x08040d6c(_reloc.stderr, 1, "", pcVar8);
                    if (0 < _obj.num_params) {
                        do {
                            iVar6 = iVar11 * 8;
                            iVar2 = iVar11 * 8;
                            iVar3 = iVar11 * 8;
                            iVar11 = iVar11 + 1;
                            func_0x08040d6c(*(double *)(_obj.a + iVar6) * *(double *)(_obj.scale_params + iVar2), 0, 
                                            *(undefined8 *)(_obj.par_udv + iVar3));
                        } while ((int32_t)iVar11 < _obj.num_params);
                    }
                    func_0x08040d6c(pcVar8);
                    break;
                case 0x53:
                    goto code_r0x08000dd5;
                }
            }
        }
    } while (iVar14 != 0x73);
code_r0x08000dd5:
    func_0x08040d6c("", 1, 6, _reloc.stderr);
    obj.user_stop = (code)0x1;
    return 0;
}


// WARNING: [r2ghidra] Failed to match type signed int for variable arg2 to Decompiler type: Unknown type identifier
// signed
// WARNING: [r2ghidra] Failed to match type signed int64_t for variable arg4 to Decompiler type: Unknown type identifier
// signed

uint32_t sym.print_function_definitions_recursion.constprop.0
                   (int64_t arg1, int32_t *arg2, int64_t arg3, undefined8 arg4)
{
    int32_t iVar1;
    uint32_t uVar2;
    int64_t *piVar3;
    int64_t iVar4;
    int64_t iVar5;
    int64_t iVar6;
    uint32_t uVar7;
    
    uVar7 = *(uint32_t *)arg1;
    if (uVar7 != 0) {
        iVar1 = *arg2;
        if (iVar1 == 0x20) {
            uVar7 = 1;
        } else {
            if ((int32_t)arg4 < 0x14) {
                if ((int32_t)uVar7 < 1) {
                    uVar7 = 0;
                } else {
                    iVar4 = 0;
                    uVar7 = 0;
                    while (iVar1 < 0x20) {
                        iVar5 = iVar4 * 0x20;
                        if (*(int32_t *)(arg1 + 8 + iVar5) - 6U < 2) {
                            iVar6 = *(int64_t *)(arg1 + 0x10 + iVar5);
                            piVar3 = (int64_t *)arg3;
                            if (*(int64_t *)(iVar6 + 0x18) != 0) {
                                do {
                                    if (*(int64_t *)(iVar6 + 0x18) == *piVar3) break;
                                    if (*piVar3 == 0) {
                                        *arg2 = iVar1 + 1;
                                        *piVar3 = *(int64_t *)(*(int64_t *)(arg1 + 0x10 + iVar5) + 0x18);
                                        iVar6 = *(int64_t *)(arg1 + 0x10 + iVar5);
                                        break;
                                    }
                                    piVar3 = piVar3 + 1;
                                } while (piVar3 != (int64_t *)(arg3 + 0x100));
                                uVar2 = sym.print_function_definitions_recursion.constprop.0
                                                  (*(int64_t *)(iVar6 + 0x10), arg2, arg3, (uint64_t)((int32_t)arg4 + 1)
                                                  );
                                uVar7 = uVar7 | uVar2;
                            }
                        }
                        iVar4 = iVar4 + 1;
                        if (*(int32_t *)arg1 == (int32_t)iVar4 || *(int32_t *)arg1 < (int32_t)iVar4) {
                            return uVar7;
                        }
                        iVar1 = *arg2;
                    }
                }
            } else {
                uVar7 = 2;
            }
        }
    }
    return uVar7;
}


// WARNING: Could not reconcile some variable overlaps

void sym.analyze(int64_t arg7, undefined8 placeholder_1, undefined8 placeholder_2, undefined8 placeholder_3,
                undefined8 placeholder_4, undefined8 placeholder_5, undefined8 placeholder_6, undefined8 placeholder_7,
                int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5)
{
    int64_t iVar1;
    double *pdVar2;
    undefined *puVar3;
    code *pcVar4;
    double *pdVar5;
    double *pdVar6;
    uint32_t uVar7;
    int32_t iVar8;
    int64_t iVar9;
    int32_t iVar10;
    uint64_t uVar11;
    uint64_t uVar12;
    undefined8 in_R10;
    int64_t in_R11;
    int32_t iVar13;
    double dVar14;
    int64_t iVar15;
    uint64_t unaff_R15;
    int64_t in_FS_OFFSET;
    bool bVar16;
    double dVar17;
    undefined8 extraout_XMM0_Qa;
    double extraout_XMM0_Qa_00;
    double dVar18;
    undefined8 in_XMM1_Qb;
    undefined auVar19 [16];
    undefined8 in_XMM2_Qb;
    undefined auVar20 [16];
    undefined *puStack144;
    double dStack136;
    undefined auStack88 [24];
    int64_t iStack64;
    
    auVar20 = CONCAT88(in_XMM2_Qb, placeholder_2);
    auVar19 = CONCAT88(in_XMM1_Qb, placeholder_1);
    iStack64 = *(int64_t *)(in_FS_OFFSET + 0x28);
    puVar3 = (undefined *)func_0x08040d6c(arg7, placeholder_1, placeholder_2, placeholder_3, _obj.num_data);
    puStack144 = (undefined *)func_0x08040d6c(_obj.num_params);
    func_0x08040d6c(arg1);
    uVar11 = 0;
    uVar7 = _obj.num_params - 1;
    if (0 < _obj.num_params) {
        do {
            *(undefined8 *)(puStack144 + uVar11 * 8) = *(undefined8 *)(arg1 + uVar11 * 8);
            bVar16 = uVar7 != uVar11;
            uVar11 = uVar11 + 1;
        } while (bVar16);
        unaff_R15 = 0;
        do {
            dVar17 = *(double *)(arg1 + unaff_R15 * 8);
            dVar14 = _reloc..LC46;
            dVar18 = _reloc..LC3;
            if (_reloc..LC3 <= (double)((uint64_t)dVar17 & _reloc..LC47)) {
                dVar14 = _reloc..LC48 * dVar17;
                dVar18 = dVar17;
            }
            *(double *)(puStack144 + unaff_R15 * 8) = dVar14;
            func_0x08040d6c(dVar14, dVar18, puStack144);
            if (0 < (int32_t)_obj.num_data) {
                dVar18 = dVar18 * _reloc..LC49;
                uVar7 = _obj.num_data - 1;
                uVar11 = 0;
                do {
                    *(double *)(*(int64_t *)(arg2 + uVar11 * 8) + unaff_R15 * 8) =
                         (*(double *)(puVar3 + uVar11 * 8) - *(double *)(arg3 + uVar11 * 8)) / dVar18;
                    bVar16 = uVar7 != uVar11;
                    uVar11 = uVar11 + 1;
                } while (bVar16);
            }
            auVar19 = ZEXT816((uint64_t)dVar18);
            *(undefined8 *)(puStack144 + unaff_R15 * 8) = *(undefined8 *)(arg1 + unaff_R15 * 8);
            unaff_R15 = unaff_R15 + 1;
            dStack136 = (double)arg1;
        } while ((int32_t)unaff_R15 < _obj.num_params);
    }
    func_0x08040d6c(puVar3);
    func_0x08040d6c(puStack144);
    dVar18 = SUB168(auVar19, 0);
    iVar13 = (int32_t)in_R10;
    dVar17 = (double)(uint64_t)_obj.num_data;
    if (1 < (int32_t)_obj.num_errors) {
        puVar3 = (undefined *)0x0;
        if (0 < _obj.num_params) {
            do {
                auVar19 = (undefined  [16])0x0;
                iVar9 = (int64_t)puVar3 * 8;
                iVar1 = (int64_t)puVar3 * 8;
                iVar15 = (int64_t)puVar3 * 8;
                puVar3 = puVar3 + 1;
                func_0x08040d6c(*(double *)(_obj.scale_params + iVar9) * *(double *)(arg1 + iVar1), 0, 
                                *(undefined8 *)(_obj.par_udv + iVar15));
            } while ((int32_t)puVar3 < _obj.num_params);
        }
        dVar18 = SUB168(auVar19, 0);
        iVar13 = (int32_t)in_R10;
        dVar17 = (double)(uint64_t)_obj.num_data;
        puStack144 = (undefined *)0x0;
        dVar14 = (double)(uint64_t)_obj.num_data;
        iVar10 = _obj.num_indep;
        if ((int32_t)_obj.num_data < 1) goto code_r0x08001855;
        do {
            if (0 < iVar10) {
                arg1 = 0;
                uVar11 = 0;
                do {
                    while( true ) {
                        puVar3 = (undefined *)(uVar11 & 0xffffffff);
                        if (obj.err_cols[uVar11] == (code)0x0) break;
                        iVar15 = 0x8005668;
                        unaff_R15 = 0;
                        iVar9 = _reloc..LC102;
                        do {
                            iVar13 = (int32_t)unaff_R15;
                            if (iVar13 != (int32_t)uVar11) {
                                func_0x08040d6c(*(undefined8 *)
                                                 (iVar9 + (int64_t)(iVar10 * (int32_t)puStack144 + iVar13) * 8), 0, 
                                                iVar15);
                                iVar9 = _reloc..LC102;
                                iVar10 = _obj.num_indep;
                            }
                            unaff_R15 = (uint64_t)(iVar13 + 1U);
                            iVar15 = iVar15 + 0x18;
                        } while ((int32_t)(iVar13 + 1U) < iVar10);
                        uVar12 = uVar11 + 1;
                        dVar17 = *(double *)(iVar9 + (int64_t)((int32_t)puVar3 + iVar10 * (int32_t)puStack144) * 8);
                        puVar3 = auStack88;
                        dVar18 = (double)((uint64_t)dVar17 & _reloc..LC47);
                        auVar20 = maxsd(ZEXT816((uint64_t)(_reloc..LC49 * dVar18)), 
                                        ZEXT816((uint64_t)((dVar18 + _reloc..LC50) * _reloc..LC51)));
                        dStack136 = SUB168(auVar20, 0);
                        auVar19 = (undefined  [16])0x0;
                        func_0x08040d6c(dVar17 + dStack136, 0, dStack136, uVar11 * 0x18 + 0x8005668, 0x8005668);
                        func_0x08040d6c(*(undefined8 *)0x8005650, puVar3);
                        func_0x08040d6c(puVar3);
                        iVar13 = (int32_t)arg1;
                        auVar20 = auVar20 & (undefined  [16])0xffffffffffffffff;
                        arg1 = ZEXT48(iVar13 + 1);
                        *(double *)(*(int64_t *)(arg5 + (int64_t)iVar13 * 8) + (int64_t)puStack144 * 8) =
                             (extraout_XMM0_Qa_00 - *(double *)(arg3 + (int64_t)puStack144 * 8)) / dStack136;
                        uVar11 = uVar12;
                        iVar10 = _obj.num_indep;
                        if (_obj.num_indep <= (int32_t)uVar12) goto code_r0x08001a83;
                    }
                    uVar11 = uVar11 + 1;
                } while ((int32_t)uVar11 < iVar10);
code_r0x08001a83:
                dVar17 = (double)(uint64_t)_obj.num_data;
            }
            dVar18 = SUB168(auVar19, 0);
            iVar13 = (int32_t)in_R10;
            puStack144 = puStack144 + 1;
        } while ((int32_t)puStack144 < SUB84(dVar17, 0));
    }
    dVar14 = dVar17;
    if (SUB84(dVar17, 0) < 1) goto code_r0x08001855;
    puVar3 = (undefined *)0x0;
    puStack144 = (undefined *)((uint64_t)(SUB84(dVar17, 0) - 1) * 8 + 8);
    arg1 = ZEXT48(_obj.num_errors);
    in_R11 = (uint64_t)(_obj.num_params - 1) * 8 + 8;
    unaff_R15 = arg1;
    iVar13 = _obj.num_params;
    dStack136 = dVar17;
    do {
        if ((int32_t)unaff_R15 < 2) {
            auVar19 = ZEXT816(*(uint64_t *)(puVar3 + _obj.err_data));
        } else {
            dVar17 = *(double *)(_obj.err_data + (int64_t)((int32_t)arg1 + -1) * 8);
            auVar20 = ZEXT816((uint64_t)(dVar17 * dVar17));
            if (0 < _obj.num_indep) {
                pcVar4 = obj.err_cols;
                iVar10 = 0;
                do {
                    if (*pcVar4 != (code)0x0) {
                        iVar9 = (int64_t)iVar10;
                        iVar8 = iVar10 + ((int32_t)arg1 - (int32_t)unaff_R15);
                        iVar10 = iVar10 + 1;
                        dVar17 = *(double *)(puVar3 + *(int64_t *)(arg5 + iVar9 * 8)) *
                                 *(double *)(_obj.err_data + (int64_t)iVar8 * 8);
                        auVar20 = CONCAT88(SUB168(auVar20 >> 0x40, 0), SUB168(auVar20, 0) + dVar17 * dVar17);
                    }
                    pcVar4 = pcVar4 + 1;
                } while ((code *)((uint64_t)(_obj.num_indep - 1) + 0x80057d1) != pcVar4);
            }
            auVar19 = sqrtsd(auVar20, auVar20);
            dVar18 = SUB168(auVar19, 0);
            if (SUB168(auVar20, 0) < 0.00000000) goto code_r0x08001ab3;
        }
        while( true ) {
            dVar18 = SUB168(auVar19, 0);
            *(double *)(puVar3 + arg3) = (*(double *)(puVar3 + arg3) - *(double *)(puVar3 + _obj.fit_z)) / dVar18;
            if (0 < iVar13) {
                pdVar2 = *(double **)(puVar3 + arg2);
                pdVar5 = pdVar2;
                do {
                    pdVar6 = pdVar5 + 1;
                    *pdVar5 = *pdVar5 / dVar18;
                    pdVar5 = pdVar6;
                } while (pdVar6 != (double *)(in_R11 + (int64_t)pdVar2));
            }
            puVar3 = puVar3 + 8;
            arg1 = ZEXT48((uint32_t)((int32_t)arg1 + (int32_t)unaff_R15));
            if (puStack144 != puVar3) break;
            dVar14 = (double)((uint64_t)dStack136 & 0xffffffff);
code_r0x08001855:
            func_0x08040d6c(dVar14);
            *(undefined8 *)arg4 = extraout_XMM0_Qa;
            if (iStack64 == *(int64_t *)(in_FS_OFFSET + 0x28)) {
                return;
            }
            func_0x08040d6c();
            arg5 = (int64_t)dVar14;
code_r0x08001ab3:
            func_0x08040d6c(SUB168(auVar20, 0));
            auVar19 = ZEXT816((uint64_t)dVar18);
        }
    } while( true );
}


undefined4
sym.marquardt(undefined8 placeholder_0, double placeholder_1, undefined8 placeholder_2, int64_t arg10,
             undefined8 placeholder_4, undefined8 placeholder_5, undefined8 placeholder_6, undefined8 placeholder_7,
             int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4)
{
    uint32_t uVar1;
    double *pdVar2;
    double dVar3;
    int64_t iVar4;
    int32_t iVar5;
    int32_t iVar6;
    uint32_t uVar7;
    undefined4 uVar8;
    int64_t iVar9;
    uint64_t uVar10;
    double *pdVar11;
    int64_t iVar12;
    double **ppdVar13;
    int64_t iVar14;
    int32_t iVar15;
    int64_t iVar16;
    int64_t *piVar17;
    int64_t in_FS_OFFSET;
    bool bVar18;
    double dVar19;
    int64_t extraout_XMM0_Qa;
    int64_t extraout_XMM0_Qa_00;
    undefined8 in_XMM3_Qb;
    undefined auVar20 [16];
    double dStack72;
    uint64_t uStack64;
    
    iVar5 = _obj.num_data;
    uVar1 = _obj.num_params;
    iVar9 = _obj.d.12528;
    iVar4 = _obj.tmp_d.12529;
    iVar14 = ""._0_8_;
    iVar12 = _obj.tmp_C.12530;
    auVar20 = CONCAT88(in_XMM3_Qb, arg10);
    dVar19 = *(double *)arg4;
    uStack64 = *(uint64_t *)(in_FS_OFFSET + 0x28);
    if (dVar19 != _reloc..LC52) {
        if (dVar19 == _reloc..LC53) {
            func_0x08040d6c(dVar19, placeholder_1, placeholder_2, arg10, _obj.d.12528);
            func_0x08040d6c(iVar4);
            func_0x08040d6c(iVar14);
            func_0x08040d6c(_obj.temp_a.12527);
            func_0x08040d6c(_obj.residues.12531);
            func_0x08040d6c(iVar12);
            func_0x08040d6c(_obj.deriv.12532);
            uVar8 = 0;
            _obj.residues.12531 = 0;
            _obj.temp_a.12527 = 0;
            ""._0_8_ = 0;
            _obj.tmp_d.12529 = 0;
            _obj.d.12528 = 0;
            _obj.deriv.12532 = 0;
            _obj.tmp_C.12530 = 0;
        } else {
            iVar6 = _obj.num_data + _obj.num_params;
            if (0 < iVar6) {
                iVar16 = (int64_t)(int32_t)_obj.num_params;
                uVar10 = 0;
                do {
                    func_0x08040d6c(*(undefined8 *)(iVar12 + uVar10 * 8), *(undefined8 *)(arg2 + uVar10 * 8), 
                                    iVar16 << 3);
                    bVar18 = iVar6 - 1 != uVar10;
                    uVar10 = uVar10 + 1;
                } while (bVar18);
            }
            iVar16 = (int64_t)iVar5 * 8;
            func_0x08040d6c(iVar4, iVar9, iVar16);
            if (0 < (int32_t)uVar1) {
                iVar9 = 0;
                do {
                    *(undefined8 *)(*(int64_t *)(iVar12 + iVar16 + iVar9) + iVar9) = *(undefined8 *)arg4;
                    *(undefined8 *)(iVar4 + iVar16 + iVar9) = 0;
                    iVar9 = iVar9 + 8;
                } while (iVar9 != (uint64_t)(uVar1 - 1) * 8 + 8);
            }
            dVar19 = 0.00000000;
            func_0x08040d6c(iVar12, iVar4, iVar14, iVar6, uVar1);
            iVar14 = _obj.temp_a.12527;
            iVar12 = ""._0_8_;
            if (0 < (int32_t)_obj.num_params) {
                uVar1 = _obj.num_params - 1;
                uVar10 = 0;
                do {
                    dVar19 = *(double *)(arg1 + uVar10 * 8) + *(double *)(iVar12 + uVar10 * 8);
                    *(double *)(iVar14 + uVar10 * 8) = dVar19;
                    bVar18 = uVar1 != uVar10;
                    uVar10 = uVar10 + 1;
                } while (bVar18);
            }
            sym.analyze((int64_t)dVar19, placeholder_1, placeholder_2, SUB168(auVar20, 0), placeholder_4, placeholder_5
                        , placeholder_6, placeholder_7, iVar14, _obj.tmp_C.12530, _obj.tmp_d.12529, (int64_t)&dStack72, 
                        _obj.deriv.12532);
            iVar5 = _reloc.fit_verbosity;
            arg10 = SUB168(auVar20, 0);
            placeholder_1 = *(double *)arg3;
            if (placeholder_1 < dStack72) {
                dVar19 = *(double *)arg4 * _obj.lambda_up_factor;
                *(double *)arg4 = dVar19;
                if (iVar5 == 4) {
                    func_0x08040d6c(dStack72, placeholder_1, dVar19, 0x2a, _reloc.stderr);
                    uVar8 = 3;
                } else {
                    if (iVar5 == 3) {
                        placeholder_1 = *(double *)arg3;
                        sym.fit_show_brief((int64_t)dStack72, (int64_t)placeholder_1, (int64_t)dVar19, arg10, 
                                           placeholder_4, placeholder_5, placeholder_6, placeholder_7, 0xffffffff, 
                                           _obj.temp_a.12527, _reloc.stderr);
                        uVar8 = 3;
                    } else {
                        uVar8 = 3;
                    }
                }
            } else {
                placeholder_1 = *(double *)arg4;
                if (_reloc..LC54 < placeholder_1) {
                    if (_reloc.fit_verbosity == 4) {
                        func_0x08040d6c(dStack72, 0x2f);
                        placeholder_1 = *(double *)arg4;
                    }
                    placeholder_1 = placeholder_1 / _obj.lambda_down_factor;
                    *(double *)arg4 = placeholder_1;
                }
                uVar1 = _obj.num_params;
                arg10 = SUB168(auVar20, 0);
                *(double *)arg3 = dStack72;
                iVar4 = _obj.d.12528;
                iVar14 = _obj.tmp_d.12529;
                iVar12 = _obj.tmp_C.12530;
                if (0 < _obj.num_data) {
                    uVar7 = _obj.num_data - 1;
                    piVar17 = (int64_t *)0x0;
                    do {
                        func_0x08040d6c(dStack72, *(undefined8 *)(arg2 + (int64_t)piVar17 * 8), 
                                        *(undefined8 *)(iVar12 + (int64_t)piVar17 * 8), (int64_t)(int32_t)uVar1 << 3);
                        arg10 = SUB168(auVar20, 0);
                        dStack72 = *(double *)(iVar14 + (int64_t)piVar17 * 8);
                        *(double *)(iVar4 + (int64_t)piVar17 * 8) = dStack72;
                        arg4 = (int64_t)piVar17 + 1;
                        bVar18 = (int64_t *)(uint64_t)uVar7 != piVar17;
                        piVar17 = (int64_t *)arg4;
                    } while (bVar18);
                }
                iVar12 = _obj.temp_a.12527;
                if (0 < (int32_t)uVar1) {
                    uVar10 = 0;
                    do {
                        *(undefined8 *)(arg1 + uVar10 * 8) = *(undefined8 *)(iVar12 + uVar10 * 8);
                        bVar18 = uVar1 - 1 != uVar10;
                        uVar10 = uVar10 + 1;
                    } while (bVar18);
                }
                uVar8 = 2;
            }
        }
        while (arg2 = uStack64 ^ *(uint64_t *)(in_FS_OFFSET + 0x28), arg2 != 0) {
            func_0x08040d6c();
code_r0x08002160:
            func_0x08040d6c(placeholder_1);
code_r0x08001f76:
            *(int64_t *)arg4 = arg10;
code_r0x08001f7b:
            iVar5 = _obj.num_data;
            iVar6 = (int32_t)arg1;
            if (0 < iVar6) {
                iVar12 = (int64_t)_obj.num_data;
                iVar14 = 8;
                iVar15 = 1;
                if (iVar6 != 1) {
                    do {
                        iVar4 = *(int64_t *)(arg2 + (int64_t)(iVar15 + iVar5) * 8);
                        iVar9 = 0;
                        do {
                            iVar16 = *(int64_t *)(arg2 + iVar12 * 8 + iVar9);
                            *(undefined8 *)(iVar4 + iVar9) = 0;
                            iVar9 = iVar9 + 8;
                            *(undefined8 *)(iVar16 + iVar14) = 0;
                        } while (iVar9 != iVar14);
                        iVar15 = iVar15 + 1;
                        iVar14 = iVar14 + 8;
                    } while (iVar15 != iVar6);
                }
            }
            uVar8 = 0;
        }
        return uVar8;
    }
    _obj.temp_a.12527 = func_0x08040d6c(dVar19, placeholder_1, placeholder_2, arg10, _obj.num_params);
    _obj.d.12528 = func_0x08040d6c(_obj.num_params + _obj.num_data);
    _obj.tmp_d.12529 = func_0x08040d6c(_obj.num_params + _obj.num_data);
    ""._0_8_ = func_0x08040d6c(_obj.num_params);
    _obj.residues.12531 = func_0x08040d6c(_obj.num_params + _obj.num_data);
    _obj.tmp_C.12530 = func_0x08040d6c(_obj.num_data + _obj.num_params, _obj.num_params);
    _obj.deriv.12532 = 0;
    iVar12 = extraout_XMM0_Qa;
    if (1 < _obj.num_errors) {
        _obj.deriv.12532 = func_0x08040d6c(_obj.num_errors + -1, _obj.num_data);
        iVar12 = extraout_XMM0_Qa_00;
    }
    sym.analyze(iVar12, placeholder_1, placeholder_2, arg10, placeholder_4, placeholder_5, placeholder_6, placeholder_7
                , arg1, arg2, _obj.d.12528, arg3, _obj.deriv.12532);
    iVar5 = _obj.num_data;
    dVar19 = 0.00000000;
    if (_obj.startup_lambda == 0.00000000) {
        *(undefined8 *)arg4 = 0;
        uVar1 = _obj.num_params;
        arg1 = ZEXT48(_obj.num_params);
        if (0 < iVar5) {
            uVar7 = _obj.num_params - 1;
            ppdVar13 = (double **)arg2;
            dVar19 = 0.00000000;
            do {
                if (0 < (int32_t)uVar1) {
                    pdVar11 = *ppdVar13;
                    pdVar2 = pdVar11 + (uint64_t)uVar7 + 1;
                    do {
                        dVar3 = *pdVar11;
                        pdVar11 = pdVar11 + 1;
                        dVar19 = dVar19 + dVar3 * dVar3;
                        *(double *)arg4 = dVar19;
                    } while (pdVar2 != pdVar11);
                }
                ppdVar13 = ppdVar13 + 1;
            } while ((double **)(arg2 + 8 + (uint64_t)(iVar5 - 1) * 8) != ppdVar13);
        }
        placeholder_1 = (dVar19 / (double)iVar5) / (double)uVar1;
        auVar20 = sqrtsd(ZEXT816((uint64_t)placeholder_1), ZEXT816((uint64_t)placeholder_1));
        arg10 = SUB168(auVar20, 0);
        if (placeholder_1 < 0.00000000) goto code_r0x08002160;
        goto code_r0x08001f76;
    }
    arg1 = ZEXT48(_obj.num_params);
    *(double *)arg4 = _obj.startup_lambda;
    goto code_r0x08001f7b;
}


char * sym.internal_cleanup
                 (undefined8 placeholder_0, undefined8 placeholder_1, undefined8 placeholder_2, undefined8 placeholder_3
                 , int64_t arg5)
{
    char *pcVar1;
    int64_t in_FS_OFFSET;
    undefined8 placeholder_0_00;
    undefined8 in_XMM1_Qa;
    undefined8 in_XMM2_Qa;
    int64_t in_XMM3_Qa;
    undefined8 in_XMM4_Qa;
    undefined8 in_XMM5_Qa;
    undefined8 in_XMM6_Qa;
    undefined8 in_XMM7_Qa;
    undefined8 uStack24;
    int64_t iStack16;
    
    iStack16 = *(int64_t *)(in_FS_OFFSET + 0x28);
    placeholder_0_00 = func_0x08040d6c();
    _obj.regress_C = 0;
    uStack24 = _reloc..LC53;
    sym.marquardt(placeholder_0_00, in_XMM1_Qa, in_XMM2_Qa, in_XMM3_Qa, in_XMM4_Qa, in_XMM5_Qa, in_XMM6_Qa, in_XMM7_Qa, 
                  0, 0, 0, (int64_t)&uStack24);
    if (iStack16 == *(int64_t *)(in_FS_OFFSET + 0x28)) {
        return (char *)0x0;
    }
    func_0x08040d6c();
    if (_reloc.fit_script != (char *)0x0) {
        return _reloc.fit_script;
    }
    pcVar1 = (char *)func_0x08040d6c("");
    if (pcVar1 == (char *)0x0) {
        pcVar1 = "";
    }
    return pcVar1;
}


// WARNING: Control flow encountered bad instruction data
// WARNING: Possible PIC construction at 0x0800103c: Changing call to branch
// WARNING: Removing unreachable block (ram,0x08001041)

undefined8 sym.wri_to_fil_last_fit_cmd(int64_t arg1)
{
    char cVar1;
    uint8_t uVar2;
    char *in_RAX;
    char *pcVar3;
    char *in_RCX;
    undefined in_DL;
    undefined in_DH;
    unkbyte6 in_register_00000012;
    
    if (_obj.last_fit_command != 0) {
        cVar1 = (char)in_RAX;
        *in_RAX = *in_RAX + cVar1;
        *in_RAX = *in_RAX + cVar1;
        *in_RAX = *in_RAX + cVar1;
        *in_RAX = *in_RAX + cVar1;
        *in_RAX = *in_RAX + cVar1;
        *in_RAX = *in_RAX + cVar1;
        *in_RAX = *in_RAX + cVar1;
        *in_RAX = *in_RAX + cVar1;
        *in_RAX = *in_RAX + cVar1;
        *in_RAX = *in_RAX + cVar1;
        *in_RAX = *in_RAX + cVar1;
        *in_RAX = *in_RAX + cVar1;
        *in_RAX = *in_RAX + cVar1;
        *in_RAX = *in_RAX + cVar1;
        *in_RAX = *in_RAX + cVar1;
        *in_RAX = *in_RAX + cVar1;
        *in_RAX = *in_RAX + cVar1;
        *in_RAX = *in_RAX + cVar1;
        *in_RAX = *in_RAX + cVar1;
        *in_RAX = *in_RAX + cVar1;
        uVar2 = cVar1 + *in_RAX;
        _uVar2 = (int32_t *)((uint64_t)in_RAX & 0xffffffffffffff00 | (uint64_t)uVar2);
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *_uVar2 = *_uVar2 + (int32_t)_uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *_uVar2 = *_uVar2 + (int32_t)_uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
        pcVar3 = (char *)((uint64_t)in_RAX & 0xffffff00 | (uint64_t)uVar2);
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *(uint8_t *)CONCAT62(in_register_00000012, CONCAT11(in_DH, in_DL)) =
             *(char *)CONCAT62(in_register_00000012, CONCAT11(in_DH, in_DL)) + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *in_RCX = *in_RCX + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
        *pcVar3 = *pcVar3 + uVar2;
    // WARNING: Bad instruction - Truncating control flow here
        halt_baddata();
    }
    return 0;
}


// WARNING: Could not reconcile some variable overlaps
// WARNING: [r2ghidra] Var arg_180h is stack pointer based, which is not supported for decompilation.
// WARNING: [r2ghidra] Var arg_e0h is stack pointer based, which is not supported for decompilation.

void sym.error_ex(undefined8 placeholder_0, undefined8 placeholder_1, int64_t arg9, int64_t arg10, int64_t arg11,
                 undefined8 placeholder_5, undefined8 placeholder_6, undefined8 placeholder_7, int64_t arg1,
                 int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6)
{
    double *pdVar1;
    char in_AL;
    int32_t iVar2;
    uint32_t uVar3;
    undefined *puVar4;
    code *pcVar5;
    double *pdVar6;
    double *pdVar7;
    uint32_t uVar8;
    undefined8 *arg4_00;
    int64_t iVar9;
    undefined8 *puVar10;
    int64_t arg3_00;
    int64_t arg3_01;
    uint64_t extraout_RDX;
    int64_t arg3_02;
    int64_t arg3_03;
    int64_t extraout_RDX_00;
    int64_t extraout_RDX_01;
    int64_t extraout_RDX_02;
    int64_t iVar11;
    uint64_t uVar12;
    uint64_t uVar13;
    char *arg2_00;
    undefined4 *arg6_00;
    undefined8 in_R10;
    int64_t in_R11;
    code *unaff_R14;
    code *pcVar14;
    int32_t iVar15;
    code *unaff_R15;
    code *pcVar16;
    int64_t in_FS_OFFSET;
    bool bVar17;
    undefined8 placeholder_0_00;
    undefined8 extraout_XMM0_Qa;
    undefined8 placeholder_0_01;
    undefined8 placeholder_0_02;
    undefined8 placeholder_0_03;
    undefined8 placeholder_0_04;
    undefined8 extraout_XMM0_Qa_00;
    undefined8 extraout_XMM0_Qa_01;
    undefined8 placeholder_0_05;
    double dVar18;
    double dVar19;
    undefined8 extraout_XMM0_Qa_02;
    double extraout_XMM0_Qa_03;
    double dVar20;
    undefined8 in_XMM1_Qb;
    undefined auVar21 [16];
    undefined8 in_XMM2_Qb;
    undefined auVar22 [16];
    int64_t iVar23;
    undefined8 in_XMM3_Qb;
    undefined auVar24 [16];
    undefined8 in_XMM4_Qb;
    undefined8 in_XMM5_Qb;
    undefined8 in_XMM6_Qb;
    undefined8 in_XMM7_Qb;
    undefined *puStack640;
    code *pcStack632;
    undefined auStack584 [24];
    int64_t iStack560;
    int64_t iStack544;
    code *pcStack536;
    code *pcStack528;
    char *pcStack520;
    int64_t *piStack512;
    code *pcStack504;
    code *pcStack496;
    int32_t iStack484;
    code *pcStack480;
    code *pcStack472;
    undefined auStack464 [24];
    int64_t iStack440;
    code *pcStack416;
    code *pcStack408;
    undefined4 uStack368;
    undefined4 uStack364;
    undefined *puStack360;
    undefined *puStack352;
    undefined auStack344 [136];
    undefined8 uStack208;
    undefined auStack200 [16];
    int64_t iStack184;
    int64_t iStack176;
    int64_t iStack168;
    int64_t iStack160;
    undefined8 uStack152;
    undefined auStack136 [16];
    undefined auStack120 [16];
    undefined auStack104 [16];
    undefined auStack88 [16];
    undefined auStack72 [16];
    undefined auStack56 [16];
    undefined auStack40 [16];
    
    auVar24 = CONCAT88(in_XMM3_Qb, arg10);
    auVar22 = CONCAT88(in_XMM2_Qb, arg9);
    auVar21 = CONCAT88(in_XMM1_Qb, placeholder_1);
    pcStack416 = (code *)(arg1 & 0xffffffff);
    if (in_AL != '\0') {
        auStack88 = CONCAT88(in_XMM4_Qb, arg11);
        auStack72 = CONCAT88(in_XMM5_Qb, placeholder_5);
        auStack56 = CONCAT88(in_XMM6_Qb, placeholder_6);
        auStack40 = CONCAT88(in_XMM7_Qb, placeholder_7);
        uStack152 = placeholder_0;
        auStack136 = auVar21;
        auStack120 = auVar22;
        auStack104 = auVar24;
    }
    uStack208 = *(undefined8 *)(in_FS_OFFSET + 0x28);
    pcStack528 = (code *)auStack344;
    arg6_00 = &uStack368;
    puStack360 = &stack0x00000008;
    puStack352 = auStack200;
    uStack368 = 0x10;
    uStack364 = 0x30;
    iStack184 = arg3;
    iStack176 = arg4;
    iStack168 = arg5;
    iStack160 = arg6;
    func_0x08040d6c(placeholder_0, placeholder_1, arg9, arg10, pcStack528, 0x80, 1);
    if (_obj.log_f != 0) {
        func_0x08040d6c(_obj.log_f, 1, "");
        func_0x08040d6c(_obj.log_f);
        _obj.log_f = 0;
    }
    if (_obj.via_f != 0) {
        func_0x08040d6c();
        _obj.via_f = 0;
    }
    func_0x08040d6c(_reloc..LC102);
    func_0x08040d6c(_obj.fit_z);
    func_0x08040d6c(_obj.err_data);
    func_0x08040d6c(_obj.a);
    _obj.err_data = 0;
    _obj.fit_z = 0;
    _reloc..LC102 = (undefined8 *)0x0;
    _obj.a = 0;
    if (*(int64_t *)0x8005650 != 0) {
        func_0x08040d6c();
        *(int64_t *)0x8005650 = 0;
    }
    if (_obj.regress_cleanup != (code *)0x0) {
        (*_obj.regress_cleanup)();
    }
    func_0x08040d6c();
    func_0x08040d6c();
    pcStack472 = pcStack528;
    pcVar16 = pcStack416;
    func_0x08040d6c();
    iStack544 = 0;
    arg2_00 = (char *)(uint64_t)_obj.num_params;
    iStack440 = *(int64_t *)(in_FS_OFFSET + 0x28);
    pcStack480 = pcVar16;
    pcStack408 = pcStack528;
    if (0 < (int32_t)_obj.num_params) {
        do {
            auVar21 = (undefined  [16])0x0;
            iVar9 = iStack544 * 8;
            iVar11 = iStack544 * 8;
            pcVar16 = *(code **)(_obj.par_udv + iStack544 * 8);
            iStack544 = iStack544 + 1;
            pcStack504 = (code *)0x800129e;
            func_0x08040d6c(*(double *)(_obj.scale_params + iVar9) * *(double *)(pcStack480 + iVar11), 0);
        } while ((int32_t)iStack544 < (int32_t)_obj.num_params);
    }
    arg4_00 = (undefined8 *)(uint64_t)_obj.num_data;
    pcStack520 = (char *)0x0;
    pcStack536 = obj.scale_params;
    if (0 < (int32_t)_obj.num_data) {
        pcStack496 = (code *)auStack464;
        do {
            iStack544 = 0x8005668;
            iStack484 = (int32_t)pcStack520;
            pcStack528 = (code *)((uint64_t)pcStack520 & 0xffffffff);
            unaff_R14 = obj.fit_dummy_udvs;
            unaff_R15 = (code *)0x8005668;
            do {
                iVar9 = *(int64_t *)unaff_R14;
                if (iVar9 == 0) goto code_r0x08001564;
                if (*(int32_t *)(iVar9 + 0x10) - 1U < 2) {
                    pcStack504 = (code *)0x800132d;
                    func_0x08040d6c(0, iVar9 + 0x10);
                }
                auVar21 = (undefined  [16])0x0;
                pcVar16 = unaff_R15 + 0x18;
                unaff_R14 = (code *)((int64_t)unaff_R14 + 8);
                pcStack504 = (code *)0x8001304;
                func_0x08040d6c(unaff_R15);
                unaff_R15 = pcVar16;
            } while (pcVar16 != obj.scale_params);
            iVar15 = 0;
            if (0 < (int32_t)_obj.num_indep) {
                do {
                    auVar21 = (undefined  [16])0x0;
                    iVar2 = _obj.num_indep * (int32_t)pcStack528 + iVar15;
                    iVar15 = iVar15 + 1;
                    pcStack504 = (code *)0x8001369;
                    arg4_00 = _reloc..LC102;
                    func_0x08040d6c(_reloc..LC102[iVar2], 0, iStack544);
                    iStack544 = iStack544 + 0x18;
                } while (iVar15 < (int32_t)_obj.num_indep);
            }
            iStack544 = (int64_t)pcStack520 * 8;
            pcStack504 = (code *)0x800138c;
            arg2_00 = (char *)pcStack496;
            func_0x08040d6c(*(int64_t *)0x8005650);
            unaff_R15 = (code *)(uint64_t)(iStack484 + 1);
            if (reloc.undefined != (code)0x0) goto code_r0x080013f5;
            pcStack504 = (code *)0x80013a7;
            func_0x08040d6c(pcStack496);
            pcStack504 = (code *)0x80013b6;
            pcVar16 = pcStack496;
            func_0x08040d6c();
            *(undefined8 *)(pcStack472 + (int64_t)pcStack520 * 8) = extraout_XMM0_Qa;
            pcStack520 = pcStack520 + 1;
        } while ((int32_t)pcStack520 < (int32_t)_obj.num_data);
    }
    if (iStack440 == *(int64_t *)(in_FS_OFFSET + 0x28)) {
        return;
    }
code_r0x08001577:
    pcStack504 = (code *)0x800157c;
    func_0x08040d6c();
    iStack560 = *(int64_t *)(in_FS_OFFSET + 0x28);
    piStack512 = (int64_t *)unaff_R14;
    pcStack504 = unaff_R15;
    puVar4 = (undefined *)func_0x08040d6c(_obj.num_data);
    puStack640 = (undefined *)func_0x08040d6c(_obj.num_params);
    func_0x08040d6c(pcVar16);
    uVar12 = 0;
    uVar8 = _obj.num_params - 1;
    if (0 < (int32_t)_obj.num_params) {
        do {
            *(undefined8 *)(puStack640 + uVar12 * 8) = *(undefined8 *)(pcVar16 + uVar12 * 8);
            bVar17 = uVar8 != uVar12;
            uVar12 = uVar12 + 1;
        } while (bVar17);
        unaff_R15 = (code *)0x0;
        do {
            dVar19 = *(double *)(pcVar16 + (int64_t)unaff_R15 * 8);
            dVar18 = _reloc..LC46;
            dVar20 = _reloc..LC3;
            if (_reloc..LC3 <= (double)((uint64_t)dVar19 & _reloc..LC47)) {
                dVar18 = _reloc..LC48 * dVar19;
                dVar20 = dVar19;
            }
            *(double *)(puStack640 + (int64_t)unaff_R15 * 8) = dVar18;
            func_0x08040d6c(dVar18, dVar20, puStack640);
            if (0 < (int32_t)_obj.num_data) {
                dVar20 = dVar20 * _reloc..LC49;
                uVar8 = _obj.num_data - 1;
                uVar12 = 0;
                do {
                    *(double *)(*(int64_t *)((code *)arg2_00 + uVar12 * 8) + (int64_t)unaff_R15 * 8) =
                         (*(double *)(puVar4 + uVar12 * 8) - *(double *)(extraout_RDX_02 + uVar12 * 8)) / dVar20;
                    bVar17 = uVar8 != uVar12;
                    uVar12 = uVar12 + 1;
                } while (bVar17);
            }
            auVar21 = ZEXT816((uint64_t)dVar20);
            *(undefined8 *)(puStack640 + (int64_t)unaff_R15 * 8) = *(undefined8 *)(pcVar16 + (int64_t)unaff_R15 * 8);
            unaff_R15 = unaff_R15 + 1;
            pcStack632 = pcVar16;
        } while ((int32_t)unaff_R15 < (int32_t)_obj.num_params);
    }
    func_0x08040d6c(puVar4);
    func_0x08040d6c(puStack640);
    dVar19 = SUB168(auVar21, 0);
    uVar8 = (uint32_t)in_R10;
    pcVar5 = (code *)(uint64_t)_obj.num_data;
    if (1 < (int32_t)_obj.num_errors) {
        puVar4 = (undefined *)0x0;
        if (0 < (int32_t)_obj.num_params) {
            do {
                auVar21 = (undefined  [16])0x0;
                iVar9 = (int64_t)puVar4 * 8;
                iVar23 = (int64_t)puVar4 * 8;
                iVar11 = (int64_t)puVar4 * 8;
                puVar4 = puVar4 + 1;
                func_0x08040d6c(*(double *)(_obj.scale_params + iVar9) * *(double *)(pcVar16 + iVar23), 0, 
                                *(undefined8 *)(_obj.par_udv + iVar11));
            } while ((int32_t)puVar4 < (int32_t)_obj.num_params);
        }
        dVar19 = SUB168(auVar21, 0);
        uVar8 = (uint32_t)in_R10;
        pcVar5 = (code *)(uint64_t)_obj.num_data;
        puStack640 = (undefined *)0x0;
        pcVar14 = (code *)(uint64_t)_obj.num_data;
        uVar3 = _obj.num_indep;
        if ((int32_t)_obj.num_data < 1) goto code_r0x08001855;
        do {
            if (0 < (int32_t)uVar3) {
                pcVar16 = (code *)0x0;
                uVar12 = 0;
                do {
                    while( true ) {
                        puVar4 = (undefined *)(uVar12 & 0xffffffff);
                        if (obj.err_cols[uVar12] == (code)0x0) break;
                        iVar9 = 0x8005668;
                        unaff_R15 = (code *)0x0;
                        puVar10 = _reloc..LC102;
                        do {
                            iVar15 = (int32_t)unaff_R15;
                            if (iVar15 != (int32_t)uVar12) {
                                func_0x08040d6c(puVar10[(int32_t)(uVar3 * (int32_t)puStack640 + iVar15)], 0, iVar9);
                                puVar10 = _reloc..LC102;
                                uVar3 = _obj.num_indep;
                            }
                            unaff_R15 = (code *)(uint64_t)(iVar15 + 1U);
                            iVar9 = iVar9 + 0x18;
                        } while ((int32_t)(iVar15 + 1U) < (int32_t)uVar3);
                        iVar15 = (int32_t)puVar4;
                        uVar13 = uVar12 + 1;
                        puVar4 = auStack584;
                        dVar19 = (double)(puVar10[(int32_t)(iVar15 + uVar3 * (int32_t)puStack640)] & _reloc..LC47);
                        auVar22 = maxsd(ZEXT816((uint64_t)(_reloc..LC49 * dVar19)), 
                                        ZEXT816((uint64_t)((dVar19 + _reloc..LC50) * _reloc..LC51)));
                        pcStack632 = SUB168(auVar22, 0);
                        auVar21 = (undefined  [16])0x0;
                        func_0x08040d6c((double)puVar10[(int32_t)(iVar15 + uVar3 * (int32_t)puStack640)] +
                                        (double)pcStack632, 0, pcStack632, uVar12 * 0x18 + 0x8005668, 0x8005668);
                        func_0x08040d6c(*(int64_t *)0x8005650, puVar4);
                        func_0x08040d6c(puVar4);
                        iVar15 = (int32_t)pcVar16;
                        auVar22 = auVar22 & (undefined  [16])0xffffffffffffffff;
                        pcVar16 = (code *)(uint64_t)(iVar15 + 1);
                        *(double *)(*(int64_t *)(arg2 + (int64_t)iVar15 * 8) + (int64_t)puStack640 * 8) =
                             (extraout_XMM0_Qa_03 - *(double *)(extraout_RDX_02 + (int64_t)puStack640 * 8)) /
                             (double)pcStack632;
                        uVar12 = uVar13;
                        uVar3 = _obj.num_indep;
                        if ((int32_t)_obj.num_indep <= (int32_t)uVar13) goto code_r0x08001a83;
                    }
                    uVar12 = uVar12 + 1;
                } while ((int32_t)uVar12 < (int32_t)uVar3);
code_r0x08001a83:
                pcVar5 = (code *)(uint64_t)_obj.num_data;
            }
            dVar19 = SUB168(auVar21, 0);
            uVar8 = (uint32_t)in_R10;
            puStack640 = puStack640 + 1;
        } while ((int32_t)puStack640 < (int32_t)pcVar5);
    }
    pcVar14 = pcVar5;
    if ((int32_t)pcVar5 < 1) goto code_r0x08001855;
    puVar4 = (undefined *)0x0;
    puStack640 = (undefined *)((uint64_t)((int32_t)pcVar5 - 1) * 8 + 8);
    pcVar16 = (code *)(uint64_t)_obj.num_errors;
    in_R11 = (uint64_t)(_obj.num_params - 1) * 8 + 8;
    unaff_R15 = pcVar16;
    uVar8 = _obj.num_params;
    pcStack632 = pcVar5;
    do {
        if ((int32_t)unaff_R15 < 2) {
            auVar21 = ZEXT816(*(uint64_t *)(puVar4 + _obj.err_data));
        } else {
            dVar19 = *(double *)(_obj.err_data + (int64_t)((int32_t)pcVar16 + -1) * 8);
            auVar22 = ZEXT816((uint64_t)(dVar19 * dVar19));
            if (0 < (int32_t)_obj.num_indep) {
                pcVar5 = obj.err_cols;
                iVar15 = 0;
                do {
                    if (*pcVar5 != (code)0x0) {
                        iVar9 = (int64_t)iVar15;
                        iVar2 = iVar15 + ((int32_t)pcVar16 - (int32_t)unaff_R15);
                        iVar15 = iVar15 + 1;
                        dVar19 = *(double *)(puVar4 + *(int64_t *)(arg2 + iVar9 * 8)) *
                                 *(double *)(_obj.err_data + (int64_t)iVar2 * 8);
                        auVar22 = CONCAT88(SUB168(auVar22 >> 0x40, 0), SUB168(auVar22, 0) + dVar19 * dVar19);
                    }
                    pcVar5 = pcVar5 + 1;
                } while ((code *)((uint64_t)(_obj.num_indep - 1) + 0x80057d1) != pcVar5);
            }
            auVar21 = sqrtsd(auVar22, auVar22);
            dVar19 = SUB168(auVar21, 0);
            if (SUB168(auVar22, 0) < 0.00000000) goto code_r0x08001ab3;
        }
        while( true ) {
            dVar19 = SUB168(auVar21, 0);
            *(double *)(puVar4 + extraout_RDX_02) =
                 (*(double *)(puVar4 + extraout_RDX_02) - *(double *)(puVar4 + _obj.fit_z)) / dVar19;
            if (0 < (int32_t)uVar8) {
                pdVar1 = *(double **)((code *)arg2_00 + (int64_t)puVar4);
                pdVar6 = pdVar1;
                do {
                    pdVar7 = pdVar6 + 1;
                    *pdVar6 = *pdVar6 / dVar19;
                    pdVar6 = pdVar7;
                } while (pdVar7 != (double *)(in_R11 + (int64_t)pdVar1));
            }
            puVar4 = puVar4 + 8;
            pcVar16 = (code *)(uint64_t)(uint32_t)((int32_t)pcVar16 + (int32_t)unaff_R15);
            if (puStack640 != puVar4) break;
            pcVar14 = (code *)((uint64_t)pcStack632 & 0xffffffff);
code_r0x08001855:
            func_0x08040d6c(pcVar14);
            *arg4_00 = extraout_XMM0_Qa_02;
            if (iStack560 == *(int64_t *)(in_FS_OFFSET + 0x28)) {
                return;
            }
            func_0x08040d6c();
            arg2 = (int64_t)pcVar14;
code_r0x08001ab3:
            func_0x08040d6c(SUB168(auVar22, 0));
            auVar21 = ZEXT816((uint64_t)dVar19);
        }
    } while( true );
code_r0x080013f5:
    pcStack528 = reloc.c_dummy_var;
    iVar9 = 0;
    pcStack504 = (code *)0x800140c;
    sym.Dblfn(placeholder_0_00, SUB168(auVar21, 0), SUB168(auVar22, 0), SUB168(auVar24, 0), arg11, placeholder_5, 
              placeholder_6, placeholder_7, (int64_t)"", (int64_t)arg2_00, arg3_00, (int64_t)arg4_00, arg2, 
              (int64_t)arg6_00);
    pcStack520 = "";
    pcStack504 = (code *)0x8001421;
    sym.Dblfn(placeholder_0_01, SUB168(auVar21, 0), SUB168(auVar22, 0), SUB168(auVar24, 0), arg11, placeholder_5, 
              placeholder_6, placeholder_7, (int64_t)reloc..LC37, (int64_t)arg2_00, arg3_01, (int64_t)arg4_00, arg2, 
              (int64_t)arg6_00);
    arg4_00 = (undefined8 *)(uint64_t)_obj.num_data;
    pcStack504 = (code *)0x800143f;
    sym.Dblfn(placeholder_0_02, SUB168(auVar21, 0), SUB168(auVar22, 0), SUB168(auVar24, 0), arg11, placeholder_5, 
              placeholder_6, placeholder_7, (int64_t)"", (int64_t)reloc..LC38, (int64_t)unaff_R15, (int64_t)arg4_00, 
              arg2, (int64_t)arg6_00);
    uVar12 = (uint64_t)_obj.num_indep;
    pcVar16 = pcStack528;
    if (0 < (int32_t)_obj.num_indep) {
        do {
            pcStack528 = pcVar16 + 0x33;
            iVar11 = iVar9 * 8;
            iVar23 = iVar9 * 8;
            iVar9 = iVar9 + 1;
            pcStack504 = (code *)0x800147e;
            sym.Dblfn(*(double *)(_obj.scale_params + iVar11) * *(double *)(pcStack480 + iVar23), SUB168(auVar21, 0), 
                      SUB168(auVar22, 0), SUB168(auVar24, 0), arg11, placeholder_5, placeholder_6, placeholder_7, 
                      (int64_t)"", (int64_t)pcVar16, uVar12, (int64_t)arg4_00, arg2, (int64_t)arg6_00);
            uVar12 = extraout_RDX;
            pcVar16 = pcStack528;
        } while ((int32_t)iVar9 < (int32_t)_obj.num_indep);
    }
    pcVar16 = reloc..LC40;
    puVar10 = (undefined8 *)(_obj.fit_z + iStack544);
    iStack544 = 0;
    pcStack504 = (code *)0x80014b3;
    sym.Dblfn(*puVar10, SUB168(auVar21, 0), SUB168(auVar22, 0), SUB168(auVar24, 0), arg11, placeholder_5, placeholder_6
              , placeholder_7, (int64_t)"", (int64_t)reloc..LC40, uVar12, (int64_t)arg4_00, arg2, (int64_t)arg6_00);
    pcStack504 = (code *)0x80014c1;
    sym.Dblfn(placeholder_0_03, SUB168(auVar21, 0), SUB168(auVar22, 0), SUB168(auVar24, 0), arg11, placeholder_5, 
              placeholder_6, placeholder_7, (int64_t)"", (int64_t)pcVar16, arg3_02, (int64_t)arg4_00, arg2, 
              (int64_t)arg6_00);
    pcStack504 = (code *)0x80014cf;
    sym.Dblfn(placeholder_0_04, SUB168(auVar21, 0), SUB168(auVar22, 0), SUB168(auVar24, 0), arg11, placeholder_5, 
              placeholder_6, placeholder_7, (int64_t)reloc..LC37, (int64_t)pcVar16, arg3_03, (int64_t)arg4_00, arg2, 
              (int64_t)arg6_00);
    iVar23 = SUB168(auVar24, 0);
    iVar9 = extraout_RDX_00;
    iVar11 = iStack544;
    placeholder_0_05 = extraout_XMM0_Qa_00;
    if (0 < (int32_t)_obj.num_params) {
        do {
            iStack544 = iVar11 + 1;
            pcVar16 = (code *)(iVar11 * 0x33 + _obj.par_name);
            pcStack504 = (code *)0x800151f;
            sym.Dblfn(*(double *)(_obj.scale_params + iVar11 * 8) * *(double *)(pcStack480 + iVar11 * 8), 
                      SUB168(auVar21, 0), SUB168(auVar22, 0), SUB168(auVar24, 0), arg11, placeholder_5, placeholder_6, 
                      placeholder_7, (int64_t)"", (int64_t)pcVar16, iVar9, (int64_t)arg4_00, arg2, (int64_t)arg6_00);
            iVar23 = SUB168(auVar24, 0);
            iVar9 = extraout_RDX_01;
            iVar11 = iStack544;
            placeholder_0_05 = extraout_XMM0_Qa_01;
        } while ((int32_t)iStack544 < (int32_t)_obj.num_params);
    }
    pcStack504 = (code *)0x8001535;
    sym.Dblfn(placeholder_0_05, SUB168(auVar21, 0), SUB168(auVar22, 0), iVar23, arg11, placeholder_5, placeholder_6, 
              placeholder_7, (int64_t)reloc..LC43, (int64_t)pcVar16, iVar9, (int64_t)arg4_00, arg2, (int64_t)arg6_00);
    if (reloc.undefined != (code)0x0) {
        pcStack504 = (code *)0x8001551;
        func_0x08040d6c(0xffffffff, "Undefined value during function evaluation");
    }
    pcStack504 = (code *)0x8001564;
    func_0x08040d6c(0xffffffff, "Function evaluation yields NaN (\"not a number\")");
    pcStack536 = (code *)"";
code_r0x08001564:
    arg2_00 = "Internal error: lost a dummy parameter!";
    pcVar16 = (code *)0xffffffff;
    pcStack504 = (code *)0x8001577;
    func_0x08040d6c();
    goto code_r0x08001577;
}


 pdg @ pdg @ pdg @  pdg @  pdg @ s pdg @ s pdg @ sy pdg @ sy pdg @ sym pdg @ sym pdg @ sym. pdg @ sym. pdg @ sym.r pdg @ sym.r pdg @ sym.re pdg @ sym.re pdg @ sym.reg pdg @ sym.reg pdg @ sym.regr pdg @ sym.regr pdg @ sym.regre pdg @ sym.regre pdg @ sym.regres pdg @ sym.regres pdg @ sym.regress pdg @ sym.regress pdg @ sym.regress_ pdg @ sym.regress_ pdg @ sym.regress_c pdg @ sym.regress_c pdg @ sym.regress_ch pdg @ sym.regress_ch pdg @ sym.regress_che pdg @ sym.regress_che pdg @ sym.regress_chec pdg @ sym.regress_chec pdg @ sym.regress_check pdg @ sym.regress_check pdg @ sym.regress_check_ pdg @ sym.regress_check_ pdg @ sym.regress_check_s pdg @ sym.regress_check_s pdg @ sym.regress_check_st pdg @ sym.regress_check_st pdg @ sym.regress_check_sto pdg @ sym.regress_check_sto pdg @ sym.regress_check_stop pdg @ sym.regress_check_stopGhidra Decompiler Error: Overlapping input varnodes


  pdg  pdg @ pdg @ pdg @  pdg @  pdg @ s pdg @ s pdg @ sy pdg @ sy pdg @ sym pdg @ sym pdg @ sym. pdg @ sym. pdg @ sym.f pdg @ sym.f pdg @ sym.fi pdg @ sym.fi pdg @ sym.fit pdg @ sym.fit pdg @ sym.fit_ pdg @ sym.fit_ pdg @ sym.fit_p pdg @ sym.fit_p pdg @ sym.fit_pr pdg @ sym.fit_pr pdg @ sym.fit_pro pdg @ sym.fit_pro pdg @ sym.fit_prog pdg @ sym.fit_prog pdg @ sym.fit_progr pdg @ sym.fit_progr pdg @ sym.fit_progre pdg @ sym.fit_progre pdg @ sym.fit_progres pdg @ sym.fit_progres pdg @ sym.fit_progress pdg @ sym.fit_progressGhidra Decompiler Error: Deleting integrated varnode


undefined8
sym.fit_show_brief(int64_t arg7, int64_t arg8, int64_t arg9, double placeholder_3, undefined8 placeholder_4,
                  undefined8 placeholder_5, undefined8 placeholder_6, undefined8 placeholder_7, int64_t arg1,
                  int64_t arg2, int64_t arg3)
{
    uint32_t uVar1;
    uint32_t uVar2;
    uint32_t *puVar3;
    undefined8 uVar4;
    uint32_t *puVar5;
    uint32_t *puVar6;
    code *pcVar7;
    uint64_t uVar8;
    int32_t iVar9;
    int32_t iVar10;
    int64_t iVar11;
    int32_t iVar12;
    int64_t in_FS_OFFSET;
    bool bVar13;
    double dVar14;
    int64_t arg7_00;
    int32_t iStack352;
    int64_t iStack336;
    uint32_t auStack328 [4];
    undefined8 uStack312;
    undefined8 uStack304;
    uint64_t uStack296;
    undefined2 uStack288;
    int64_t iStack64;
    
    uVar8 = arg1 & 0xffffffff;
    iStack64 = *(int64_t *)(in_FS_OFFSET + 0x28);
    iStack352 = (int32_t)uVar8;
    iStack336 = arg9;
    if (((int32_t)arg1 + 2U & 0xfffffffd) == 0) {
        uStack296 = uStack296 & 0xffffffffffffff00;
        auStack328[0] = str.iter______chisq_______delta_lim._0_4_;
        auStack328[1] = str.iter______chisq_______delta_lim._4_4_;
        auStack328[2] = str.iter______chisq_______delta_lim._8_4_;
        auStack328[3] = str.iter______chisq_______delta_lim._12_4_;
        uStack312 = str.iter______chisq_______delta_lim._16_8_;
        uStack304 = str.iter______chisq_______delta_lim._24_8_;
        if (obj.fit_show_lambda != (code)0x0) {
            uStack296 = 0x206164626d616c20;
            uStack288 = 0x20;
        }
        dVar14 = (double)arg8;
        func_0x08040d6c(str.iter______chisq_______delta_lim._16_8_, auStack328);
        puVar3 = auStack328;
        do {
            puVar6 = puVar3;
            uVar1 = *puVar6 + 0xfefefeff & ~*puVar6;
            uVar2 = uVar1 & 0x80808080;
            puVar3 = puVar6 + 1;
        } while (uVar2 == 0);
        bVar13 = (uVar1 & 0x8080) == 0;
        if (bVar13) {
            uVar2 = uVar2 >> 0x10;
        }
        if (bVar13) {
            puVar3 = (uint32_t *)((int64_t)puVar6 + 6);
        }
        iVar12 = (int32_t)auStack328;
        iVar10 = (((int32_t)puVar3 + -3) - (uint32_t)CARRY1((uint8_t)uVar2, (uint8_t)uVar2)) - iVar12;
        if (0 < _obj.num_params) {
            iVar9 = 0;
            do {
                func_0x08040d6c(auStack328, 0x100, 1, 0x100, "");
                puVar3 = auStack328;
                do {
                    puVar6 = puVar3;
                    uVar1 = *puVar6 + 0xfefefeff & ~*puVar6;
                    uVar2 = uVar1 & 0x80808080;
                    puVar3 = puVar6 + 1;
                } while (uVar2 == 0);
                bVar13 = (uVar1 & 0x8080) == 0;
                if (bVar13) {
                    uVar2 = uVar2 >> 0x10;
                }
                if (bVar13) {
                    puVar3 = (uint32_t *)((int64_t)puVar6 + 6);
                }
                iVar10 = iVar10 + ((((int32_t)puVar3 + -3) - (uint32_t)CARRY1((uint8_t)uVar2, (uint8_t)uVar2)) - iVar12)
                ;
                if ((_reloc.fit_wrap <= iVar10) && (0 < _reloc.fit_wrap)) {
                    iVar10 = 4;
                    func_0x08040d6c(arg3, 1, "", 4, 0x20);
                }
                iVar9 = iVar9 + 1;
                func_0x08040d6c(auStack328, arg3);
            } while (iVar9 < _obj.num_params);
        }
        iVar11 = 10;
        func_0x08040d6c(10, arg3);
        if (iStack352 == -2) goto code_r0x08000acd;
    }
    pcVar7 = reloc..LC21;
    placeholder_3 = (double)arg7 * _obj.epsilon;
    dVar14 = _reloc.epsilon_abs + placeholder_3;
    if (iStack352 < 0) {
        uVar8 = 0x2a;
        pcVar7 = reloc..LC22;
    }
    puVar3 = auStack328 + 1;
    func_0x08040d6c(dVar14, auStack328, 0x100, 1, 0x100, pcVar7, uVar8);
    dVar14 = ((double)arg7 - (double)arg8) / dVar14;
    func_0x08040d6c(arg7, puVar3, 0xfc, 1, 0xfc, "");
    puVar6 = auStack328;
    if (obj.fit_show_lambda != (code)0x0) {
        do {
            puVar5 = puVar6;
            uVar1 = *puVar5 + 0xfefefeff & ~*puVar5;
            uVar2 = uVar1 & 0x80808080;
            puVar6 = puVar5 + 1;
        } while (uVar2 == 0);
        bVar13 = (uVar1 & 0x8080) == 0;
        if (bVar13) {
            uVar2 = uVar2 >> 0x10;
        }
        if (bVar13) {
            puVar6 = (uint32_t *)((int64_t)puVar5 + 6);
        }
        iVar11 = (int64_t)puVar6 + ((-3 - (uint64_t)CARRY1((uint8_t)uVar2, (uint8_t)uVar2)) - (int64_t)auStack328);
        func_0x08040d6c(iStack336, iVar11 + (int64_t)auStack328, 0x100 - iVar11, 1, 0xffffffffffffffff, "");
    }
    iVar10 = 0;
    do {
        iVar10 = iVar10 + 1;
        sym.pack_float((int64_t)puVar3 + 1);
        puVar3 = (uint32_t *)func_0x08040d6c((int64_t)puVar3 + 1, 0x65);
        if (2 < iVar10) break;
    } while (puVar3 != (uint32_t *)0x0);
    func_0x08040d6c(auStack328);
    puVar3 = auStack328;
    do {
        puVar6 = puVar3;
        uVar1 = *puVar6 + 0xfefefeff & ~*puVar6;
        uVar2 = uVar1 & 0x80808080;
        puVar3 = puVar6 + 1;
    } while (uVar2 == 0);
    bVar13 = (uVar1 & 0x8080) == 0;
    if (bVar13) {
        uVar2 = uVar2 >> 0x10;
    }
    if (bVar13) {
        puVar3 = (uint32_t *)((int64_t)puVar6 + 6);
    }
    iVar12 = (int32_t)auStack328;
    iVar10 = (((int32_t)puVar3 + -3) - (uint32_t)CARRY1((uint8_t)uVar2, (uint8_t)uVar2)) - iVar12;
    if (0 < _obj.num_params) {
        iVar11 = 0;
        do {
            func_0x08040d6c(*(double *)(_obj.scale_params + iVar11 * 8) * *(double *)(arg2 + iVar11 * 8), auStack328, 
                            0x100, 1, 0x100, "");
            sym.pack_float((int64_t)auStack328);
            puVar3 = auStack328;
            do {
                puVar6 = puVar3;
                uVar1 = *puVar6 + 0xfefefeff & ~*puVar6;
                uVar2 = uVar1 & 0x80808080;
                puVar3 = puVar6 + 1;
            } while (uVar2 == 0);
            bVar13 = (uVar1 & 0x8080) == 0;
            if (bVar13) {
                uVar2 = uVar2 >> 0x10;
            }
            if (bVar13) {
                puVar3 = (uint32_t *)((int64_t)puVar6 + 6);
            }
            iVar10 = iVar10 + ((((int32_t)puVar3 + -3) - (uint32_t)CARRY1((uint8_t)uVar2, (uint8_t)uVar2)) - iVar12);
            if ((_reloc.fit_wrap <= iVar10) && (0 < _reloc.fit_wrap)) {
                iVar10 = 4;
                func_0x08040d6c(arg3, 1, "", 4, 0x20);
            }
            iVar11 = iVar11 + 1;
            func_0x08040d6c(auStack328, arg3);
        } while ((int32_t)iVar11 < _obj.num_params);
    }
    iVar11 = 10;
    func_0x08040d6c(10, arg3);
code_r0x08000acd:
    if (iStack64 == *(int64_t *)(in_FS_OFFSET + 0x28)) {
        return 0;
    }
    func_0x08040d6c();
    if (_reloc.fit_verbosity == 4) {
        sym.fit_show(arg7_00, dVar14, arg9, placeholder_3, placeholder_4, placeholder_5, placeholder_6, placeholder_7, 
                     iVar11, _obj.a, _reloc.stderr);
    } else {
        sym.fit_show_brief(arg7_00, (int64_t)dVar14, arg9, placeholder_3, placeholder_4, placeholder_5, placeholder_6, 
                           placeholder_7, iVar11, _obj.a, _reloc.stderr);
    }
    reloc.ctrlc_flag = (code)0x0;
    do {
        while( true ) {
            func_0x08040d6c("\n\n(S)top fit, (C)ontinue, (E)xecute FIT_SCRIPT:  ", 1, 0x31, _reloc.stderr);
            iVar10 = func_0x08040d6c(_reloc.stdin);
            if (0x65 < iVar10) break;
            if (iVar10 < 0x43) {
                if (iVar10 == -1) goto code_r0x08000dd5;
            } else {
                if (iVar10 - 0x43U < 0x23) {
    // WARNING: Deleting integrated varnode
    // WARNING: Treating indirect jump as call
                    uVar4 = (*(reloc..rodata + *(int32_t *)(reloc..rodata + (uint64_t)(iVar10 - 0x43U) * 4)))();
                    return uVar4;
                }
            }
        }
    } while (iVar10 != 0x73);
code_r0x08000dd5:
    func_0x08040d6c("", 1, 6, _reloc.stderr);
    obj.user_stop = (code)0x1;
    return 0;
}


void sym.init_fit(void)
{
    *(undefined8 *)0x8005650 = 0;
    return;
}


// WARNING: Control flow encountered bad instruction data
// WARNING: Possible PIC construction at 0x080022c7: Changing call to branch
// WARNING: Possible PIC construction at 0x0800230b: Changing call to branch
// WARNING: Removing unreachable block (ram,0x080022cc)
// WARNING: Removing unreachable block (ram,0x08002338)
// WARNING: Removing unreachable block (ram,0x080022d4)
// WARNING: Removing unreachable block (ram,0x08002350)
// WARNING: Removing unreachable block (ram,0x080022d9)
// WARNING: Removing unreachable block (ram,0x080022ec)
// WARNING: Removing unreachable block (ram,0x08002300)
// WARNING: Removing unreachable block (ram,0x080022f1)
// WARNING: Removing unreachable block (ram,0x08002310)
// WARNING: Removing unreachable block (ram,0x08002328)

void sym.getfitlogfile(undefined8 param_1, undefined8 param_2, char *param_3, char *param_4)
{
    char cVar1;
    uint8_t uVar2;
    char *in_RAX;
    char *pcVar3;
    
    cVar1 = (char)in_RAX;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    uVar2 = cVar1 + *in_RAX;
    _uVar2 = (int32_t *)((uint64_t)in_RAX & 0xffffffffffffff00 | (uint64_t)uVar2);
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *_uVar2 = *_uVar2 + (int32_t)_uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *_uVar2 = *_uVar2 + (int32_t)_uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    pcVar3 = (char *)((uint64_t)in_RAX & 0xffffff00 | (uint64_t)uVar2);
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *param_3 = *param_3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *param_4 = *param_4 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    // WARNING: Bad instruction - Truncating control flow here
    halt_baddata();
}






// WARNING: Control flow encountered bad instruction data
// WARNING: Possible PIC construction at 0x080002a4: Changing call to branch
// WARNING: Removing unreachable block (ram,0x080002a9)
// WARNING: Removing unreachable block (ram,0x080002b2)
// WARNING: Removing unreachable block (ram,0x080002c0)
// WARNING: Removing unreachable block (ram,0x080002b8)

void sym.getdvar(undefined8 param_1, undefined8 param_2, char *param_3, char *param_4)
{
    char cVar1;
    uint8_t uVar2;
    char *in_RAX;
    char *pcVar3;
    
    cVar1 = (char)in_RAX;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    *in_RAX = *in_RAX + cVar1;
    uVar2 = cVar1 + *in_RAX;
    _uVar2 = (int32_t *)((uint64_t)in_RAX & 0xffffffffffffff00 | (uint64_t)uVar2);
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *_uVar2 = *_uVar2 + (int32_t)_uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *_uVar2 = *_uVar2 + (int32_t)_uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    *(uint8_t *)_uVar2 = *(char *)_uVar2 + uVar2;
    pcVar3 = (char *)((uint64_t)in_RAX & 0xffffff00 | (uint64_t)uVar2);
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *param_3 = *param_3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *param_4 = *param_4 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    *pcVar3 = *pcVar3 + uVar2;
    // WARNING: Bad instruction - Truncating control flow here
    halt_baddata();
}


uint8_t * sym.get_next_word(int64_t arg1, int64_t arg2)
{
    uint8_t uVar1;
    undefined *puVar2;
    uint8_t *puVar3;
    int64_t iVar4;
    uint8_t *puVar5;
    
    puVar5 = *(uint8_t **)arg1;
    uVar1 = *puVar5;
    do {
        if (0x3d < uVar1) {
code_r0x08000574:
            puVar3 = (uint8_t *)func_0x08040d6c(puVar5, reloc..LC12);
            *(uint8_t **)arg1 = puVar3;
            if (puVar3 == (uint8_t *)0x0) {
                iVar4 = func_0x08040d6c(puVar5);
                puVar3 = puVar5 + iVar4;
                *(uint8_t **)arg1 = puVar3;
            }
            *(uint8_t *)arg2 = *puVar3;
            puVar2 = *(undefined **)arg1;
            *(undefined **)arg1 = puVar2 + 1;
            *puVar2 = 0;
            return puVar5;
        }
        if ((0x2000000100000200U >> ((uint64_t)uVar1 & 0x3f) & 1) == 0) {
            if ((uVar1 < 0xe) && ((0x2401U >> ((uint64_t)uVar1 & 0x3f) & 1) != 0)) {
                return (uint8_t *)0x0;
            }
            goto code_r0x08000574;
        }
        uVar1 = puVar5[1];
        puVar5 = puVar5 + 1;
    } while( true );
}


undefined8
sym.regress_check_stop.part.0
          (int64_t arg1, undefined8 placeholder_1, undefined8 placeholder_2, int64_t arg4, int64_t arg5, int64_t arg6)
{
    int64_t iVar1;
    int64_t iVar2;
    int64_t iVar3;
    int32_t iVar4;
    char *pcVar5;
    int64_t iVar6;
    int64_t in_XMM0_Qa;
    undefined in_XMM1 [16];
    int64_t in_XMM2_Qa;
    undefined8 in_XMM3_Qa;
    undefined8 in_XMM4_Qa;
    undefined8 in_XMM5_Qa;
    undefined8 in_XMM6_Qa;
    undefined8 in_XMM7_Qa;
    
    if (_reloc.fit_verbosity == 4) {
        sym.fit_show(in_XMM0_Qa, SUB168(in_XMM1, 0), in_XMM2_Qa, in_XMM3_Qa, in_XMM4_Qa, in_XMM5_Qa, in_XMM6_Qa, 
                     in_XMM7_Qa, arg1, _obj.a, _reloc.stderr);
    } else {
        sym.fit_show_brief(in_XMM0_Qa, SUB168(in_XMM1, 0), in_XMM2_Qa, in_XMM3_Qa, in_XMM4_Qa, in_XMM5_Qa, in_XMM6_Qa, 
                           in_XMM7_Qa, arg1, _obj.a, _reloc.stderr);
    }
    reloc.ctrlc_flag = (code)0x0;
    do {
        while( true ) {
            func_0x08040d6c("\n\n(S)top fit, (C)ontinue, (E)xecute FIT_SCRIPT:  ", 1, 0x31, _reloc.stderr);
            iVar4 = func_0x08040d6c(_reloc.stdin);
            if (0x65 < iVar4) break;
            if (iVar4 < 0x43) {
                if (iVar4 == -1) goto code_r0x08000dd5;
            } else {
    // switch table (35 cases) at 0x8006748
                switch(iVar4) {
                case 0x43:
                case 99:
                    func_0x08040d6c("", 1, 10, _reloc.stderr);
                    return 1;
                case 0x45:
                case 0x65:
                    pcVar5 = _reloc.fit_script;
                    if ((_reloc.fit_script == (char *)0x0) &&
                       (pcVar5 = (char *)func_0x08040d6c(""), pcVar5 == (char *)0x0)) {
                        pcVar5 = "";
                    }
                    iVar6 = 0;
                    func_0x08040d6c(_reloc.stderr, 1, "", pcVar5);
                    if (0 < _obj.num_params) {
                        do {
                            iVar1 = iVar6 * 8;
                            iVar2 = iVar6 * 8;
                            iVar3 = iVar6 * 8;
                            iVar6 = iVar6 + 1;
                            func_0x08040d6c(*(double *)(_obj.a + iVar1) * *(double *)(_obj.scale_params + iVar2), 0, 
                                            *(undefined8 *)(_obj.par_udv + iVar3));
                        } while ((int32_t)iVar6 < _obj.num_params);
                    }
                    func_0x08040d6c(pcVar5);
                    break;
                case 0x53:
                    goto code_r0x08000dd5;
                }
            }
        }
    } while (iVar4 != 0x73);
code_r0x08000dd5:
    func_0x08040d6c("", 1, 6, _reloc.stderr);
    obj.user_stop = (code)0x1;
    return 0;
}


