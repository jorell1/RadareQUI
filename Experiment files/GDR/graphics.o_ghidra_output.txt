uint64_t sym.histeps_compare(int64_t arg1, int64_t arg2)
{
    double dVar1;
    double dVar2;
    uint64_t uVar3;
    
    dVar1 = *(double *)(*(int64_t *)(_obj.histeps_current_plot + 0x1e8) + 8 + (int64_t)*(int32_t *)arg1 * 0x40);
    dVar2 = *(double *)(*(int64_t *)(_obj.histeps_current_plot + 0x1e8) + 8 + (int64_t)*(int32_t *)arg2 * 0x40);
    uVar3 = 0xffffffff;
    if (dVar2 <= dVar1) {
        uVar3 = (uint64_t)(dVar2 < dVar1);
    }
    return uVar3;
}


int32_t sym.compare_ypoints(int64_t arg1, int64_t arg2)
{
    int32_t iVar1;
    
    if (obj.boxplot_factor_sort_required != (code)0x0) {
        if (*(double *)(arg2 + 0x18) < *(double *)(arg1 + 0x18)) {
            return 1;
        }
        if (*(double *)(arg1 + 0x18) < *(double *)(arg2 + 0x18)) {
            return -1;
        }
    }
    iVar1 = 1;
    if (*(double *)(arg1 + 0x10) <= *(double *)(arg2 + 0x10)) {
        iVar1 = -(uint32_t)(*(double *)(arg1 + 0x10) < *(double *)(arg2 + 0x10));
    }
    return iVar1;
}


void sym.adjust_nonlinear_offset(uint32_t arg1)
{
    undefined8 uVar1;
    int32_t iVar2;
    int32_t iVar3;
    undefined4 uVar4;
    undefined4 uVar5;
    undefined4 uVar6;
    undefined4 uVar7;
    int64_t iVar8;
    int32_t iVar9;
    int32_t *piVar10;
    int64_t extraout_RDX;
    char *pcVar11;
    int64_t iVar12;
    uint32_t uVar13;
    undefined4 in_RDI;
    uint64_t unaff_R12;
    int32_t *unaff_R13;
    int32_t *unaff_R14;
    int64_t in_FS_OFFSET;
    double dVar14;
    undefined8 extraout_XMM0_Qa;
    undefined8 extraout_XMM0_Qa_00;
    double extraout_XMM0_Qa_01;
    double dVar15;
    double dVar16;
    double dVar17;
    double dStack160;
    double dStack136;
    double dStack128;
    int64_t iStack120;
    int32_t *piStack112;
    uint64_t uStack104;
    int32_t *piStack96;
    int32_t *piStack88;
    int32_t iStack76;
    int64_t iStack72;
    int64_t iStack64;
    int32_t *piStack56;
    
    iStack120 = CONCAT44(in_RDI, arg1);
    piStack56 = *(int32_t **)(iStack120 + 0xa0);
    dVar14 = *(double *)(piStack56 + 4);
    dVar16 = (double)((uint64_t)(*(double *)(piStack56 + 6) - dVar14) & _reloc..LC0);
    if (*(int32_t *)(iStack120 + 0x18c) == 2) {
        if (((_reloc.loff == 2) || (dVar15 = 0.00000000, *(double *)0x800e6b0 == 0.00000000)) &&
           ((dVar17 = *(double *)0x800e6b0, dVar15 = *(double *)0x800e670, _reloc.roff == 2 ||
            (*(double *)0x800e670 == _reloc..LC1)))) goto code_r0x08000165;
    } else {
        if (((""._36_4_ == 2) || (dVar15 = 0.00000000, *(double *)0x800e5f8 == 0.00000000)) &&
           ((dVar17 = *(double *)0x800e5f8, dVar15 = *(double *)0x800e638, *(int32_t *)0x800e624 == 2 ||
            (*(double *)0x800e638 == _reloc..LC1)))) {
code_r0x08000165:
            dVar14 = dVar14 - dVar17 * dVar16;
            dVar16 = dVar15 * dVar16 + *(double *)(piStack56 + 6);
            *(double *)(piStack56 + 4) = dVar14;
            *(double *)(piStack56 + 6) = dVar16;
            func_0x080921db(dVar14, dVar16, iStack120);
            *(undefined8 *)(iStack120 + 0x10) = extraout_XMM0_Qa;
            func_0x080921db(*(undefined8 *)(piStack56 + 6), iStack120);
            *(undefined8 *)(iStack120 + 0x18) = extraout_XMM0_Qa_00;
            return;
        }
    }
    pcVar11 = "";
    uVar13 = 0xffffffff;
    func_0x080921db(dVar14, dVar15);
    iStack72 = *(int64_t *)(in_FS_OFFSET + 0x28);
    piStack112 = piStack56;
    iStack64 = iStack120;
    if ((int32_t)uVar13 < 1) goto code_r0x080002ed;
    unaff_R12 = (uint64_t)uVar13;
    switch(*(undefined4 *)(extraout_RDX + 0x180)) {
    case 1:
        iVar12 = (int64_t)(int32_t)uVar13;
        unaff_R12 = (uint64_t)(uVar13 + 2);
        *(int32_t *)((int64_t)pcVar11 + iVar12 * 3 * 4) = *(int32_t *)((int64_t)pcVar11 + (iVar12 * 3 + -3) * 4);
        *(int32_t *)((int64_t)pcVar11 + (iVar12 * 3 + 3) * 4) = *(int32_t *)pcVar11;
        iVar2 = _reloc.boxwidth_is_absolute;
        ((int32_t *)((int64_t)pcVar11 + (iVar12 * 3 + 3) * 4))[1] = _reloc.boxwidth_is_absolute;
        ((int32_t *)((int64_t)pcVar11 + iVar12 * 3 * 4))[1] = iVar2;
        break;
    case 2:
        iVar12 = (int64_t)(int32_t)uVar13;
        unaff_R12 = (uint64_t)(uVar13 + 2);
        ((int32_t *)((int64_t)pcVar11 + iVar12 * 3 * 4))[1] = *(int32_t *)((int64_t)pcVar11 + (iVar12 * 3 + -2) * 4);
        ((int32_t *)((int64_t)pcVar11 + (iVar12 * 3 + 3) * 4))[1] = *(int32_t *)((int64_t)pcVar11 + 4);
        iVar2 = *(int32_t *)0x80927b3;
        *(int32_t *)((int64_t)pcVar11 + (iVar12 * 3 + 3) * 4) = *(int32_t *)0x80927b3;
        *(int32_t *)((int64_t)pcVar11 + iVar12 * 3 * 4) = iVar2;
        break;
    case 3:
        iVar12 = (int64_t)(int32_t)uVar13;
        unaff_R12 = (uint64_t)(uVar13 + 2);
        *(int32_t *)((int64_t)pcVar11 + iVar12 * 3 * 4) = *(int32_t *)((int64_t)pcVar11 + (iVar12 * 3 + -3) * 4);
        *(int32_t *)((int64_t)pcVar11 + (iVar12 * 3 + 3) * 4) = *(int32_t *)pcVar11;
        iVar2 = *(int32_t *)0x809250f;
        ((int32_t *)((int64_t)pcVar11 + (iVar12 * 3 + 3) * 4))[1] = *(int32_t *)0x809250f;
        ((int32_t *)((int64_t)pcVar11 + iVar12 * 3 * 4))[1] = iVar2;
        break;
    case 4:
        iVar12 = (int64_t)(int32_t)uVar13;
        unaff_R12 = (uint64_t)(uVar13 + 2);
        ((int32_t *)((int64_t)pcVar11 + iVar12 * 3 * 4))[1] = *(int32_t *)((int64_t)pcVar11 + (iVar12 * 3 + -2) * 4);
        ((int32_t *)((int64_t)pcVar11 + (iVar12 * 3 + 3) * 4))[1] = *(int32_t *)((int64_t)pcVar11 + 4);
        iVar2 = *(int32_t *)0x80927b7;
        *(int32_t *)((int64_t)pcVar11 + (iVar12 * 3 + 3) * 4) = *(int32_t *)0x80927b7;
        *(int32_t *)((int64_t)pcVar11 + iVar12 * 3 * 4) = iVar2;
        break;
    case 5:
    case 7:
        iVar8 = (int64_t)(int32_t)uVar13 * 3 + 3;
        unaff_R13 = (int32_t *)(iVar8 * 4);
        unaff_R14 = (int32_t *)((int64_t)pcVar11 + iVar8 * 4);
        piStack88 = (int32_t *)0x80003a5;
        iVar2 = func_0x080921db(*(undefined8 *)(extraout_RDX + 0x188));
        iVar12 = 0;
        *unaff_R14 = iVar2;
        ((int32_t *)((int64_t)pcVar11 + -0xc) + iVar8)[1] = ((int32_t *)((int64_t)pcVar11 + -0x14))[iVar8];
        ((int32_t *)((int64_t)pcVar11 + -0xc))[iVar8] = iVar2;
        unaff_R14[1] = *(int32_t *)((int64_t)pcVar11 + 4);
        piVar10 = (int32_t *)pcVar11;
        do {
            iVar3 = *piVar10;
            piVar10 = piVar10 + 3;
            iVar12 = iVar12 + (iVar3 - iVar2);
        } while ((int32_t *)((int64_t)pcVar11 + ((uint64_t)(uVar13 - 1) * 3 + 3) * 4) != piVar10);
        unaff_R12 = (uint64_t)(uVar13 + 2);
        goto code_r0x08000365;
    case 6:
    case 8:
        iVar8 = (int64_t)(int32_t)uVar13;
        unaff_R12 = (uint64_t)(uVar13 + 2);
        unaff_R13 = (int32_t *)(iVar8 * 0xc);
        unaff_R14 = (int32_t *)((int64_t)pcVar11 + iVar8 * 3 * 4);
        piStack88 = (int32_t *)0x8000330;
        iVar3 = func_0x080921db(*(undefined8 *)(extraout_RDX + 0x188));
        iVar12 = 0;
        iVar2 = *(int32_t *)(extraout_RDX + 0x180);
        unaff_R14[1] = iVar3;
        ((int32_t *)((int64_t)pcVar11 + 0xc) + iVar8 * 3)[1] = iVar3;
        *unaff_R14 = ((int32_t *)((int64_t)pcVar11 + -0xc))[iVar8 * 3];
        ((int32_t *)((int64_t)pcVar11 + 0xc))[iVar8 * 3] = *(int32_t *)pcVar11;
        if (iVar2 == 0xd) goto code_r0x080004f0;
        goto code_r0x08000358;
    case 9:
        unaff_R12 = (uint64_t)(uVar13 + 1);
        unaff_R13 = (int32_t *)((int64_t)pcVar11 + (int64_t)(int32_t)uVar13 * 3 * 4);
        piStack88 = (int32_t *)0x800044c;
        iVar2 = func_0x080921db(*(undefined8 *)(extraout_RDX + 0x188));
        uVar1 = *(undefined8 *)(extraout_RDX + 400);
        *unaff_R13 = iVar2;
        piStack88 = (int32_t *)0x800045d;
        iVar2 = func_0x080921db(uVar1);
        unaff_R13[1] = iVar2;
        break;
    case 10:
        iVar12 = 0;
        goto code_r0x08000358;
    case 0xd:
code_r0x080004f0:
        iVar12 = (uint64_t)(0 < *(int32_t *)((int64_t)pcVar11 + (int64_t)(int32_t)unaff_R12 * 3 * 4)) * 2 + -1;
code_r0x08000358:
        if (*(int32_t *)(extraout_RDX + 0x138) == 4) {
            iVar2 = *(int32_t *)((int64_t)pcVar11 + 0x18);
            iVar3 = ((*(int32_t *)pcVar11 <= iVar2) - 1) + (uint32_t)(*(int32_t *)pcVar11 <= iVar2);
            if (3 < (int32_t)unaff_R12) {
                iVar9 = *(int32_t *)((int64_t)pcVar11 + 0x24);
                if (iVar2 == iVar9) {
                    iVar2 = iVar2 - iVar3;
                    *(int32_t *)((int64_t)pcVar11 + 0x18) = iVar2;
                    *(int32_t *)((int64_t)pcVar11 + 0x24) = iVar2;
                } else {
                    if (((int32_t)unaff_R12 != 4) && (iVar9 == *(int32_t *)((int64_t)pcVar11 + 0x30))) {
                        iVar9 = iVar9 - iVar3;
                        *(int32_t *)((int64_t)pcVar11 + 0x24) = iVar9;
                        *(int32_t *)((int64_t)pcVar11 + 0x30) = iVar9;
                    }
                }
            }
        }
code_r0x08000365:
        piStack112 = (int32_t *)pcVar11;
        if (*(int32_t *)(extraout_RDX + 0x198) < 1) {
            if ((*(int32_t *)(extraout_RDX + 0x198) < 0) && (iStack120 = extraout_RDX, 0 < iVar12))
            goto code_r0x080002ed;
        } else {
            iStack120 = extraout_RDX;
            if (iVar12 < 0) goto code_r0x080002ed;
        }
    }
    piStack88 = (int32_t *)0x80002a1;
    _obj.clipcorners.12666 =
         (int32_t *)
         func_0x080921db(_obj.clipcorners.12666, (int64_t)((int32_t)unaff_R12 * 2) * 0xc, "filledcurve verticess");
    piStack88 = (int32_t *)0x80002bb;
    func_0x080921db(pcVar11, _obj.clipcorners.12666, unaff_R12, &iStack76);
    piStack112 = _obj.clipcorners.12666;
    piStack88 = (int32_t *)0x80002ce;
    iVar2 = func_0x080921db();
    piStack112[2] = iVar2;
    iStack120 = extraout_RDX;
    if (0 < iStack76) {
        piStack88 = (int32_t *)0x80002ed;
        (**(code **)(_reloc.term + 0xe8))(iStack76, _obj.clipcorners.12666);
    }
code_r0x080002ed:
    if (iStack72 != *(int64_t *)(in_FS_OFFSET + 0x28)) {
        piStack88 = (int32_t *)0x8000582;
        func_0x080921db();
        iVar2 = 0x90;
        uStack104 = unaff_R12;
        piStack96 = unaff_R13;
        piStack88 = unaff_R14;
        uVar4 = func_0x080921db();
        uVar5 = func_0x080921db(0);
        dStack160 = _reloc..LC6;
        dVar14 = _reloc..LC4;
        dVar16 = _reloc..LC5;
        while( true ) {
            dVar16 = dVar16 * extraout_XMM0_Qa_01;
            uVar6 = func_0x080921db(dVar14 * extraout_XMM0_Qa_01, dVar16);
            uVar7 = func_0x080921db(dVar16, dVar16);
            func_0x080921db(uVar4, uVar5, uVar6, uVar7);
            dStack160 = _reloc..LC6 + dStack160;
            iVar2 = iVar2 + -1;
            if (iVar2 == 0) break;
            func_0x080921db(_reloc..LC7 * dStack160, &dStack128, &dStack136);
            dVar14 = dStack136;
            dVar16 = dStack128;
            uVar5 = uVar7;
            uVar4 = uVar6;
        }
        return;
    }
    return;
}


// WARNING: [r2ghidra] Failed to match type signed int64_t for variable var_1ch to Decompiler type: Unknown type
// identifier signed
// WARNING: [r2ghidra] Failed to match type signed int64_t for variable arg_84h to Decompiler type: Unknown type
// identifier signed
// WARNING: [r2ghidra] Var arg_84h is stack pointer based, which is not supported for decompilation.
// WARNING: [r2ghidra] Var arg_80h is stack pointer based, which is not supported for decompilation.
// WARNING: [r2ghidra] Failed to match type signed int64_t for variable arg_64h to Decompiler type: Unknown type
// identifier signed
// WARNING: [r2ghidra] Var arg_64h is stack pointer based, which is not supported for decompilation.

void sym.plot_border(undefined8 placeholder_0, undefined8 placeholder_1, int64_t arg9, int64_t arg10, int64_t arg11)
{
    double dVar1;
    uint64_t uVar2;
    int64_t iVar3;
    undefined4 uVar4;
    uint32_t uVar5;
    undefined4 uVar6;
    int32_t iVar7;
    undefined4 uVar8;
    undefined4 uVar9;
    undefined4 uVar10;
    undefined4 uVar11;
    uint32_t uVar12;
    uint64_t unaff_RBP;
    uint64_t unaff_R12;
    int64_t in_FS_OFFSET;
    double extraout_XMM0_Qa;
    double extraout_XMM0_Qa_00;
    undefined extraout_XMM0 [16];
    double dVar13;
    undefined auVar14 [16];
    undefined auVar15 [16];
    double dStack208;
    uint64_t auStack200 [2];
    uint64_t uStack184;
    uint64_t uStack176;
    uint64_t uStack168;
    undefined8 uStack136;
    undefined8 uStack128;
    undefined8 uStack120;
    double dStack112;
    uint64_t uStack104;
    undefined8 uStack96;
    undefined8 uStack88;
    undefined8 uStack80;
    undefined8 uStack72;
    undefined8 uStack64;
    undefined auStack56 [16];
    undefined8 uStack40;
    int64_t iStack32;
    
    iStack32 = *(int64_t *)(in_FS_OFFSET + 0x28);
    uVar12 = _reloc.draw_border & 0xf;
    (**(code **)(_reloc.term + 0x110))(placeholder_0, placeholder_1, arg9, arg10, arg11, 3);
    func_0x080921db(reloc.border_lp);
    if (uVar12 == 0xf) {
        func_0x080921db();
    }
    (**(code **)(_reloc.term + 0x58))(_reloc.plot_bounds, *(undefined4 *)0x809225f);
    if ((_reloc.draw_border & 2) == 0) {
        (**(code **)(_reloc.term + 0x58))(_reloc.plot_bounds, _reloc.closepath);
    } else {
        if (reloc.draw_key == (code)0x0) {
            (**(code **)(_reloc.term + 0x60))(_reloc.plot_bounds, _reloc.closepath);
        } else {
            _reloc.y_axis = 1;
            uVar5 = func_0x080921db(_reloc.jitter);
            unaff_R12 = (uint64_t)uVar5;
            uVar5 = func_0x080921db(_reloc.draw_polar_clip_line);
            unaff_RBP = (uint64_t)uVar5;
            (**(code **)(_reloc.term + 0x58))(_reloc.plot_bounds, unaff_R12);
            (**(code **)(_reloc.term + 0x60))(_reloc.plot_bounds, uVar5);
            (**(code **)(_reloc.term + 0x58))(_reloc.plot_bounds, _reloc.closepath);
        }
    }
    if ((_reloc.draw_border & 1) == 0) {
        (**(code **)(_reloc.term + 0x58))(*(undefined4 *)0x8092257, _reloc.closepath);
    } else {
        if (*(char *)0x809286b == '\0') {
            (**(code **)(_reloc.term + 0x60))(*(undefined4 *)0x8092257, _reloc.closepath);
        } else {
            _reloc.x_axis = 2;
            uVar5 = func_0x080921db(*(undefined8 *)0x8092783);
            unaff_RBP = (uint64_t)uVar5;
            uVar6 = func_0x080921db(*(undefined8 *)0x809277b);
            (**(code **)(_reloc.term + 0x58))(uVar6, _reloc.closepath);
            (**(code **)(_reloc.term + 0x60))(uVar5, _reloc.closepath);
            (**(code **)(_reloc.term + 0x58))(*(undefined4 *)0x8092257, _reloc.closepath);
        }
    }
    if ((_reloc.draw_border & 8) == 0) {
        (**(code **)(_reloc.term + 0x58))(*(undefined4 *)0x8092257, *(undefined4 *)0x809225f);
    } else {
        if (*(char *)0x8093063 == '\0') {
            (**(code **)(_reloc.term + 0x60))(*(undefined4 *)0x8092257, *(undefined4 *)0x809225f);
        } else {
            _reloc.y_axis = 5;
            uVar5 = func_0x080921db(*(undefined8 *)0x8092f7b);
            unaff_RBP = (uint64_t)uVar5;
            uVar6 = func_0x080921db(*(undefined8 *)0x8092f73);
            (**(code **)(_reloc.term + 0x58))(*(undefined4 *)0x8092257, uVar6);
            (**(code **)(_reloc.term + 0x60))(*(undefined4 *)0x8092257, uVar5);
            (**(code **)(_reloc.term + 0x58))(*(undefined4 *)0x8092257, *(undefined4 *)0x809225f);
        }
    }
    uStack176 = unaff_RBP;
    uStack168 = unaff_R12;
    if ((_reloc.draw_border & 4) == 0) {
        (**(code **)(_reloc.term + 0x58))(_reloc.plot_bounds, *(undefined4 *)0x809225f);
    } else {
        if (*(char *)0x809330b == '\0') {
            (**(code **)(_reloc.term + 0x60))(_reloc.plot_bounds, *(undefined4 *)0x809225f);
        } else {
            _reloc.x_axis = 6;
            uVar5 = func_0x080921db(*(undefined8 *)0x8093223);
            uStack168 = (uint64_t)uVar5;
            uVar5 = func_0x080921db(*(undefined8 *)0x809321b);
            uStack176 = (uint64_t)uVar5;
            (**(code **)(_reloc.term + 0x58))(uStack168, *(undefined4 *)0x809225f);
            (**(code **)(_reloc.term + 0x60))(uVar5, *(undefined4 *)0x809225f);
            (**(code **)(_reloc.term + 0x58))(*(undefined4 *)0x8092257, *(undefined4 *)0x809225f);
        }
    }
    uVar2 = (uint64_t)_reloc.clip_area;
    if (uVar12 == 0xf) {
        func_0x080921db();
        uVar2 = (uint64_t)_reloc.clip_area;
    }
    uStack184 = (uint64_t)uVar12;
    if ((_reloc.draw_border & 0x1000) != 0) {
        uStack120 = CONCAT44(*(undefined4 *)0x8092257, _reloc.plot_bounds);
        uStack40 = CONCAT71(*(unkbyte7 *)0x80922a4, reloc.raxis);
        dStack112 = _reloc..LC8 * (double)CONCAT44(*(undefined4 *)0x809225f, _reloc.closepath);
        uStack88 = CONCAT44(*(undefined4 *)0x8092277, _reloc.x_axis);
        uStack80 = CONCAT44(*(undefined4 *)0x809227f, _reloc.y_axis);
        uStack64 = CONCAT44(*(undefined4 *)0x809228f, _reloc.grid_lp);
        auStack56 = CONCAT79(*(unkbyte7 *)0x809229c, 
                             CONCAT18(reloc.grid_tics_in_front, CONCAT44(*(undefined4 *)0x8092297, _reloc.mgrid_lp)));
        _reloc.clip_area = reloc.plot_bounds;
        uStack136 = _reloc.border_lp;
        uStack128 = _reloc.term_apply_lp_properties;
        uStack104 = uVar2;
        uStack96 = _reloc.newpath;
        uStack72 = _reloc.polar_radius;
        func_0x080921db(dStack112, &uStack136);
        if (_obj.largest_polar_circle <= 0.00000000) {
            func_0x080921db(*(undefined8 *)0x809349b, 0);
            _obj.largest_polar_circle = extraout_XMM0_Qa;
        }
        sym.draw_polar_circle();
        uStack184 = uVar2;
    }
    iVar7 = 4;
    _reloc.clip_area = (code *)uVar2;
    (**(code **)(_reloc.term + 0x110))();
    if (iStack32 == *(int64_t *)(in_FS_OFFSET + 0x28)) {
        return;
    }
    func_0x080921db();
    uVar4 = *(undefined4 *)0x8092297;
    uVar6 = *(undefined4 *)0x809228f;
    uVar2 = (uint64_t)_reloc.clip_area;
    iVar3 = _reloc.term;
    func_0x080921db();
    _obj.largest_polar_circle = 0.00000000;
    if (iVar7 == 2) {
        *(undefined4 *)0x8092297 = 0xfffffffd;
        *(undefined4 *)0x809228f = 0xfffffffd;
    } else {
        if (reloc.grid_tics_in_front != (code)0x0) goto code_r0x08000b4c;
    }
    _reloc.x_axis = 2;
    _reloc.y_axis = 1;
    func_0x080921db(1, reloc.ytic_x, 2, sym.ytick2d_callback);
    func_0x080921db(2, reloc.xtic_y, 1, sym.xtick2d_callback);
    _reloc.x_axis = 6;
    _reloc.y_axis = 5;
    func_0x080921db(5, reloc.y2tic_x, 6, sym.ytick2d_callback);
    func_0x080921db(6, reloc.x2tic_y, 5, sym.xtick2d_callback);
code_r0x08000b4c:
    _reloc.x_axis = 2;
    _reloc.y_axis = 1;
    _reloc.clip_area = reloc.plot_bounds;
    if ((*(int32_t *)0x809353b != 0) && ((reloc.raxis != (code)0x0 || (reloc.polar != (code)0x0)))) {
        _reloc.tic_start = func_0x080921db(0);
        _reloc.tic_text = _reloc.tic_start - *(int32_t *)(iVar3 + 0x18);
        _reloc.rotate_tics = *(int32_t *)0x80935bb;
        _reloc.tic_mirror = _reloc.tic_start;
        if (*(int32_t *)0x80935bb == 0) {
            _reloc.tic_hjust = 1;
        } else {
            iVar7 = (**(code **)(iVar3 + 0x78))();
            if (iVar7 != 0) {
                _reloc.tic_hjust = (uint32_t)(_reloc.rotate_tics == -0x10e) * 2;
            }
        }
        if (*(char *)0x8093713 != '\0') {
            _reloc.tic_hjust = *(int32_t *)0x80935bf;
        }
        _reloc.tic_direction = 1;
        func_0x080921db(0x8093483, sym.xtick2d_callback);
        (**(code **)(iVar3 + 0x78))(0);
    }
    if (0.00000000 < _reloc.polar_grid_angle) {
        uVar8 = func_0x080921db(0);
        uVar9 = func_0x080921db(0);
        (**(code **)(_reloc.term + 0x110))(5);
        func_0x080921db(reloc.grid_lp);
        auVar15 = ZEXT816((uint64_t)_obj.largest_polar_circle);
        if (_obj.largest_polar_circle <= 0.00000000) {
            func_0x080921db(*(undefined8 *)0x809349b);
            _obj.largest_polar_circle = SUB168(extraout_XMM0, 0);
            auVar15 = extraout_XMM0;
        }
        auVar14 = (undefined  [16])0x0;
        dVar13 = 0.00000000;
        dVar1 = _reloc..LC9;
        while( true ) {
            uVar10 = func_0x080921db(dVar1 * SUB168(auVar15, 0), dVar13, SUB168(auVar14, 0), SUB168(auVar15, 0));
            uVar11 = func_0x080921db(SUB168(auVar14, 0) * _obj.largest_polar_circle);
            func_0x080921db(uVar8, uVar9, uVar10, uVar11);
            dVar1 = _obj.largest_polar_circle;
            dVar13 = dVar13 + _reloc.polar_grid_angle;
            if (_reloc..LC10 <= dVar13) break;
            func_0x080921db(dVar13, dVar13, auStack200, &dStack208);
            auVar14 = ZEXT816(auStack200[0]);
            auVar15 = ZEXT816((uint64_t)dVar1);
            dVar1 = dStack208;
        }
        (**(code **)(_reloc.term + 0x110))(6);
    }
    if (_reloc.setup_tics != 0) {
        func_0x080921db(reloc.border_lp);
        if (_obj.largest_polar_circle <= 0.00000000) {
            func_0x080921db(*(undefined8 *)0x809349b);
            _obj.largest_polar_circle = extraout_XMM0_Qa_00;
        }
        func_0x080921db(reloc.THETA_AXIS);
        func_0x080921db(reloc.THETA_AXIS, sym.ttick_callback);
        (**(code **)(_reloc.term + 0x78))(0);
    }
    _reloc.clip_area = (code *)uVar2;
    *(undefined4 *)0x809228f = uVar6;
    *(undefined4 *)0x8092297 = uVar4;
    return;
}


// WARNING: [r2ghidra] Failed to match type signed int64_t for variable arg_64h to Decompiler type: Unknown type
// identifier signed
// WARNING: [r2ghidra] Var arg_64h is stack pointer based, which is not supported for decompilation.

void sym.ytick2d_callback
               (double placeholder_0, undefined8 placeholder_1, undefined8 placeholder_2, int64_t arg10, int64_t arg11,
               undefined8 placeholder_5, undefined8 placeholder_6, undefined8 placeholder_7, int64_t arg1, int64_t arg2,
               int64_t arg3, int64_t arg4)
{
    undefined4 uVar1;
    undefined4 uVar2;
    int64_t iVar3;
    undefined8 uVar4;
    int32_t iVar5;
    undefined4 uVar6;
    uint32_t uVar7;
    int32_t iVar8;
    undefined8 *puVar9;
    char *pcVar10;
    uint64_t uVar11;
    int32_t extraout_EDX;
    uint64_t unaff_RBX;
    uint32_t uVar12;
    uint64_t unaff_RBP;
    char *arg2_00;
    code *pcVar13;
    code *pcVar14;
    undefined8 *puVar15;
    double *pdVar16;
    double *pdVar17;
    int64_t in_FS_OFFSET;
    uint8_t uVar18;
    double extraout_XMM0_Qa;
    double dVar19;
    double dVar20;
    int32_t in_stack_0000000c;
    double dStack296;
    double dStack288;
    double dStack280;
    double dStack272;
    double dStack264;
    double dStack256;
    double dStack248;
    int64_t iStack240;
    double *pdStack232;
    double dStack224;
    double *pdStack216;
    double dStack208;
    double dStack200;
    double *pdStack192;
    int64_t iStack184;
    double dStack168;
    double dStack160;
    int64_t iStack152;
    uint64_t uStack136;
    uint64_t uStack128;
    int64_t iStack120;
    int64_t iStack112;
    int64_t iStack104;
    undefined8 *puStack96;
    double dStack80;
    double dStack72;
    int64_t iStack64;
    
    iVar3 = _reloc.term;
    uVar18 = 0;
    iStack64 = *(int64_t *)(in_FS_OFFSET + 0x28);
    iVar8 = (int32_t)arg3;
    if (iVar8 < 1) {
        dVar20 = *(double *)(arg1 + 0x150);
    } else {
        if (iVar8 == 1) {
            dVar20 = *(double *)(arg1 + 0x158);
        } else {
            dVar20 = 0.00000000;
            if (iVar8 < 5) {
                dVar20 = *(double *)(reloc.ticscale + (int64_t)iVar8 * 8);
            }
        }
    }
    dVar19 = (double)(*(int32_t *)(_reloc.term + 0x24) * _reloc.tic_direction) * dVar20;
    uVar12 = (uint32_t)dVar19;
    uStack128 = unaff_RBP & 0xffffffff00000000 | (uint64_t)uVar12;
    pcVar10 = (char *)arg4;
    if (*(int32_t *)(arg1 + 0x18c) < 0xb) {
        puStack96 = (undefined8 *)0x800303d;
        uVar7 = func_0x080921db(placeholder_0, dVar19, dVar20, arg10, arg11, placeholder_5, placeholder_6, placeholder_7
                               );
        uStack136 = (uint64_t)uVar7;
    } else {
        uStack136 = unaff_RBX & 0xffffffff00000000 |
                    (uint64_t)
                    (uint32_t)
                    (int32_t)((placeholder_0 - *(double *)(arg1 + 0x10)) * *(double *)(arg1 + 0x80) +
                              (double)*(int32_t *)(arg1 + 0x78) + _reloc..LC8);
    }
    iVar8 = (int32_t)uStack136;
    if (arg4 != 0) {
        do {
            puStack96 = (undefined8 *)0x8002eab;
            iVar5 = func_0x080921db(*(undefined8 *)arg4);
            if ((iVar5 - iVar8) + 2U < 5) {
                arg2 = 0;
                break;
            }
            arg4 = *(undefined8 *)(arg4 + 0x18);
        } while ((undefined8 *)arg4 != (undefined8 *)0x0);
    }
    if (-3 < in_stack_0000000c) {
        puStack96 = (undefined8 *)0x8002ecb;
        (**(code **)(iVar3 + 0x110))(5);
        puStack96 = (undefined8 *)0x8002ed5;
        func_0x080921db();
        if ((((reloc.keyT == (code)0x0) || (*(int32_t *)0x8092527 <= iVar8)) || (iVar8 <= _reloc.z_axis)) ||
           ((*(int32_t *)0x8092257 <= _reloc.boxplot_opts || (*(int32_t *)0x809251f <= _reloc.plot_bounds)))) {
            puStack96 = (undefined8 *)0x8002ef6;
            (**(code **)(iVar3 + 0x58))();
            puStack96 = (undefined8 *)0x8002f02;
            (**(code **)(iVar3 + 0x60))(*(int32_t *)0x8092257);
        } else {
            if (_reloc.plot_bounds < _reloc.boxplot_opts) {
                puStack96 = (undefined8 *)0x800309a;
                (**(code **)(iVar3 + 0x58))();
                puStack96 = (undefined8 *)0x80030a6;
                (**(code **)(iVar3 + 0x60))(_reloc.boxplot_opts);
            }
            if (*(int32_t *)0x809251f < *(int32_t *)0x8092257) {
                puStack96 = (undefined8 *)0x80030c5;
                (**(code **)(iVar3 + 0x58))(*(int32_t *)0x809251f);
                puStack96 = (undefined8 *)0x80030d1;
                (**(code **)(iVar3 + 0x60))(*(int32_t *)0x8092257);
            }
        }
        puStack96 = (undefined8 *)0x8002f0e;
        func_0x080921db(reloc.border_lp);
        puStack96 = (undefined8 *)0x8002f1a;
        (**(code **)(iVar3 + 0x110))();
    }
    puStack96 = (undefined8 *)0x8002f26;
    (**(code **)(iVar3 + 0x58))();
    pdVar17 = (double *)(uStack136 & 0xffffffff);
    puStack96 = (undefined8 *)0x8002f34;
    (**(code **)(iVar3 + 0x60))();
    pcVar13 = (code *)(uint64_t)_reloc.tic_mirror;
    if (-1 < (int32_t)_reloc.tic_mirror) {
        puStack96 = (undefined8 *)0x8002f44;
        (**(code **)(iVar3 + 0x58))();
        pdVar17 = (double *)(uStack136 & 0xffffffff);
        pcVar13 = (code *)(uint64_t)(_reloc.tic_mirror - uVar12);
        puStack96 = (undefined8 *)0x8002f52;
        (**(code **)(iVar3 + 0x60))();
    }
    if (arg2 != 0) {
        puStack96 = (undefined8 *)0x8002f79;
        func_0x080921db(arg1 + 0x108, &dStack80, &dStack72);
        if (*(int32_t *)(arg1 + 0xd0) != 0) {
            puStack96 = (undefined8 *)0x80030ed;
            func_0x080921db(arg1 + 0xd0);
        }
        puStack96 = (undefined8 *)0x8002f9e;
        func_0x080921db(*(uint8_t *)(arg1 + 0x131) ^ 1);
        iStack104 = *(undefined8 *)(arg1 + 200);
        pcVar10 = (char *)(uint64_t)_reloc.tic_hjust;
        pdVar17 = (double *)(uint64_t)(uint32_t)((int32_t)dStack72 + iVar8);
        iStack112 = 0x8002fda;
        func_0x080921db((int32_t)dStack80 + _reloc.tic_text, pdVar17, arg2, pcVar10, _reloc.tic_vjust, 
                        _reloc.rotate_tics);
        iStack112 = 0x8002fe1;
        func_0x080921db(0);
        pcVar13 = reloc.border_lp;
        iStack112 = 0x8002fed;
        func_0x080921db();
    }
    if (iStack64 == *(int64_t *)(in_FS_OFFSET + 0x28)) {
        return;
    }
    puStack96 = (undefined8 *)0x80030f7;
    func_0x080921db();
    iStack112 = iVar3;
    dVar20 = *(double *)((int64_t)pcVar13 + 0x10);
    iStack152 = *(int64_t *)(in_FS_OFFSET + 0x28);
    dVar19 = (extraout_XMM0_Qa - dVar20) / (*(double *)((int64_t)pcVar13 + 0x18) - dVar20);
    if (extraout_EDX < 1) {
        dStack208 = *(double *)((int64_t)pcVar13 + 0x150);
    } else {
        if (extraout_EDX == 1) {
            dStack208 = *(double *)((int64_t)pcVar13 + 0x158);
        } else {
            if (extraout_EDX < 5) {
                dStack208 = *(double *)(reloc.ticscale + (int64_t)extraout_EDX * 8);
            } else {
                dStack208 = 0.00000000;
            }
        }
    }
    uVar11 = uStack128;
    arg2_00 = (char *)pdVar17;
    pcVar14 = pcVar13;
    iStack120 = arg1;
    iStack104 = arg2;
    puStack96 = (undefined8 *)arg4;
    if (0.00000000 < dVar19) {
        if (((reloc.grid_spiderweb == (code)0x0) || (*(char *)((int64_t)pcVar13 + 0x140) == '\0')) ||
           (*(int32_t *)0x809228f == -3)) {
            dStack200 = ("@"._32_8_ - "@"._48_8_) * dVar19;
            pdStack192 = (double *)(("@"._24_8_ - "@"._40_8_) * dVar19);
            pdStack216 = (double *)0x8003200;
            uVar12 = func_0x080921db(dStack208 * "@"._8_8_ + (double)pdStack192, dVar19, dVar20);
            pcVar10 = (char *)(uint64_t)uVar12;
            pdStack216 = (double *)0x800321b;
            uVar6 = func_0x080921db(dStack208 * "@"._16_8_ + dStack200);
            pdStack216 = (double *)0x800323e;
            uVar12 = func_0x080921db((double)pdStack192 - dStack208 * "@"._8_8_);
            uVar11 = (uint64_t)uVar12;
            pdStack216 = (double *)0x8003260;
            uVar7 = func_0x080921db(dStack200 - dStack208 * "@"._16_8_);
            arg2_00 = (char *)(uint64_t)uVar12;
            pcVar14 = (code *)(uint64_t)uVar7;
            pdStack216 = (double *)0x800326f;
            func_0x080921db(pcVar14, arg2_00, uVar6);
            if (pdVar17 != (double *)0x0) {
                dStack208 = dStack208 + _reloc..LC28;
                pdStack216 = (double *)0x80032a9;
                uVar12 = func_0x080921db(dStack200 - dStack208 * "@"._16_8_, dStack208);
                uVar11 = (uint64_t)uVar12;
                pdStack216 = (double *)0x80032c7;
                iVar8 = func_0x080921db((double)pdStack192 - dStack208 * "@"._8_8_, dStack208 * "@"._8_8_);
                pdStack216 = (double *)0x80032e7;
                func_0x080921db((double *)((int64_t)pcVar13 + 0x108), &dStack168, &dStack160, reloc..LC29);
                if (*(int32_t *)((int64_t)pcVar13 + 0xd0) != 0) {
                    pdStack216 = (double *)0x80034ec;
                    func_0x080921db();
                }
                pdStack216 = (double *)0x8003308;
                func_0x080921db();
                dStack224 = *(double *)((int64_t)pcVar13 + 200);
                arg2_00 = (char *)(uint64_t)(uint32_t)((int32_t)dStack160 + iVar8);
                pdStack232 = (double *)0x800333d;
                func_0x080921db((int32_t)dStack168 + uVar12, arg2_00, pdVar17, 1, 1, 
                                *(undefined4 *)((int64_t)pcVar13 + 0x138));
                pcVar14 = (code *)0x0;
                pdStack232 = (double *)0x8003344;
                func_0x080921db();
                pcVar10 = (char *)(uint64_t)*(uint32_t *)((int64_t)pcVar13 + 0xd0);
                if (*(uint32_t *)((int64_t)pcVar13 + 0xd0) != 0) {
                    pcVar14 = reloc.border_lp;
                    pdStack216 = (double *)0x8003504;
                    func_0x080921db();
                }
            }
        } else {
            uVar12 = *(uint32_t *)((int64_t)pcVar13 + 0x88);
            uVar11 = (uint64_t)uVar12;
            arg2_00 = "polygon";
            iStack184 = (int64_t)(int32_t)(uVar12 + 1) * 0xc;
            pdStack216 = (double *)0x80033d7;
            dStack208 = dVar19;
            pcVar10 = (char *)func_0x080921db(0, dVar19, dVar20, iStack184);
            iStack184 = iStack184 + -0xc;
            pdStack192 = (double *)pcVar10;
            if ((int32_t)uVar12 < 1) {
                pdVar17 = (double *)(iStack184 + (int64_t)pcVar10);
                *(undefined4 *)pdVar17 = *(undefined4 *)pcVar10;
                *(undefined4 *)((int64_t)pdVar17 + 4) = *(undefined4 *)((int64_t)pcVar10 + 4);
            } else {
                dStack200 = (double)uVar12;
                uVar7 = 0;
                pdVar17 = (double *)pcVar10;
                do {
                    dVar20 = (double)uVar7;
                    uVar7 = uVar7 + 1;
                    pdStack216 = (double *)0x8003459;
                    func_0x080921db(_reloc..LC21 - (dVar20 * _reloc..LC27) / dStack200, dStack208, &dStack168, 
                                    &dStack160, 0);
                    pdStack216 = (double *)0x8003464;
                    uVar6 = func_0x080921db(dStack168);
                    *(undefined4 *)pdVar17 = uVar6;
                    pdStack216 = (double *)0x8003472;
                    uVar6 = func_0x080921db(dStack160);
                    *(undefined4 *)((int64_t)pdVar17 + 4) = uVar6;
                    pdVar17 = (double *)((int64_t)pdVar17 + 0xc);
                } while (uVar12 != uVar7);
                *(undefined4 *)(iStack184 + (int64_t)pdStack192) = *(undefined4 *)pdStack192;
                ((undefined4 *)(iStack184 + (int64_t)pdStack192))[1] = *(undefined4 *)((int64_t)pdStack192 + 4);
                pcVar13 = (code *)((int64_t)pdStack192 + ((uint64_t)(uVar12 - 1) * 3 + 3) * 4);
                pdVar16 = (double *)pcVar10;
                do {
                    pcVar10 = (char *)(uint64_t)*(uint32_t *)(pdVar16 + 2);
                    pdVar17 = (double *)((int64_t)pdVar16 + 0xc);
                    arg2_00 = (char *)(uint64_t)*(uint32_t *)((int64_t)pdVar16 + 4);
                    pdStack216 = (double *)0x80034c5;
                    func_0x080921db(*(undefined4 *)pdVar16, arg2_00, *(undefined4 *)((int64_t)pdVar16 + 0xc));
                    pdVar16 = pdVar17;
                } while ((double *)pcVar13 != pdVar17);
            }
            pdStack216 = (double *)0x80034d4;
            pcVar14 = (code *)pdStack192;
            func_0x080921db();
        }
    }
    iVar8 = (int32_t)pcVar14;
    if (iStack152 != *(int64_t *)(in_FS_OFFSET + 0x28)) {
        pdStack216 = (double *)0x800352b;
        func_0x080921db();
        uVar4 = _reloc.clip_area;
        iStack240 = *(int64_t *)(in_FS_OFFSET + 0x28);
        _reloc.clip_area = reloc.canvas;
        pdStack232 = (double *)pcVar13;
        dStack224 = (double)uVar11;
        pdStack216 = pdVar17;
        puVar9 = _reloc.first_arrow;
        if ((*(uint8_t *)(_reloc.term + 0xa8) & 0x80) != 0) {
            _reloc.clip_area = (code *)0x0;
        }
        while (puVar9 != (undefined8 *)0x0) {
            dStack280 = 0.00000000;
            dStack272 = 0.00000000;
            dStack264 = 0.00000000;
            dStack256 = 0.00000000;
            if ((*(int32_t *)((int64_t)puVar9 + 0x6c) == iVar8) && (*(int32_t *)((int64_t)puVar9 + 0xc) != 3)) {
                sym.map_position_double.isra.0
                          ((int64_t)(puVar9 + 2), (int64_t)&dStack280, (int64_t)&dStack272, (int64_t)pcVar10);
                puVar15 = puVar9 + 7;
                if (*(int32_t *)((int64_t)puVar9 + 0xc) == 1) {
                    arg2_00 = (char *)&dStack264;
                    pcVar10 = "arrow";
                    func_0x080921db(puVar15, arg2_00, &dStack256);
                    dStack264 = dStack264 + dStack280;
                    dStack256 = dStack256 + dStack272;
                } else {
                    if (*(int32_t *)((int64_t)puVar9 + 0xc) == 2) {
                        pcVar10 = "arrow";
                        dVar20 = (double)(uint64_t)*(uint32_t *)(_reloc.term + 0x20) /
                                 (double)(uint64_t)*(uint32_t *)(_reloc.term + 0x24);
                        func_0x080921db((double)(uint64_t)*(uint32_t *)(_reloc.term + 0x24), dVar20, puVar15, &dStack248
                                        , 0);
                        arg2_00 = (char *)&dStack296;
                        func_0x080921db((double)puVar9[0xc] * _reloc..LC7, &dStack288);
                        dStack256 = dStack248 * dStack288 * dVar20 + dStack272;
                        dStack264 = dStack280 + dStack296 * dStack248;
                    } else {
                        arg2_00 = (char *)&dStack264;
                        sym.map_position_double.isra.0
                                  ((int64_t)puVar15, (int64_t)arg2_00, (int64_t)&dStack256, (int64_t)pcVar10);
                    }
                }
                func_0x080921db(puVar9 + 0xe);
                func_0x080921db(puVar9 + 0xd);
                func_0x080921db(dStack280, dStack272, dStack264, dStack256, *(undefined4 *)(puVar9 + 0x1b));
            }
            puVar9 = (undefined8 *)*puVar9;
        }
        pcVar13 = reloc.border_lp;
        func_0x080921db();
        if (iStack240 != *(int64_t *)(in_FS_OFFSET + 0x28)) {
            _reloc.clip_area = (code *)uVar4;
            func_0x080921db();
            if ("@"._0_8_ != 0) {
                func_0x080921db();
            }
            "@"._0_8_ = 0;
            if ((undefined8 *)pcVar13 != (undefined8 *)0x0) {
                *(undefined8 *)pcVar13 = _reloc.histogram_opts;
                *(undefined8 *)((int64_t)pcVar13 + 0x130) = _reloc.screen_ok;
                puVar9 = (undefined8 *)
                         ((int64_t)pcVar13 -
                         (int64_t)(undefined8 *)((uint64_t)((int64_t)pcVar13 + 8) & 0xfffffffffffffff8));
                uVar11 = (uint64_t)((int32_t)puVar9 + 0x138U >> 3);
                puVar9 = (undefined8 *)(reloc.histogram_opts + -(int64_t)puVar9);
                puVar15 = (undefined8 *)((uint64_t)((int64_t)pcVar13 + 8) & 0xfffffffffffffff8);
                while (uVar11 != 0) {
                    uVar11 = uVar11 - 1;
                    *puVar15 = *puVar9;
                    puVar9 = puVar9 + (uint64_t)uVar18 * 0x1ffffffffffffffe + 1;
                    puVar15 = puVar15 + (uint64_t)uVar18 * 0x1ffffffffffffffe + 1;
                }
                uVar6 = *(undefined4 *)((int64_t)arg2_00 + 4);
                uVar1 = *(undefined4 *)((int64_t)arg2_00 + 8);
                uVar2 = *(undefined4 *)((int64_t)arg2_00 + 0xc);
                *(undefined4 *)((int64_t)pcVar13 + 0x38) = *(undefined4 *)arg2_00;
                *(undefined4 *)((int64_t)pcVar13 + 0x3c) = uVar6;
                *(undefined4 *)((int64_t)pcVar13 + 0x40) = uVar1;
                *(undefined4 *)((int64_t)pcVar13 + 0x44) = uVar2;
                uVar6 = *(undefined4 *)((int64_t)arg2_00 + 0x14);
                uVar1 = *(undefined4 *)((int64_t)arg2_00 + 0x18);
                uVar2 = *(undefined4 *)((int64_t)arg2_00 + 0x1c);
                *(undefined4 *)((int64_t)pcVar13 + 0x48) = *(undefined4 *)((int64_t)arg2_00 + 0x10);
                *(undefined4 *)((int64_t)pcVar13 + 0x4c) = uVar6;
                *(undefined4 *)((int64_t)pcVar13 + 0x50) = uVar1;
                *(undefined4 *)((int64_t)pcVar13 + 0x54) = uVar2;
                uVar6 = *(undefined4 *)((int64_t)arg2_00 + 0x24);
                uVar1 = *(undefined4 *)((int64_t)arg2_00 + 0x28);
                uVar2 = *(undefined4 *)((int64_t)arg2_00 + 0x2c);
                *(undefined4 *)((int64_t)pcVar13 + 0x58) = *(undefined4 *)((int64_t)arg2_00 + 0x20);
                *(undefined4 *)((int64_t)pcVar13 + 0x5c) = uVar6;
                *(undefined4 *)((int64_t)pcVar13 + 0x60) = uVar1;
                *(undefined4 *)((int64_t)pcVar13 + 100) = uVar2;
                uVar6 = *(undefined4 *)((int64_t)arg2_00 + 0x34);
                uVar1 = *(undefined4 *)((int64_t)arg2_00 + 0x38);
                uVar2 = *(undefined4 *)((int64_t)arg2_00 + 0x3c);
                *(undefined4 *)((int64_t)pcVar13 + 0x68) = *(undefined4 *)((int64_t)arg2_00 + 0x30);
                *(undefined4 *)((int64_t)pcVar13 + 0x6c) = uVar6;
                *(undefined4 *)((int64_t)pcVar13 + 0x70) = uVar1;
                *(undefined4 *)((int64_t)pcVar13 + 0x74) = uVar2;
                uVar6 = *(undefined4 *)((int64_t)arg2_00 + 0x44);
                uVar1 = *(undefined4 *)((int64_t)arg2_00 + 0x48);
                uVar2 = *(undefined4 *)((int64_t)arg2_00 + 0x4c);
                *(undefined4 *)((int64_t)pcVar13 + 0x78) = *(undefined4 *)((int64_t)arg2_00 + 0x40);
                *(undefined4 *)((int64_t)pcVar13 + 0x7c) = uVar6;
                *(undefined4 *)((int64_t)pcVar13 + 0x80) = uVar1;
                *(undefined4 *)((int64_t)pcVar13 + 0x84) = uVar2;
                uVar6 = *(undefined4 *)((int64_t)arg2_00 + 0x54);
                uVar1 = *(undefined4 *)((int64_t)arg2_00 + 0x58);
                uVar2 = *(undefined4 *)((int64_t)arg2_00 + 0x5c);
                *(undefined4 *)((int64_t)pcVar13 + 0x88) = *(undefined4 *)((int64_t)arg2_00 + 0x50);
                *(undefined4 *)((int64_t)pcVar13 + 0x8c) = uVar6;
                *(undefined4 *)((int64_t)pcVar13 + 0x90) = uVar1;
                *(undefined4 *)((int64_t)pcVar13 + 0x94) = uVar2;
                uVar6 = *(undefined4 *)((int64_t)arg2_00 + 100);
                uVar1 = *(undefined4 *)((int64_t)arg2_00 + 0x68);
                uVar2 = *(undefined4 *)((int64_t)arg2_00 + 0x6c);
                *(undefined4 *)((int64_t)pcVar13 + 0x98) = *(undefined4 *)((int64_t)arg2_00 + 0x60);
                *(undefined4 *)((int64_t)pcVar13 + 0x9c) = uVar6;
                *(undefined4 *)((int64_t)pcVar13 + 0xa0) = uVar1;
                *(undefined4 *)((int64_t)pcVar13 + 0xa4) = uVar2;
                uVar6 = *(undefined4 *)((int64_t)arg2_00 + 0x74);
                uVar1 = *(undefined4 *)((int64_t)arg2_00 + 0x78);
                uVar2 = *(undefined4 *)((int64_t)arg2_00 + 0x7c);
                *(undefined4 *)((int64_t)pcVar13 + 0xa8) = *(undefined4 *)((int64_t)arg2_00 + 0x70);
                *(undefined4 *)((int64_t)pcVar13 + 0xac) = uVar6;
                *(undefined4 *)((int64_t)pcVar13 + 0xb0) = uVar1;
                *(undefined4 *)((int64_t)pcVar13 + 0xb4) = uVar2;
                uVar6 = *(undefined4 *)((int64_t)arg2_00 + 0x84);
                uVar1 = *(undefined4 *)((int64_t)arg2_00 + 0x88);
                uVar2 = *(undefined4 *)((int64_t)arg2_00 + 0x8c);
                *(undefined4 *)((int64_t)pcVar13 + 0xb8) = *(undefined4 *)((int64_t)arg2_00 + 0x80);
                *(undefined4 *)((int64_t)pcVar13 + 0xbc) = uVar6;
                *(undefined4 *)((int64_t)pcVar13 + 0xc0) = uVar1;
                *(undefined4 *)((int64_t)pcVar13 + 0xc4) = uVar2;
                uVar6 = *(undefined4 *)((int64_t)arg2_00 + 0x94);
                uVar1 = *(undefined4 *)((int64_t)arg2_00 + 0x98);
                uVar2 = *(undefined4 *)((int64_t)arg2_00 + 0x9c);
                *(undefined4 *)((int64_t)pcVar13 + 200) = *(undefined4 *)((int64_t)arg2_00 + 0x90);
                *(undefined4 *)((int64_t)pcVar13 + 0xcc) = uVar6;
                *(undefined4 *)((int64_t)pcVar13 + 0xd0) = uVar1;
                *(undefined4 *)((int64_t)pcVar13 + 0xd4) = uVar2;
                uVar6 = *(undefined4 *)((int64_t)arg2_00 + 0xa4);
                uVar1 = *(undefined4 *)((int64_t)arg2_00 + 0xa8);
                uVar2 = *(undefined4 *)((int64_t)arg2_00 + 0xac);
                *(undefined4 *)((int64_t)pcVar13 + 0xd8) = *(undefined4 *)((int64_t)arg2_00 + 0xa0);
                *(undefined4 *)((int64_t)pcVar13 + 0xdc) = uVar6;
                *(undefined4 *)((int64_t)pcVar13 + 0xe0) = uVar1;
                *(undefined4 *)((int64_t)pcVar13 + 0xe4) = uVar2;
                uVar6 = *(undefined4 *)((int64_t)arg2_00 + 0xb4);
                uVar1 = *(undefined4 *)((int64_t)arg2_00 + 0xb8);
                uVar2 = *(undefined4 *)((int64_t)arg2_00 + 0xbc);
                *(undefined4 *)((int64_t)pcVar13 + 0xe8) = *(undefined4 *)((int64_t)arg2_00 + 0xb0);
                *(undefined4 *)((int64_t)pcVar13 + 0xec) = uVar6;
                *(undefined4 *)((int64_t)pcVar13 + 0xf0) = uVar1;
                *(undefined4 *)((int64_t)pcVar13 + 0xf4) = uVar2;
                uVar6 = *(undefined4 *)((int64_t)arg2_00 + 0xc4);
                uVar1 = *(undefined4 *)((int64_t)arg2_00 + 200);
                uVar2 = *(undefined4 *)((int64_t)arg2_00 + 0xcc);
                *(undefined4 *)((int64_t)pcVar13 + 0xf8) = *(undefined4 *)((int64_t)arg2_00 + 0xc0);
                *(undefined4 *)((int64_t)pcVar13 + 0xfc) = uVar6;
                *(undefined4 *)((int64_t)pcVar13 + 0x100) = uVar1;
                *(undefined4 *)((int64_t)pcVar13 + 0x104) = uVar2;
                uVar6 = *(undefined4 *)((int64_t)arg2_00 + 0xd4);
                uVar1 = *(undefined4 *)((int64_t)arg2_00 + 0xd8);
                uVar2 = *(undefined4 *)((int64_t)arg2_00 + 0xdc);
                *(undefined4 *)((int64_t)pcVar13 + 0x108) = *(undefined4 *)((int64_t)arg2_00 + 0xd0);
                *(undefined4 *)((int64_t)pcVar13 + 0x10c) = uVar6;
                *(undefined4 *)((int64_t)pcVar13 + 0x110) = uVar1;
                *(undefined4 *)((int64_t)pcVar13 + 0x114) = uVar2;
                uVar6 = *(undefined4 *)((int64_t)arg2_00 + 0xe4);
                uVar1 = *(undefined4 *)((int64_t)arg2_00 + 0xe8);
                uVar2 = *(undefined4 *)((int64_t)arg2_00 + 0xec);
                *(undefined4 *)((int64_t)pcVar13 + 0x118) = *(undefined4 *)((int64_t)arg2_00 + 0xe0);
                *(undefined4 *)((int64_t)pcVar13 + 0x11c) = uVar6;
                *(undefined4 *)((int64_t)pcVar13 + 0x120) = uVar1;
                *(undefined4 *)((int64_t)pcVar13 + 0x124) = uVar2;
                uVar6 = *(undefined4 *)((int64_t)arg2_00 + 0xf4);
                uVar1 = *(undefined4 *)((int64_t)arg2_00 + 0xf8);
                uVar2 = *(undefined4 *)((int64_t)arg2_00 + 0xfc);
                *(undefined4 *)((int64_t)pcVar13 + 0x128) = *(undefined4 *)((int64_t)arg2_00 + 0xf0);
                *(undefined4 *)((int64_t)pcVar13 + 300) = uVar6;
                *(undefined4 *)((int64_t)pcVar13 + 0x130) = uVar1;
                *(undefined4 *)((int64_t)pcVar13 + 0x134) = uVar2;
                *(double *)arg2_00 = 0.00000000;
                *(double *)((int64_t)arg2_00 + 0xf8) = 0.00000000;
                uVar11 = (uint64_t)
                         (((int32_t)arg2_00 -
                          (int32_t)(undefined8 *)((uint64_t)((int64_t)arg2_00 + 8) & 0xfffffffffffffff8)) + 0x100U >> 3)
                ;
                puVar9 = (undefined8 *)((uint64_t)((int64_t)arg2_00 + 8) & 0xfffffffffffffff8);
                while (_reloc.default_rectangle = (undefined8 *)pcVar13, uVar11 != 0) {
                    uVar11 = uVar11 - 1;
                    *puVar9 = 0;
                    puVar9 = puVar9 + (uint64_t)uVar18 * 0x1ffffffffffffffe + 1;
                }
            }
            return;
        }
        _reloc.clip_area = (code *)uVar4;
        return;
    }
    return;
}


// WARNING: Could not reconcile some variable overlaps
// WARNING: [r2ghidra] Failed to match type signed int64_t for variable var_1ch to Decompiler type: Unknown type
// identifier signed
// WARNING: [r2ghidra] Failed to match type signed int64_t for variable arg_84h to Decompiler type: Unknown type
// identifier signed
// WARNING: [r2ghidra] Var arg_84h is stack pointer based, which is not supported for decompilation.
// WARNING: [r2ghidra] Var arg_80h is stack pointer based, which is not supported for decompilation.

void sym.xtick2d_callback
               (int64_t arg7, undefined8 placeholder_1, double placeholder_2, undefined8 placeholder_3,
               double placeholder_4, double placeholder_5, undefined8 placeholder_6, undefined8 placeholder_7,
               int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4)
{
    undefined4 uVar1;
    undefined4 uVar2;
    int64_t iVar3;
    int64_t iVar4;
    uint32_t *puVar5;
    uint32_t uVar6;
    undefined4 uVar7;
    int32_t iVar8;
    undefined8 *puVar9;
    double *pdVar10;
    char *pcVar11;
    uint64_t uVar12;
    int32_t extraout_EDX;
    int32_t extraout_EDX_00;
    uint32_t uVar13;
    uint64_t uVar14;
    char *arg2_00;
    code *pcVar15;
    code *pcVar16;
    undefined8 *puVar17;
    double *pdVar18;
    int64_t in_FS_OFFSET;
    uint8_t uVar19;
    double dVar20;
    double extraout_XMM0_Qa;
    double extraout_XMM0_Qa_00;
    double dVar21;
    int32_t in_stack_0000000c;
    double dStack416;
    double dStack408;
    double dStack400;
    double dStack392;
    double dStack384;
    double dStack376;
    double dStack368;
    int64_t iStack360;
    double *pdStack352;
    double dStack344;
    double *pdStack336;
    double dStack328;
    double dStack320;
    double *pdStack312;
    int64_t iStack304;
    double dStack288;
    double dStack280;
    int64_t iStack272;
    double *pdStack256;
    uint64_t uStack248;
    code *pcStack240;
    int64_t iStack232;
    uint64_t uStack224;
    double *pdStack216;
    double dStack200;
    double dStack192;
    int64_t iStack184;
    code *pcStack168;
    uint64_t uStack160;
    int64_t iStack152;
    int64_t iStack144;
    int64_t iStack136;
    undefined8 *puStack128;
    undefined8 uStack112;
    double dStack104;
    int32_t iStack92;
    double dStack80;
    double dStack72;
    int64_t iStack64;
    
    iVar3 = _reloc.term;
    uVar19 = 0;
    iStack64 = *(int64_t *)(in_FS_OFFSET + 0x28);
    uVar13 = *(uint32_t *)(_reloc.term + 0x20);
    uStack160 = (uint64_t)uVar13;
    iStack92 = _reloc.tic_direction;
    iVar8 = (int32_t)arg3;
    if (iVar8 < 1) {
        dStack104 = *(double *)(arg1 + 0x150);
        placeholder_2 = dStack104;
    } else {
        if (iVar8 == 1) {
            dStack104 = *(double *)(arg1 + 0x158);
            placeholder_4 = dStack104;
        } else {
            placeholder_3 = 0;
            dStack104 = 0.00000000;
            if (iVar8 < 5) {
                dStack104 = *(double *)(reloc.ticscale + (int64_t)iVar8 * 8);
                placeholder_5 = dStack104;
            }
        }
    }
    puStack128 = (undefined8 *)0x8002b0b;
    pdVar10 = (double *)arg4;
    uVar12 = arg2;
    pcStack240 = (code *)arg1;
    uStack112 = arg7;
    uVar6 = func_0x080921db(arg7, placeholder_1, placeholder_2, placeholder_3, placeholder_4, placeholder_5, 
                            placeholder_6, placeholder_7);
    pcStack168 = (code *)(uint64_t)uVar6;
    if (arg4 != 0) {
        do {
            puStack128 = (undefined8 *)0x8002b2b;
            iVar8 = func_0x080921db(*(undefined8 *)arg4);
            if ((iVar8 - uVar6) + 2 < 5) {
                arg2 = 0;
                break;
            }
            arg4 = *(undefined8 *)(arg4 + 0x18);
        } while ((undefined8 *)arg4 != (undefined8 *)0x0);
    }
    if (in_stack_0000000c < -2) goto code_r0x08002ba7;
    puStack128 = (undefined8 *)0x8002b4e;
    (**(code **)(iVar3 + 0x110))(5);
    puStack128 = (undefined8 *)0x8002b5b;
    func_0x080921db(&stack0x00000008);
    if (*(int32_t *)(arg1 + 0x18c) == 7) {
        if ("@"._56_8_ < (double)(uStack112 & _reloc..LC0)) {
            "@"._56_8_ = (double)(uStack112 & _reloc..LC0);
        }
        puStack128 = (undefined8 *)0x8002dd3;
        sym.draw_polar_circle(uStack112);
    } else {
        uVar12 = (uint64_t)_reloc.closepath;
        if ((((reloc.keyT != (code)0x0) && ((int32_t)uVar6 < *(int32_t *)0x809251f)) &&
            (_reloc.boxplot_opts < (int32_t)uVar6)) &&
           (((int32_t)_reloc.closepath < *(int32_t *)0x8092527 &&
            ((int32_t)_reloc.z_axis < (int32_t)*(uint32_t *)0x809225f)))) {
            if ((int32_t)_reloc.closepath < (int32_t)_reloc.z_axis) {
                puStack128 = (undefined8 *)0x8002d66;
                (**(code **)(iVar3 + 0x58))(pcStack168);
                uVar12 = (uint64_t)_reloc.z_axis;
                puStack128 = (undefined8 *)0x8002d72;
                (**(code **)(iVar3 + 0x60))(pcStack168);
            }
            if ((int32_t)*(uint32_t *)0x809225f <= *(int32_t *)0x8092527) goto code_r0x08002b8f;
        }
        puStack128 = (undefined8 *)0x8002b83;
        (**(code **)(iVar3 + 0x58))(pcStack168);
        uVar12 = (uint64_t)*(uint32_t *)0x809225f;
        puStack128 = (undefined8 *)0x8002b8f;
        (**(code **)(iVar3 + 0x60))(uVar6);
    }
code_r0x08002b8f:
    puStack128 = (undefined8 *)0x8002b9b;
    func_0x080921db(reloc.border_lp);
    pcStack240 = (code *)0x6;
    puStack128 = (undefined8 *)0x8002ba7;
    (**(code **)(iVar3 + 0x110))();
code_r0x08002ba7:
    if ((*(uint32_t *)_reloc.clip_area == uVar6 || (int32_t)*(uint32_t *)_reloc.clip_area < (int32_t)uVar6) &&
       ((int32_t)uVar6 <= (int32_t)*(uint32_t *)((int64_t)_reloc.clip_area + 4))) {
        dVar20 = (double)(uVar13 * iStack92) * dStack104;
        uVar13 = (uint32_t)dVar20;
        uStack160 = (uint64_t)uVar13;
        puStack128 = (undefined8 *)0x8002be2;
        (**(code **)(iVar3 + 0x58))(dVar20);
        puStack128 = (undefined8 *)0x8002bf0;
        pcStack240 = pcStack168;
        (**(code **)(iVar3 + 0x60))();
        uVar12 = (uint64_t)_reloc.tic_mirror;
        if (-1 < (int32_t)_reloc.tic_mirror) {
            puStack128 = (undefined8 *)0x8002c00;
            (**(code **)(iVar3 + 0x58))();
            pcStack240 = (code *)(uint64_t)uVar6;
            uVar12 = (uint64_t)(_reloc.tic_mirror - uVar13);
            puStack128 = (undefined8 *)0x8002c0e;
            (**(code **)(iVar3 + 0x60))();
        }
        if (arg2 != 0) {
            puStack128 = (undefined8 *)0x8002c35;
            func_0x080921db(arg1 + 0x108, &dStack80, &dStack72);
            if (*(int32_t *)(arg1 + 0xd0) != 0) {
                puStack128 = (undefined8 *)0x8002d9d;
                func_0x080921db(arg1 + 0xd0);
            }
            puStack128 = (undefined8 *)0x8002c5a;
            func_0x080921db(*(uint8_t *)(arg1 + 0x131) ^ 1);
            iStack136 = *(undefined8 *)(arg1 + 200);
            pdVar10 = (double *)(uint64_t)_reloc.tic_hjust;
            uVar12 = (uint64_t)(uint32_t)((int32_t)dStack72 + _reloc.tic_text);
            iStack144 = 0x8002c96;
            func_0x080921db((int32_t)dStack80 + uVar6, uVar12, arg2, pdVar10, _reloc.tic_vjust, _reloc.rotate_tics);
            iStack144 = 0x8002c9d;
            func_0x080921db(0);
            pcStack240 = reloc.border_lp;
            iStack144 = 0x8002ca9;
            func_0x080921db();
        }
    }
    if (iStack64 == *(int64_t *)(in_FS_OFFSET + 0x28)) {
        return;
    }
    puStack128 = (undefined8 *)0x8002ddd;
    func_0x080921db();
    iVar4 = _reloc.term;
    iStack144 = iVar3;
    iStack184 = *(int64_t *)(in_FS_OFFSET + 0x28);
    if (extraout_EDX < 1) {
        dVar20 = *(double *)(pcStack240 + 0x150);
    } else {
        if (extraout_EDX == 1) {
            dVar20 = *(double *)(pcStack240 + 0x158);
        } else {
            dVar20 = 0.00000000;
            if (extraout_EDX < 5) {
                dVar20 = *(double *)(reloc.ticscale + (int64_t)extraout_EDX * 8);
            }
        }
    }
    uVar13 = (uint32_t)((double)(*(int32_t *)(_reloc.term + 0x24) * _reloc.tic_direction) * dVar20);
    uStack248 = (uint64_t)uVar13;
    pcVar11 = (char *)pdVar10;
    iStack152 = arg1;
    iStack136 = arg2;
    puStack128 = (undefined8 *)arg4;
    if (*(int32_t *)(pcStack240 + 0x18c) < 0xb) {
        pdStack216 = (double *)0x800303d;
        uVar6 = func_0x080921db();
    } else {
        uVar6 = (uint32_t)
                ((extraout_XMM0_Qa - *(double *)(pcStack240 + 0x10)) * *(double *)(pcStack240 + 0x80) +
                 (double)*(int32_t *)(pcStack240 + 0x78) + _reloc..LC8);
    }
    pdStack256 = (double *)(uint64_t)uVar6;
    do {
        if (pdVar10 == (double *)0x0) {
code_r0x08002eb8:
            if (-3 < uStack112._4_4_) {
                pdStack216 = (double *)0x8002ecb;
                (**(code **)(iVar4 + 0x110))(5);
                pdStack216 = (double *)0x8002ed5;
                func_0x080921db();
                if ((((reloc.keyT == (code)0x0) || (*(int32_t *)0x8092527 <= (int32_t)uVar6)) ||
                    ((int32_t)uVar6 <= (int32_t)_reloc.z_axis)) ||
                   ((*(int32_t *)0x8092257 <= _reloc.boxplot_opts || (*(int32_t *)0x809251f <= _reloc.plot_bounds)))) {
                    pdStack216 = (double *)0x8002ef6;
                    (**(code **)(iVar4 + 0x58))();
                    pdStack216 = (double *)0x8002f02;
                    (**(code **)(iVar4 + 0x60))(*(int32_t *)0x8092257);
                } else {
                    if (_reloc.plot_bounds < _reloc.boxplot_opts) {
                        pdStack216 = (double *)0x800309a;
                        (**(code **)(iVar4 + 0x58))();
                        pdStack216 = (double *)0x80030a6;
                        (**(code **)(iVar4 + 0x60))(_reloc.boxplot_opts);
                    }
                    if (*(int32_t *)0x809251f < *(int32_t *)0x8092257) {
                        pdStack216 = (double *)0x80030c5;
                        (**(code **)(iVar4 + 0x58))(*(int32_t *)0x809251f);
                        pdStack216 = (double *)0x80030d1;
                        (**(code **)(iVar4 + 0x60))(*(int32_t *)0x8092257);
                    }
                }
                pdStack216 = (double *)0x8002f0e;
                func_0x080921db(reloc.border_lp);
                pdStack216 = (double *)0x8002f1a;
                (**(code **)(iVar4 + 0x110))();
            }
            pdStack216 = (double *)0x8002f26;
            (**(code **)(iVar4 + 0x58))();
            pdStack216 = (double *)0x8002f34;
            pdVar18 = pdStack256;
            (**(code **)(iVar4 + 0x60))();
            pcVar15 = (code *)(uint64_t)_reloc.tic_mirror;
            if (-1 < (int32_t)_reloc.tic_mirror) {
                pdStack216 = (double *)0x8002f44;
                (**(code **)(iVar4 + 0x58))();
                pdVar18 = (double *)(uint64_t)uVar6;
                pcVar15 = (code *)(uint64_t)(_reloc.tic_mirror - uVar13);
                pdStack216 = (double *)0x8002f52;
                (**(code **)(iVar4 + 0x60))();
            }
            if (uVar12 != 0) {
                pdStack216 = (double *)0x8002f79;
                func_0x080921db(pcStack240 + 0x108, &dStack200, &dStack192);
                if (*(int32_t *)(pcStack240 + 0xd0) != 0) {
                    pdStack216 = (double *)0x80030ed;
                    func_0x080921db(pcStack240 + 0xd0);
                }
                pdStack216 = (double *)0x8002f9e;
                func_0x080921db((uint8_t)pcStack240[0x131] ^ 1);
                uStack224 = *(uint64_t *)(pcStack240 + 200);
                pcVar11 = (char *)(uint64_t)_reloc.tic_hjust;
                pdVar18 = (double *)(uint64_t)((int32_t)dStack192 + uVar6);
                iStack232 = 0x8002fda;
                func_0x080921db((int32_t)dStack200 + _reloc.tic_text, pdVar18, uVar12, pcVar11, _reloc.tic_vjust, 
                                _reloc.rotate_tics);
                iStack232 = 0x8002fe1;
                func_0x080921db(0);
                pcVar15 = reloc.border_lp;
                iStack232 = 0x8002fed;
                func_0x080921db();
            }
            if (iStack184 == *(int64_t *)(in_FS_OFFSET + 0x28)) {
                return;
            }
            pdStack216 = (double *)0x80030f7;
            func_0x080921db();
            iStack232 = iVar4;
            dVar20 = *(double *)((int64_t)pcVar15 + 0x10);
            iStack272 = *(int64_t *)(in_FS_OFFSET + 0x28);
            dVar21 = (extraout_XMM0_Qa_00 - dVar20) / (*(double *)((int64_t)pcVar15 + 0x18) - dVar20);
            if (extraout_EDX_00 < 1) {
                dStack328 = *(double *)((int64_t)pcVar15 + 0x150);
            } else {
                if (extraout_EDX_00 == 1) {
                    dStack328 = *(double *)((int64_t)pcVar15 + 0x158);
                } else {
                    if (extraout_EDX_00 < 5) {
                        dStack328 = *(double *)(reloc.ticscale + (int64_t)extraout_EDX_00 * 8);
                    } else {
                        dStack328 = 0.00000000;
                    }
                }
            }
            uVar14 = uStack248;
            arg2_00 = (char *)pdVar18;
            pcVar16 = pcVar15;
            uStack224 = uVar12;
            pdStack216 = pdVar10;
            if (0.00000000 < dVar21) {
                if (((reloc.grid_spiderweb == (code)0x0) || (*(char *)((int64_t)pcVar15 + 0x140) == '\0')) ||
                   (*(int32_t *)0x809228f == -3)) {
                    dStack320 = ("@"._32_8_ - "@"._48_8_) * dVar21;
                    pdStack312 = (double *)(("@"._24_8_ - "@"._40_8_) * dVar21);
                    pdStack336 = (double *)0x8003200;
                    uVar13 = func_0x080921db(dStack328 * "@"._8_8_ + (double)pdStack312, dVar21, dVar20);
                    pcVar11 = (char *)(uint64_t)uVar13;
                    pdStack336 = (double *)0x800321b;
                    uVar7 = func_0x080921db(dStack328 * "@"._16_8_ + dStack320);
                    pdStack336 = (double *)0x800323e;
                    uVar13 = func_0x080921db((double)pdStack312 - dStack328 * "@"._8_8_);
                    uVar14 = (uint64_t)uVar13;
                    pdStack336 = (double *)0x8003260;
                    uVar6 = func_0x080921db(dStack320 - dStack328 * "@"._16_8_);
                    arg2_00 = (char *)(uint64_t)uVar13;
                    pcVar16 = (code *)(uint64_t)uVar6;
                    pdStack336 = (double *)0x800326f;
                    func_0x080921db(pcVar16, arg2_00, uVar7);
                    if (pdVar18 != (double *)0x0) {
                        dStack328 = dStack328 + _reloc..LC28;
                        pdStack336 = (double *)0x80032a9;
                        uVar13 = func_0x080921db(dStack320 - dStack328 * "@"._16_8_, dStack328);
                        uVar14 = (uint64_t)uVar13;
                        pdStack336 = (double *)0x80032c7;
                        iVar8 = func_0x080921db((double)pdStack312 - dStack328 * "@"._8_8_, dStack328 * "@"._8_8_);
                        pdStack336 = (double *)0x80032e7;
                        func_0x080921db((double *)((int64_t)pcVar15 + 0x108), &dStack288, &dStack280, reloc..LC29);
                        if (*(int32_t *)((int64_t)pcVar15 + 0xd0) != 0) {
                            pdStack336 = (double *)0x80034ec;
                            func_0x080921db();
                        }
                        pdStack336 = (double *)0x8003308;
                        func_0x080921db();
                        dStack344 = *(double *)((int64_t)pcVar15 + 200);
                        arg2_00 = (char *)(uint64_t)(uint32_t)((int32_t)dStack280 + iVar8);
                        pdStack352 = (double *)0x800333d;
                        func_0x080921db((int32_t)dStack288 + uVar13, arg2_00, pdVar18, 1, 1, 
                                        *(undefined4 *)((int64_t)pcVar15 + 0x138));
                        pcVar16 = (code *)0x0;
                        pdStack352 = (double *)0x8003344;
                        func_0x080921db();
                        pcVar11 = (char *)(uint64_t)*(uint32_t *)((int64_t)pcVar15 + 0xd0);
                        if (*(uint32_t *)((int64_t)pcVar15 + 0xd0) != 0) {
                            pcVar16 = reloc.border_lp;
                            pdStack336 = (double *)0x8003504;
                            func_0x080921db();
                        }
                    }
                } else {
                    uVar13 = *(uint32_t *)((int64_t)pcVar15 + 0x88);
                    uVar14 = (uint64_t)uVar13;
                    arg2_00 = "polygon";
                    iStack304 = (int64_t)(int32_t)(uVar13 + 1) * 0xc;
                    pdStack336 = (double *)0x80033d7;
                    dStack328 = dVar21;
                    pcVar11 = (char *)func_0x080921db(0, dVar21, dVar20, iStack304);
                    iStack304 = iStack304 + -0xc;
                    pdStack312 = (double *)pcVar11;
                    if ((int32_t)uVar13 < 1) {
                        pdVar18 = (double *)(iStack304 + (int64_t)pcVar11);
                        *(undefined4 *)pdVar18 = *(undefined4 *)pcVar11;
                        *(undefined4 *)((int64_t)pdVar18 + 4) = *(undefined4 *)((int64_t)pcVar11 + 4);
                    } else {
                        dStack320 = (double)uVar13;
                        uVar6 = 0;
                        pdVar10 = (double *)pcVar11;
                        do {
                            dVar20 = (double)uVar6;
                            uVar6 = uVar6 + 1;
                            pdStack336 = (double *)0x8003459;
                            func_0x080921db(_reloc..LC21 - (dVar20 * _reloc..LC27) / dStack320, dStack328, &dStack288, 
                                            &dStack280, 0);
                            pdStack336 = (double *)0x8003464;
                            uVar7 = func_0x080921db(dStack288);
                            *(undefined4 *)pdVar10 = uVar7;
                            pdStack336 = (double *)0x8003472;
                            uVar7 = func_0x080921db(dStack280);
                            *(undefined4 *)((int64_t)pdVar10 + 4) = uVar7;
                            pdVar10 = (double *)((int64_t)pdVar10 + 0xc);
                        } while (uVar13 != uVar6);
                        *(undefined4 *)(iStack304 + (int64_t)pdStack312) = *(undefined4 *)pdStack312;
                        ((undefined4 *)(iStack304 + (int64_t)pdStack312))[1] = *(undefined4 *)((int64_t)pdStack312 + 4);
                        pcVar15 = (code *)((int64_t)pdStack312 + ((uint64_t)(uVar13 - 1) * 3 + 3) * 4);
                        pdVar10 = (double *)pcVar11;
                        do {
                            pcVar11 = (char *)(uint64_t)*(uint32_t *)(pdVar10 + 2);
                            pdVar18 = (double *)((int64_t)pdVar10 + 0xc);
                            arg2_00 = (char *)(uint64_t)*(uint32_t *)((int64_t)pdVar10 + 4);
                            pdStack336 = (double *)0x80034c5;
                            func_0x080921db(*(undefined4 *)pdVar10, arg2_00, *(undefined4 *)((int64_t)pdVar10 + 0xc));
                            pdVar10 = pdVar18;
                        } while ((double *)pcVar15 != pdVar18);
                    }
                    pdStack336 = (double *)0x80034d4;
                    pcVar16 = (code *)pdStack312;
                    func_0x080921db();
                }
            }
            iVar8 = (int32_t)pcVar16;
            if (iStack272 == *(int64_t *)(in_FS_OFFSET + 0x28)) {
                return;
            }
            pdStack336 = (double *)0x800352b;
            func_0x080921db();
            puVar5 = (uint32_t *)_reloc.clip_area;
            iStack360 = *(int64_t *)(in_FS_OFFSET + 0x28);
            _reloc.clip_area = reloc.canvas;
            pdStack352 = (double *)pcVar15;
            dStack344 = (double)uVar14;
            pdStack336 = pdVar18;
            puVar9 = _reloc.first_arrow;
            if ((*(uint8_t *)(_reloc.term + 0xa8) & 0x80) != 0) {
                _reloc.clip_area = (code *)0x0;
            }
            while (puVar9 != (undefined8 *)0x0) {
                dStack400 = 0.00000000;
                dStack392 = 0.00000000;
                dStack384 = 0.00000000;
                dStack376 = 0.00000000;
                if ((*(int32_t *)((int64_t)puVar9 + 0x6c) == iVar8) && (*(int32_t *)((int64_t)puVar9 + 0xc) != 3)) {
                    sym.map_position_double.isra.0
                              ((int64_t)(puVar9 + 2), (int64_t)&dStack400, (int64_t)&dStack392, (int64_t)pcVar11);
                    puVar17 = puVar9 + 7;
                    if (*(int32_t *)((int64_t)puVar9 + 0xc) == 1) {
                        arg2_00 = (char *)&dStack384;
                        pcVar11 = "arrow";
                        func_0x080921db(puVar17, arg2_00, &dStack376);
                        dStack384 = dStack384 + dStack400;
                        dStack376 = dStack376 + dStack392;
                    } else {
                        if (*(int32_t *)((int64_t)puVar9 + 0xc) == 2) {
                            pcVar11 = "arrow";
                            dVar20 = (double)(uint64_t)*(uint32_t *)(_reloc.term + 0x20) /
                                     (double)(uint64_t)*(uint32_t *)(_reloc.term + 0x24);
                            func_0x080921db((double)(uint64_t)*(uint32_t *)(_reloc.term + 0x24), dVar20, puVar17, 
                                            &dStack368, 0);
                            arg2_00 = (char *)&dStack416;
                            func_0x080921db((double)puVar9[0xc] * _reloc..LC7, &dStack408);
                            dStack376 = dStack368 * dStack408 * dVar20 + dStack392;
                            dStack384 = dStack400 + dStack416 * dStack368;
                        } else {
                            arg2_00 = (char *)&dStack384;
                            sym.map_position_double.isra.0
                                      ((int64_t)puVar17, (int64_t)arg2_00, (int64_t)&dStack376, (int64_t)pcVar11);
                        }
                    }
                    func_0x080921db(puVar9 + 0xe);
                    func_0x080921db(puVar9 + 0xd);
                    func_0x080921db(dStack400, dStack392, dStack384, dStack376, *(undefined4 *)(puVar9 + 0x1b));
                }
                puVar9 = (undefined8 *)*puVar9;
            }
            pcVar15 = reloc.border_lp;
            func_0x080921db();
            if (iStack360 != *(int64_t *)(in_FS_OFFSET + 0x28)) {
                _reloc.clip_area = (code *)puVar5;
                func_0x080921db();
                if ("@"._0_8_ != 0) {
                    func_0x080921db();
                }
                "@"._0_8_ = 0;
                if ((undefined8 *)pcVar15 != (undefined8 *)0x0) {
                    *(undefined8 *)pcVar15 = _reloc.histogram_opts;
                    *(undefined8 *)((int64_t)pcVar15 + 0x130) = _reloc.screen_ok;
                    puVar9 = (undefined8 *)
                             ((int64_t)pcVar15 -
                             (int64_t)(undefined8 *)((uint64_t)((int64_t)pcVar15 + 8) & 0xfffffffffffffff8));
                    uVar12 = (uint64_t)((int32_t)puVar9 + 0x138U >> 3);
                    puVar9 = (undefined8 *)(reloc.histogram_opts + -(int64_t)puVar9);
                    puVar17 = (undefined8 *)((uint64_t)((int64_t)pcVar15 + 8) & 0xfffffffffffffff8);
                    while (uVar12 != 0) {
                        uVar12 = uVar12 - 1;
                        *puVar17 = *puVar9;
                        puVar9 = puVar9 + (uint64_t)uVar19 * 0x1ffffffffffffffe + 1;
                        puVar17 = puVar17 + (uint64_t)uVar19 * 0x1ffffffffffffffe + 1;
                    }
                    uVar7 = *(undefined4 *)((int64_t)arg2_00 + 4);
                    uVar1 = *(undefined4 *)((int64_t)arg2_00 + 8);
                    uVar2 = *(undefined4 *)((int64_t)arg2_00 + 0xc);
                    *(undefined4 *)((int64_t)pcVar15 + 0x38) = *(undefined4 *)arg2_00;
                    *(undefined4 *)((int64_t)pcVar15 + 0x3c) = uVar7;
                    *(undefined4 *)((int64_t)pcVar15 + 0x40) = uVar1;
                    *(undefined4 *)((int64_t)pcVar15 + 0x44) = uVar2;
                    uVar7 = *(undefined4 *)((int64_t)arg2_00 + 0x14);
                    uVar1 = *(undefined4 *)((int64_t)arg2_00 + 0x18);
                    uVar2 = *(undefined4 *)((int64_t)arg2_00 + 0x1c);
                    *(undefined4 *)((int64_t)pcVar15 + 0x48) = *(undefined4 *)((int64_t)arg2_00 + 0x10);
                    *(undefined4 *)((int64_t)pcVar15 + 0x4c) = uVar7;
                    *(undefined4 *)((int64_t)pcVar15 + 0x50) = uVar1;
                    *(undefined4 *)((int64_t)pcVar15 + 0x54) = uVar2;
                    uVar7 = *(undefined4 *)((int64_t)arg2_00 + 0x24);
                    uVar1 = *(undefined4 *)((int64_t)arg2_00 + 0x28);
                    uVar2 = *(undefined4 *)((int64_t)arg2_00 + 0x2c);
                    *(undefined4 *)((int64_t)pcVar15 + 0x58) = *(undefined4 *)((int64_t)arg2_00 + 0x20);
                    *(undefined4 *)((int64_t)pcVar15 + 0x5c) = uVar7;
                    *(undefined4 *)((int64_t)pcVar15 + 0x60) = uVar1;
                    *(undefined4 *)((int64_t)pcVar15 + 100) = uVar2;
                    uVar7 = *(undefined4 *)((int64_t)arg2_00 + 0x34);
                    uVar1 = *(undefined4 *)((int64_t)arg2_00 + 0x38);
                    uVar2 = *(undefined4 *)((int64_t)arg2_00 + 0x3c);
                    *(undefined4 *)((int64_t)pcVar15 + 0x68) = *(undefined4 *)((int64_t)arg2_00 + 0x30);
                    *(undefined4 *)((int64_t)pcVar15 + 0x6c) = uVar7;
                    *(undefined4 *)((int64_t)pcVar15 + 0x70) = uVar1;
                    *(undefined4 *)((int64_t)pcVar15 + 0x74) = uVar2;
                    uVar7 = *(undefined4 *)((int64_t)arg2_00 + 0x44);
                    uVar1 = *(undefined4 *)((int64_t)arg2_00 + 0x48);
                    uVar2 = *(undefined4 *)((int64_t)arg2_00 + 0x4c);
                    *(undefined4 *)((int64_t)pcVar15 + 0x78) = *(undefined4 *)((int64_t)arg2_00 + 0x40);
                    *(undefined4 *)((int64_t)pcVar15 + 0x7c) = uVar7;
                    *(undefined4 *)((int64_t)pcVar15 + 0x80) = uVar1;
                    *(undefined4 *)((int64_t)pcVar15 + 0x84) = uVar2;
                    uVar7 = *(undefined4 *)((int64_t)arg2_00 + 0x54);
                    uVar1 = *(undefined4 *)((int64_t)arg2_00 + 0x58);
                    uVar2 = *(undefined4 *)((int64_t)arg2_00 + 0x5c);
                    *(undefined4 *)((int64_t)pcVar15 + 0x88) = *(undefined4 *)((int64_t)arg2_00 + 0x50);
                    *(undefined4 *)((int64_t)pcVar15 + 0x8c) = uVar7;
                    *(undefined4 *)((int64_t)pcVar15 + 0x90) = uVar1;
                    *(undefined4 *)((int64_t)pcVar15 + 0x94) = uVar2;
                    uVar7 = *(undefined4 *)((int64_t)arg2_00 + 100);
                    uVar1 = *(undefined4 *)((int64_t)arg2_00 + 0x68);
                    uVar2 = *(undefined4 *)((int64_t)arg2_00 + 0x6c);
                    *(undefined4 *)((int64_t)pcVar15 + 0x98) = *(undefined4 *)((int64_t)arg2_00 + 0x60);
                    *(undefined4 *)((int64_t)pcVar15 + 0x9c) = uVar7;
                    *(undefined4 *)((int64_t)pcVar15 + 0xa0) = uVar1;
                    *(undefined4 *)((int64_t)pcVar15 + 0xa4) = uVar2;
                    uVar7 = *(undefined4 *)((int64_t)arg2_00 + 0x74);
                    uVar1 = *(undefined4 *)((int64_t)arg2_00 + 0x78);
                    uVar2 = *(undefined4 *)((int64_t)arg2_00 + 0x7c);
                    *(undefined4 *)((int64_t)pcVar15 + 0xa8) = *(undefined4 *)((int64_t)arg2_00 + 0x70);
                    *(undefined4 *)((int64_t)pcVar15 + 0xac) = uVar7;
                    *(undefined4 *)((int64_t)pcVar15 + 0xb0) = uVar1;
                    *(undefined4 *)((int64_t)pcVar15 + 0xb4) = uVar2;
                    uVar7 = *(undefined4 *)((int64_t)arg2_00 + 0x84);
                    uVar1 = *(undefined4 *)((int64_t)arg2_00 + 0x88);
                    uVar2 = *(undefined4 *)((int64_t)arg2_00 + 0x8c);
                    *(undefined4 *)((int64_t)pcVar15 + 0xb8) = *(undefined4 *)((int64_t)arg2_00 + 0x80);
                    *(undefined4 *)((int64_t)pcVar15 + 0xbc) = uVar7;
                    *(undefined4 *)((int64_t)pcVar15 + 0xc0) = uVar1;
                    *(undefined4 *)((int64_t)pcVar15 + 0xc4) = uVar2;
                    uVar7 = *(undefined4 *)((int64_t)arg2_00 + 0x94);
                    uVar1 = *(undefined4 *)((int64_t)arg2_00 + 0x98);
                    uVar2 = *(undefined4 *)((int64_t)arg2_00 + 0x9c);
                    *(undefined4 *)((int64_t)pcVar15 + 200) = *(undefined4 *)((int64_t)arg2_00 + 0x90);
                    *(undefined4 *)((int64_t)pcVar15 + 0xcc) = uVar7;
                    *(undefined4 *)((int64_t)pcVar15 + 0xd0) = uVar1;
                    *(undefined4 *)((int64_t)pcVar15 + 0xd4) = uVar2;
                    uVar7 = *(undefined4 *)((int64_t)arg2_00 + 0xa4);
                    uVar1 = *(undefined4 *)((int64_t)arg2_00 + 0xa8);
                    uVar2 = *(undefined4 *)((int64_t)arg2_00 + 0xac);
                    *(undefined4 *)((int64_t)pcVar15 + 0xd8) = *(undefined4 *)((int64_t)arg2_00 + 0xa0);
                    *(undefined4 *)((int64_t)pcVar15 + 0xdc) = uVar7;
                    *(undefined4 *)((int64_t)pcVar15 + 0xe0) = uVar1;
                    *(undefined4 *)((int64_t)pcVar15 + 0xe4) = uVar2;
                    uVar7 = *(undefined4 *)((int64_t)arg2_00 + 0xb4);
                    uVar1 = *(undefined4 *)((int64_t)arg2_00 + 0xb8);
                    uVar2 = *(undefined4 *)((int64_t)arg2_00 + 0xbc);
                    *(undefined4 *)((int64_t)pcVar15 + 0xe8) = *(undefined4 *)((int64_t)arg2_00 + 0xb0);
                    *(undefined4 *)((int64_t)pcVar15 + 0xec) = uVar7;
                    *(undefined4 *)((int64_t)pcVar15 + 0xf0) = uVar1;
                    *(undefined4 *)((int64_t)pcVar15 + 0xf4) = uVar2;
                    uVar7 = *(undefined4 *)((int64_t)arg2_00 + 0xc4);
                    uVar1 = *(undefined4 *)((int64_t)arg2_00 + 200);
                    uVar2 = *(undefined4 *)((int64_t)arg2_00 + 0xcc);
                    *(undefined4 *)((int64_t)pcVar15 + 0xf8) = *(undefined4 *)((int64_t)arg2_00 + 0xc0);
                    *(undefined4 *)((int64_t)pcVar15 + 0xfc) = uVar7;
                    *(undefined4 *)((int64_t)pcVar15 + 0x100) = uVar1;
                    *(undefined4 *)((int64_t)pcVar15 + 0x104) = uVar2;
                    uVar7 = *(undefined4 *)((int64_t)arg2_00 + 0xd4);
                    uVar1 = *(undefined4 *)((int64_t)arg2_00 + 0xd8);
                    uVar2 = *(undefined4 *)((int64_t)arg2_00 + 0xdc);
                    *(undefined4 *)((int64_t)pcVar15 + 0x108) = *(undefined4 *)((int64_t)arg2_00 + 0xd0);
                    *(undefined4 *)((int64_t)pcVar15 + 0x10c) = uVar7;
                    *(undefined4 *)((int64_t)pcVar15 + 0x110) = uVar1;
                    *(undefined4 *)((int64_t)pcVar15 + 0x114) = uVar2;
                    uVar7 = *(undefined4 *)((int64_t)arg2_00 + 0xe4);
                    uVar1 = *(undefined4 *)((int64_t)arg2_00 + 0xe8);
                    uVar2 = *(undefined4 *)((int64_t)arg2_00 + 0xec);
                    *(undefined4 *)((int64_t)pcVar15 + 0x118) = *(undefined4 *)((int64_t)arg2_00 + 0xe0);
                    *(undefined4 *)((int64_t)pcVar15 + 0x11c) = uVar7;
                    *(undefined4 *)((int64_t)pcVar15 + 0x120) = uVar1;
                    *(undefined4 *)((int64_t)pcVar15 + 0x124) = uVar2;
                    uVar7 = *(undefined4 *)((int64_t)arg2_00 + 0xf4);
                    uVar1 = *(undefined4 *)((int64_t)arg2_00 + 0xf8);
                    uVar2 = *(undefined4 *)((int64_t)arg2_00 + 0xfc);
                    *(undefined4 *)((int64_t)pcVar15 + 0x128) = *(undefined4 *)((int64_t)arg2_00 + 0xf0);
                    *(undefined4 *)((int64_t)pcVar15 + 300) = uVar7;
                    *(undefined4 *)((int64_t)pcVar15 + 0x130) = uVar1;
                    *(undefined4 *)((int64_t)pcVar15 + 0x134) = uVar2;
                    *(double *)arg2_00 = 0.00000000;
                    *(double *)((int64_t)arg2_00 + 0xf8) = 0.00000000;
                    uVar12 = (uint64_t)
                             (((int32_t)arg2_00 -
                              (int32_t)(undefined8 *)((uint64_t)((int64_t)arg2_00 + 8) & 0xfffffffffffffff8)) + 0x100U
                             >> 3);
                    puVar9 = (undefined8 *)((uint64_t)((int64_t)arg2_00 + 8) & 0xfffffffffffffff8);
                    while (_reloc.default_rectangle = (undefined8 *)pcVar15, uVar12 != 0) {
                        uVar12 = uVar12 - 1;
                        *puVar9 = 0;
                        puVar9 = puVar9 + (uint64_t)uVar19 * 0x1ffffffffffffffe + 1;
                    }
                }
                return;
            }
            _reloc.clip_area = (code *)puVar5;
            return;
        }
        pdStack216 = (double *)0x8002eab;
        iVar8 = func_0x080921db(*pdVar10);
        if ((iVar8 - uVar6) + 2 < 5) {
            uVar12 = 0;
            goto code_r0x08002eb8;
        }
        pdVar10 = (double *)pdVar10[3];
    } while( true );
}


// WARNING: Control flow encountered bad instruction data
// WARNING: Possible PIC construction at 0x08000f81: Changing call to branch
// WARNING: Possible PIC construction at 0x08001018: Changing call to branch
// WARNING: Possible PIC construction at 0x08001033: Changing call to branch
// WARNING: Possible PIC construction at 0x08001089: Changing call to branch
// WARNING: Possible PIC construction at 0x080010c6: Changing call to branch
// WARNING: Possible PIC construction at 0x0800118f: Changing call to branch
// WARNING: Possible PIC construction at 0x08001220: Changing call to branch
// WARNING: Removing unreachable block (ram,0x08001194)
// WARNING: Removing unreachable block (ram,0x080010cb)
// WARNING: Removing unreachable block (ram,0x080010d3)
// WARNING: Removing unreachable block (ram,0x0800127a)
// WARNING: Removing unreachable block (ram,0x080010e6)
// WARNING: Removing unreachable block (ram,0x080010f0)
// WARNING: Removing unreachable block (ram,0x08001116)
// WARNING: Removing unreachable block (ram,0x0800108e)
// WARNING: Removing unreachable block (ram,0x08001200)
// WARNING: Removing unreachable block (ram,0x08001038)
// WARNING: Removing unreachable block (ram,0x0800101d)
// WARNING: Removing unreachable block (ram,0x08000f86)
// WARNING: Removing unreachable block (ram,0x08000fb4)
// WARNING: Removing unreachable block (ram,0x08000fd9)
// WARNING: Removing unreachable block (ram,0x08000fd0)
// WARNING: Removing unreachable block (ram,0x08000feb)
// WARNING: Removing unreachable block (ram,0x08000fee)
// WARNING: Removing unreachable block (ram,0x08001225)
// WARNING: Removing unreachable block (ram,0x080010a7)
// WARNING: Removing unreachable block (ram,0x080011d0)
// WARNING: Removing unreachable block (ram,0x080010c0)

void sym.ttick_callback(int64_t arg7, undefined8 placeholder_1, undefined8 placeholder_2, undefined8 placeholder_3,
                       undefined8 placeholder_4, undefined8 placeholder_5, undefined8 placeholder_6,
                       undefined8 placeholder_7, int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4)
{
    char cVar1;
    uint8_t uVar2;
    code *in_RAX;
    uint8_t *puVar3;
    char *pcVar4;
    int32_t iVar5;
    
    iVar5 = (int32_t)arg3;
    if (((0 < iVar5) && (iVar5 != 1)) && (iVar5 < 5)) {
        in_RAX = reloc.ticscale;
    }
    cVar1 = (char)in_RAX;
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    *in_RAX = (code)((char)*in_RAX + cVar1);
    puVar3 = (uint8_t *)(arg4 & 0xffffffff);
    pcVar4 = (char *)(uint64_t)((uint32_t)arg4 & *(uint32_t *)arg4);
    uVar2 = (uint8_t)puVar3;
    *puVar3 = *puVar3 | uVar2;
    *puVar3 = *puVar3 + uVar2;
    *puVar3 = *puVar3 + uVar2;
    *puVar3 = *puVar3 + uVar2;
    *puVar3 = *puVar3 + uVar2;
    *puVar3 = *puVar3 + uVar2;
    *puVar3 = *puVar3 + uVar2;
    *puVar3 = *puVar3 + uVar2;
    *puVar3 = *puVar3 + uVar2;
    *pcVar4 = *pcVar4 + uVar2;
    *puVar3 = *puVar3 + uVar2;
    *puVar3 = *puVar3 + uVar2;
    *puVar3 = *puVar3 + uVar2;
    *puVar3 = *puVar3 + uVar2;
    *puVar3 = *puVar3 + uVar2;
    *puVar3 = *puVar3 + uVar2;
    *puVar3 = *puVar3 + uVar2;
    *puVar3 = *puVar3 + uVar2;
    *puVar3 = *puVar3 + uVar2;
    // WARNING: Bad instruction - Truncating control flow here
    halt_baddata();
}


// WARNING: [r2ghidra] Failed to match type signed int64_t for variable arg_64h to Decompiler type: Unknown type
// identifier signed
// WARNING: [r2ghidra] Var arg_64h is stack pointer based, which is not supported for decompilation.

void sym.place_parallel_axes(int64_t arg1, int64_t arg2)
{
    undefined4 uVar1;
    int32_t iVar2;
    int64_t iVar3;
    int64_t iVar4;
    int32_t iVar5;
    int64_t iVar6;
    double dVar7;
    double dVar8;
    double dVar9;
    
    if (arg1 == 0) {
        iVar2 = 0;
    } else {
        iVar3 = 0;
        do {
            while ((iVar2 = (int32_t)iVar3, *(int32_t *)(arg1 + 0x10) != 0x801 || (*(int32_t *)(arg1 + 0x1c8) < 1))) {
                arg1 = *(int64_t *)arg1;
                if (arg1 == 0) goto code_r0x08001340;
            }
            iVar2 = *(int32_t *)(arg1 + 0x1dc);
            iVar3 = (int64_t)iVar2;
            iVar6 = _reloc.parallel_axis_array + -0x2a8 + iVar3 * 0x2a8;
            func_0x080921db(iVar6);
            dVar8 = *(double *)(iVar6 + 0x18) - *(double *)(iVar6 + 0x10);
            iVar5 = *(int32_t *)0x809225f - _reloc.closepath;
            *(int32_t *)(iVar6 + 0x78) = _reloc.closepath;
            dVar7 = (double)iVar5 / dVar8;
            *(double *)(iVar6 + 0x80) = dVar7;
            func_0x080921db(dVar7, dVar8, iVar6, 0x14);
            arg1 = *(int64_t *)arg1;
        } while ((int64_t **)arg1 != (int64_t **)0x0);
    }
code_r0x08001340:
    if (((_reloc.strdup != 1) || ((arg2 & 1U) != 0)) && (func_0x080921db(), 0 < iVar2)) {
        iVar6 = 0;
        iVar3 = ((uint64_t)(iVar2 - 1) + 1) * 0x2a8;
        do {
            iVar4 = _reloc.parallel_axis_array + iVar6;
            iVar6 = iVar6 + 0x2a8;
            dVar9 = (double)*(int32_t *)(iVar4 + 0x78);
            dVar8 = (*(double *)(iVar4 + 0x48) - *(double *)(iVar4 + 0x10)) * *(double *)(iVar4 + 0x80) + dVar9 +
                    _reloc..LC8;
            dVar7 = (*(double *)(iVar4 + 0x40) - *(double *)(iVar4 + 0x10)) * *(double *)(iVar4 + 0x80) + dVar9 +
                    _reloc..LC8;
            uVar1 = func_0x080921db(*(undefined8 *)(iVar4 + 0x2a0), dVar8, dVar9);
            func_0x080921db(uVar1, (int32_t)dVar7, uVar1, (int32_t)dVar8);
        } while (iVar3 - iVar6 != 0);
        iVar6 = 0;
        do {
            iVar4 = _reloc.parallel_axis_array + iVar6;
            if ((*(uint8_t *)(iVar4 + 0xb8) & 3) != 0) {
                dVar7 = *(double *)(iVar4 + 0x2a0);
                if ((*(int32_t *)(iVar4 + 0x138) == 0) || (iVar2 = (**(code **)(_reloc.term + 0x78))(dVar7), iVar2 == 0)
                   ) {
                    _reloc.tic_hjust = 1;
                    _reloc.tic_vjust = 0;
                } else {
                    _reloc.tic_hjust = 0;
                    _reloc.tic_vjust = 1;
                }
                if (*(char *)(iVar4 + 0x290) != '\0') {
                    _reloc.tic_hjust = *(undefined4 *)(iVar4 + 0x13c);
                }
                _reloc.tic_direction = 0xffffffff;
                _reloc.tic_start =
                     (int32_t)((dVar7 - *(double *)0x809274b) * *(double *)0x80927bb + (double)*(int32_t *)0x80927b3 +
                              _reloc..LC8);
                dVar8 = (double)(uint64_t)*(uint32_t *)(_reloc.term + 0x20) * *(double *)(iVar4 + 0x150);
                dVar7 = (double)_reloc.tic_start - dVar8;
                _reloc.tic_text = (int32_t)dVar7 - *(int32_t *)(_reloc.term + 0x18);
                _reloc.tic_mirror = _reloc.tic_start;
                func_0x080921db(dVar7, dVar8, iVar4, sym.ytick2d_callback);
                (**(code **)(_reloc.term + 0x78))();
            }
            iVar6 = iVar6 + 0x2a8;
        } while (iVar3 - iVar6 != 0);
    }
    return;
}


// WARNING: Could not reconcile some variable overlaps

uint64_t sym.map_position_double.isra.0(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4)
{
    int32_t *piVar1;
    double dVar2;
    uint32_t uVar3;
    uint32_t uVar4;
    bool bVar5;
    undefined8 uVar6;
    uint32_t uVar7;
    undefined4 uVar8;
    undefined4 uVar9;
    undefined4 uVar10;
    undefined4 uVar11;
    double *pdVar12;
    double *pdVar13;
    double *pdVar14;
    uint64_t uVar15;
    int32_t *piVar16;
    char *pcVar17;
    char extraout_DL;
    int32_t iVar18;
    uint32_t extraout_EDX;
    double *pdVar19;
    int64_t **ppiVar20;
    int64_t iVar21;
    double *pdVar22;
    int64_t **arg1_00;
    code *pcVar23;
    uint32_t uVar24;
    int32_t iVar25;
    int64_t **unaff_R13;
    int64_t iVar26;
    double *unaff_R14;
    double *unaff_R15;
    int64_t in_FS_OFFSET;
    bool bVar27;
    double extraout_XMM0_Qa;
    double extraout_XMM0_Qa_00;
    double dVar28;
    int64_t *piVar29;
    double dVar30;
    double dStack720;
    double dStack712;
    int64_t iStack704;
    uint64_t uStack688;
    double *pdStack680;
    uint64_t uStack672;
    int64_t **ppiStack664;
    double *pdStack656;
    double *pdStack648;
    double *pdStack632;
    uint32_t uStack624;
    uint32_t uStack620;
    double *pdStack616;
    double dStack608;
    double dStack600;
    undefined auStack592 [52];
    int32_t iStack540;
    double adStack480 [24];
    undefined auStack288 [64];
    undefined auStack224 [72];
    int64_t iStack152;
    int64_t iStack136;
    int64_t iStack128;
    int64_t iStack120;
    int64_t **ppiStack112;
    double dStack80;
    int64_t *piStack64;
    double dStack56;
    int64_t iStack48;
    
    dVar30 = _reloc..LC8;
    dVar28 = *(double *)(arg1 + 0x10);
    iStack48 = *(int64_t *)(in_FS_OFFSET + 0x28);
    uVar24 = *(uint32_t *)arg1;
    pdVar14 = (double *)arg2;
    ppiVar20 = (int64_t **)arg1;
    if (uVar24 == 4) {
        *(double *)arg2 = dVar28 * (double)(uint64_t)*(uint32_t *)(_reloc.term + 0x1c);
code_r0x080015d1:
        uVar24 = *(uint32_t *)(arg1 + 4);
        pcVar23 = (code *)arg4;
joined_r0x08001849:
        if (uVar24 == 3) {
            *(double *)arg3 = (double)(uint64_t)(*(int32_t *)(_reloc.term + 0x14) - 1) * *(double *)(arg1 + 0x18);
        } else {
            if (uVar24 < 4) {
                if (uVar24 == 2) {
                    *(double *)arg3 =
                         (double)(*(int32_t *)0x809225f - _reloc.closepath) * *(double *)(arg1 + 0x18) +
                         (double)_reloc.closepath;
                } else {
                    iVar18 = (-(uint32_t)(uVar24 == 0) & 0xfffffffc) + 5;
code_r0x0800173e:
                    pcVar23 = reloc.axis_array;
                    unaff_R13 = *(int64_t ***)(reloc.grid_lp + (int64_t)iVar18 * 0x2a8);
                    if ((unaff_R13 == (int64_t **)0x0) || (unaff_R13[0x16][2] == 0)) {
                        iVar26 = (int64_t)iVar18 * 0x2a8;
                        *(double *)arg3 =
                             (double)(int32_t)((*(double *)(arg1 + 0x18) - *(double *)(reloc.clip_polygon + iVar26)) *
                                               *(double *)(reloc.newpath + iVar26) +
                                               (double)*(int32_t *)(reloc.clip_area + iVar26) + dVar30);
                    } else {
                        ppiVar20 = unaff_R13;
                        dStack80 = dVar30;
                        func_0x080921db(*(double *)(arg1 + 0x18), dVar30);
                        *(double *)arg3 =
                             (double)(int32_t)((extraout_XMM0_Qa - (double)unaff_R13[2]) * (double)unaff_R13[0x10] +
                                               (double)*(int32_t *)(unaff_R13 + 0xf) + dStack80);
                        dVar30 = dStack80;
                    }
                }
            } else {
                if (uVar24 == 4) {
                    *(double *)arg3 = (double)(uint64_t)*(uint32_t *)(_reloc.term + 0x18) * *(double *)(arg1 + 0x18);
                } else {
                    if (uVar24 != 5) {
                        iVar18 = 5;
                        goto code_r0x0800173e;
                    }
                }
            }
        }
    } else {
        if (uVar24 < 5) {
            if (uVar24 == 2) {
                *(double *)arg2 =
                     dVar28 * (double)(*(int32_t *)0x8092257 - _reloc.plot_bounds) + (double)_reloc.plot_bounds;
            } else {
                if (uVar24 != 3) {
                    iVar18 = (-(uint32_t)(uVar24 == 0) & 0xfffffffc) + 6;
                    goto code_r0x080017cd;
                }
                *(double *)arg2 = dVar28 * (double)(uint64_t)(*(int32_t *)(_reloc.term + 0x10) - 1);
            }
            goto code_r0x080015d1;
        }
        if (uVar24 != 5) {
            iVar18 = 6;
code_r0x080017cd:
            pcVar23 = reloc.axis_array;
            unaff_R13 = *(int64_t ***)(reloc.grid_lp + (int64_t)iVar18 * 0x2a8);
            if ((unaff_R13 == (int64_t **)0x0) || (unaff_R13[0x16][2] == 0)) {
                iVar26 = (int64_t)iVar18 * 0x2a8;
                iVar18 = *(int32_t *)(reloc.clip_area + iVar26);
                dVar28 = (dVar28 - *(double *)(reloc.clip_polygon + iVar26)) * *(double *)(reloc.newpath + iVar26);
            } else {
                ppiVar20 = unaff_R13;
                func_0x080921db(dVar28);
                dVar28 = (extraout_XMM0_Qa_00 - (double)unaff_R13[2]) * (double)unaff_R13[0x10];
                iVar18 = *(int32_t *)(unaff_R13 + 0xf);
            }
            dVar30 = _reloc..LC8;
            uVar24 = *(uint32_t *)(arg1 + 4);
            *(double *)arg2 = (double)(int32_t)(dVar28 + (double)iVar18 + _reloc..LC8);
            goto joined_r0x08001849;
        }
        pdVar14 = &dStack56;
        ppiVar20 = &piStack64;
        func_0x080921db(dVar28, *(undefined8 *)(arg1 + 0x18), ppiVar20, pdVar14, 0);
        dVar30 = _reloc..LC8;
        dVar28 = (double)_reloc.boxwidth_is_absolute;
        *(double *)arg2 =
             (double)(int32_t)(((double)piStack64 - *(double *)0x809274b) * *(double *)0x80927bb +
                               (double)*(int32_t *)0x80927b3 + _reloc..LC8);
        *(double *)arg3 = (double)(int32_t)((dStack56 - _reloc.load_linetype) * _reloc.atan2 + dVar28 + dVar30);
        *(undefined4 *)(arg1 + 4) = 5;
        pcVar23 = (code *)arg4;
    }
    dVar28 = *(double *)arg2;
    *(double *)arg2 = dVar28 + dVar30;
    dVar2 = *(double *)arg3;
    *(double *)arg3 = dVar30 + dVar2;
    if (iStack48 == *(int64_t *)(in_FS_OFFSET + 0x28)) {
        return 0;
    }
    func_0x080921db(dVar28 + dVar30, dVar30 + dVar2);
    ppiStack112 = unaff_R13;
    iStack120 = arg2;
    iStack128 = arg3;
    iStack136 = arg1;
    uStack620 = extraout_EDX;
    uStack624 = (uint32_t)pcVar23;
    iStack152 = *(int64_t *)(in_FS_OFFSET + 0x28);
    pdVar22 = pdVar14;
    if ((pdVar14[0x15] == 0.00000000) || (unaff_R15 = pdVar14, *(int32_t *)(pdVar14 + 0x14) < 2)) goto code_r0x08001bd3;
    arg3 = ZEXT48(*(uint32_t *)((int64_t)pdVar14 + 0x14));
    arg1 = (uint64_t)ppiVar20 & 0xffffffff;
    pdStack616 = (double *)_reloc.clip_area;
    pdStack648 = (double *)0x80019e9;
    pcVar17 = (char *)_reloc.clip_area;
    _obj.corners.13488 =
         (double *)func_0x080921db(_obj.corners.13488, (int64_t)*(int32_t *)(pdVar14 + 0x14) * 0xc, "polygon");
    pdStack648 = (double *)0x8001a16;
    _obj.clpcorn.13489 =
         (double *)func_0x080921db(_obj.clpcorn.13489, (int64_t)(*(int32_t *)(pdVar14 + 0x14) * 2) * 0xc, "polygon");
    iVar18 = *(int32_t *)(pdVar14 + 0x14);
    if (iVar18 < 1) {
        uVar24 = 0;
    } else {
        pdStack632 = &dStack600;
        dVar28 = pdVar14[0x15];
        unaff_R13 = (int64_t **)0x0;
        do {
            arg2 = (int64_t)unaff_R13 * 0x28;
            unaff_R14 = (double *)((int64_t)_obj.corners.13488 + (int64_t)unaff_R13 * 0xc);
            if ((int32_t)arg1 == 3) {
                pcVar17 = "pvert";
                pdStack648 = (double *)0x8001aee;
                func_0x080921db((int64_t)dVar28 + arg2, unaff_R14, (int64_t)unaff_R14 + 4);
            } else {
                dStack608 = 0.00000000;
                dStack600 = 0.00000000;
                pdStack648 = (double *)0x8001a69;
                pcVar17 = (char *)_obj.corners.13488;
                sym.map_position_double.isra.0
                          ((int64_t)dVar28 + arg2, (int64_t)&dStack608, (int64_t)pdStack632, (int64_t)_obj.corners.13488
                          );
                *(int32_t *)unaff_R14 = (int32_t)dStack608;
                *(int32_t *)((int64_t)unaff_R14 + 4) = (int32_t)dStack600;
            }
            dVar28 = pdVar14[0x15];
            if (*(int32_t *)((int64_t)dVar28 + arg2) == 3) {
                arg3 = 1;
            } else {
                if (((int32_t *)((int64_t)dVar28 + arg2))[1] == 3) {
                    arg3 = 1;
                }
            }
            iVar18 = *(int32_t *)(pdVar14 + 0x14);
            uVar24 = (int32_t)unaff_R13 + 1;
            unaff_R13 = (int64_t **)((int64_t)unaff_R13 + 1);
        } while ((int32_t)unaff_R13 < iVar18);
    }
    uVar7 = uStack620;
    if (((int32_t)arg1 == 3) && (arg1 = ZEXT48(uStack624), -1 < (int32_t)uStack624)) {
        piVar1 = (int32_t *)((int64_t)_obj.corners.13488 + (int64_t)iVar18 * 0xc + -0x18);
        uVar3 = *(uint32_t *)_obj.corners.13488;
        pdVar22 = (double *)(uint64_t)uVar3;
        uVar4 = *(uint32_t *)((int64_t)_obj.corners.13488 + 4);
        ppiVar20 = (int64_t **)(uint64_t)uVar4;
        dVar28 = (double)(*(int32_t *)((int64_t)_obj.corners.13488 + 0xc) - uVar3) * (double)(piVar1[1] - uVar4) -
                 (double)(*(int32_t *)(_obj.corners.13488 + 2) - uVar4) * (double)(*piVar1 - uVar3);
        pcVar17 = (char *)_obj.corners.13488;
        pcVar23 = (code *)_obj.corners.13488;
        if (uStack624 == 1) {
            if (dVar28 <= _reloc..LC1) goto code_r0x08001b78;
        } else {
            if ((uStack624 != 0) || (0.00000000 <= dVar28)) goto code_r0x08001b78;
        }
    } else {
code_r0x08001b78:
        if ((int32_t)arg3 == 1) {
            _reloc.clip_area = reloc.canvas;
        }
        if ((*(int64_t *)(_reloc.term + 0xe8) == 0) || (arg1 = ZEXT48(uStack620), uStack620 == 0)) {
            pdStack632 = (double *)((uint64_t)pdStack632 & 0xffffffff00000000 | (uint64_t)uVar24);
            pdStack648 = (double *)0x8001bae;
            func_0x080921db();
            ppiVar20 = (int64_t **)((uint64_t)pdStack632 & 0xffffffff);
            pdStack648 = (double *)0x8001bc2;
            pdVar22 = _obj.corners.13488;
            func_0x080921db();
            pdStack648 = (double *)0x8001bc7;
            func_0x080921db();
        } else {
            pcVar17 = (char *)&dStack600;
            pdStack648 = (double *)0x8001c2b;
            func_0x080921db(_obj.corners.13488, _obj.clpcorn.13489, uVar24);
            pdVar22 = _obj.clpcorn.13489;
            *(uint32_t *)(_obj.clpcorn.13489 + 1) = uVar7;
            ppiVar20 = (int64_t **)((uint64_t)dStack600 & 0xffffffff);
            if (dStack600._0_4_ - 4U < 2) {
                if ((*(int32_t *)0x80923af != 3) || (-1 < (int32_t)uStack624)) goto code_r0x08001c46;
                arg3 = (int64_t)adStack480;
                pdVar22 = adStack480 + 0x10;
                pdVar12 = (double *)arg3;
                pdVar19 = (double *)((int64_t)pdVar14[0x15] + 0x10);
                do {
                    pdVar13 = pdVar12 + 4;
                    *pdVar12 = *pdVar19;
                    pdVar12[1] = pdVar19[1];
                    pdVar12[2] = pdVar19[2];
                    pdVar12 = pdVar13;
                    pdVar19 = pdVar19 + 5;
                } while (pdVar22 != pdVar13);
                uVar24 = *(uint32_t *)((int64_t)pdVar14 + 0x6c);
                arg2 = ZEXT48(uVar24);
                adStack480[3] = (double)uVar24;
                pcVar17 = (char *)arg3;
                if (*(int32_t *)(pdVar14 + 0xd) == 2) {
                    pdVar14 = pdVar22;
                    pdVar12 = (double *)arg3;
                    do {
                        pcVar17 = (char *)(pdVar12 + 4);
                        pdVar14[1] = *pdVar12;
                        pdVar14[2] = pdVar12[1];
                        dVar28 = pdVar12[2];
                        pdVar14[3] = dVar28;
                        pdVar14 = pdVar14 + 8;
                        pdVar12 = (double *)pcVar17;
                    } while (adStack480 + 0xc != (double *)pcVar17);
                    pdStack648 = (double *)0x8001d5e;
                    uVar7 = func_0x080921db(dVar28, pdVar22, auStack288, auStack224);
                    arg2 = ZEXT48((uVar24 + 1) - (uint32_t)(uVar7 < 0x80000000));
                    pdStack648 = (double *)0x8001d74;
                    func_0x080921db(auStack592, arg2);
                    adStack480[3] = (double)iStack540;
                }
                ppiVar20 = (int64_t **)0x0;
                adStack480[7] = (double)uStack620;
                pdStack648 = (double *)0x8001d13;
                pdVar22 = (double *)arg3;
                func_0x080921db(adStack480[7], 0, arg3, 4);
            } else {
                if (1 < dStack600._0_4_) {
code_r0x08001c46:
                    pdStack648 = (double *)0x8001c53;
                    (**(code **)(_reloc.term + 0xe8))();
                }
            }
        }
        _reloc.clip_area = (code *)pdStack616;
        pcVar23 = (code *)pcVar17;
    }
code_r0x08001bd3:
    if (iStack152 == *(int64_t *)(in_FS_OFFSET + 0x28)) {
        return 0;
    }
    pdStack648 = (double *)0x8001d91;
    func_0x080921db();
    iVar18 = (int32_t)pdVar22;
    iStack704 = *(int64_t *)(in_FS_OFFSET + 0x28);
    arg1_00 = ppiVar20;
    uStack688 = arg1;
    pdStack680 = (double *)arg3;
    uStack672 = arg2;
    ppiStack664 = unaff_R13;
    pdStack656 = unaff_R14;
    pdStack648 = unaff_R15;
    (**(code **)(_reloc.term + 0xa0))(_reloc.pointsize);
    uVar24 = (uint32_t)pdVar22;
    bVar27 = ppiVar20 != (int64_t **)0x0;
    if (iVar18 == 99 && bVar27) {
        if ((*(char *)((int64_t)ppiVar20 + 0xf9) != '\0') && (*(code **)(_reloc.term + 0x128) != (code *)0x0)) {
            pdVar22 = (double *)ppiVar20[10];
            arg1_00 = (int64_t **)0x2;
            (**(code **)(_reloc.term + 0x128))();
        }
    } else {
        if (ppiVar20 == (int64_t **)0x0) goto code_r0x08001ef5;
    }
    do {
        if (*(int32_t *)(ppiVar20 + 8) == iVar18) {
            if (iVar18 == 99 && bVar27) {
                uVar24 = func_0x080921db(ppiVar20[4]);
                uVar7 = func_0x080921db(ppiVar20[5]);
                pdVar22 = (double *)(uint64_t)uVar7;
            } else {
                pdVar14 = &dStack720;
                arg1_00 = ppiVar20 + 2;
                dStack720 = 0.00000000;
                dStack712 = 0.00000000;
                sym.map_position_double.isra.0
                          ((int64_t)arg1_00, (int64_t)pdVar14, (int64_t)&dStack712, (int64_t)pcVar23);
                uVar24 = (uint32_t)dStack720;
                pdVar22 = (double *)((uint64_t)pdVar14 & 0xffffffff00000000 | (uint64_t)(uint32_t)(int32_t)dStack712);
            }
            if (((int32_t)pdVar22 != -0x80000000) && (uVar24 != 0x80000000)) {
                if (extraout_DL != '\0') {
                    if (*(int32_t *)(ppiVar20 + 2) == 0) {
                        piVar29 = ppiVar20[4];
                        dVar28 = *(double *)0x809274b;
                        dVar30 = *(double *)0x8092753;
                        if (*(double *)0x8092753 <= *(double *)0x809274b) {
code_r0x08001f48:
                            if ((double)piVar29 < dVar30) goto code_r0x08001ee9;
                            bVar5 = dVar28 < (double)piVar29;
                        } else {
code_r0x08001e92:
                            if ((double)piVar29 < dVar28) goto code_r0x08001ee9;
                            bVar5 = dVar30 < (double)piVar29;
                        }
                        if (bVar5) goto code_r0x08001ee9;
                    } else {
                        if (*(int32_t *)(ppiVar20 + 2) == 1) {
                            piVar29 = ppiVar20[4];
                            dVar28 = *(double *)0x80931eb;
                            dVar30 = *(double *)0x80931f3;
                            if (*(double *)0x80931f3 <= *(double *)0x80931eb) goto code_r0x08001f48;
                            goto code_r0x08001e92;
                        }
                    }
                    if (*(int32_t *)((int64_t)ppiVar20 + 0x14) == 0) {
                        piVar29 = ppiVar20[5];
                        dVar28 = _reloc.load_linetype;
                        dVar30 = _reloc.cb2gray;
                        if (_reloc.cb2gray <= _reloc.load_linetype) {
code_r0x08001fa8:
                            if ((double)piVar29 < dVar30) goto code_r0x08001ee9;
                            bVar5 = dVar28 < (double)piVar29;
                        } else {
code_r0x08001ecd:
                            if ((double)piVar29 < dVar28) goto code_r0x08001ee9;
                            bVar5 = dVar30 < (double)piVar29;
                        }
                        if (bVar5) goto code_r0x08001ee9;
                    } else {
                        if (*(int32_t *)((int64_t)ppiVar20 + 0x14) == 1) {
                            piVar29 = ppiVar20[5];
                            dVar28 = *(double *)0x8092f43;
                            dVar30 = *(double *)0x8092f4b;
                            if (*(double *)0x8092f4b <= *(double *)0x8092f43) goto code_r0x08001fa8;
                            goto code_r0x08001ecd;
                        }
                    }
                }
                arg1_00 = (int64_t **)(uint64_t)uVar24;
                func_0x080921db(arg1_00, pdVar22, ppiVar20);
            }
        }
code_r0x08001ee9:
        uVar24 = (uint32_t)pdVar22;
        ppiVar20 = (int64_t **)*ppiVar20;
    } while (ppiVar20 != (int64_t **)0x0);
code_r0x08001ef5:
    if (iStack704 == *(int64_t *)(in_FS_OFFSET + 0x28)) {
        return 0;
    }
    uVar15 = func_0x080921db();
    if (arg1_00 != (int64_t **)0x0) {
        iVar18 = 0;
        do {
            if ((*(int32_t *)(arg1_00 + 2) == 0x94a) && (*(int32_t *)(arg1_00 + 0x39) != 0)) {
                iVar18 = *(int32_t *)((int64_t)arg1_00 + 0x1dc);
                if (_reloc.num_parallel_axes < iVar18) {
                    iVar26 = 0xffffffff;
                    func_0x080921db(0xffffffff, "");
                    uVar6 = _reloc..LC23;
                    uVar24 = *(uint32_t *)(iVar26 + 0x1c8);
                    piVar1 = *(int32_t **)(iVar26 + 0x1e8);
                    if (0 < (int32_t)uVar24) {
                        piVar16 = piVar1;
                        do {
                            if (*piVar16 == 2) {
                                *(undefined8 *)(piVar16 + 6) = uVar6;
                                *(undefined8 *)(piVar16 + 4) = uVar6;
                            }
                            piVar16 = piVar16 + 0x10;
                        } while (piVar16 != piVar1 + (uint64_t)(uVar24 - 1) * 0x10 + 0x10);
                    }
                    if (1 < *(int32_t *)(iVar26 + 0x1c0)) {
                        obj.boxplot_factor_sort_required = (code)0x1;
                    }
                    iVar21 = (int64_t)(int32_t)uVar24 * 0x40;
                    func_0x080921db(piVar1, (int64_t)(int32_t)uVar24, 0x40, sym.compare_ypoints);
                    if (*(int32_t *)(*(int64_t *)(iVar26 + 0x1e8) + -0x40 + iVar21) == 2) {
                        iVar26 = *(int64_t *)(iVar26 + 0x1e8) + iVar21;
                        do {
                            uVar24 = uVar24 - 1;
                            piVar1 = (int32_t *)(iVar26 + -0x80);
                            iVar26 = iVar26 + -0x40;
                        } while (*piVar1 == 2);
                    }
                    return (uint64_t)uVar24;
                }
                iVar26 = _reloc.parallel_axis_array + -0x2a8 + (int64_t)iVar18 * 0x2a8;
                uVar15 = func_0x080921db(iVar26, 0x14);
                if (arg1_00[3] != (int64_t *)0x0) {
                    func_0x080921db(*(undefined8 *)(iVar26 + 0x1d8));
                    uVar15 = func_0x080921db(arg1_00[3]);
                    *(uint64_t *)(iVar26 + 0x1d8) = uVar15;
                }
            }
            iVar26 = _reloc.parallel_axis_array;
            arg1_00 = (int64_t **)*arg1_00;
        } while (arg1_00 != (int64_t **)0x0);
        if ((iVar18 != 0) && (_reloc.parallel_axis_array != 0)) {
            if (reloc.grid_spiderweb == (code)0x0) {
                if ((_reloc.strdup == 1) && ((uVar24 & 1) == 0)) {
                    return uVar15;
                }
            } else {
                if (uVar24 == 0) {
                    *(undefined *)(_reloc.parallel_axis_array + 0x140) = 1;
                    func_0x080921db(reloc.grid_lp);
                    *(int32_t *)(iVar26 + 0x88) = iVar18;
                    *(undefined *)(iVar26 + 0x130) = 0;
                    uVar15 = func_0x080921db(iVar26, sym.spidertick_callback);
                    bVar27 = _reloc.strdup == 1;
                    *(undefined *)(iVar26 + 0x140) = 0;
                    if (bVar27) {
                        return uVar15;
                    }
                }
            }
            if (0 < iVar18) {
                iVar26 = 0;
                iVar25 = 0;
                do {
                    iVar21 = _reloc.parallel_axis_array + iVar26;
                    dVar28 = ((double)iVar25 * _reloc..LC20) / (double)iVar18;
                    dVar30 = _reloc..LC21 - dVar28;
                    pcVar23 = *(code **)(iVar21 + 0x298);
                    if (pcVar23 == (code *)0x0) {
                        pcVar23 = reloc.parallel_axis_style;
                    }
                    func_0x080921db(dVar28, pcVar23);
                    func_0x080921db(dVar30, 0, obj.spoke_x0, obj.spoke_y0, 0);
                    func_0x080921db(dVar30, _reloc..LC9, obj.spoke_x1, obj.spoke_y1, 0);
                    uVar8 = func_0x080921db(_obj.spoke_y1);
                    uVar9 = func_0x080921db(_obj.spoke_x1);
                    uVar10 = func_0x080921db(_obj.spoke_y0);
                    uVar11 = func_0x080921db(_obj.spoke_x0);
                    func_0x080921db(uVar11, uVar10, uVar9, uVar8);
                    uVar15 = (uint64_t)*(uint32_t *)(iVar21 + 0xb8);
                    if (*(uint32_t *)(iVar21 + 0xb8) != 0) {
                        _obj.spoke_dx = (_obj.spoke_y0 - _obj.spoke_y1) * _reloc..LC13;
                        _obj.spoke_dy = (_obj.spoke_x1 - _obj.spoke_x0) * _reloc..LC13;
                        func_0x080921db(_obj.spoke_dy, reloc.border_lp);
                        *(undefined *)(iVar21 + 0x130) = 0;
                        uVar15 = func_0x080921db(iVar21, sym.spidertick_callback);
                    }
                    dVar28 = _reloc..LC9;
                    if (*(int64_t *)(iVar21 + 0x1d8) != 0) {
                        dVar30 = *(double *)(iVar21 + 0x270);
                        *(undefined8 *)(iVar21 + 0x270) = 0;
                        dVar28 = _reloc..LC22 * (dVar28 + dVar30);
                        uVar8 = func_0x080921db((_obj.spoke_y1 - _obj.spoke_y0) * dVar28 + _obj.spoke_y1, dVar28, dVar30
                                               );
                        uVar9 = func_0x080921db((_obj.spoke_x1 - _obj.spoke_x0) * dVar28 + _obj.spoke_x1, dVar28);
                        uVar15 = func_0x080921db(uVar9, uVar8, iVar21 + 400);
                        *(double *)(iVar21 + 0x270) = dVar30;
                    }
                    iVar25 = iVar25 + 2;
                    iVar26 = iVar26 + 0x2a8;
                } while (iVar18 * 2 != iVar25);
            }
        }
        return uVar15;
    }
    return uVar15;
}


void sym.plot_lines(uint32_t arg1)
{
    undefined8 uVar1;
    undefined8 uVar2;
    int32_t iVar3;
    int64_t iVar4;
    int32_t iVar5;
    int32_t iVar6;
    undefined4 uVar7;
    undefined4 uVar8;
    int32_t iVar9;
    int64_t iVar10;
    int64_t iVar11;
    undefined4 in_RDI;
    int64_t iVar12;
    int64_t iVar13;
    undefined8 uStack96;
    undefined8 uStack88;
    
    iVar4 = _reloc.term;
    iVar12 = CONCAT44(in_RDI, arg1);
    if (*(int32_t *)(iVar12 + 0x34) == -3) {
        return;
    }
    if (0 < *(int32_t *)(iVar12 + 0x1c8)) {
        iVar11 = 0;
        iVar9 = 2;
        iVar10 = *(int64_t *)(iVar12 + 0x1e8);
        uStack88 = 0;
        uStack96 = 0;
        do {
            while( true ) {
                iVar13 = iVar11 * 0x40;
                uVar1 = *(undefined8 *)(iVar10 + iVar13 + 8);
                uVar2 = *(undefined8 *)(iVar10 + iVar13 + 0x10);
                func_0x080921db(iVar12, *(int64_t *)(iVar12 + 0x1e0) + iVar11 * 8);
                iVar10 = *(int64_t *)(iVar12 + 0x1e8);
                if (*(int32_t *)(iVar10 + iVar13) != 2) break;
code_r0x08004d98:
                iVar3 = 2;
code_r0x08004d9e:
                iVar9 = iVar3;
                iVar11 = iVar11 + 1;
                uStack96 = uVar1;
                uStack88 = uVar2;
                if (*(int32_t *)(iVar12 + 0x1c8) == (int32_t)iVar11 || *(int32_t *)(iVar12 + 0x1c8) < (int32_t)iVar11) {
                    return;
                }
            }
            iVar5 = func_0x080921db(uVar1);
            iVar6 = func_0x080921db(uVar2);
            iVar10 = *(int64_t *)(iVar12 + 0x1e8);
            if ((iVar5 == -0x80000000) || (iVar6 == -0x80000000)) {
                *(undefined4 *)(iVar10 + iVar13) = 2;
                goto code_r0x08004d98;
            }
            iVar3 = *(int32_t *)(iVar10 + iVar13);
            if (iVar3 != 0) {
                if (iVar3 == 1) {
                    if (iVar9 == 0) {
                        iVar3 = 1;
                        if (reloc.clip_lines1 != (code)0x0) {
                            if ((reloc.polar != (code)0x0) && (reloc.clip_radial != (code)0x0)) goto code_r0x08005038;
code_r0x08004ee3:
                            uVar7 = func_0x080921db(uStack88);
                            uVar8 = func_0x080921db(uStack96);
                            func_0x080921db(uVar8, uVar7, iVar5, iVar6);
                            iVar10 = *(int64_t *)(iVar12 + 0x1e8);
                            iVar3 = *(int32_t *)(iVar10 + iVar13);
                        }
                    } else {
                        if (iVar9 == 1) {
                            iVar3 = iVar9;
                            if (reloc.clip_lines2 != (code)0x0) {
                                if ((reloc.polar != (code)0x0) && (reloc.clip_radial != (code)0x0)) {
                                    func_0x080921db(uStack96, uStack88, uVar1, uVar2);
                                    goto code_r0x08004e79;
                                }
                                goto code_r0x08004ee3;
                            }
                        } else {
                            iVar3 = 1;
                        }
                    }
                }
                goto code_r0x08004d9e;
            }
            if (iVar9 == 0) {
code_r0x08004e6f:
                (**(code **)(iVar4 + 0x60))(iVar5, iVar6);
            } else {
                if (iVar9 != 1) {
                    (**(code **)(iVar4 + 0x58))(iVar5, iVar6);
                    goto code_r0x08004e6f;
                }
                if (reloc.clip_lines1 == (code)0x0) {
code_r0x08004fbc:
                    (**(code **)(iVar4 + 0x58))(iVar5, iVar6);
                    iVar10 = *(int64_t *)(iVar12 + 0x1e8);
                    iVar3 = *(int32_t *)(iVar10 + iVar13);
                    goto code_r0x08004d9e;
                }
                if ((reloc.polar != (code)0x0) && (reloc.clip_radial != (code)0x0)) {
code_r0x08005038:
                    func_0x080921db(uStack96, uStack88, uVar1, uVar2);
                    iVar10 = *(int64_t *)(iVar12 + 0x1e8);
                    iVar3 = *(int32_t *)(iVar10 + iVar13);
                    goto code_r0x08004d9e;
                }
                uVar7 = func_0x080921db(uStack88);
                uVar8 = func_0x080921db(uStack96);
                iVar9 = func_0x080921db(uVar8, uVar7, iVar5, iVar6);
                if (iVar9 == 0) goto code_r0x08004fbc;
            }
code_r0x08004e79:
            iVar10 = *(int64_t *)(iVar12 + 0x1e8);
            iVar11 = iVar11 + 1;
            iVar9 = *(int32_t *)(iVar10 + iVar13);
            uStack96 = uVar1;
            uStack88 = uVar2;
        } while (*(int32_t *)(iVar12 + 0x1c8) != (int32_t)iVar11 && (int32_t)iVar11 <= *(int32_t *)(iVar12 + 0x1c8));
    }
    return;
}


// WARNING: Control flow encountered bad instruction data
// WARNING: Possible PIC construction at 0x080051d6: Changing call to branch
// WARNING: Possible PIC construction at 0x08005266: Changing call to branch
// WARNING: Possible PIC construction at 0x080056c6: Changing call to branch
// WARNING: Possible PIC construction at 0x08005525: Changing call to branch
// WARNING: Possible PIC construction at 0x080055a7: Changing call to branch
// WARNING: Removing unreachable block (ram,0x0800552a)
// WARNING: Removing unreachable block (ram,0x080056cb)
// WARNING: Removing unreachable block (ram,0x0800526b)
// WARNING: Removing unreachable block (ram,0x0800527a)
// WARNING: Removing unreachable block (ram,0x08005440)
// WARNING: Removing unreachable block (ram,0x08005285)
// WARNING: Removing unreachable block (ram,0x08005298)
// WARNING: Removing unreachable block (ram,0x080052aa)
// WARNING: Removing unreachable block (ram,0x08005458)
// WARNING: Removing unreachable block (ram,0x080052ee)
// WARNING: Removing unreachable block (ram,0x08005318)
// WARNING: Removing unreachable block (ram,0x08005321)
// WARNING: Removing unreachable block (ram,0x08005335)
// WARNING: Removing unreachable block (ram,0x0800534a)
// WARNING: Removing unreachable block (ram,0x0800535a)
// WARNING: Removing unreachable block (ram,0x0800536b)
// WARNING: Removing unreachable block (ram,0x08005370)
// WARNING: Removing unreachable block (ram,0x08005386)
// WARNING: Removing unreachable block (ram,0x08005470)
// WARNING: Removing unreachable block (ram,0x0800547f)
// WARNING: Removing unreachable block (ram,0x08005481)
// WARNING: Removing unreachable block (ram,0x08005660)
// WARNING: Removing unreachable block (ram,0x08005669)
// WARNING: Removing unreachable block (ram,0x08005677)
// WARNING: Removing unreachable block (ram,0x080054b7)
// WARNING: Removing unreachable block (ram,0x08005620)
// WARNING: Removing unreachable block (ram,0x08005638)
// WARNING: Removing unreachable block (ram,0x08005651)
// WARNING: Removing unreachable block (ram,0x080054c5)
// WARNING: Removing unreachable block (ram,0x080054d1)
// WARNING: Removing unreachable block (ram,0x080054da)
// WARNING: Removing unreachable block (ram,0x0800538e)
// WARNING: Removing unreachable block (ram,0x08005392)
// WARNING: Removing unreachable block (ram,0x080053be)
// WARNING: Removing unreachable block (ram,0x08005538)
// WARNING: Removing unreachable block (ram,0x08005552)
// WARNING: Removing unreachable block (ram,0x08005560)
// WARNING: Removing unreachable block (ram,0x0800556c)
// WARNING: Removing unreachable block (ram,0x080056bd)
// WARNING: Removing unreachable block (ram,0x08005577)
// WARNING: Removing unreachable block (ram,0x080053c8)
// WARNING: Removing unreachable block (ram,0x080053d2)
// WARNING: Removing unreachable block (ram,0x080053f6)
// WARNING: Removing unreachable block (ram,0x080055ac)
// WARNING: Removing unreachable block (ram,0x080055bc)
// WARNING: Removing unreachable block (ram,0x080055c1)
// WARNING: Removing unreachable block (ram,0x080055c8)

void sym.plot_points(int64_t arg1, char *placeholder_1, int64_t arg3)
{
    uint32_t uVar1;
    int32_t *piVar2;
    char cVar3;
    uint8_t uVar4;
    int32_t *piVar5;
    int32_t *piVar6;
    char *pcVar7;
    uint64_t uVar8;
    uint8_t *puVar9;
    uint32_t *in_RCX;
    int32_t iVar10;
    uint64_t unaff_RBX;
    uint32_t uVar11;
    int32_t *piVar12;
    int64_t iVar13;
    undefined auVar14 [16];
    double dVar15;
    double dVar16;
    int32_t iStack88;
    uint32_t uStack84;
    
    iStack88 = *(int32_t *)(arg1 + 0x40);
    uVar1 = *(uint32_t *)(arg1 + 0x44);
    pcVar7 = (char *)(uint64_t)uVar1;
    uStack84 = uVar1;
    if (uVar1 == 0) {
code_r0x08005180:
        iVar10 = *(int32_t *)(arg1 + 0x38);
    } else {
        uVar11 = *(uint32_t *)(arg1 + 0x1c8);
        if (0 < (int32_t)uVar11) {
            iVar10 = 0;
            piVar6 = *(int32_t **)(arg1 + 0x1e8) + 0x10;
            piVar2 = piVar6;
            piVar12 = *(int32_t **)(arg1 + 0x1e8);
            while (piVar5 = piVar2, iVar10 = iVar10 + (uint32_t)(*piVar12 == 0),
                  piVar6 + (uint64_t)(uVar11 - 1) * 0x10 != piVar5) {
                piVar2 = piVar5 + 0x10;
                piVar12 = piVar5;
            }
            uVar11 = (int32_t)uVar1 >> 0x1f;
            placeholder_1 = (char *)(uint64_t)uVar11;
            uVar11 = (uVar1 ^ uVar11) - uVar11;
            if ((int32_t)uVar11 < iVar10) {
                iStack88 = iVar10;
                if (uVar11 != 1) {
                    iStack88 = (int32_t)((double)(iVar10 + -1) / (double)(uVar11 - 1));
                }
                uVar8 = 0;
                dVar15 = (double)iStack88 / _reloc..LC35;
                if ((double)((uint64_t)dVar15 & _reloc..LC0) < _reloc..LC36) {
                    uVar8 = (uint64_t)dVar15;
                    auVar14 = orpd(ZEXT816((uint64_t)
                                           ((double)(-(uint64_t)((double)uVar8 < dVar15) & _reloc..LC9) + (double)uVar8)
                                          ), ZEXT816(~_reloc..LC0 & (uint64_t)dVar15));
                    dVar15 = SUB168(auVar14, 0);
                }
                uStack84 = (uint32_t)(dVar15 * (double)*(int32_t *)(arg1 + 0x1d8));
                pcVar7 = (char *)(uVar8 & 0xffffffff00000000 | (uint64_t)uStack84);
                if ((int32_t)uVar1 < 0) {
                    iStack88 = -iStack88;
                }
                goto code_r0x08005180;
            }
        }
        pcVar7 = (char *)(uint64_t)uVar11;
        iVar10 = *(int32_t *)(arg1 + 0x38);
        uStack84 = 0;
    }
    if (iVar10 != -9) {
        dVar15 = *(double *)(arg1 + 0x50);
        dVar16 = (double)(uint64_t)*(uint32_t *)(_reloc.term + 0x24) * dVar15;
        pcVar7 = (char *)(uint64_t)(uint32_t)(int32_t)((double)(uint64_t)*(uint32_t *)(_reloc.term + 0x20) * dVar15);
        if (_reloc.boxwidth <= 0.00000000) {
            iVar13 = 0;
            if (0 < *(int32_t *)(arg1 + 0x1c8)) {
                do {
                    if ((((*(int32_t *)(arg1 + 0x10) != 0xc3) || (iStack88 == 0)) ||
                        ((int32_t)((int32_t)iVar13 - uStack84) % iStack88 == 0)) &&
                       (piVar6 = (int32_t *)(*(int64_t *)(arg1 + 0x1e8) + iVar13 * 0x40), *piVar6 == 0)) {
                        func_0x080921db(*(undefined8 *)(piVar6 + 2), dVar16, dVar15);
                        pcVar7 = *(char **)(arg1 + 0x1e8);
                        goto code_r0x080921db;
                    }
                    iVar13 = iVar13 + 1;
                } while (*(int32_t *)(arg1 + 0x1c8) != (int32_t)iVar13 && (int32_t)iVar13 <= *(int32_t *)(arg1 + 0x1c8))
                ;
            }
            if (*(int32_t *)(arg1 + 0x38) != -9) {
                return;
            }
            pcVar7 = *(char **)(*(int64_t *)(arg1 + 0x158) + 0x50);
            arg1 = unaff_RBX;
            if ((pcVar7 != (char *)0x0) && (*pcVar7 != '\0')) {
                pcVar7 = (char *)(**(code **)(_reloc.term + 0x98))(_reloc.boxwidth, dVar16, dVar15, reloc..LC29);
            }
        }
    }
code_r0x080921db:
    cVar3 = (char)pcVar7;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    *pcVar7 = *pcVar7 + cVar3;
    puVar9 = (uint8_t *)(arg1 & 0xffffffff);
    pcVar7 = (char *)(uint64_t)((uint32_t)in_RCX & *in_RCX);
    uVar4 = (uint8_t)puVar9;
    *puVar9 = *puVar9 | uVar4;
    *puVar9 = *puVar9 + uVar4;
    *puVar9 = *puVar9 + uVar4;
    *puVar9 = *puVar9 + uVar4;
    *puVar9 = *puVar9 + uVar4;
    *puVar9 = *puVar9 + uVar4;
    *placeholder_1 = *placeholder_1 + uVar4;
    *puVar9 = *puVar9 + uVar4;
    *puVar9 = *puVar9 + uVar4;
    *puVar9 = *puVar9 + uVar4;
    *pcVar7 = *pcVar7 + uVar4;
    *puVar9 = *puVar9 + uVar4;
    *puVar9 = *puVar9 + uVar4;
    *puVar9 = *puVar9 + uVar4;
    *puVar9 = *puVar9 + uVar4;
    *puVar9 = *puVar9 + uVar4;
    *puVar9 = *puVar9 + uVar4;
    *puVar9 = *puVar9 + uVar4;
    *puVar9 = *puVar9 + uVar4;
    *puVar9 = *puVar9 + uVar4;
    // WARNING: Bad instruction - Truncating control flow here
    halt_baddata();
}


// WARNING: Control flow encountered bad instruction data
// WARNING: Possible PIC construction at 0x080062ee: Changing call to branch
// WARNING: Possible PIC construction at 0x080064fe: Changing call to branch
// WARNING: Possible PIC construction at 0x08006530: Changing call to branch
// WARNING: Possible PIC construction at 0x080065ae: Changing call to branch
// WARNING: Possible PIC construction at 0x080065e9: Changing call to branch
// WARNING: Possible PIC construction at 0x080066e9: Changing call to branch
// WARNING: Possible PIC construction at 0x0800671d: Changing call to branch
// WARNING: Possible PIC construction at 0x08006776: Changing call to branch
// WARNING: Possible PIC construction at 0x08006814: Changing call to branch
// WARNING: Possible PIC construction at 0x08006920: Changing call to branch
// WARNING: Possible PIC construction at 0x08006b15: Changing call to branch
// WARNING: Possible PIC construction at 0x08006b7d: Changing call to branch
// WARNING: Possible PIC construction at 0x0800696a: Changing call to branch
// WARNING: Possible PIC construction at 0x08006a0d: Changing call to branch
// WARNING: Possible PIC construction at 0x08006a56: Changing call to branch
// WARNING: Possible PIC construction at 0x08006b28: Changing call to branch
// WARNING: Possible PIC construction at 0x08006a88: Changing call to branch
// WARNING: Possible PIC construction at 0x08005917: Changing call to branch
// WARNING: Possible PIC construction at 0x08005989: Changing call to branch
// WARNING: Possible PIC construction at 0x08005a3e: Changing call to branch
// WARNING: Possible PIC construction at 0x08005ab7: Changing call to branch
// WARNING: Possible PIC construction at 0x08006029: Changing call to branch
// WARNING: Possible PIC construction at 0x08005e88: Changing call to branch
// WARNING: Possible PIC construction at 0x08005c13: Changing call to branch
// WARNING: Possible PIC construction at 0x08006299: Changing call to branch
// WARNING: Removing unreachable block (ram,0x08005c18)
// WARNING: Removing unreachable block (ram,0x08005e8d)
// WARNING: Removing unreachable block (ram,0x0800602e)
// WARNING: Removing unreachable block (ram,0x08005abc)
// WARNING: Removing unreachable block (ram,0x08005acb)
// WARNING: Removing unreachable block (ram,0x08005f58)
// WARNING: Removing unreachable block (ram,0x08005a43)
// WARNING: Removing unreachable block (ram,0x0800598e)
// WARNING: Removing unreachable block (ram,0x0800591c)
// WARNING: Removing unreachable block (ram,0x08005cb8)
// WARNING: Removing unreachable block (ram,0x08005ccf)
// WARNING: Removing unreachable block (ram,0x08005adb)
// WARNING: Removing unreachable block (ram,0x08005cd8)
// WARNING: Removing unreachable block (ram,0x08005cec)
// WARNING: Removing unreachable block (ram,0x08005cf2)
// WARNING: Removing unreachable block (ram,0x08005947)
// WARNING: Removing unreachable block (ram,0x08006008)
// WARNING: Removing unreachable block (ram,0x0800601a)
// WARNING: Removing unreachable block (ram,0x0800595c)
// WARNING: Removing unreachable block (ram,0x08005969)
// WARNING: Removing unreachable block (ram,0x08005998)
// WARNING: Removing unreachable block (ram,0x080059a8)
// WARNING: Removing unreachable block (ram,0x08005a55)
// WARNING: Removing unreachable block (ram,0x080059bb)
// WARNING: Removing unreachable block (ram,0x08005dd8)
// WARNING: Removing unreachable block (ram,0x08005dee)
// WARNING: Removing unreachable block (ram,0x080059dc)
// WARNING: Removing unreachable block (ram,0x08005dc0)
// WARNING: Removing unreachable block (ram,0x080059e8)
// WARNING: Removing unreachable block (ram,0x08005970)
// WARNING: Removing unreachable block (ram,0x08006a8d)
// WARNING: Removing unreachable block (ram,0x08006b2d)
// WARNING: Removing unreachable block (ram,0x08006a5b)
// WARNING: Removing unreachable block (ram,0x08006a12)
// WARNING: Removing unreachable block (ram,0x08006a1a)
// WARNING: Removing unreachable block (ram,0x0800696f)
// WARNING: Removing unreachable block (ram,0x080069ea)
// WARNING: Removing unreachable block (ram,0x08006a05)
// WARNING: Removing unreachable block (ram,0x08006b82)
// WARNING: Removing unreachable block (ram,0x08006b1a)
// WARNING: Removing unreachable block (ram,0x08006925)
// WARNING: Removing unreachable block (ram,0x08006819)
// WARNING: Removing unreachable block (ram,0x0800677b)
// WARNING: Removing unreachable block (ram,0x08006920)
// WARNING: Removing unreachable block (ram,0x0800678f)
// WARNING: Removing unreachable block (ram,0x080067a9)
// WARNING: Removing unreachable block (ram,0x080067bd)
// WARNING: Removing unreachable block (ram,0x080067d3)
// WARNING: Removing unreachable block (ram,0x08006722)
// WARNING: Removing unreachable block (ram,0x0800673c)
// WARNING: Removing unreachable block (ram,0x0800673e)
// WARNING: Removing unreachable block (ram,0x08006768)
// WARNING: Removing unreachable block (ram,0x080066ee)
// WARNING: Removing unreachable block (ram,0x080065b3)
// WARNING: Removing unreachable block (ram,0x080065c9)
// WARNING: Removing unreachable block (ram,0x080065d4)
// WARNING: Removing unreachable block (ram,0x080065ee)
// WARNING: Removing unreachable block (ram,0x08006b28)
// WARNING: Removing unreachable block (ram,0x08006602)
// WARNING: Removing unreachable block (ram,0x08006b38)
// WARNING: Removing unreachable block (ram,0x08006b4b)
// WARNING: Removing unreachable block (ram,0x08006610)
// WARNING: Removing unreachable block (ram,0x08006a50)
// WARNING: Removing unreachable block (ram,0x08006621)
// WARNING: Removing unreachable block (ram,0x0800662f)
// WARNING: Removing unreachable block (ram,0x08006638)
// WARNING: Removing unreachable block (ram,0x0800664c)
// WARNING: Removing unreachable block (ram,0x08006930)
// WARNING: Removing unreachable block (ram,0x0800693a)
// WARNING: Removing unreachable block (ram,0x08006665)
// WARNING: Removing unreachable block (ram,0x08006b60)
// WARNING: Removing unreachable block (ram,0x0800666f)
// WARNING: Removing unreachable block (ram,0x08006aa0)
// WARNING: Removing unreachable block (ram,0x080065db)
// WARNING: Removing unreachable block (ram,0x08006535)
// WARNING: Removing unreachable block (ram,0x08006556)
// WARNING: Removing unreachable block (ram,0x08006558)
// WARNING: Removing unreachable block (ram,0x08006590)
// WARNING: Removing unreachable block (ram,0x08006a60)
// WARNING: Removing unreachable block (ram,0x0800659e)
// WARNING: Removing unreachable block (ram,0x08006503)
// WARNING: Removing unreachable block (ram,0x080062f3)
// WARNING: Removing unreachable block (ram,0x0800632f)
// WARNING: Removing unreachable block (ram,0x08006332)
// WARNING: Removing unreachable block (ram,0x08006367)
// WARNING: Removing unreachable block (ram,0x08006373)
// WARNING: Removing unreachable block (ram,0x08006381)
// WARNING: Removing unreachable block (ram,0x080063a8)
// WARNING: Removing unreachable block (ram,0x080063c2)
// WARNING: Removing unreachable block (ram,0x080063d3)
// WARNING: Removing unreachable block (ram,0x08006457)
// WARNING: Removing unreachable block (ram,0x080068e0)
// WARNING: Removing unreachable block (ram,0x080068ea)
// WARNING: Removing unreachable block (ram,0x0800647c)
// WARNING: Removing unreachable block (ram,0x08006486)
// WARNING: Removing unreachable block (ram,0x0800648d)
// WARNING: Removing unreachable block (ram,0x08006495)
// WARNING: Removing unreachable block (ram,0x08006900)
// WARNING: Removing unreachable block (ram,0x0800690a)
// WARNING: Removing unreachable block (ram,0x080064df)
// WARNING: Removing unreachable block (ram,0x080064e9)
// WARNING: Removing unreachable block (ram,0x080064f0)
// WARNING: Removing unreachable block (ram,0x08006680)
// WARNING: Removing unreachable block (ram,0x08006684)
// WARNING: Removing unreachable block (ram,0x08006695)
// WARNING: Removing unreachable block (ram,0x08006698)
// WARNING: Removing unreachable block (ram,0x080066a4)
// WARNING: Removing unreachable block (ram,0x080066b0)
// WARNING: Removing unreachable block (ram,0x080066be)
// WARNING: Removing unreachable block (ram,0x0800685d)
// WARNING: Removing unreachable block (ram,0x08006873)
// WARNING: Removing unreachable block (ram,0x080066d0)
// WARNING: Removing unreachable block (ram,0x080066da)
// WARNING: Removing unreachable block (ram,0x080068a4)
// WARNING: Removing unreachable block (ram,0x080068aa)
// WARNING: Removing unreachable block (ram,0x080066e1)
// WARNING: Removing unreachable block (ram,0x08006850)
// WARNING: Removing unreachable block (ram,0x080068c0)
// WARNING: Removing unreachable block (ram,0x080066e9)
// WARNING: Removing unreachable block (ram,0x080064f8)
// WARNING: Removing unreachable block (ram,0x0800629e)
// WARNING: Removing unreachable block (ram,0x080062b5)
// WARNING: Removing unreachable block (ram,0x080062d0)
// WARNING: Removing unreachable block (ram,0x080062e9)

void sym.plot_boxes(uint32_t arg1, uint32_t arg2, undefined8 placeholder_2, uint32_t *placeholder_3, int64_t arg5)
{
    char cVar1;
    uint8_t uVar2;
    code *pcVar3;
    int64_t iVar4;
    int64_t iVar5;
    int64_t iVar6;
    uint8_t *puVar7;
    char *pcVar8;
    uint32_t uVar9;
    int64_t iVar10;
    uint32_t uVar11;
    uint64_t unaff_RBX;
    uint32_t uVar12;
    uint32_t uVar13;
    undefined4 in_RSI;
    uint32_t *puVar14;
    char *pcVar15;
    uint32_t uVar16;
    undefined4 in_RDI;
    uint32_t *puVar17;
    uint32_t uVar18;
    int64_t in_FS_OFFSET;
    bool bVar19;
    double dVar20;
    double dVar21;
    double dVar22;
    double dVar23;
    uint64_t uVar24;
    double dVar25;
    double dVar26;
    uint64_t uVar27;
    undefined auVar28 [16];
    double dVar29;
    undefined auVar30 [16];
    double dStack232;
    undefined auStack168 [104];
    uint64_t uStack64;
    
    iVar4 = CONCAT44(in_RDI, arg1);
    pcVar15 = (char *)CONCAT44(in_RSI, arg2);
    uVar18 = *(uint32_t *)(iVar4 + 0x1c8);
    uStack64 = *(uint64_t *)(in_FS_OFFSET + 0x28);
    uVar13 = uVar18;
    if (*(int32_t *)(iVar4 + 0x10) == 0x608) {
        pcVar3 = (code *)(uint64_t)_reloc.histogram_opts;
        if ((_reloc.histogram_opts == 2) ||
           ((_reloc.histogram_opts == 1 &&
            (placeholder_3 = (uint32_t *)(uint64_t)*(uint32_t *)(iVar4 + 0x1b0), *(uint32_t *)(iVar4 + 0x1b0) == 0)))) {
            _obj.stack_count = 0;
        }
        if ("@"._0_8_ == 0) {
            pcVar15 = "stackheight array";
            goto code_r0x080921db;
        }
        if ((int32_t)_obj.stack_count < (int32_t)uVar18) {
            pcVar15 = (char *)((int64_t)(int32_t)uVar18 << 6);
            "@"._0_8_ = func_0x080921db("@"._0_8_, pcVar15, "stackheight array");
            placeholder_3 = (uint32_t *)(uint64_t)_obj.stack_count;
            if ((int32_t)_obj.stack_count < (int32_t)uVar18) {
                pcVar15 = (char *)(int64_t)(int32_t)_obj.stack_count;
                placeholder_3 = (uint32_t *)(((int64_t)pcVar15 + (uint64_t)(~_obj.stack_count + uVar18) + 1) * 0x40);
                iVar6 = "@"._0_8_ + (int64_t)placeholder_3;
                iVar5 = (int64_t)pcVar15 * 0x40 + "@"._0_8_;
                do {
                    *(undefined8 *)(iVar5 + 0x28) = 0;
                    iVar10 = iVar5 + 0x40;
                    *(undefined8 *)(iVar5 + 0x20) = 0;
                    iVar5 = iVar10;
                } while (iVar10 != iVar6);
            }
            uVar13 = *(uint32_t *)(iVar4 + 0x1c8);
            _obj.stack_count = uVar18;
        }
    }
    if (0 < (int32_t)uVar13) {
        unaff_RBX = 0;
        placeholder_3 = *(uint32_t **)(iVar4 + 0x1e8);
        uVar18 = 0;
        uVar16 = 2;
        do {
            while( true ) {
                uVar11 = (uint32_t)unaff_RBX;
                uVar12 = uVar11 + 1;
                pcVar15 = (char *)(uint64_t)uVar12;
                puVar14 = placeholder_3 + unaff_RBX * 0x10;
                uVar9 = *puVar14;
                if (uVar9 < 2) break;
                if (uVar9 != 2) {
                    uVar18 = uVar11;
                }
                unaff_RBX = unaff_RBX + 1;
                uVar16 = uVar9;
                if ((int32_t)uVar13 <= (int32_t)unaff_RBX) goto code_r0x08005892;
            }
            if (*(double *)(puVar14 + 6) <= 0.00000000 && *(double *)(puVar14 + 6) != 0.00000000) {
                dVar29 = *(double *)(puVar14 + 2);
                if (_reloc.boxwidth < 0.00000000) {
                    uVar27 = 0;
                    dVar26 = (*(double *)(placeholder_3 + (int64_t)(int32_t)uVar18 * 0x10 + 2) - dVar29) * _reloc..LC8;
                } else {
                    if (reloc.boxwidth_is_absolute == (code)0x0) {
                        dVar26 = (*(double *)(placeholder_3 + (int64_t)(int32_t)uVar18 * 0x10 + 2) - dVar29) *
                                 _reloc.boxwidth * _reloc..LC8;
                        uVar27 = 0;
                    } else {
                        dVar26 = (double)((uint64_t)_reloc.boxwidth ^ _reloc..LC12) * _reloc..LC8;
                        uVar27 = *(uint64_t *)0x800ea68;
                    }
                }
                dVar20 = (double)((uint64_t)dVar26 ^ _reloc..LC12);
                uVar24 = uVar27 ^ *(uint64_t *)0x800ea68;
                if ((int32_t)uVar11 < (int32_t)(uVar13 - 1)) {
                    puVar17 = puVar14;
                    if ((int32_t)uVar12 < (int32_t)uVar13) {
                        do {
                            uVar12 = (uint32_t)pcVar15;
                            if (puVar17[0x10] != 2) goto code_r0x0800606f;
                            pcVar15 = (char *)(uint64_t)(uVar12 + 1);
                            puVar17 = puVar17 + 0x10;
                        } while (uVar12 + 1 != uVar13);
code_r0x08006260:
                        pcVar15 = (char *)puVar14;
                        if (0.00000000 <= _reloc.boxwidth) goto code_r0x08006092;
code_r0x08006271:
                        dVar20 = (*(double *)((int64_t)pcVar15 + 8) - dVar29) * _reloc..LC8;
                    } else {
code_r0x0800606f:
                        if (uVar13 == uVar12) goto code_r0x08006260;
                        pcVar15 = (char *)(placeholder_3 + (int64_t)(int32_t)uVar12 * 0x10);
                        uVar9 = *(uint32_t *)pcVar15;
                        if (_reloc.boxwidth < 0.00000000) goto code_r0x08006271;
code_r0x08006092:
                        if (reloc.boxwidth_is_absolute == (code)0x0) {
                            dVar20 = (*(double *)((int64_t)pcVar15 + 8) - dVar29) * _reloc.boxwidth * _reloc..LC8;
                        } else {
                            dVar20 = _reloc.boxwidth * _reloc..LC8;
                        }
                    }
                    uVar24 = 0;
                    if (uVar9 == 2) {
                        dVar20 = (double)((uint64_t)dVar26 ^ _reloc..LC12);
                        uVar24 = uVar27 ^ *(uint64_t *)0x800ea68;
                    }
                }
                if ((uVar16 == 2) && (uVar18 == 0)) {
                    dVar26 = (double)((uint64_t)dVar20 ^ _reloc..LC12);
                    uVar27 = uVar24 ^ *(uint64_t *)0x800ea68;
                }
                dVar26 = dVar26 + dVar29;
                auVar30 = CONCAT88(uVar24, dVar20 + dVar29);
            } else {
                auVar30 = ZEXT816(*(uint64_t *)(puVar14 + 0xe));
                dVar26 = *(double *)(puVar14 + 0xc);
                uVar27 = 0;
            }
            if (*(int32_t *)(iVar4 + 0x10) == 0x209) {
                dVar29 = *(double *)(puVar14 + 8);
                iVar4 = (int64_t)_reloc.y_axis * 0x2a8;
                pcVar3 = reloc.axis_array + iVar4;
                dVar26 = *(double *)(reloc.clip_polygon + iVar4);
                dVar20 = *(double *)(reloc.style_from_fill + iVar4);
                if (dVar20 <= dVar26) {
                    if (dVar29 <= dVar26) {
                        maxsd(ZEXT816((uint64_t)dVar20), ZEXT816((uint64_t)dVar29));
                    }
                } else {
                    if (dVar29 <= dVar20) {
                        maxsd(ZEXT816((uint64_t)dVar26), ZEXT816((uint64_t)dVar29));
                    }
                }
                goto code_r0x080921db;
            }
            dVar29 = *(double *)(puVar14 + 4);
            puVar14 = (uint32_t *)pcVar15;
            if (*(int32_t *)(iVar4 + 0x10) == 0x608) {
                iVar5 = *(int64_t *)(iVar4 + 0x1a8);
                uVar13 = *(int32_t *)(iVar5 + 0x20) + uVar11;
                if (*(int32_t *)(iVar5 + 0x20) < 1) {
                    uVar13 = uVar11;
                }
                pcVar15 = (char *)(uint64_t)uVar13;
                puVar14 = (uint32_t *)(uint64_t)(_reloc.histogram_opts - 3);
                if (_reloc.histogram_opts - 3 < 2) {
                    uVar13 = *(int32_t *)(iVar5 + 8) + *(int32_t *)0x8092457;
                    puVar14 = (uint32_t *)(uint64_t)uVar13;
                    dVar20 = (double)(((int32_t)*(double *)(placeholder_3 + unaff_RBX * 0x10 + 2) + -1) * (uVar13 - 1) +
                                     *(int32_t *)(iVar4 + 0x1b0));
                    dVar21 = (double)(*(int32_t *)0x8092457 + -1) * _reloc..LC8;
                    dVar23 = _reloc..LC8 + *(double *)(iVar5 + 0x10);
                    dVar26 = (dVar26 + dVar20 + dVar21) / (double)uVar13 + dVar23;
                    auVar30 = ZEXT816((uint64_t)(dVar23 + (dVar21 + dVar20 + SUB168(auVar30, 0)) / (double)uVar13));
                    goto code_r0x080057c8;
                }
                if (_reloc.histogram_opts == 2) {
                    dVar29 = _reloc..LC8 * _reloc.boxwidth + *(double *)(iVar5 + 0x10);
                    dVar26 = (double)*(int32_t *)(iVar4 + 0x1b0) + dVar29;
                    if (reloc.prefer_line_styles == (code)0x0) {
                        pcVar3 = (code *)func_0x080921db(dVar29, dVar26, auStack168);
                    } else {
                        pcVar3 = (code *)func_0x080921db(dVar29, dVar26, auStack168);
                    }
                    goto code_r0x080921db;
                }
                if (_reloc.histogram_opts != 1) goto code_r0x080057c8;
                dVar26 = dVar26 + *(double *)(iVar5 + 0x10);
                auVar30 = CONCAT88(SUB168(auVar30 >> 0x40, 0), SUB168(auVar30, 0) + *(double *)(iVar5 + 0x10));
                dVar20 = *(double *)(placeholder_3 + unaff_RBX * 0x10 + 4);
                iVar5 = unaff_RBX * 0x40 + "@"._0_8_;
                if (dVar20 < 0.00000000) {
                    dVar21 = *(double *)(iVar5 + 0x20);
                    *(double *)(iVar5 + 0x20) = dVar20 + dVar21;
                } else {
                    dVar21 = *(double *)(iVar5 + 0x28);
                    *(double *)(iVar5 + 0x28) = dVar20 + dVar21;
                }
                dVar29 = dVar29 + dVar21;
                dVar23 = *(double *)(reloc.clip_polygon + (int64_t)_reloc.y_axis * 0x2a8);
                auVar28 = ZEXT816((uint64_t)dVar23);
                dVar20 = *(double *)(reloc.style_from_fill + (int64_t)_reloc.y_axis * 0x2a8);
                pcVar15 = (char *)puVar14;
                if (dVar20 <= dVar23) {
                    dStack232 = dVar21;
                    if ((dVar20 < dVar23) && (dStack232 = dVar23, dVar21 <= dVar23)) goto code_r0x08005f34;
                    if (dVar23 < dVar20) goto code_r0x080061f5;
code_r0x08006230:
                    if (dVar20 < dVar23) {
code_r0x08005f3e:
                        maxsd(ZEXT816((uint64_t)dVar20), dStack232);
                    }
                } else {
                    dStack232 = dVar23;
                    if (((dVar23 <= dVar21) && (dStack232 = dVar21, dVar20 < dVar23)) &&
                       (dStack232 = dVar23, dVar21 <= dVar23)) {
code_r0x08005f34:
                        dStack232 = dVar21;
                        if (dVar23 < dVar20) goto code_r0x080061f5;
                        goto code_r0x08005f3e;
                    }
code_r0x080061f5:
                    if (dStack232 <= dVar20) goto code_r0x08006230;
                }
            } else {
code_r0x080057c8:
                auVar28 = ZEXT816(*(uint64_t *)(reloc.clip_polygon + (int64_t)_reloc.y_axis * 0x2a8));
                dVar20 = *(double *)(reloc.style_from_fill + (int64_t)_reloc.y_axis * 0x2a8);
                pcVar15 = (char *)puVar14;
            }
            dVar23 = SUB168(auVar30, 0);
            dVar21 = SUB168(auVar28, 0);
            if (dVar20 <= dVar21) {
                if (dVar29 <= dVar21) {
                    auVar28 = ZEXT816((uint64_t)dVar20);
                    goto code_r0x08005afe;
                }
            } else {
                dVar21 = dVar20;
                if (dVar29 <= dVar20) {
code_r0x08005afe:
                    auVar28 = maxsd(auVar28, ZEXT816((uint64_t)dVar29));
                    dVar21 = SUB168(auVar28, 0);
                }
            }
            dVar29 = *(double *)(reloc.clip_polygon + (int64_t)_reloc.x_axis * 0x2a8);
            dVar20 = *(double *)(reloc.style_from_fill + (int64_t)_reloc.x_axis * 0x2a8);
            if (dVar29 < dVar20) {
                dVar22 = dVar20;
                dVar25 = dVar20;
                if ((dVar20 < dVar23) || (dVar22 = dVar23, dVar29 <= dVar23)) {
                    if (dVar20 < dVar26) goto code_r0x08005842;
code_r0x08005c56:
                    auVar30 = maxsd(ZEXT816((uint64_t)dVar29), CONCAT88(uVar27, dVar26));
                    dVar25 = SUB168(auVar30, 0);
                    goto code_r0x08005842;
                }
                dVar22 = dVar29;
                if (dVar26 <= dVar20) goto code_r0x08005c56;
code_r0x080058f0:
                pcVar3 = (code *)func_0x080921db(dVar25, dVar22, dVar25, dVar21);
                goto code_r0x080921db;
            }
            dVar22 = dVar29;
            if (dVar23 <= dVar29) {
                auVar30 = maxsd(ZEXT816((uint64_t)dVar20), auVar30);
                dVar22 = SUB168(auVar30, 0);
            }
            if (dVar26 <= dVar29) {
                auVar30 = maxsd(ZEXT816((uint64_t)dVar20), CONCAT88(uVar27, dVar26));
                dVar25 = SUB168(auVar30, 0);
code_r0x08005842:
                bVar19 = dVar25 == dVar22;
            } else {
                bVar19 = dVar29 == dVar22;
                dVar25 = dVar29;
            }
            if ((!bVar19) || ((dVar29 != dVar22 && (dVar20 != dVar22 && dVar29 != dVar22)))) goto code_r0x080058f0;
            iVar5 = unaff_RBX * 0x10;
            uVar13 = *(uint32_t *)(iVar4 + 0x1c8);
            if (placeholder_3[iVar5] != 2) {
                uVar18 = uVar11;
            }
            unaff_RBX = unaff_RBX + 1;
            uVar16 = placeholder_3[iVar5];
        } while ((int32_t)unaff_RBX < (int32_t)uVar13);
    }
code_r0x08005892:
    pcVar3 = (code *)(uStack64 ^ *(uint64_t *)(in_FS_OFFSET + 0x28));
    if (pcVar3 == (code *)0x0) {
        return;
    }
code_r0x080921db:
    cVar1 = (char)pcVar3;
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    *pcVar3 = (code)((char)*pcVar3 + cVar1);
    puVar7 = (uint8_t *)(unaff_RBX & 0xffffffff);
    pcVar8 = (char *)(uint64_t)((uint32_t)placeholder_3 & *placeholder_3);
    uVar2 = (uint8_t)puVar7;
    *puVar7 = *puVar7 | uVar2;
    *puVar7 = *puVar7 + uVar2;
    *puVar7 = *puVar7 + uVar2;
    *puVar7 = *puVar7 + uVar2;
    *puVar7 = *puVar7 + uVar2;
    *puVar7 = *puVar7 + uVar2;
    *pcVar15 = *pcVar15 + uVar2;
    *puVar7 = *puVar7 + uVar2;
    *puVar7 = *puVar7 + uVar2;
    *puVar7 = *puVar7 + uVar2;
    *pcVar8 = *pcVar8 + uVar2;
    *puVar7 = *puVar7 + uVar2;
    *puVar7 = *puVar7 + uVar2;
    *puVar7 = *puVar7 + uVar2;
    *puVar7 = *puVar7 + uVar2;
    *puVar7 = *puVar7 + uVar2;
    *puVar7 = *puVar7 + uVar2;
    *puVar7 = *puVar7 + uVar2;
    *puVar7 = *puVar7 + uVar2;
    *puVar7 = *puVar7 + uVar2;
    // WARNING: Bad instruction - Truncating control flow here
    halt_baddata();
}


// WARNING: Control flow encountered bad instruction data
// WARNING: Possible PIC construction at 0x08006cf6: Changing call to branch
// WARNING: Possible PIC construction at 0x08006da0: Changing call to branch
// WARNING: Possible PIC construction at 0x0800702a: Changing call to branch
// WARNING: Possible PIC construction at 0x08006e4e: Changing call to branch
// WARNING: Possible PIC construction at 0x08006e8e: Changing call to branch
// WARNING: Possible PIC construction at 0x08006eba: Changing call to branch
// WARNING: Possible PIC construction at 0x080070c6: Changing call to branch
// WARNING: Possible PIC construction at 0x080071be: Changing call to branch
// WARNING: Possible PIC construction at 0x080064fe: Changing call to branch
// WARNING: Possible PIC construction at 0x08006530: Changing call to branch
// WARNING: Possible PIC construction at 0x080065ae: Changing call to branch
// WARNING: Possible PIC construction at 0x080065e9: Changing call to branch
// WARNING: Possible PIC construction at 0x080066e9: Changing call to branch
// WARNING: Possible PIC construction at 0x0800671d: Changing call to branch
// WARNING: Possible PIC construction at 0x08006776: Changing call to branch
// WARNING: Possible PIC construction at 0x08006814: Changing call to branch
// WARNING: Possible PIC construction at 0x08006920: Changing call to branch
// WARNING: Possible PIC construction at 0x08006b15: Changing call to branch
// WARNING: Possible PIC construction at 0x08006b7d: Changing call to branch
// WARNING: Possible PIC construction at 0x0800696a: Changing call to branch
// WARNING: Possible PIC construction at 0x08006a0d: Changing call to branch
// WARNING: Possible PIC construction at 0x08006a56: Changing call to branch
// WARNING: Possible PIC construction at 0x08006b28: Changing call to branch
// WARNING: Possible PIC construction at 0x08006a88: Changing call to branch
// WARNING: Removing unreachable block (ram,0x08006b2d)
// WARNING: Removing unreachable block (ram,0x08006a5b)
// WARNING: Removing unreachable block (ram,0x08006a12)
// WARNING: Removing unreachable block (ram,0x08006a1a)
// WARNING: Removing unreachable block (ram,0x0800696f)
// WARNING: Removing unreachable block (ram,0x080069ea)
// WARNING: Removing unreachable block (ram,0x08006a05)
// WARNING: Removing unreachable block (ram,0x08006b82)
// WARNING: Removing unreachable block (ram,0x08006b1a)
// WARNING: Removing unreachable block (ram,0x08006925)
// WARNING: Removing unreachable block (ram,0x08006819)
// WARNING: Removing unreachable block (ram,0x0800677b)
// WARNING: Removing unreachable block (ram,0x08006920)
// WARNING: Removing unreachable block (ram,0x0800678f)
// WARNING: Removing unreachable block (ram,0x080067a9)
// WARNING: Removing unreachable block (ram,0x080067bd)
// WARNING: Removing unreachable block (ram,0x080067d3)
// WARNING: Removing unreachable block (ram,0x08006722)
// WARNING: Removing unreachable block (ram,0x0800673c)
// WARNING: Removing unreachable block (ram,0x0800673e)
// WARNING: Removing unreachable block (ram,0x08006768)
// WARNING: Removing unreachable block (ram,0x080066ee)
// WARNING: Removing unreachable block (ram,0x080065b3)
// WARNING: Removing unreachable block (ram,0x08006535)
// WARNING: Removing unreachable block (ram,0x08006556)
// WARNING: Removing unreachable block (ram,0x08006558)
// WARNING: Removing unreachable block (ram,0x08006590)
// WARNING: Removing unreachable block (ram,0x08006a60)
// WARNING: Removing unreachable block (ram,0x0800659e)
// WARNING: Removing unreachable block (ram,0x08006503)
// WARNING: Removing unreachable block (ram,0x080071c3)
// WARNING: Removing unreachable block (ram,0x080070cb)
// WARNING: Removing unreachable block (ram,0x08006ebf)
// WARNING: Removing unreachable block (ram,0x08006f5c)
// WARNING: Removing unreachable block (ram,0x08007062)
// WARNING: Removing unreachable block (ram,0x08006f69)
// WARNING: Removing unreachable block (ram,0x08007120)
// WARNING: Removing unreachable block (ram,0x08006e93)
// WARNING: Removing unreachable block (ram,0x08006e53)
// WARNING: Removing unreachable block (ram,0x0800702f)
// WARNING: Removing unreachable block (ram,0x08006da5)
// WARNING: Removing unreachable block (ram,0x08006ddb)
// WARNING: Removing unreachable block (ram,0x08006cfb)
// WARNING: Removing unreachable block (ram,0x08006e40)
// WARNING: Removing unreachable block (ram,0x08006d2e)
// WARNING: Removing unreachable block (ram,0x08007070)
// WARNING: Removing unreachable block (ram,0x08007086)
// WARNING: Removing unreachable block (ram,0x08007088)
// WARNING: Removing unreachable block (ram,0x0800708e)
// WARNING: Removing unreachable block (ram,0x08007090)
// WARNING: Removing unreachable block (ram,0x08007130)
// WARNING: Removing unreachable block (ram,0x08007013)
// WARNING: Removing unreachable block (ram,0x080070a2)
// WARNING: Removing unreachable block (ram,0x08006d55)
// WARNING: Removing unreachable block (ram,0x08006de8)
// WARNING: Removing unreachable block (ram,0x08006d5f)
// WARNING: Removing unreachable block (ram,0x08006d88)
// WARNING: Removing unreachable block (ram,0x08006a8d)
// WARNING: Removing unreachable block (ram,0x080065c9)
// WARNING: Removing unreachable block (ram,0x080065d4)
// WARNING: Removing unreachable block (ram,0x080065ee)
// WARNING: Removing unreachable block (ram,0x08006b28)
// WARNING: Removing unreachable block (ram,0x08006602)
// WARNING: Removing unreachable block (ram,0x08006b38)
// WARNING: Removing unreachable block (ram,0x08006b4b)
// WARNING: Removing unreachable block (ram,0x08006610)
// WARNING: Removing unreachable block (ram,0x08006a50)
// WARNING: Removing unreachable block (ram,0x08006621)
// WARNING: Removing unreachable block (ram,0x0800662f)
// WARNING: Removing unreachable block (ram,0x08006638)
// WARNING: Removing unreachable block (ram,0x0800664c)
// WARNING: Removing unreachable block (ram,0x08006930)
// WARNING: Removing unreachable block (ram,0x0800693a)
// WARNING: Removing unreachable block (ram,0x08006665)
// WARNING: Removing unreachable block (ram,0x08006b60)
// WARNING: Removing unreachable block (ram,0x0800666f)
// WARNING: Removing unreachable block (ram,0x08006aa0)
// WARNING: Removing unreachable block (ram,0x080065db)
// WARNING: Removing unreachable block (ram,0x080070b8)
// WARNING: [r2ghidra] Failed to match type signed int64_t for variable var_34h to Decompiler type: Unknown type
// identifier signed

void sym.plot_betweencurves(int64_t arg1)
{
    double dVar1;
    double dVar2;
    uint32_t uVar3;
    uint8_t uVar4;
    char cVar5;
    uint32_t uVar6;
    uint32_t uVar7;
    int64_t iVar8;
    uint32_t *puVar9;
    uint8_t *puVar10;
    uint32_t *in_RCX;
    char *pcVar11;
    uint32_t uVar12;
    uint64_t unaff_RBX;
    uint64_t uVar13;
    int64_t iVar14;
    char *pcVar15;
    int32_t iVar16;
    double dVar17;
    
    uVar13 = unaff_RBX;
    if (*(int64_t *)(_reloc.term + 0xe8) == 0) {
        uVar7 = *(uint32_t *)(arg1 + 0x10);
        pcVar15 = (char *)(uint64_t)uVar7;
        uVar6 = 0;
        if (3 < *(uint32_t *)(_reloc.term + 0x24)) {
            uVar6 = *(uint32_t *)(_reloc.term + 0x24) >> 1;
        }
        uVar12 = uVar7 & 0xffffffbf;
        uVar3 = (uint32_t)((uint64_t)in_RCX & 0xffffffffffffff00);
        uVar7 = uVar6 & 0xffffff00 | (uint32_t)(uVar7 == 0x289) | uVar3 | uVar7 == 0x608 | uVar3 | uVar7 == 0x549;
        in_RCX = (uint32_t *)((uint64_t)in_RCX & 0xffffffffffffff00 | (uint64_t)(uVar12 == 0x186));
        uVar4 = (uint8_t)uVar7 | uVar12 == 0x186;
        puVar9 = (uint32_t *)(uint64_t)(uVar7 & 0xffffff00 | (uint32_t)uVar4);
        if ((uVar4 != 0) || (uVar12 == 0x487)) {
            if (*(int32_t *)(arg1 + 0x1c8) < 1) goto code_r0x080921db;
            iVar14 = 0;
            do {
                puVar9 = (uint32_t *)(*(int64_t *)(arg1 + 0x1e8) + iVar14 * 0x40);
                if (*puVar9 != 2) {
                    dVar17 = *(double *)(puVar9 + 2);
                    if ((int32_t)pcVar15 == 0x608) {
                        iVar16 = *(int32_t *)(*(int64_t *)(arg1 + 0x1a8) + 8) + *(int32_t *)0x8092457;
                        in_RCX = (uint32_t *)(uint64_t)(*(int32_t *)0x8092457 - 1U);
                        dVar17 = _reloc..LC8 + *(double *)(*(int64_t *)(arg1 + 0x1a8) + 0x10) +
                                 ((double)(*(int32_t *)0x8092457 - 1U) * _reloc..LC8 +
                                 (double)((iVar16 + -1) * ((int32_t)iVar14 + -1) + *(int32_t *)(arg1 + 0x1b0)) + dVar17)
                                 / (double)iVar16;
                    }
                    iVar8 = (int64_t)_reloc.x_axis * 0x2a8;
                    puVar9 = (uint32_t *)(reloc.axis_array + iVar8);
                    dVar1 = *(double *)(reloc.clip_polygon + iVar8);
                    dVar2 = *(double *)(reloc.style_from_fill + iVar8);
                    if (dVar2 <= dVar1) {
                        if (dVar2 <= dVar17) {
                            puVar9 = (uint32_t *)((uint64_t)puVar9 & 0xffffffffffffff00 | (uint64_t)(dVar1 < dVar17));
                            goto code_r0x0800648d;
                        }
                    } else {
                        if (dVar1 <= dVar17) {
                            puVar9 = (uint32_t *)((uint64_t)puVar9 & 0xffffffffffffff00 | (uint64_t)(dVar2 < dVar17));
code_r0x0800648d:
                            if ((char)puVar9 == '\0') {
                                uVar7 = func_0x080921db(dVar17, dVar17, dVar2);
                                dVar17 = *(double *)(*(int64_t *)(arg1 + 0x1e8) + 0x10 + iVar14 * 0x40);
                                iVar8 = (int64_t)_reloc.y_axis * 0x2a8;
                                puVar9 = (uint32_t *)(reloc.axis_array + iVar8);
                                dVar1 = *(double *)(reloc.clip_polygon + iVar8);
                                dVar2 = *(double *)(reloc.style_from_fill + iVar8);
                                if (dVar2 <= dVar1) {
                                    if (dVar2 <= dVar17) {
                                        puVar9 = (uint32_t *)
                                                 ((uint64_t)puVar9 & 0xffffffffffffff00 | (uint64_t)(dVar1 < dVar17));
                                        goto code_r0x080064f0;
                                    }
                                } else {
                                    if (dVar1 <= dVar17) {
                                        puVar9 = (uint32_t *)
                                                 ((uint64_t)puVar9 & 0xffffffffffffff00 | (uint64_t)(dVar2 < dVar17));
code_r0x080064f0:
                                        uVar13 = (uint64_t)uVar7;
                                        if ((char)puVar9 == '\0') goto code_r0x080921db;
                                    }
                                }
                                pcVar15 = (char *)(uint64_t)*(uint32_t *)(arg1 + 0x10);
                            }
                        }
                    }
                }
                iVar14 = iVar14 + 1;
            } while (*(int32_t *)(arg1 + 0x1c8) != (int32_t)iVar14 && (int32_t)iVar14 <= *(int32_t *)(arg1 + 0x1c8));
        }
        pcVar15 = (char *)((uint64_t)pcVar15 & 0xffffffffffffff7f);
        uVar13 = unaff_RBX;
        if ((((int32_t)pcVar15 == 0x146) || ((int32_t)pcVar15 == 0x447)) &&
           (puVar9 = (uint32_t *)(uint64_t)*(uint32_t *)(arg1 + 0x1c8), 0 < (int32_t)*(uint32_t *)(arg1 + 0x1c8))) {
            iVar14 = 0;
            do {
                puVar9 = (uint32_t *)(*(int64_t *)(arg1 + 0x1e8) + iVar14 * 0x40);
                if (*puVar9 != 2) {
                    dVar17 = *(double *)(puVar9 + 4);
                    iVar8 = (int64_t)_reloc.y_axis * 0x2a8;
                    puVar9 = (uint32_t *)(reloc.axis_array + iVar8);
                    dVar1 = *(double *)(reloc.clip_polygon + iVar8);
                    dVar2 = *(double *)(reloc.style_from_fill + iVar8);
                    if (dVar1 < dVar2) {
                        if (dVar1 <= dVar17) {
                            puVar9 = (uint32_t *)((uint64_t)puVar9 & 0xffffffffffffff00 | (uint64_t)(dVar2 < dVar17));
                            goto code_r0x080066e1;
                        }
                    } else {
                        if (dVar2 <= dVar17) {
                            puVar9 = (uint32_t *)((uint64_t)puVar9 & 0xffffffffffffff00 | (uint64_t)(dVar1 < dVar17));
code_r0x080066e1:
                            uVar13 = arg1;
                            if ((char)puVar9 == '\0') break;
                        }
                    }
                }
                iVar14 = iVar14 + 1;
                uVar13 = unaff_RBX;
            } while (*(int32_t *)(arg1 + 0x1c8) != (int32_t)iVar14 && (int32_t)iVar14 <= *(int32_t *)(arg1 + 0x1c8));
        }
    } else {
        *(undefined4 *)(arg1 + 0x180) = 0xd;
        iVar16 = *(int32_t *)(arg1 + 0x1c8) * 2 + 3;
        if (iVar16 <= _obj.corners_allocated.12736) {
            if (0 < *(int32_t *)(arg1 + 0x1c8)) {
                iVar14 = 0;
                pcVar15 = (char *)0x0;
                do {
                    in_RCX = *(uint32_t **)(arg1 + 0x1e8);
                    if (in_RCX[iVar14 * 0x10] != 2) {
                        uVar7 = (int32_t)iVar14 + 1;
                        puVar9 = (uint32_t *)(uint64_t)uVar7;
                        uVar13 = 0;
                        if (*(uint32_t *)(arg1 + 0x1c8) != uVar7 &&
                            (int32_t)uVar7 <= (int32_t)*(uint32_t *)(arg1 + 0x1c8)) {
                            puVar9 = in_RCX + iVar14 * 0x10 + 0x10;
                        }
                        goto code_r0x080921db;
                    }
                    iVar14 = iVar14 + 1;
                } while (*(int32_t *)(arg1 + 0x1c8) != (int32_t)iVar14 && (int32_t)iVar14 <= *(int32_t *)(arg1 + 0x1c8))
                ;
            }
            return;
        }
        puVar9 = (uint32_t *)(int64_t)iVar16;
        pcVar15 = (char *)((int64_t)puVar9 * 0xc);
        _obj.corners_allocated.12736 = iVar16;
    }
code_r0x080921db:
    cVar5 = (char)puVar9;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    *(char *)puVar9 = *(char *)puVar9 + cVar5;
    puVar10 = (uint8_t *)(uVar13 & 0xffffffff);
    pcVar11 = (char *)(uint64_t)((uint32_t)in_RCX & *in_RCX);
    uVar4 = (uint8_t)puVar10;
    *puVar10 = *puVar10 | uVar4;
    *puVar10 = *puVar10 + uVar4;
    *puVar10 = *puVar10 + uVar4;
    *puVar10 = *puVar10 + uVar4;
    *puVar10 = *puVar10 + uVar4;
    *puVar10 = *puVar10 + uVar4;
    *pcVar15 = *pcVar15 + uVar4;
    *puVar10 = *puVar10 + uVar4;
    *puVar10 = *puVar10 + uVar4;
    *puVar10 = *puVar10 + uVar4;
    *pcVar11 = *pcVar11 + uVar4;
    *puVar10 = *puVar10 + uVar4;
    *puVar10 = *puVar10 + uVar4;
    *puVar10 = *puVar10 + uVar4;
    *puVar10 = *puVar10 + uVar4;
    *puVar10 = *puVar10 + uVar4;
    *puVar10 = *puVar10 + uVar4;
    *puVar10 = *puVar10 + uVar4;
    *puVar10 = *puVar10 + uVar4;
    *puVar10 = *puVar10 + uVar4;
    // WARNING: Bad instruction - Truncating control flow here
    halt_baddata();
}


void sym.plot_f_bars(int64_t arg1)
{
    undefined8 uVar1;
    undefined8 uVar2;
    undefined8 uVar3;
    double dVar4;
    uint32_t uVar5;
    uint32_t uVar6;
    int32_t iVar7;
    int32_t iVar8;
    undefined4 uVar9;
    undefined4 uVar10;
    undefined4 uVar11;
    int32_t *piVar12;
    uint64_t extraout_RDX;
    int64_t iVar13;
    uint64_t uVar14;
    int64_t iVar15;
    bool bVar16;
    bool bVar17;
    double dVar18;
    double dVar19;
    double dVar20;
    double dVar21;
    
    uVar5 = 1;
    if (7 < *(uint32_t *)(_reloc.term + 0x24)) {
        uVar5 = *(uint32_t *)(_reloc.term + 0x24) >> 2;
    }
    if (0 < *(int32_t *)(arg1 + 0x1c8)) {
        iVar13 = 0;
        do {
            piVar12 = (int32_t *)(*(int64_t *)(arg1 + 0x1e8) + iVar13 * 0x40);
            if (*piVar12 != 2) {
                dVar20 = *(double *)(piVar12 + 2);
                dVar21 = *(double *)(reloc.clip_polygon + (int64_t)_reloc.x_axis * 0x2a8);
                dVar18 = *(double *)(reloc.style_from_fill + (int64_t)_reloc.x_axis * 0x2a8);
                dVar4 = dVar21;
                if (dVar21 < dVar18) {
                    dVar4 = dVar18;
                    dVar18 = dVar21;
                }
                if ((dVar18 <= dVar20) && (bVar16 = dVar4 < dVar20, !bVar16)) {
                    uVar6 = func_0x080921db();
                    iVar15 = iVar13 * 0x40 + *(int64_t *)(arg1 + 0x1e8);
                    uVar1 = *(undefined8 *)(iVar15 + 0x18);
                    uVar2 = *(undefined8 *)(iVar15 + 0x10);
                    uVar3 = *(undefined8 *)(iVar15 + 0x38);
                    dVar20 = *(double *)(iVar15 + 0x28);
                    dVar21 = *(double *)(iVar15 + 0x20);
                    dVar18 = *(double *)(reloc.clip_polygon + (int64_t)_reloc.y_axis * 0x2a8);
                    dVar4 = *(double *)(reloc.style_from_fill + (int64_t)_reloc.y_axis * 0x2a8);
                    if (dVar4 <= dVar18) {
                        bVar17 = dVar4 <= dVar20 && dVar20 <= dVar18;
                        if (dVar21 < dVar4) goto code_r0x0800732f;
                        bVar16 = dVar21 <= dVar18;
                        if (dVar4 > dVar20 || dVar20 > dVar18) goto code_r0x08007338;
code_r0x0800759c:
                        iVar7 = func_0x080921db(dVar20);
code_r0x0800737e:
                        if (bVar16) goto code_r0x0800751f;
code_r0x08007387:
                        dVar20 = *(double *)(reloc.style_from_fill + (int64_t)_reloc.y_axis * 0x2a8);
                        dVar18 = dVar20 - *(double *)(reloc.clip_polygon + (int64_t)_reloc.y_axis * 0x2a8);
                        if (dVar21 - dVar20 <= _reloc..LC1) {
                            if ((dVar21 - dVar20 < 0.00000000) && (_reloc..LC1 < dVar18)) goto code_r0x0800754c;
                        } else {
                            if ((dVar18 <= _reloc..LC1) && (dVar18 < 0.00000000)) {
code_r0x0800754c:
                                dVar20 = *(double *)(reloc.clip_polygon + (int64_t)_reloc.y_axis * 0x2a8);
                            }
                        }
                        iVar8 = func_0x080921db(dVar20);
                        if ((!bVar17) && (iVar8 == iVar7)) goto code_r0x080074c4;
                    } else {
                        bVar17 = dVar18 <= dVar20 && dVar20 <= dVar4;
                        if (dVar18 <= dVar21) {
                            bVar16 = dVar21 <= dVar4;
                        }
code_r0x0800732f:
                        if (bVar17) goto code_r0x0800759c;
code_r0x08007338:
                        dVar19 = dVar4 - dVar18;
                        if (dVar20 - dVar4 <= 0.00000000) {
                            if ((dVar20 - dVar4 < 0.00000000) && (0.00000000 < dVar19)) goto code_r0x080074fe;
code_r0x0800736a:
                            iVar7 = func_0x080921db();
                            goto code_r0x0800737e;
                        }
                        if ((0.00000000 < dVar19) || (0.00000000 <= dVar19)) goto code_r0x0800736a;
code_r0x080074fe:
                        iVar7 = func_0x080921db(dVar18);
                        if (!bVar16) goto code_r0x08007387;
code_r0x0800751f:
                        iVar8 = func_0x080921db(dVar21);
                    }
                    func_0x080921db(arg1, *(int64_t *)(arg1 + 0x1e0) + iVar13 * 8);
                    uVar9 = func_0x080921db(uVar2);
                    uVar10 = func_0x080921db(uVar1);
                    uVar11 = func_0x080921db(uVar3);
                    uVar14 = (uint64_t)uVar6;
                    func_0x080921db(uVar14, iVar8, uVar6, iVar7);
                    dVar20 = (double)uVar5;
                    dVar21 = (double)uVar6;
                    uVar14 = uVar14 & 0xffffffff00000000 |
                             (uint64_t)(uint32_t)(int32_t)(dVar21 - _reloc.bar_size * dVar20);
                    func_0x080921db(uVar14, uVar9, uVar6, uVar9);
                    uVar14 = uVar14 & 0xffffffff00000000 |
                             (uint64_t)(uint32_t)(int32_t)(dVar20 * _reloc.bar_size + dVar21);
                    func_0x080921db(uVar14, uVar10, uVar6, uVar10);
                    if (*(int32_t *)(arg1 + 0x10) == 0x74a) {
                        func_0x080921db(uVar14 & 0xffffffff00000000 |
                                        (uint64_t)(uint32_t)(int32_t)(dVar21 - dVar20 * _reloc.bar_size), uVar11, 
                                        extraout_RDX & 0xffffffff00000000 |
                                        (uint64_t)(uint32_t)(int32_t)(dVar21 + dVar20 * _reloc.bar_size), uVar11);
                    }
                }
            }
code_r0x080074c4:
            iVar13 = iVar13 + 1;
        } while (*(int32_t *)(arg1 + 0x1c8) != (int32_t)iVar13 && (int32_t)iVar13 <= *(int32_t *)(arg1 + 0x1c8));
    }
    return;
}


void sym.plot_c_bars(int64_t arg1)
{
    double dVar1;
    double dVar2;
    undefined8 uVar3;
    double dVar4;
    code *pcVar5;
    bool bVar6;
    int64_t iVar7;
    uint32_t uVar8;
    int32_t iVar9;
    int32_t iVar10;
    int32_t iVar11;
    int32_t iVar12;
    undefined4 uVar13;
    int32_t iVar14;
    int32_t *piVar15;
    int64_t iVar16;
    int32_t iVar17;
    bool bVar18;
    int64_t iVar19;
    int64_t iVar20;
    bool bVar21;
    undefined8 uVar22;
    double dVar23;
    double dVar24;
    double dVar25;
    undefined auVar26 [16];
    undefined auVar27 [16];
    double dVar28;
    double dVar29;
    undefined auVar30 [16];
    double dStack136;
    double dStack128;
    int32_t iStack116;
    int32_t iStack64;
    
    iVar7 = _reloc.term;
    iStack116 = 2;
    uVar8 = 1;
    if (7 < *(uint32_t *)(_reloc.term + 0x24)) {
        uVar8 = *(uint32_t *)(_reloc.term + 0x24) >> 2;
    }
    if (0 < *(int32_t *)(arg1 + 0x1c8)) {
        iVar20 = 0;
        do {
            iVar19 = iVar20 * 0x40;
            piVar15 = (int32_t *)(*(int64_t *)(arg1 + 0x1e8) + iVar19);
            if (*piVar15 != 2) {
                dVar1 = *(double *)(piVar15 + 2);
                dVar23 = *(double *)(reloc.clip_polygon + (int64_t)_reloc.x_axis * 0x2a8);
                dVar2 = *(double *)(reloc.style_from_fill + (int64_t)_reloc.x_axis * 0x2a8);
                dVar25 = dVar23;
                dVar4 = dVar2;
                if (dVar23 < dVar2) {
                    dVar25 = dVar2;
                    dVar4 = dVar23;
                }
                if ((dVar4 <= dVar1) && (bVar21 = dVar25 < dVar1, !bVar21)) {
                    iVar9 = func_0x080921db(dVar1, dVar1, dVar2);
                    iVar16 = *(int64_t *)(arg1 + 0x1e8) + iVar19;
                    dVar23 = *(double *)(iVar16 + 0x28);
                    dVar24 = *(double *)(iVar16 + 0x20);
                    dVar2 = *(double *)(iVar16 + 0x18);
                    uVar3 = *(undefined8 *)(iVar16 + 0x38);
                    dVar4 = *(double *)(iVar16 + 0x10);
                    dVar25 = dVar23;
                    if (dVar23 < dVar24) {
                        dVar25 = dVar24;
                        dVar24 = dVar23;
                    }
                    dVar23 = *(double *)(reloc.clip_polygon + (int64_t)_reloc.y_axis * 0x2a8);
                    dVar28 = *(double *)(reloc.style_from_fill + (int64_t)_reloc.y_axis * 0x2a8);
                    if (dVar28 <= dVar23) {
                        bVar18 = dVar28 <= dVar25 && dVar25 <= dVar23;
                        if (dVar24 < dVar28) goto code_r0x08007c80;
                        bVar6 = dVar24 <= dVar23;
                        if (dVar28 <= dVar25 && dVar25 <= dVar23) goto code_r0x08007c58;
code_r0x0800776c:
                        dVar29 = dVar28 - dVar23;
                        if (0.00000000 < dVar25 - dVar28) {
                            if ((0.00000000 < dVar29) || (0.00000000 <= dVar29)) goto code_r0x08007796;
                        } else {
                            if ((0.00000000 <= dVar25 - dVar28) || (dVar29 <= 0.00000000)) {
code_r0x08007796:
                                iStack64 = func_0x080921db(dVar28, dVar1, dVar24, dVar28, dVar23, 0, dVar29);
                                goto code_r0x080077bb;
                            }
                        }
                        iStack64 = func_0x080921db(dVar23, dVar1, dVar24, dVar28, dVar23, 0, dVar29);
                        if (bVar6) goto code_r0x08007b94;
code_r0x080077c6:
                        dVar23 = *(double *)(reloc.style_from_fill + (int64_t)_reloc.y_axis * 0x2a8);
                        dVar25 = *(double *)(reloc.clip_polygon + (int64_t)_reloc.y_axis * 0x2a8);
                        dVar24 = dVar24 - dVar23;
                        dVar28 = dVar23 - dVar25;
                        if (dVar24 <= 0.00000000) {
                            if ((dVar24 < 0.00000000) && (0.00000000 < dVar28)) goto code_r0x08007bcc;
code_r0x08007812:
                            iVar10 = func_0x080921db(dVar23, dVar1, dVar24, 0, dVar25, dVar28);
                        } else {
                            if ((0.00000000 < dVar28) || (0.00000000 <= dVar28)) goto code_r0x08007812;
code_r0x08007bcc:
                            iVar10 = func_0x080921db(dVar25, dVar1, dVar24, 0, dVar25, dVar28);
                        }
                        if ((!bVar18) && (iVar10 == iStack64)) goto code_r0x08007ad8;
                    } else {
                        bVar18 = dVar23 <= dVar25 && dVar25 <= dVar28;
                        if (dVar24 < dVar23) {
code_r0x08007c80:
                            bVar6 = false;
                        } else {
                            bVar6 = dVar24 <= dVar28;
                        }
                        if (!bVar18) goto code_r0x0800776c;
code_r0x08007c58:
                        iStack64 = func_0x080921db(dVar25, dVar1, dVar24, dVar28, dVar23, uVar3, dVar4);
code_r0x080077bb:
                        if (!bVar6) goto code_r0x080077c6;
code_r0x08007b94:
                        iVar10 = func_0x080921db(dVar24, dVar1, dVar24);
                    }
                    iVar16 = *(int64_t *)(arg1 + 0x1e8);
                    dVar23 = *(double *)(iVar16 + iVar19 + 0x30);
                    auVar26 = ZEXT816((uint64_t)dVar23);
                    dVar25 = *(double *)(iVar16 + iVar19 + 8);
                    if (dVar23 == dVar25) {
                        if (*(int32_t *)(arg1 + 0x10) == 0x74a) {
                            dVar23 = _reloc..LC42;
                            if ((reloc.boxwidth_is_absolute != (code)0x0) && (_reloc..LC1 < _reloc.boxwidth)) {
                                dVar23 = _reloc..LC8 * _reloc.boxwidth;
                            }
                            iStack116 = func_0x080921db(dVar1 - dVar23, dVar1, dVar23);
                            iVar11 = func_0x080921db(dVar23 + dVar1, dVar1, dVar23 + dVar1);
                        } else {
                            if (0.00000000 <= _reloc.boxwidth) {
                                iVar11 = *(int32_t *)(arg1 + 0x1c8) + -1;
                                dVar23 = (double)((uint64_t)_reloc.boxwidth ^ _reloc..LC12) * _reloc..LC8;
                                uVar22 = *(undefined8 *)0x800ea68;
                                if (iStack116 == 2) {
                                    dVar29 = (double)((uint64_t)dVar23 ^ _reloc..LC12);
                                    if ((int32_t)iVar20 < iVar11) {
                                        piVar15 = (int32_t *)(iVar16 + 0x40 + iVar19);
                                        if (*piVar15 != 2) goto code_r0x080082cf;
code_r0x080082f4:
                                        dVar23 = (double)((uint64_t)dVar29 ^ _reloc..LC12);
                                        uVar22 = *(undefined8 *)0x800ea68;
                                    }
                                } else {
                                    if (reloc.boxwidth_is_absolute == (code)0x0) {
                                        dVar23 = (*(double *)(iVar16 + -0x38 + iVar19) - dVar25) * _reloc.boxwidth *
                                                 _reloc..LC8;
                                        uVar22 = 0;
                                    }
                                    dVar29 = (double)((uint64_t)dVar23 ^ _reloc..LC12);
                                    if (((int32_t)iVar20 < iVar11) &&
                                       (piVar15 = (int32_t *)(iVar16 + 0x40 + iVar19), *piVar15 != 2)) {
code_r0x080082cf:
                                        dVar29 = _reloc.boxwidth;
                                        if (reloc.boxwidth_is_absolute == (code)0x0) {
                                            dVar29 = (*(double *)(piVar15 + 2) - dVar25) * _reloc.boxwidth;
                                        }
                                        dVar29 = dVar29 * _reloc..LC8;
                                        if (iStack116 == 2) goto code_r0x080082f4;
                                    }
                                }
                                auVar26 = CONCAT88(uVar22, dVar23 + dVar1);
                                dVar29 = dVar1 + dVar29;
                                dVar25 = *(double *)(reloc.clip_polygon + (int64_t)_reloc.x_axis * 0x2a8);
                                auVar30 = ZEXT816((uint64_t)dVar25);
                                dVar24 = *(double *)(reloc.style_from_fill + (int64_t)_reloc.x_axis * 0x2a8);
                                auVar27 = ZEXT816((uint64_t)dVar24);
                                if (dVar24 <= dVar25) {
                                    dVar28 = dVar25;
                                    if (dVar29 <= dVar25) {
                                        auVar30 = maxsd(ZEXT816((uint64_t)dVar24), ZEXT816((uint64_t)dVar29));
                                        dVar28 = SUB168(auVar30, 0);
                                    }
                                    goto code_r0x0800800e;
                                }
                                dVar28 = dVar24;
                                if (dVar24 < dVar29) goto code_r0x0800789d;
                                auVar27 = maxsd(ZEXT816((uint64_t)dVar25), ZEXT816((uint64_t)dVar29));
                                dVar28 = SUB168(auVar27, 0);
                                dVar25 = dVar24;
                                if (dVar23 + dVar1 <= dVar24) goto code_r0x08007e20;
                                goto code_r0x080078ab;
                            }
                            iStack116 = (int32_t)((double)iVar9 - _reloc.bar_size * (double)uVar8);
                            iVar11 = (int32_t)((double)iVar9 + _reloc.bar_size * (double)uVar8);
                        }
                    } else {
                        dVar23 = (dVar1 + dVar1) - dVar23;
                        dVar25 = *(double *)(reloc.clip_polygon + (int64_t)_reloc.x_axis * 0x2a8);
                        auVar30 = ZEXT816((uint64_t)dVar25);
                        dVar24 = *(double *)(reloc.style_from_fill + (int64_t)_reloc.x_axis * 0x2a8);
                        auVar27 = ZEXT816((uint64_t)dVar24);
                        if (dVar24 <= dVar25) {
                            dVar28 = dVar25;
                            if (dVar23 <= dVar25) {
                                auVar30 = maxsd(ZEXT816((uint64_t)dVar24), ZEXT816((uint64_t)dVar23));
                                dVar28 = SUB168(auVar30, 0);
                            }
code_r0x0800800e:
                            dVar24 = dVar25;
                            dVar25 = SUB168(auVar27, 0);
                            if (SUB168(auVar26, 0) <= dVar24) {
                                auVar26 = maxsd(auVar27, auVar26);
                                dVar24 = SUB168(auVar26, 0);
                                dVar25 = dVar24;
                            }
                        } else {
                            dVar28 = dVar24;
                            if (dVar23 <= dVar24) {
                                auVar27 = maxsd(ZEXT816((uint64_t)dVar25), ZEXT816((uint64_t)dVar23));
                                dVar28 = SUB168(auVar27, 0);
                            }
code_r0x0800789d:
                            dVar25 = dVar24;
                            if (SUB168(auVar26, 0) <= dVar24) {
code_r0x08007e20:
                                auVar26 = maxsd(auVar30, auVar26);
                                dVar24 = SUB168(auVar26, 0);
                            }
                        }
code_r0x080078ab:
                        iStack116 = func_0x080921db(dVar24, dVar28, dVar24, dVar25);
                        iVar11 = func_0x080921db(dVar28, dVar28);
                    }
                    if ((iVar11 - iStack116 & 1U) != 0) {
                        iVar11 = iVar11 + 1;
                        iVar17 = iVar9 - iStack116;
                        iVar12 = iVar11 - iVar9;
                        if (iVar12 < iVar17) {
                            iVar9 = iVar9 + -1;
                            iVar12 = iVar11 - iVar9;
                            iVar17 = iVar9 - iStack116;
                        }
                        iVar9 = iVar9 + (uint32_t)(iVar17 < iVar12);
                    }
                    dVar1 = *(double *)(reloc.clip_polygon + (int64_t)_reloc.y_axis * 0x2a8);
                    dStack128 = *(double *)(reloc.style_from_fill + (int64_t)_reloc.y_axis * 0x2a8);
                    auVar26 = ZEXT816((uint64_t)dStack128);
                    if (dStack128 <= dVar1) {
                        if ((dVar2 < dStack128) || (dVar1 < dVar2)) {
                            bVar21 = dVar4 < dStack128 || dVar1 < dVar4;
                        }
                        dStack136 = dVar1;
                        if (dVar4 <= dVar1) {
                            auVar30 = maxsd(ZEXT816((uint64_t)dStack128), dVar4);
                            dStack136 = SUB168(auVar30, 0);
                        }
                        dStack128 = dVar1;
                        if (dVar2 <= dVar1) {
                            auVar26 = maxsd(auVar26, dVar2);
                            dStack128 = SUB168(auVar26, 0);
                        }
                    } else {
                        if ((dVar2 < dVar1) || (dStack128 < dVar2)) {
                            bVar21 = dVar4 < dVar1 || dStack128 < dVar4;
                        }
                        dStack136 = dStack128;
                        if (dVar4 <= dStack128) {
                            auVar26 = maxsd(ZEXT816((uint64_t)dVar1), dVar4);
                            dStack136 = SUB168(auVar26, 0);
                        }
                        if (dVar2 <= dStack128) {
                            auVar26 = maxsd(ZEXT816((uint64_t)dVar1), dVar2);
                            dStack128 = SUB168(auVar26, 0);
                        }
                    }
                    iVar12 = func_0x080921db(dStack136);
                    iVar17 = func_0x080921db(dStack128);
                    if (iVar12 < iVar17) {
                        iVar12 = func_0x080921db(dStack136);
                        iVar17 = func_0x080921db(dStack128);
                    } else {
                        iVar17 = func_0x080921db(dStack136);
                        iVar12 = func_0x080921db(dStack128);
                    }
                    bVar21 = (bool)(bVar21 & iVar12 == iVar17);
                    if (((*(int32_t *)(arg1 + 0x148) != 0) && (*(int64_t *)(arg1 + 0x148) != -0x2ffffffff)) ||
                       (((uint8_t)segment.ehdr & 8) != 0)) {
                        func_0x080921db(arg1 + 0x30);
                    }
                    func_0x080921db();
                    if (*(int64_t *)(_reloc.term + 0xc0) == 0) {
                        if (!bVar21) goto code_r0x08007f68;
                    } else {
                        if (!bVar21) {
                            iVar14 = func_0x080921db();
                            if (iVar14 == 0) {
                                if (dStack136 <= dStack128) goto code_r0x08007f68;
                                if (*(int32_t *)(arg1 + 0x10) != 0x74a) {
                                    iVar14 = 0x641;
                                }
                            }
                            (**(code **)(iVar7 + 0xc0))(iVar14, iStack116, iVar12, iVar11 - iStack116, iVar17 - iVar12);
                            iVar12 = func_0x080921db();
                            if (iVar12 != 0) {
                                func_0x080921db();
                            }
code_r0x08007f68:
                            func_0x080921db();
                            pcVar5 = *(code **)(iVar7 + 0x58);
                            func_0x080921db(dStack136);
                            (*pcVar5)();
                            pcVar5 = *(code **)(iVar7 + 0x60);
                            func_0x080921db(dStack136);
                            (*pcVar5)();
                            pcVar5 = *(code **)(iVar7 + 0x60);
                            func_0x080921db(dStack128);
                            (*pcVar5)();
                            pcVar5 = *(code **)(iVar7 + 0x60);
                            func_0x080921db(dStack128);
                            (*pcVar5)();
                            pcVar5 = *(code **)(iVar7 + 0x60);
                            func_0x080921db(dStack136);
                            (*pcVar5)();
                            func_0x080921db();
                        }
                    }
                    if ((*(int32_t *)(arg1 + 0x10) == 0x74a) && (_reloc.make_palette < 0.00000000)) {
                        uVar13 = func_0x080921db(uVar3);
                        func_0x080921db(iStack116, uVar13, iVar11);
                    }
                    if ((dStack128 < dStack136) && (*(int64_t *)(_reloc.term + 0xc0) == 0)) {
                        (**(code **)(iVar7 + 0x58))();
                        (**(code **)(iVar7 + 0x60))();
                        (**(code **)(iVar7 + 0x58))();
                        (**(code **)(iVar7 + 0x60))();
                        (**(code **)(iVar7 + 0x58))();
                        (**(code **)(iVar7 + 0x60))();
                    }
                    if (((uint8_t)segment.ehdr & 8) != 0) {
                        func_0x080921db();
                    }
                    func_0x080921db(iVar9, iVar10, iVar9);
                    func_0x080921db(iVar9, iVar17, iVar9);
                    iVar9 = iVar11;
                    iVar12 = iStack116;
                    if (*(int32_t *)(arg1 + 0x10) == 0x74a) {
                        if (0.00000000 <= _reloc.bar_size) {
                            iVar12 = (int32_t)((double)(iVar11 - iStack116) * _reloc..LC8 -
                                              (double)(uint64_t)*(uint32_t *)(_reloc.term + 0x24) * _reloc.bar_size);
                            iVar9 = iVar11 - iVar12;
                            iVar12 = iVar12 + iStack116;
                        }
code_r0x08007e7e:
                        func_0x080921db(iVar12, iStack64, iVar9, iStack64);
                        func_0x080921db(iVar12, iVar10, iVar9, iVar10);
                        if ((*(int32_t *)(arg1 + 0x10) == 0x74a) && (0.00000000 < _reloc.make_palette)) {
                            uVar13 = func_0x080921db(uVar3, 0);
                            (**(code **)(iVar7 + 200))(_reloc.make_palette);
                            func_0x080921db(iStack116, uVar13, iVar11, uVar13);
                            (**(code **)(iVar7 + 200))(*(undefined8 *)(arg1 + 0x48));
                        }
                    } else {
                        if (*(int32_t *)(arg1 + 0x108) == 3) {
                            if (0.00000000 < *(double *)(arg1 + 0x110)) {
                                iVar12 = (int32_t)((double)(iVar11 - iStack116) *
                                                   (_reloc..LC9 - *(double *)(arg1 + 0x110)) * _reloc..LC8);
                                iVar9 = iVar11 - iVar12;
                                iVar12 = iVar12 + iStack116;
                            }
                            goto code_r0x08007e7e;
                        }
                    }
                    iStack116 = *(int32_t *)(*(int64_t *)(arg1 + 0x1e8) + iVar19);
                }
            }
code_r0x08007ad8:
            iVar20 = iVar20 + 1;
        } while (*(int32_t *)(arg1 + 0x1c8) != (int32_t)iVar20 && (int32_t)iVar20 <= *(int32_t *)(arg1 + 0x1c8));
    }
    return;
}




void sym.map_position(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4)
{
    double *extraout_RDX;
    double *arg2_00;
    int64_t in_FS_OFFSET;
    double dVar1;
    double dStack48;
    double dStack40;
    int64_t iStack32;
    
    iStack32 = *(int64_t *)(in_FS_OFFSET + 0x28);
    arg2_00 = &dStack48;
    dStack48 = 0.00000000;
    dStack40 = 0.00000000;
    sym.map_position_double.isra.0(arg1, (int64_t)arg2_00, (int64_t)&dStack40, arg4);
    *(int32_t *)arg2 = (int32_t)dStack48;
    *(int32_t *)arg3 = (int32_t)dStack40;
    if (iStack32 == *(int64_t *)(in_FS_OFFSET + 0x28)) {
        return;
    }
    func_0x080921db();
    dVar1 = *(double *)(arg1 + 0x10);
    if (dVar1 == 0.00000000) {
code_r0x080024eb:
        *arg2_00 = 0.00000000;
    } else {
        if (*(uint32_t *)arg1 < 6) {
    // switch table (6 cases) at 0x800ea1c
            switch(*(uint32_t *)arg1) {
            case 0:
                dVar1 = (double)func_0x080921db(dVar1, 0, 2, arg4);
                *arg2_00 = dVar1 * *(double *)0x80927bb;
                break;
            case 1:
                dVar1 = (double)func_0x080921db(dVar1, 0, 6, arg4);
                *arg2_00 = dVar1 * *(double *)0x809325b;
                break;
            case 2:
                *arg2_00 = dVar1 * (double)(*(int32_t *)0x8092257 - _reloc.plot_bounds);
                break;
            case 3:
                *arg2_00 = dVar1 * (double)(uint64_t)(*(int32_t *)(_reloc.term + 0x10) - 1);
                break;
            case 4:
                *arg2_00 = dVar1 * (double)(uint64_t)*(uint32_t *)(_reloc.term + 0x1c);
                break;
            case 5:
                goto code_r0x080024eb;
            }
        }
    }
    if (extraout_RDX == (double *)0x0) {
        return;
    }
    dVar1 = *(double *)(arg1 + 0x18);
    if (dVar1 == 0.00000000) {
code_r0x08002505:
        *extraout_RDX = 0.00000000;
    } else {
        if (5 < *(uint32_t *)(arg1 + 4)) {
            return;
        }
    // switch table (6 cases) at 0x800ea04
        switch(*(uint32_t *)(arg1 + 4)) {
        case 0:
            dVar1 = (double)func_0x080921db(dVar1, 0, 1, arg4);
            *extraout_RDX = dVar1 * _reloc.atan2;
            break;
        case 1:
            dVar1 = (double)func_0x080921db(dVar1, 0, 5, arg4);
            *extraout_RDX = dVar1 * *(double *)0x8092fb3;
            break;
        case 2:
            *extraout_RDX = dVar1 * (double)(*(int32_t *)0x809225f - _reloc.closepath);
            break;
        case 3:
            *extraout_RDX = dVar1 * (double)(uint64_t)(*(int32_t *)(_reloc.term + 0x14) - 1);
            break;
        case 4:
            *extraout_RDX = dVar1 * (double)(uint64_t)*(uint32_t *)(_reloc.term + 0x18);
            break;
        case 5:
            goto code_r0x08002505;
        }
    }
    return;
}




void sym.free_histlist(uint32_t arg1)
{
    undefined4 in_RDI;
    code *pcVar1;
    
    pcVar1 = (code *)CONCAT44(in_RDI, arg1);
    if (pcVar1 != (code *)0x0) {
        if (pcVar1 != reloc.histogram_opts) {
            func_0x080921db(*(undefined8 *)(pcVar1 + 0x80));
            func_0x080921db(*(undefined8 *)(pcVar1 + 0x88));
        }
        if (*(int64_t *)(pcVar1 + 0x30) != 0) {
            func_0x080921db();
            func_0x080921db(*(undefined8 *)(pcVar1 + 0x30));
            *(undefined8 *)(pcVar1 + 0x30) = 0;
        }
        return;
    }
    return;
}






ode output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/graphics.o @ 0x8003930 */
#include <stdint.h>
 
void attach_title_to_plot (uint32_t arg1, int64_t arg2, int64_t arg4) {
    int64_t var_30h_2;
    int64_t var_68h_2;
    uint32_t var_8h_2;
    int64_t var_ch;
    int64_t var_10h_2;
    int64_t var_18h_2;
    int64_t var_20h_2;
    int64_t var_28h_2;
    int64_t var_30h_3;
    int64_t var_38h_2;
    int64_t var_40h;
    int64_t var_48h;
    int64_t var_50h_2;
    int64_t var_60h_2;
    int64_t var_70h;
    int64_t var_80h;
    int64_t var_90h_2;
    int64_t var_a0h_2;
    int64_t var_b0h_2;
    int64_t var_b8h;
    int64_t var_10h;
    int64_t var_18h;
    int64_t var_20h;
    int64_t var_28h;
    int64_t var_30h;
    int64_t var_38h;
    int64_t var_40h_2;
    int64_t var_48h_2;
    uint32_t var_50h;
    int64_t var_54h;
    int64_t var_58h;
    int64_t var_60h;
    int64_t var_68h;
    int64_t var_7ch;
    int64_t var_80h_2;
    int64_t var_84h;
    int64_t var_88h;
    int64_t var_90h;
    int64_t var_98h;
    int64_t var_a0h;
    int64_t var_a8h;
    int64_t var_b0h;
    int64_t var_c0h;
    int64_t var_c8h;
    int64_t var_d0h;
    int64_t var_e0h;
    int64_t var_44ch;
    int64_t var_680h;
    int64_t var_688h;
    int64_t var_c28h;
    int64_t var_10h_3;
    int64_t var_4h;
    int64_t var_8h;
    rdi = arg1;
    rsi = arg2;
    rcx = arg4;
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 8)) = rax;
    eax = 0;
    eax = *((rdi + 0xc));
    edx = rax - 4;
    if (edx <= 1) {
        goto label_36;
    }
    eax -= 2;
    r12 = rsi;
    if (eax <= 1) {
        goto label_37;
    }
    rsi = *((rdi + 0x1e8));
    edx = *((rdi + 0x1c8));
    edi = 0;
label_0:
    rax = *((rbp + 0x20));
    edx--;
    xmm0 = *((rax + 0x10));
    __asm ("comisd xmm0, xmmword [loc..LC1]");
    if (edx <= 0) {
        goto label_38;
    }
    rax = (int64_t) edx;
    rax <<= 6;
    rax += rsi;
    if (edx > 0) {
        goto label_39;
    }
    goto label_40;
    do {
        rax -= 0x40;
        edx--;
        if (edx == 0) {
            goto label_3;
        }
label_39:
        r9d = *(rax);
        rbx = rax;
    } while (r9d != 0);
label_6:
    xmm0 = *((rbx + 8));
    if (dil == 0) {
        goto label_41;
    }
label_1:
    xmm2 = *((rbx + 0x18));
    xmm1 = *((rbx + 0x10));
    rsi = rsp + 4;
    rdi = rsp;
    eval_link_function ();
label_2:
    eax = *((r12 + 0xe8));
    if (eax != 7) {
        if (eax != 0) {
            goto label_42;
        }
        rax = *(reloc.term);
        edi = 0xfffffffe;
        uint64_t (*rax + 0x68)() ();
    }
label_8:
    rdx = *((rbp + 0x18));
    if (*((rbp + 0x29)) != 0) {
        rax = *(reloc.term);
        if ((*((rax + 0xa9)) & 0x40) != 0) {
            goto label_43;
        }
    }
label_7:
    rax = *((rbp + 0x20));
    r9d = 0;
    r8d = 0;
    __asm ("cvttsd2si rcx, qword [rax + 0x18]");
    esi = *((rsp + 0x14));
    edi = *((rsp + 0x10));
    eval_link_function (*((r12 + 0xe0)));
    do {
label_36:
        rax = *((rsp + 8));
        rax ^= *(fs:0x28);
        if ((*((rax + 0xa9)) & 0x40) != 0) {
            goto label_44;
        }
        return;
label_37:
        rax = *((rdi + 0x1b0));
        edi = 1;
        rsi = *((rax + 0x10));
        edx = *((rax + 0xc));
        goto label_0;
label_4:
        rcx = (int64_t) ecx;
        rcx <<= 6;
        rsi += rcx;
label_3:
        ecx = *(rsi);
    } while (ecx != 0);
    rbx = rsi;
    xmm0 = *((rbx + 8));
    if (dil != 0) {
        goto label_1;
    }
label_41:
    eax = eval_link_function ();
    xmm0 = *((rbx + 0x10));
    eax = eval_link_function (eax);
    *((rsp + 4)) = eax;
    goto label_2;
label_38:
    rax = rsi;
    ecx = 0;
    if (edx > 0) {
        goto label_45;
    }
    goto label_3;
label_5:
    ecx++;
    rax += 0x40;
    if (ecx == edx) {
        goto label_4;
    }
label_45:
    r8d = *(rax);
    rbx = rax;
    if (r8d != 0) {
        goto label_5;
    }
    goto label_6;
label_43:
    esi = *((rbp + 0xc));
    rdi = rdx;
    rax = eval_link_function ();
    rdx = rax;
    goto label_7;
label_42:
    rdi = r12 + 0xe8;
    rax = eval_link_function ();
    goto label_8;
label_40:
    rsi = rax;
    goto label_3;
label_44:
    eval_link_function ();
    __asm ("endbr64");
    r15 = rsi;
    ebx = ecx;
    xmm0 = *(loc..LC7);
    __asm ("mulsd xmm0, qword [rsi + 0x58]");
    *((rsp + 0x50)) = edi;
    r13 = rsp + 0x68;
    r12 = rsp + 0x60;
    *((rsp + 0x30)) = rsi;
    rdi = r13;
    rsi = r12;
    *((rsp + 0x54)) = edx;
    rax = *(fs:0x28);
    *((rsp + 0xc28)) = rax;
    eax = 0;
    eval_link_function (rbx, rbp, r12, r13, r14);
    rax = *((r15 + 0x50));
    rdx = *(reloc.term);
    xmm2 = 0;
    xmm1 = 0;
    __asm ("movdqu xmm6, xmmword [r15 + 0x30]");
    xmm0 = *(loc..LC8);
    *((rsp + 0xd0)) = rax;
    eax = *((rdx + 0x20));
    xmm4 = *((r15 + 0x40));
    *((rsp + 0xb0)) = xmm6;
    __asm ("movdqu xmm6, xmmword [r15 + 0x40]");
    __asm ("cvtsi2sd xmm2, rax");
    eax = *((rdx + 0x24));
    xmm3 = *((rsp + 0x60));
    __asm ("mulsd xmm4, xmm0");
    xmm5 = *((rsp + 0x68));
    *(rsp) = xmm6;
    __asm ("cvtsi2sd xmm1, rax");
    __asm ("mulsd xmm0, qword [r15 + 0x48]");
    *((rsp + 0xc0)) = xmm6;
    __asm ("divsd xmm2, xmm1");
    *((rsp + 0x38)) = xmm2;
    if (bl != 0) {
        goto label_46;
    }
    xmm1 = *((r15 + 0x18));
    *((rsp + 0x88)) = xmm1;
    xmm1 = *((r15 + 0x20));
    *((rsp + 0x90)) = xmm1;
label_12:
    __asm ("movapd xmm6, xmm3");
    __asm ("movapd xmm7, xmm5");
    xmm2 = 0;
    __asm ("mulsd xmm3, xmm0");
    rax = rsp + 0xe0;
    rbx = rsp + 0x44c;
    __asm ("mulsd xmm7, xmm0");
    *((rsp + 0x58)) = rax;
    r14 = rax;
    xmm0 = *(loc..LC9);
    __asm ("mulsd xmm6, xmm4");
    r15 = rsp + 0x84;
    __asm ("mulsd xmm5, xmm4");
    *((rsp + 0x28)) = xmm3;
    __asm ("movapd xmm3, xmm2");
    *((rsp + 0x18)) = xmm7;
    *((rsp + 0x10)) = xmm6;
    *((rsp + 0x20)) = xmm5;
    while (bpl == 0) {
        *((rsp + 0x98)) = xmm1;
        __asm ("addsd xmm1, qword [rsp + 0x88]");
        *((rsp + 0xa0)) = xmm0;
        __asm ("mulsd xmm0, qword [rsp + 0x38]");
        __asm ("addsd xmm0, qword [rsp + 0x90]");
        __asm ("cvttsd2si edx, xmm1");
        *(r14) = edx;
        __asm ("cvttsd2si edx, xmm0");
label_9:
        *((r14 + 4)) = edx;
        r14 += 0xc;
        __asm ("addsd xmm3, qword [loc..LC32]");
        if (rbx == r14) {
            goto label_47;
        }
        __asm ("movapd xmm0, xmm3");
        rsi = r12;
        rdi = r13;
        *(rsp) = xmm3;
        eval_link_function ();
        xmm0 = *((rsp + 0x60));
        xmm2 = *((rsp + 0x68));
        xmm3 = *(rsp);
        xmm1 = *((rsp + 0x10));
        xmm4 = *((rsp + 0x18));
        __asm ("mulsd xmm1, xmm0");
        __asm ("mulsd xmm4, xmm2");
        __asm ("mulsd xmm0, qword [rsp + 0x20]");
        __asm ("mulsd xmm2, qword [rsp + 0x28]");
        __asm ("subsd xmm1, xmm4");
        __asm ("addsd xmm0, xmm2");
        *((rsp + 0xc0)) = xmm1;
        *((rsp + 0xc8)) = xmm0;
    }
    rax = *((rsp + 0x30));
    edx = *(rax);
    if (*((rsp + 0x50)) == 2) {
        goto label_48;
    }
    if (edx == 1) {
        goto label_49;
    }
    if (edx == 2) {
        goto label_50;
    }
    if (edx == 0) {
        goto label_51;
    }
    do {
        xmm0 = *((rsp + 0x88));
        __asm ("addsd xmm0, qword [rsp + 0x98]");
        __asm ("cvttsd2si edx, xmm0");
        xmm0 = *((rsp + 0xa0));
        *(r14) = edx;
label_10:
        __asm ("addsd xmm0, qword [rsp + 0x90]");
        __asm ("cvttsd2si edx, xmm0");
        goto label_9;
label_48:
        if (edx == 1) {
            goto label_52;
        }
        if (edx == 2) {
            goto label_53;
        }
    } while (edx != 0);
    rdx = rsp + 0xa0;
    rsi = rsp + 0x98;
    *(rsp) = xmm3;
    rdi = rsp + 0xb0;
    rcx = "ellipse";
    eval_link_function ();
    xmm3 = *(rsp);
    xmm1 = *((rsp + 0x98));
    xmm0 = *((rsp + 0xa0));
    do {
label_11:
        __asm ("addsd xmm1, qword [rsp + 0x88]");
        __asm ("cvttsd2si edx, xmm1");
        *(r14) = edx;
        goto label_10;
label_51:
        rsi = rsp + 0x80;
        rdi = rsp + 0xb0;
        rdx = r15;
        *(rsp) = xmm3;
        rcx = "ellipse";
        eval_link_function ();
        xmm1 = 0;
        xmm0 = 0;
        xmm3 = *(rsp);
        __asm ("cvtsi2sd xmm1, dword [rsp + 0x80]");
        __asm ("cvtsi2sd xmm0, dword [rsp + 0x84]");
        *((rsp + 0x98)) = xmm1;
        *((rsp + 0xa0)) = xmm0;
    } while (1);
label_50:
    rcx = "ellipse";
    r8 = rsp + 0x80;
    rdx = r15;
    *((rsp + 0x48)) = xmm3;
    rdi = rsp + 0xb0;
    rsi = r8;
    *((rsp + 0x40)) = r8;
    eval_link_function (rdi);
    xmm0 = 0;
    rdi = *(rsp);
    rsi = r15;
    __asm ("cvtsi2sd xmm0, dword [rsp + 0x84]");
    r8 = *((rsp + 0x40));
    rcx = "ellipse";
    rdx = r8;
    *((rsp + 0xa0)) = xmm0;
    xmm0 = *((rsp + 0xc0));
    *((rsp + 0xc8)) = xmm0;
    eval_link_function ();
    xmm1 = 0;
    xmm3 = *((rsp + 0x48));
    xmm0 = *((rsp + 0xa0));
    __asm ("cvtsi2sd xmm1, dword [rsp + 0x80]");
    *((rsp + 0x98)) = xmm1;
    goto label_11;
label_49:
    rcx = "ellipse";
    r8 = rsp + 0x80;
    rdx = r15;
    *((rsp + 0x48)) = xmm3;
    rdi = rsp + 0xb0;
    rsi = r8;
    *((rsp + 0x40)) = r8;
    eval_link_function (rdi);
    xmm0 = 0;
    rdi = *(rsp);
    rsi = r15;
    __asm ("cvtsi2sd xmm0, dword [rsp + 0x80]");
    r8 = *((rsp + 0x40));
    rcx = "ellipse";
    rdx = r8;
    *((rsp + 0x98)) = xmm0;
    xmm0 = *((rsp + 0xc8));
    *((rsp + 0xc0)) = xmm0;
    eval_link_function ();
    xmm0 = 0;
    xmm3 = *((rsp + 0x48));
    xmm1 = *((rsp + 0x98));
    __asm ("cvtsi2sd xmm0, dword [rsp + 0x84]");
    *((rsp + 0xa0)) = xmm0;
    goto label_11;
label_53:
    rsi = rsp + 0xa8;
    rdi = rsp + 0xb0;
    *((rsp + 0x48)) = xmm3;
    rdx = rsp + 0xa0;
    rcx = "ellipse";
    *((rsp + 0x40)) = rsi;
    eval_link_function (rdi);
    rsi = *((rsp + 0x40));
    rdi = *(rsp);
    rdx = rsp + 0x98;
    xmm0 = *((rsp + 0xc0));
    rcx = "ellipse";
    *((rsp + 0xc8)) = xmm0;
    eval_link_function ();
    xmm3 = *((rsp + 0x48));
    xmm1 = *((rsp + 0x98));
    xmm0 = *((rsp + 0xa0));
    goto label_11;
label_52:
    rdi = rsp + 0xb0;
    rsi = rsp + 0x98;
    edx = 0;
    *((rsp + 0x40)) = xmm3;
    rcx = "ellipse";
    eval_link_function (rdi);
    rdi = *(rsp);
    rcx = "ellipse";
    edx = 0;
    xmm0 = *((rsp + 0xc8));
    rsi = rsp + 0xa0;
    *((rsp + 0xc0)) = xmm0;
    eval_link_function ();
    xmm3 = *((rsp + 0x40));
    xmm1 = *((rsp + 0x98));
    xmm0 = *((rsp + 0xa0));
    goto label_11;
label_47:
    ebx = *((rsp + 0x54));
    if (ebx == 0) {
        goto label_54;
    }
    rdi = *((rsp + 0x58));
    rcx = rsp + 0x7c;
    edx = 0x48;
    rbp = rsp + 0x680;
    rsi = rbp;
    eval_link_function ();
    edi = *((rsp + 0x7c));
    *((rsp + 0x688)) = ebx;
    if (edi <= 1) {
        goto label_55;
    }
    rax = *(reloc.term);
    rax = *((rax + 0xe8));
    if (rax == 0) {
        goto label_55;
    }
    rsi = rbp;
    void (*rax)() ();
    do {
label_55:
        rax = *((rsp + 0xc28));
        rax ^= *(fs:0x28);
        if (rax != 0) {
            goto label_56;
        }
        return;
label_46:
        rax = *((rsp + 0x30));
        *((rsp + 0x20)) = xmm0;
        rdx = rsp + 0x90;
        *((rsp + 0x18)) = xmm4;
        rsi = rsp + 0x88;
        rdi = rax + 8;
        *((rsp + 0x10)) = xmm5;
        *(rsp) = xmm3;
        if (*((rsp + 0x50)) == 2) {
            goto label_57;
        }
        rcx = "ellipse";
        eval_link_function ();
        xmm0 = *((rsp + 0x20));
        xmm4 = *((rsp + 0x18));
        xmm5 = *((rsp + 0x10));
        xmm3 = *(rsp);
        goto label_12;
label_54:
        rsi = *((rsp + 0x58));
        edi = 0x49;
        eval_link_function ();
    } while (1);
label_57:
    map_position_double_isra_0 ();
    xmm3 = *(rsp);
    xmm5 = *((rsp + 0x10));
    xmm4 = *((rsp + 0x18));
    xmm0 = *((rsp + 0x20));
    goto label_12;
label_56:
    rax = eval_link_function ();
    __asm ("endbr64");
    *((rsp + 8)) = edx;
    rax = *(fs:0x28);
    *((rsp + 0xb8)) = rax;
    eax = 0;
    if (rdi == 0) {
        goto label_15;
    }
    r15 = rdi;
    ebx = esi;
    do {
label_14:
        eax = *((r15 + 0xc));
        dl = (eax != 4) ? 1 : 0;
        al = (eax != ebx) ? 1 : 0;
        dl &= al;
        r12d = edx;
        if (dl == 0) {
            __asm ("movdqu xmm6, xmmword [r15 + 0x38]");
            __asm ("movdqu xmm7, xmmword [r15 + 0x48]");
            __asm ("movdqu xmm5, xmmword [r15 + 0x58]");
            __asm ("movdqu xmm4, xmmword [r15 + 0x68]");
            __asm ("movdqu xmm3, xmmword [r15 + 0x78]");
            *((rsp + 0x50)) = xmm6;
            __asm ("movdqu xmm2, xmmword [r15 + 0x88]");
            rax = *((r15 + 0x98));
            *((rsp + 0x60)) = xmm7;
            *((rsp + 0x70)) = xmm5;
            *((rsp + 0xb0)) = rax;
            *((rsp + 0x80)) = xmm4;
            *((rsp + 0x90)) = xmm3;
            *((rsp + 0xa0)) = xmm2;
            if (*((r15 + 0x18)) == 3) {
                goto label_58;
            }
label_16:
            rbp = r15 + 0x18;
label_17:
            rdi = rbp;
            eax = eval_link_function ();
            rdi = rsp + 0x50;
            r13d = eax;
            eval_link_function ();
            eax = *((r15 + 0x10));
            if (eax == 3) {
                goto label_59;
            }
            if (eax > 3) {
                goto label_60;
            }
            if (eax == 1) {
                goto label_61;
            }
            if (eax != 2) {
                goto label_13;
            }
            r12 = *(reloc.clip_area);
            if (*((rsp + 8)) == 2) {
                goto label_62;
            }
            if (*(reloc.splot_map) != 0) {
                goto label_63;
            }
            eax = *((r15 + 0xa8));
            if (eax == 3) {
                goto label_64;
            }
            if (eax == 0) {
                goto label_65;
            }
            if (eax == 5) {
                goto label_65;
            }
        }
label_13:
        r15 = *(r15);
    } while (r15 != 0);
label_15:
    rax = *((rsp + 0xb8));
    rax ^= *(fs:0x28);
    if (r15 != 0) {
        goto label_66;
    }
    return;
label_60:
    if (eax != 4) {
        goto label_13;
    }
    if (*((r15 + 0xc)) != 4) {
        goto label_67;
    }
    r12d = ebx;
    if (ebx > 1) {
        goto label_13;
    }
label_18:
    edi = *((rsp + 8));
    ecx = r12d;
    edx = r13d;
    rsi = r15;
    do_polygon ();
    if (*((r15 + 0xc)) == 8) {
        goto label_13;
    }
    rdi = rbp;
    al = eval_link_function ();
    if (al == 0) {
        goto label_13;
    }
    edi = *((rsp + 8));
    rsi = r15;
    ecx = r12d;
    edx = 0;
    do_polygon ();
    r15 = *(r15);
    if (r15 != 0) {
        goto label_14;
    }
    goto label_15;
label_58:
    rbp = reloc_prefer_line_styles;
    if (*((r15 + 0x10)) != 1) {
        goto label_16;
    }
    goto label_17;
label_59:
    r12 = *(reloc.clip_area);
    r14 = r15 + 0xa0;
    if (*((r15 + 0xa8)) != 3) {
        if (*((r15 + 0xac)) == 3) {
            goto label_68;
        }
        if (*((r15 + 0x14)) != 1) {
            goto label_69;
        }
    }
label_68:
    rax = reloc_canvas;
    *(reloc.clip_area) = rax;
label_69:
    if (*((rsp + 8)) == 2) {
        goto label_70;
    }
    if (*(reloc.splot_map) == 0) {
        goto label_13;
    }
    edi = 3;
    ecx = 1;
    edx = r13d;
    rsi = r14;
    eval_link_function ();
    rdi = rbp;
    al = eval_link_function ();
    if (al != 0) {
        goto label_71;
    }
label_20:
    r15 = *(r15);
    *(reloc.clip_area) = r12;
    if (r15 != 0) {
        goto label_14;
    }
    goto label_15;
label_61:
    if (*((r15 + 0xa0)) == 1) {
        goto label_72;
    }
    if (*((rsp + 8)) == 2) {
        goto label_73;
    }
    if (*((r15 + 0xf8)) == 3) {
        goto label_74;
    }
label_23:
    if (*(reloc.splot_map) == 0) {
        goto label_13;
    }
    rdx = rsp + 0x28;
    rsi = rsp + 0x20;
    rdi = r15 + 0xf8;
    rcx = "rect";
    eval_link_function ();
    rdx = rsp + 0x38;
    rsi = rsp + 0x30;
    rdi = r15 + 0x120;
    rcx = "rect";
    eval_link_function ();
label_24:
    xmm2 = *((rsp + 0x20));
    xmm1 = *((rsp + 0x30));
    __asm ("comisd xmm2, xmm1");
    if (*(reloc.splot_map) > 0) {
        rax = xmm2;
        *((rsp + 0x20)) = xmm1;
        *((rsp + 0x30)) = xmm2;
        __asm ("movapd xmm2, xmm1");
        xmm1 = rax;
    }
    xmm3 = *((rsp + 0x28));
    xmm0 = *((rsp + 0x38));
    __asm ("comisd xmm3, xmm0");
    if (*(reloc.splot_map) > 0) {
        rax = xmm3;
        *((rsp + 0x28)) = xmm0;
        *((rsp + 0x38)) = xmm3;
        __asm ("movapd xmm3, xmm0");
        xmm0 = rax;
    }
    edx = *((r15 + 0x14));
    rax = *(reloc.clip_area);
    if (edx != 0) {
        goto label_75;
    }
    edx = 0;
    if (*((r15 + 0xf8)) != 3) {
        dl = (*((r15 + 0x120)) != 3) ? 1 : 0;
    }
    if (*((r15 + 0xfc)) != 3) {
        r12b = (*((r15 + 0x124)) != 3) ? 1 : 0;
    }
    if (rax == 0) {
        goto label_76;
    }
label_19:
    if (dl == 0) {
        goto label_77;
    }
    rcx = reloc_plot_bounds;
    edx = *(0x08092257);
    ecx = *(rcx);
    if (ecx >= edx) {
        goto label_78;
    }
    xmm4 = 0;
    __asm ("cvtsi2sd xmm4, edx");
    __asm ("comisd xmm2, xmm4");
    if (ecx <= edx) {
        goto label_79;
    }
    *((rsp + 0x20)) = xmm4;
    r14d = edx;
    __asm ("movapd xmm2, xmm4");
label_31:
    __asm ("comisd xmm1, xmm4");
    if (ecx > edx) {
        goto label_80;
    }
    xmm4 = 0;
    __asm ("cvtsi2sd xmm4, ecx");
    __asm ("comisd xmm4, xmm1");
    if (ecx > edx) {
        goto label_80;
    }
label_25:
    if (r12b == 0) {
        goto label_81;
    }
    edx = *(reloc.closepath);
    ecx = *(0x0809225f);
    if (edx >= ecx) {
        goto label_82;
    }
    xmm4 = 0;
    __asm ("cvtsi2sd xmm4, ecx");
    __asm ("comisd xmm3, xmm4");
    if (edx <= ecx) {
        goto label_83;
    }
    *((rsp + 0xc)) = ecx;
    __asm ("movapd xmm3, xmm4");
    *((rsp + 0x28)) = xmm4;
label_32:
    __asm ("comisd xmm0, xmm4");
    if (edx <= ecx) {
        xmm4 = 0;
        __asm ("cvtsi2sd xmm4, edx");
        __asm ("comisd xmm4, xmm0");
        if (edx <= ecx) {
            goto label_30;
        }
    }
label_29:
    *((rsp + 0x38)) = xmm4;
    __asm ("movapd xmm0, xmm4");
    goto label_30;
label_67:
    r12d = 0xffffffff;
    goto label_18;
label_72:
    if (*((rsp + 8)) == 2) {
        goto label_84;
    }
    if (*((r15 + 0xa8)) == 3) {
        goto label_84;
    }
    if (*(reloc.splot_map) == 0) {
        goto label_13;
    }
    rdx = rsp + 0x28;
    rsi = rsp + 0x20;
    rdi = r15 + 0xa8;
    rcx = "rect";
    eval_link_function ();
    rdx = rsp + 0x40;
    rsi = rsp + 0x38;
    rdi = r15 + 0xd0;
    rcx = "rect";
    eval_link_function ();
    eax = *((rsp + 0x38));
    edx = *((rsp + 0x38));
    xmm1 = 0;
    xmm0 = 0;
    eax >>= 0x1f;
    edx ^= eax;
    edx -= eax;
    eax = *((rsp + 0x40));
    __asm ("cvtsi2sd xmm1, edx");
    edx = *((rsp + 0x40));
    eax >>= 0x1f;
    edx ^= eax;
    edx -= eax;
    __asm ("cvtsi2sd xmm0, edx");
    *((rsp + 0x48)) = xmm0;
label_27:
    xmm3 = *(loc..LC8);
    xmm4 = *(loc..LC8);
    xmm2 = *((rsp + 0x20));
    ecx = *((r15 + 0x14));
    __asm ("mulsd xmm3, xmm1");
    rax = *(reloc.clip_area);
    __asm ("mulsd xmm4, xmm0");
    __asm ("subsd xmm2, xmm3");
    xmm3 = *((rsp + 0x28));
    __asm ("subsd xmm3, xmm4");
    __asm ("addsd xmm1, xmm2");
    *((rsp + 0x20)) = xmm2;
    __asm ("addsd xmm0, xmm3");
    *((rsp + 0x28)) = xmm3;
    *((rsp + 0x30)) = xmm1;
    *((rsp + 0x38)) = xmm0;
    if (ecx != 0) {
        goto label_75;
    }
    dl = (*((r15 + 0xd0)) <= 1) ? 1 : 0;
    r12b = (*((r15 + 0xd4)) <= 1) ? 1 : 0;
    if (rax != 0) {
        goto label_19;
    }
label_76:
    __asm ("cvttsd2si eax, xmm3");
    __asm ("cvttsd2si r14d, xmm2");
    *((rsp + 0xc)) = eax;
    goto label_85;
label_75:
    __asm ("cvttsd2si ecx, xmm3");
    __asm ("cvttsd2si r14d, xmm2");
    *((rsp + 0xc)) = ecx;
    if (rax != 0) {
label_30:
        *(reloc.clip_area) = rax;
    }
label_85:
    __asm ("subsd xmm1, xmm2");
    __asm ("subsd xmm0, xmm3");
    __asm ("cvttsd2si r12, xmm1");
    __asm ("cvttsd2si r13, xmm0");
    if (r12d == 0) {
        goto label_13;
    }
    if (r13d == 0) {
        goto label_13;
    }
    rdi = rbp;
    eax = eval_link_function ();
    edi = eax;
    if (eax != 0) {
        rax = *(reloc.term);
        rax = *((rax + 0xc0));
        if (rax == 0) {
            goto label_86;
        }
        edx = *((rsp + 0xc));
        r8d = r13d;
        ecx = r12d;
        esi = r14d;
        void (*rax)() ();
    }
label_86:
    rdi = rbp;
    al = eval_link_function ();
    if (al == 0) {
        goto label_13;
    }
    eval_link_function ();
    ebp = *((rsp + 0xc));
    edi = r14d;
    r12d += r14d;
    rax = *(reloc.term);
    esi = ebp;
    r13d += ebp;
    uint64_t (*rax + 0x58)() ();
    rax = *(reloc.term);
    esi = r13d;
    edi = r14d;
    uint64_t (*rax + 0x60)() ();
    rax = *(reloc.term);
    esi = r13d;
    edi = r12d;
    uint64_t (*rax + 0x60)() ();
    rax = *(reloc.term);
    esi = ebp;
    edi = r12d;
    uint64_t (*rax + 0x60)() ();
    rax = *(reloc.term);
    esi = ebp;
    edi = r14d;
    uint64_t (*rax + 0x60)() ();
    eval_link_function ();
    r15 = *(r15);
    if (r15 != 0) {
        goto label_14;
    }
    goto label_15;
label_63:
    rdx = rsp + 0x18;
    rsi = rsp + 0x10;
    rdi = r15 + 0xa8;
    rcx = "object";
    eval_link_function ();
    rdx = rsp + 0x40;
    rsi = rsp + 0x38;
    rdi = r15 + 0xd0;
    rcx = "object";
    eval_link_function ();
    xmm0 = 0;
    __asm ("cvtsi2sd xmm0, dword [rsp + 0x38]");
    *((rsp + 0x48)) = xmm0;
label_22:
    if (*((r15 + 0xa8)) == 3) {
        goto label_87;
    }
    if (*((r15 + 0xac)) == 3) {
        goto label_87;
    }
    if (*((r15 + 0x14)) == 1) {
        goto label_87;
    }
label_21:
    __asm ("cvttsd2si edi, qword [rsp + 0x10]");
    ecx = 0;
    edx = r13d;
    xmm2 = *((r15 + 0x100));
    xmm1 = *((r15 + 0xf8));
    __asm ("cvttsd2si esi, qword [rsp + 0x18]");
    eval_link_function ();
    rdi = rbp;
    al = eval_link_function ();
    if (al == 0) {
        goto label_20;
    }
    __asm ("cvttsd2si esi, qword [rsp + 0x18]");
    xmm0 = *((rsp + 0x48));
    edx = 0;
    __asm ("cvttsd2si edi, qword [rsp + 0x10]");
    ecx = *((r15 + 0x108));
    xmm2 = *((r15 + 0x100));
    xmm1 = *((r15 + 0xf8));
    eval_link_function ();
    goto label_20;
label_87:
    rax = reloc_canvas;
    *(reloc.clip_area) = rax;
    goto label_21;
label_62:
    rdx = rsp + 0x18;
    rsi = rsp + 0x10;
    rdi = r15 + 0xa8;
    map_position_double_isra_0 ();
label_26:
    rsi = rsp + 0x48;
    rdi = r15 + 0xd0;
    edx = 0;
    rcx = "object";
    eval_link_function ();
    xmm0 = *((rsp + 0x48));
    goto label_22;
label_70:
    edi = 2;
    ecx = 1;
    edx = r13d;
    rsi = r14;
    eval_link_function ();
    rdi = rbp;
    al = eval_link_function ();
    if (al == 0) {
        goto label_20;
    }
label_71:
    edi = *((rsp + 8));
    ecx = 1;
    edx = 0;
    rsi = r14;
    eval_link_function ();
    goto label_20;
label_74:
    if (*((r15 + 0x120)) != 3) {
        goto label_23;
    }
label_73:
    rdx = rsp + 0x28;
    rsi = rsp + 0x20;
    rdi = r15 + 0xf8;
    map_position_double_isra_0 ();
    rdx = rsp + 0x38;
    rsi = rsp + 0x30;
    rdi = r15 + 0x120;
    map_position_double_isra_0 ();
    goto label_24;
label_78:
    xmm4 = 0;
    __asm ("cvtsi2sd xmm4, ecx");
    __asm ("comisd xmm2, xmm4");
    if (*((r15 + 0x120)) <= 3) {
        goto label_88;
    }
    *((rsp + 0x20)) = xmm4;
    r14d = ecx;
    __asm ("movapd xmm2, xmm4");
label_33:
    __asm ("comisd xmm1, xmm4");
    if (*((r15 + 0x120)) > 3) {
        goto label_80;
    }
    xmm4 = 0;
    __asm ("cvtsi2sd xmm4, edx");
    __asm ("comisd xmm4, xmm1");
    if (*((r15 + 0x120)) <= 3) {
        goto label_25;
    }
label_80:
    *((rsp + 0x30)) = xmm4;
    __asm ("movapd xmm1, xmm4");
    goto label_25;
label_64:
    rdx = rsp + 0x18;
    rsi = rsp + 0x10;
    rdi = r15 + 0xa8;
    map_position_double_isra_0 ();
label_28:
    esi = *((r15 + 0xd0));
    if (esi != 0) {
        goto label_26;
    }
    xmm0 = *((r15 + 0xe0));
    __asm ("mulsd xmm0, qword [reloc.radius_scaler]");
    *((rsp + 0x48)) = xmm0;
    goto label_22;
label_84:
    rdx = rsp + 0x28;
    rsi = rsp + 0x20;
    rdi = r15 + 0xa8;
    map_position_double_isra_0 ();
    rdx = rsp + 0x48;
    rsi = rsp + 0x40;
    rdi = r15 + 0xd0;
    rcx = "rect";
    eval_link_function ();
    xmm1 = *((rsp + 0x40));
    xmm0 = *((rsp + 0x48));
    goto label_27;
label_65:
    rdx = rsp + 0x18;
    rsi = rsp + 0x10;
    rdi = r15 + 0xa8;
    rcx = "object";
    eval_link_function ();
    goto label_28;
label_82:
    xmm4 = 0;
    __asm ("cvtsi2sd xmm4, edx");
    __asm ("comisd xmm3, xmm4");
    if (esi <= 0) {
        goto label_89;
    }
    *((rsp + 0xc)) = edx;
    __asm ("movapd xmm3, xmm4");
    *((rsp + 0x28)) = xmm4;
label_34:
    __asm ("comisd xmm0, xmm4");
    if (esi > 0) {
        goto label_29;
    }
    xmm4 = 0;
    __asm ("cvtsi2sd xmm4, ecx");
    __asm ("comisd xmm4, xmm0");
    if (esi <= 0) {
        goto label_30;
    }
    goto label_29;
label_79:
    xmm5 = 0;
    __asm ("cvtsi2sd xmm5, ecx");
    __asm ("comisd xmm5, xmm2");
    if (esi > 0) {
        *((rsp + 0x20)) = xmm5;
        r14d = ecx;
        __asm ("movapd xmm2, xmm5");
        goto label_31;
label_83:
        xmm5 = 0;
        __asm ("cvtsi2sd xmm5, edx");
        __asm ("comisd xmm5, xmm3");
        if (esi > 0) {
            *((rsp + 0xc)) = edx;
            __asm ("movapd xmm3, xmm5");
            *((rsp + 0x28)) = xmm5;
            goto label_32;
label_88:
            xmm5 = 0;
            __asm ("cvtsi2sd xmm5, edx");
            __asm ("comisd xmm5, xmm2");
            if (esi > 0) {
                *((rsp + 0x20)) = xmm5;
                r14d = edx;
                __asm ("movapd xmm2, xmm5");
                goto label_33;
label_89:
                xmm5 = 0;
                __asm ("cvtsi2sd xmm5, ecx");
                __asm ("comisd xmm5, xmm3");
                if (esi > 0) {
                    *((rsp + 0xc)) = ecx;
                    __asm ("movapd xmm3, xmm5");
                    *((rsp + 0x28)) = xmm5;
                    goto label_34;
                }
                __asm ("cvttsd2si esi, xmm3");
                *((rsp + 0xc)) = esi;
                goto label_34;
            }
            __asm ("cvttsd2si r14d, xmm2");
            goto label_33;
        }
        __asm ("cvttsd2si ecx, xmm3");
        *((rsp + 0xc)) = ecx;
        goto label_32;
    }
    __asm ("cvttsd2si r14d, xmm2");
    goto label_31;
label_77:
    __asm ("cvttsd2si r14d, xmm2");
    goto label_25;
label_81:
    __asm ("cvttsd2si ecx, xmm3");
    *((rsp + 0xc)) = ecx;
    goto label_30;
label_66:
    rax = eval_link_function ();
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x68)) = rax;
    eax = 0;
    if (*((rdi + 0x1e0)) == 0) {
        goto label_90;
    }
    xmm0 = 0;
    __asm ("comisd xmm0, xmmword [rdi + 0x68]");
    eax = *((rdi + 0x60));
    while (eax != 3) {
        if (eax == 6) {
            goto label_91;
        }
        eax = 0;
        if (*((rdi + 0x34)) == 0xfffffffa) {
            goto label_92;
        }
label_35:
        rdx = *((rsp + 0x68));
        rdx ^= *(fs:0x28);
        if (*((rdi + 0x34)) != 0xfffffffa) {
            goto label_93;
        }
        return;
    }
    __asm ("cvttsd2si rdi, qword [rsi]");
    eval_link_function ();
    eax = 1;
    goto label_35;
label_92:
    __asm ("cvttsd2si esi, qword [rsi]");
    rdi = rsp;
    if (*(reloc.prefer_line_styles) != 0) {
        goto label_94;
    }
    eval_link_function ();
    do {
        rdi = rsp + 0x30;
        eval_link_function ();
        eax = 1;
        goto label_35;
label_94:
        eax = eval_link_function ();
    } while (1);
label_90:
    eax = 0;
    goto label_35;
label_91:
    xmm0 = *(rsi);
    eval_link_function ();
    eval_link_function ();
    eax = 1;
    goto label_35;
label_93:
    rax = eval_link_function ();
}




 output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/graphics.o @ 0x8008c50 */
#include <stdint.h>
 
int64_t process_image (int64_t arg1) {
    uint32_t var_8h;
    uint32_t var_10h;
    int64_t var_18h;
    int64_t var_20h;
    uint32_t var_28h;
    int64_t var_30h;
    int64_t var_38h;
    int64_t var_40h;
    int64_t var_48h;
    int64_t var_50h;
    int64_t var_58h;
    int64_t var_60h;
    int64_t var_68h;
    int64_t var_70h;
    int64_t var_78h;
    int64_t var_80h;
    int64_t var_88h;
    int64_t var_90h;
    int64_t var_98h;
    uint32_t var_a0h;
    int64_t var_a8h;
    int64_t var_b0h;
    uint32_t var_b8h;
    uint32_t var_c0h;
    int64_t var_c8h;
    int64_t var_d0h;
    int64_t var_d8h;
    int64_t var_e0h;
    uint32_t var_ech;
    int64_t var_f0h;
    int64_t var_f8h;
    int64_t var_100h;
    int64_t var_108h;
    int64_t var_11ch;
    int64_t var_120h;
    int64_t var_128h;
    int64_t var_130h;
    int64_t var_138h;
    int64_t var_140h;
    int64_t var_148h;
    int64_t var_150h;
    int64_t var_158h;
    int64_t var_160h;
    int64_t var_164h;
    int64_t var_168h;
    int64_t var_16ch;
    int64_t var_170h;
    int64_t var_178h;
    int64_t var_1b0h;
    int64_t var_1b8h;
    int64_t var_1c0h;
    int64_t var_1c8h;
    int64_t var_1d0h;
    int64_t var_1d8h;
    int64_t var_1e0h;
    int64_t var_1e8h;
    int64_t var_1f0h;
    int64_t var_1f8h;
    int64_t var_200h;
    int64_t var_208h;
    int64_t var_210h;
    int64_t var_218h;
    rdi = arg1;
    __asm ("endbr64");
    rax = *(fs:0x28);
    *((rsp + 0x218)) = rax;
    eax = 0;
    eax = *((rdi + 0xc));
    *((rsp + 0x160)) = 0xffffffffffffffff;
    *((rsp + 0x168)) = 0xffffffffffffffff;
    if (eax == 4) {
        goto label_36;
    }
    eax -= 2;
    rbx = rdi;
    r8d = esi;
    if (eax <= 1) {
        goto label_37;
    }
    rax = *((rdi + 0x1e8));
    ecx = *((rdi + 0x1c8));
    *((rsp + 0x28)) = 0;
    r9d = *((rdi + 0x1cc));
    r13d = *((rdi + 0x1d0));
    *((rsp + 0xa8)) = rax;
    if (ecx <= 0) {
        goto label_38;
    }
label_0:
    if (ecx <= 3) {
        goto label_39;
    }
    eax = *((rbx + 0x160));
    ebp = *((rbx + 0x168));
    r14d = *((rbx + 0x16c));
    *((rsp + 8)) = eax;
    if (*((rsp + 0x28)) != 0) {
        goto label_40;
    }
    rdx = *((rsp + 0xa8));
    rax = (int64_t) ecx;
    rax <<= 6;
    xmm0 = *((rdx + 0x10));
    rax = rdx + rax - 0x40;
    xmm4 = *((rdx + 8));
    *((rsp + 0x138)) = xmm0;
    xmm0 = *((rax + 8));
    *((rsp + 0x130)) = xmm4;
    *((rsp + 0x140)) = xmm0;
    xmm0 = *((rax + 0x10));
    *((rsp + 0x148)) = xmm0;
    do {
        __asm ("ucomisd xmm4, xmm4");
        __asm ("jp 0x800aee7");
        xmm3 = *((rsp + 0x140));
        __asm ("ucomisd xmm3, xmm3");
        __asm ("jp 0x800aee7");
        xmm5 = *((rsp + 0x138));
        __asm ("ucomisd xmm5, xmm5");
        __asm ("jp 0x800aee7");
        xmm2 = *((rsp + 0x148));
        __asm ("ucomisd xmm2, xmm2");
        __asm ("jp 0x800aee7");
        *((rsp + 0xec)) = r14d;
        if (r14d == 0) {
            goto label_41;
        }
        r14d = rbp - 1;
        if (ebp == 0) {
            goto label_41;
        }
label_1:
        eax = *((rsp + 0xec));
        edx = ecx;
        esi = rcx - 1;
        *((rsp + 0x160)) = 0;
        edx -= ebp;
        *((rsp + 0x164)) = r14d;
        *((rsp + 0x16c)) = esi;
        eax--;
        *((rsp + 0x168)) = edx;
        if (r8d == 1) {
            goto label_42;
        }
        if (r8d == 2) {
            goto label_43;
        }
        rdi = *((rsp + 0xa8));
        rsi = (int64_t) ebp;
        rsi <<= 6;
        r8 = rdi + rsi - 0x40;
        xmm0 = *((r8 + 8));
        xmm1 = *((r8 + 0x10));
        if (*((rsp + 0x28)) != 0) {
            goto label_44;
        }
        *((rsp + 0x150)) = xmm0;
        *((rsp + 0x158)) = xmm1;
label_3:
        __asm ("movapd xmm7, xmm0");
        xmm6 = 0;
        __asm ("subsd xmm3, xmm0");
        xmm12 = *(loc..LC0);
        __asm ("subsd xmm7, xmm4");
        __asm ("subsd xmm2, xmm1");
        xmm0 = *(loc..LC50);
        __asm ("cvtsi2sd xmm6, r14d");
        __asm ("movapd xmm4, xmm7");
        __asm ("divsd xmm4, xmm6");
        __asm ("movapd xmm7, xmm4");
        *((rsp + 0x68)) = xmm4;
        __asm ("movapd xmm4, xmm1");
        __asm ("subsd xmm4, xmm5");
        xmm5 = 0;
        __asm ("andpd xmm7, xmm12");
        __asm ("cvtsi2sd xmm5, eax");
        __asm ("divsd xmm4, xmm6");
        __asm ("divsd xmm3, xmm5");
        *((rsp + 0x30)) = xmm4;
        __asm ("divsd xmm2, xmm5");
        __asm ("movapd xmm4, xmm3");
        *((rsp + 0x70)) = xmm3;
        __asm ("andpd xmm4, xmm12");
        __asm ("movapd xmm3, xmm4");
        __asm ("movapd xmm1, xmm4");
        __asm ("mulsd xmm3, xmm0");
        __asm ("comisd xmm3, xmm7");
        *((rsp + 0x38)) = xmm2;
        __asm ("movapd xmm2, xmm7");
        if (*((rsp + 0x28)) > 0) {
            goto label_45;
        }
        __asm ("movapd xmm3, xmm7");
        __asm ("mulsd xmm3, xmm0");
        __asm ("comisd xmm3, xmm4");
        if (*((rsp + 0x28)) > 0) {
            goto label_45;
        }
label_4:
        *((rsp + 0xb8)) = 0;
        r12d = 0;
label_5:
        esi = *((rsp + 8));
        if (esi == 0) {
            goto label_46;
        }
        ebx = *((rsp + 8));
        r9 = *(reloc.term);
        eax = rbx - 1;
        if (eax <= 1) {
            eax = *((r9 + 0xa8));
            if ((eax & 0x10000) != 0) {
                goto label_6;
            }
            if (ebx != 2) {
                goto label_23;
            }
            eax = 1;
            if ((ah & 2) != 0) {
                r12d = eax;
                goto label_23;
            }
        }
label_23:
        rsi = *(reloc.x_axis);
        rax = reloc_axis_array;
        rdi = rsi * 0x2a8;
        r8d = *((rax + rdi + 0x8c));
        rdi = *(reloc.y_axis);
        if (r8b == 0) {
            r8 = rdi * 0x2a8;
            r8d = *((rax + r8 + 0x8c));
            if (r8b != 0) {
                r8d = r12d;
                goto label_47;
            }
        }
label_47:
        r10 = rsi * 0x2a8;
        r10 += rax;
        r11d = *((r10 + 4));
        if ((r11b & 1) == 0) {
            goto label_48;
        }
        xmm3 = *((r10 + 0x10));
label_22:
        r10 = rsi * 0x2a8;
        r11d &= 2;
        if (r11d == 0) {
            goto label_49;
        }
        xmm4 = *((rax + r10 + 0x18));
label_21:
        r10 = rdi * 0x2a8;
        r10 += rax;
        r11d = *((r10 + 4));
        if ((r11b & 1) == 0) {
            goto label_50;
        }
        xmm7 = *((r10 + 0x10));
        *((rsp + 0x50)) = xmm7;
label_20:
        r10 = rdi * 0x2a8;
        r11d &= 2;
        if (r11d == 0) {
            goto label_51;
        }
        xmm7 = *((rax + r10 + 0x18));
        *((rsp + 0x48)) = xmm7;
label_19:
        if (*((rsp + 0x28)) == 0) {
            goto label_52;
        }
        rbx = *(reloc.z_axis);
        r10 = rbx * 0x2a8;
        r10 += rax;
        r11d = *((r10 + 4));
        if ((r11b & 1) != 0) {
            goto label_53;
        }
        xmm7 = *((r10 + 0x20));
        *((rsp + 0x20)) = xmm7;
label_25:
        rbx *= 0x2a8;
        r11d &= 2;
        if (r11d == 0) {
            goto label_54;
        }
        xmm7 = *((rax + rbx + 0x18));
        *((rsp + 0x18)) = xmm7;
        goto label_29;
label_40:
        rax = *(reloc.x_axis);
        rdx = reloc_axis_array;
        rax *= 0x2a8;
        if (*((rdx + rax + 0x8c)) != 0) {
            goto label_55;
        }
        rax = *(reloc.y_axis);
        rax *= 0x2a8;
        if (*((rdx + rax + 0x8c)) != 0) {
            goto label_55;
        }
        rax = *(reloc.z_axis);
        rax *= 0x2a8;
        if (*((rdx + rax + 0x8c)) != 0) {
            goto label_55;
        }
        r15 = *((rsp + 0xa8));
        rdi = rsp + 0x130;
        *((rsp + 0x20)) = r8d;
        rsi = rsp + 0x138;
        *((rsp + 0x18)) = r9d;
        xmm0 = *((r15 + 8));
        xmm2 = *((r15 + 0x18));
        *((rsp + 0x10)) = ecx;
        xmm1 = *((r15 + 0x10));
        eval_link_function ();
        rax = *((rsp + 0x10));
        rdi = rsp + 0x140;
        rsi = rsp + 0x148;
        rax <<= 6;
        rax = r15 + rax - 0x40;
        xmm0 = *((rax + 8));
        xmm2 = *((rax + 0x18));
        xmm1 = *((rax + 0x10));
        eval_link_function ();
        ecx = *((rsp + 0x10));
        r9d = *((rsp + 0x18));
        xmm4 = *((rsp + 0x130));
        r8d = *((rsp + 0x20));
    } while (1);
label_37:
    rax = *((rdi + 0x1b0));
    *((rsp + 0x28)) = 1;
    r13d = 1;
    r9d = 2;
    rcx = *((rax + 0x10));
    *((rsp + 0xa8)) = rcx;
    ecx = *((rax + 0xc));
    if (ecx > 0) {
        goto label_0;
    }
label_38:
    rsi = "No points (visible or invisible) to plot.\n\n";
    edi = 0xffffffff;
    eax = 0;
    eval_link_function ();
    goto label_6;
label_41:
    rax = *((rsp + 0xa8));
    xmm0 = *((rax + 8));
    __asm ("ucomisd xmm0, qword [rax + 0x48]");
    __asm ("jp 0x80091d0");
    if (ecx != 0) {
        goto label_56;
    }
    __asm ("ucomisd xmm0, xmm0");
    __asm ("jp .text.unlikely");
    if (ecx != 0) {
        goto label_57;
    }
    rax = *((rsp + 0xa8));
    ebp = 0;
    edi = 1;
    rax += 0x48;
    do {
        r14d = ebp;
        ebp++;
        __asm ("ucomisd xmm0, qword [rax]");
        __asm ("setp dl");
        if (ebp != 0) {
            edx = edi;
        }
        sil = (ecx <= ebp) ? 1 : 0;
        rax += 0x40;
        dl |= sil;
    } while (dl == 0);
label_2:
    eax = ecx;
    edx:eax = (int64_t) eax;
    eax = edx:eax / ebp;
    edx = edx:eax % ebp;
    *((rsp + 0xec)) = eax;
    goto label_1;
label_56:
    rax = *((rsp + 0xa8));
    xmm0 = *((rax + 0x10));
    __asm ("ucomisd xmm0, xmm0");
    __asm ("jp .text.unlikely");
    if (dl != 0) {
        goto label_58;
    }
    rax = *((rsp + 0xa8));
    ebp = 0;
    edi = 1;
    rax += 0x50;
    do {
        r14d = ebp;
        ebp++;
        __asm ("ucomisd xmm0, qword [rax]");
        __asm ("setp dl");
        if (ebp != 0) {
            edx = edi;
        }
        sil = (ecx <= ebp) ? 1 : 0;
        rax += 0x40;
        dl |= sil;
    } while (dl == 0);
    goto label_2;
label_44:
    xmm2 = *((r8 + 0x18));
    rdi = rsp + 0x150;
    rsi = rsp + 0x158;
    *((rsp + 0x20)) = ecx;
    *((rsp + 0x18)) = eax;
    *((rsp + 0x10)) = edx;
    eval_link_function ();
    edx = *((rsp + 0x10));
    eax = *((rsp + 0x18));
    xmm0 = *((rsp + 0x150));
    ecx = *((rsp + 0x20));
    xmm4 = *((rsp + 0x130));
    xmm1 = *((rsp + 0x158));
    xmm5 = *((rsp + 0x138));
    xmm3 = *((rsp + 0x140));
    xmm2 = *((rsp + 0x148));
    goto label_3;
label_55:
    rsi = "Log scaling of 3D image plots is not supported";
    edi = 0xffffffff;
    eax = 0;
    eval_link_function ();
label_6:
    rax = *((rsp + 0x218));
    rax ^= *(fs:0x28);
    if (dl != 0) {
        goto label_59;
    }
    return rax;
label_45:
    xmm4 = *((rsp + 0x38));
    xmm3 = *((rsp + 0x30));
    __asm ("andpd xmm4, xmm12");
    __asm ("andpd xmm3, xmm12");
    __asm ("movapd xmm7, xmm4");
    __asm ("mulsd xmm7, xmm0");
    __asm ("comisd xmm7, xmm3");
    if (dl > 0) {
        goto label_60;
    }
    __asm ("mulsd xmm0, xmm3");
    __asm ("comisd xmm0, xmm4");
    if (dl <= 0) {
        goto label_4;
    }
label_60:
    eax = *((rsp + 0x28));
    if (al == 0) {
        goto label_61;
    }
    r12d = eax;
    if (*(reloc.splot_map) != 0) {
        goto label_62;
    }
label_26:
    eax = *((rsp + 0x28));
    *((rsp + 0xb8)) = al;
    goto label_5;
label_39:
    rsi = "Image grid must be at least 4 points (2 x 2).\n\n";
    edi = 0xffffffff;
    eax = 0;
    eax = eval_link_function ();
    goto label_6;
label_36:
    rsi = "no image data";
    edi = 0xffffffff;
    eax = 0;
    eval_link_function ();
    goto label_6;
label_52:
    xmm7 = 0;
    *((rsp + 0x18)) = xmm7;
    *((rsp + 0x20)) = xmm7;
label_29:
    if (*((rsp + 0xb8)) == 0) {
        goto label_63;
    }
    if (*((r9 + 0xf0)) == 0) {
        goto label_64;
    }
    if (r8b != 0) {
        goto label_64;
    }
    if (*((rsp + 0x28)) != 0) {
        goto label_65;
    }
    rsi *= 0x2a8;
    xmm11 = 0;
    xmm7 = *(loc..LC9);
    *((rsp + 0x100)) = xmm7;
    xmm0 = *((rax + rsi + 0x80));
    __asm ("comisd xmm0, xmm11");
    if (*((rsp + 0x28)) <= 0) {
        xmm7 = *(loc..LC43);
        *((rsp + 0x100)) = xmm7;
    }
    rdi *= 0x2a8;
    xmm7 = *(loc..LC9);
    *((rsp + 0xf8)) = xmm7;
    xmm0 = *((rax + rdi + 0x80));
    __asm ("comisd xmm0, xmm11");
    if (*((rsp + 0x28)) <= 0) {
        xmm7 = *(loc..LC43);
        *((rsp + 0xf8)) = xmm7;
    }
label_31:
    r11d = *((rsp + 0xec));
    r11d *= ebp;
    __asm ("comisd xmm2, xmm1");
    if (*((rsp + 0x28)) <= 0) {
        goto label_66;
    }
    xmm0 = *((rsp + 0x38));
    xmm1 = *((rsp + 0x68));
    ebx = ebp;
    __asm ("mulsd xmm0, qword [rsp + 0xf8]");
    __asm ("mulsd xmm1, qword [rsp + 0x100]");
    __asm ("comisd xmm0, xmm11");
    if (*((rsp + 0x28)) > 0) {
        ebx = r11d;
    }
    __asm ("comisd xmm1, xmm11");
    if (*((rsp + 0x28)) <= 0) {
        goto label_67;
    }
    *((rsp + 0x10)) = 1;
    eax = ebp;
    ebx -= ebp;
    eax = -eax;
label_33:
    esi = ebp;
    *((rsp + 0xec)) = ebp;
    esi = -esi;
    __asm ("comisd xmm0, xmm11");
    if (ebx <= 0) {
        esi = ebp;
    }
    eax += esi;
    *((rsp + 0x60)) = eax;
label_30:
    if (*((rsp + 8)) == 1) {
        goto label_68;
    }
    eax = r11*4;
    if (*((rsp + 8)) == 2) {
        r11d = eax;
    }
label_32:
    rdi = (int64_t) r11d;
    rsi = "image";
    *((rsp + 0x88)) = ecx;
    rdi <<= 3;
    *((rsp + 0x40)) = r11d;
    *((rsp + 0x80)) = edx;
    *((rsp + 0xa0)) = xmm11;
    *((rsp + 0x98)) = xmm4;
    *((rsp + 0x90)) = xmm3;
    *((rsp + 0x78)) = xmm5;
    *((rsp + 0x58)) = xmm6;
    rax = eval_link_function ();
    if (rax == 0) {
        goto label_69;
    }
    rsi = (int64_t) r14d;
    xmm5 = *((rsp + 0x78));
    r9d = 0;
    r14d = 0;
    rsi <<= 6;
    xmm6 = *((rsp + 0x58));
    r10d = 0;
    r15d = 0;
    r11d = *((rsp + 0x40));
    edi = 0xffffffff;
    rcx = *((rsp + 0xa8));
    edx = 0xffffffff;
    rax = *((rsp + 0x80));
    r13d = *((rsp + 0xec));
    xmm0 = *((rcx + 8));
    rsi += rcx;
    *((rsp + 0x58)) = r11d;
    r11d = edi;
    rax <<= 6;
    r8d = *((rsp + 8));
    xmm11 = *((rsp + 0xa0));
    xmm3 = *((rsp + 0x90));
    rax += rcx;
    __asm ("movapd xmm7, xmm0");
    __asm ("subsd xmm7, qword [rsi + 8]");
    __asm ("subsd xmm0, qword [rax + 8]");
    *((rsp + 0x40)) = xmm11;
    xmm4 = *((rsp + 0x98));
    xmm12 = *(loc..LC0);
    xmm11 = *((rsp + 0x50));
    __asm ("divsd xmm7, xmm6");
    __asm ("divsd xmm0, xmm5");
    __asm ("addsd xmm0, xmm7");
    xmm7 = *(loc..LC8);
    __asm ("mulsd xmm7, xmm0");
    xmm0 = *((rcx + 0x10));
    __asm ("movapd xmm9, xmm0");
    __asm ("subsd xmm0, qword [rax + 0x10]");
    __asm ("subsd xmm9, qword [rsi + 0x10]");
    __asm ("divsd xmm0, xmm5");
    __asm ("divsd xmm9, xmm6");
    __asm ("addsd xmm0, xmm9");
    xmm9 = *(loc..LC8);
    __asm ("mulsd xmm9, xmm0");
    xmm0 = *((rcx + 0x18));
    ecx = *((rsp + 0x88));
    __asm ("movapd xmm10, xmm0");
    __asm ("subsd xmm0, qword [rax + 0x18]");
    __asm ("subsd xmm10, qword [rsi + 0x18]");
    r12d = ecx;
    rax = *(loc..LC9);
    rcx = rbp;
    esi = 0;
    __asm ("divsd xmm10, xmm6");
    *((rsp + 0x78)) = rax;
    *((rsp + 0x80)) = rax;
    __asm ("divsd xmm0, xmm5");
    xmm5 = *(loc..LC44);
    __asm ("addsd xmm0, xmm10");
    xmm10 = *(loc..LC8);
    __asm ("mulsd xmm10, xmm0");
    goto label_70;
label_7:
    __asm ("comisd xmm6, xmm3");
    if (rax >= 0) {
        __asm ("comisd xmm4, xmm6");
        if (rax >= 0) {
            goto label_71;
        }
    }
    __asm ("comisd xmm0, xmm3");
    if (rax >= 0) {
        __asm ("comisd xmm4, xmm0");
        if (rax >= 0) {
            goto label_71;
        }
    }
label_8:
    __asm ("comisd xmm0, xmm6");
    if (rax <= 0) {
        goto label_72;
    }
    __asm ("comisd xmm3, xmm6");
    if (rax >= 0) {
        __asm ("comisd xmm0, xmm3");
        if (rax >= 0) {
            goto label_27;
        }
    }
    __asm ("comisd xmm4, xmm6");
    if (rax < 0) {
        goto label_28;
    }
    __asm ("comisd xmm0, xmm4");
    if (rax < 0) {
        goto label_28;
    }
label_27:
    __asm ("comisd xmm1, xmm8");
    if (rax <= 0) {
        void (*0x800a938)() ();
    }
label_28:
    ebx += *((rsp + 0x10));
    r13d--;
    if (r13d != 0) {
        void (*0x8009873)() ();
    }
label_70:
    if (r12d <= ebx) {
        goto label_73;
    }
    if (ebx < 0) {
        goto label_73;
    }
    rax = (int64_t) ebx;
    rax <<= 6;
    rax += *((rsp + 0xa8));
    xmm0 = *((rax + 8));
    xmm1 = *((rax + 0x10));
    __asm ("comisd xmm4, xmm3");
    xmm2 = *((rax + 0x18));
    __asm ("movapd xmm6, xmm0");
    __asm ("movapd xmm8, xmm1");
    __asm ("addsd xmm0, xmm7");
    __asm ("movapd xmm15, xmm2");
    __asm ("subsd xmm6, xmm7");
    __asm ("subsd xmm8, xmm9");
    __asm ("addsd xmm1, xmm9");
    __asm ("subsd xmm15, xmm10");
    __asm ("addsd xmm2, xmm10");
    if (rax > 0) {
        goto label_7;
    }
    __asm ("comisd xmm6, xmm4");
    if (rax >= 0) {
        __asm ("comisd xmm3, xmm6");
        if (rax >= 0) {
            goto label_71;
        }
    }
    __asm ("comisd xmm0, xmm4");
    if (rax < 0) {
        goto label_8;
    }
    __asm ("comisd xmm3, xmm0");
    if (rax < 0) {
        goto label_8;
    }
label_71:
    xmm13 = *((rsp + 0x48));
    __asm ("comisd xmm13, xmm11");
    if (rax <= 0) {
        goto label_74;
    }
    __asm ("comisd xmm8, xmm11");
    if (rax < 0) {
        goto label_75;
    }
    __asm ("comisd xmm13, xmm8");
    if (rax >= 0) {
        void (*0x8009940)() ();
    }
label_75:
    __asm ("comisd xmm1, xmm11");
    if (rax < 0) {
        goto label_8;
    }
label_63:
    if (*((r9 + 0xe8)) == 0) {
        goto label_76;
    }
label_64:
    *((rsp + 0xc0)) = xmm4;
    edi = 0x13;
    *((rsp + 0x40)) = xmm3;
    *((rsp + 0x30)) = xmm5;
    *((rsp + 0x10)) = xmm6;
    *((rsp + 0x38)) = edx;
    uint64_t (*r9 + 0x110)() ();
    rax = (int64_t) r14d;
    rcx = *((rsp + 0xa8));
    xmm6 = *((rsp + 0x10));
    rax <<= 6;
    xmm5 = *((rsp + 0x30));
    rax += rcx;
    xmm2 = *((rcx + 8));
    xmm1 = *((rcx + 0x10));
    xmm0 = *((rax + 8));
    xmm7 = *((rax + 0x18));
    __asm ("subsd xmm0, xmm2");
    __asm ("movapd xmm3, xmm0");
    xmm0 = *((rax + 0x10));
    rax = *((rsp + 0x38));
    __asm ("divsd xmm3, xmm6");
    __asm ("subsd xmm0, xmm1");
    rax <<= 6;
    rax += rcx;
    __asm ("movapd xmm4, xmm0");
    xmm0 = *((rcx + 0x18));
    ecx = *((rsp + 0xec));
    __asm ("subsd xmm7, xmm0");
    __asm ("divsd xmm4, xmm6");
    *((rsp + 0x58)) = xmm3;
    __asm ("divsd xmm7, xmm6");
    xmm6 = *((rax + 8));
    __asm ("subsd xmm6, xmm2");
    __asm ("movapd xmm12, xmm6");
    xmm6 = *((rax + 0x10));
    __asm ("subsd xmm6, xmm1");
    *((rsp + 0x60)) = xmm4;
    __asm ("movapd xmm11, xmm6");
    xmm6 = *((rax + 0x18));
    __asm ("subsd xmm6, xmm0");
    __asm ("movapd xmm9, xmm6");
    __asm ("movapd xmm6, xmm3");
    __asm ("divsd xmm12, xmm5");
    *((rsp + 0x68)) = xmm7;
    __asm ("divsd xmm11, xmm5");
    __asm ("addsd xmm6, xmm12");
    __asm ("subsd xmm3, xmm12");
    *((rsp + 0xf8)) = xmm12;
    __asm ("divsd xmm9, xmm5");
    xmm5 = *(loc..LC8);
    __asm ("mulsd xmm6, xmm5");
    *((rsp + 0x70)) = xmm6;
    __asm ("movapd xmm6, xmm4");
    __asm ("addsd xmm6, xmm11");
    __asm ("subsd xmm4, xmm11");
    *((rsp + 0x100)) = xmm11;
    __asm ("mulsd xmm6, xmm5");
    *((rsp + 0x78)) = xmm6;
    __asm ("movapd xmm6, xmm7");
    __asm ("addsd xmm6, xmm9");
    __asm ("subsd xmm7, xmm9");
    *((rsp + 0x108)) = xmm9;
    __asm ("mulsd xmm6, xmm5");
    *((rsp + 0x80)) = xmm6;
    __asm ("movapd xmm6, xmm3");
    __asm ("mulsd xmm6, xmm5");
    *((rsp + 0x88)) = xmm6;
    __asm ("movapd xmm6, xmm4");
    __asm ("mulsd xmm6, xmm5");
    *((rsp + 0x90)) = xmm6;
    __asm ("movapd xmm6, xmm7");
    __asm ("mulsd xmm6, xmm5");
    *((rsp + 0x98)) = xmm6;
    if (ecx <= 0) {
        goto label_77;
    }
    rax = rsp + 0x128;
    *((rsp + 0x10)) = ebp;
    xmm3 = *((rsp + 0x40));
    *((rsp + 0xf0)) = 0;
    xmm4 = *((rsp + 0xc0));
    *((rsp + 0xa0)) = 0;
    *((rsp + 0xb0)) = rax;
label_11:
    xmm5 = 0;
    edx = *((rsp + 0x10));
    xmm6 = *((rsp + 0xf8));
    __asm ("cvtsi2sd xmm5, dword [rsp + 0xa0]");
    __asm ("mulsd xmm6, xmm5");
    __asm ("addsd xmm6, xmm2");
    xmm2 = *((rsp + 0x100));
    __asm ("mulsd xmm2, xmm5");
    __asm ("mulsd xmm5, qword [rsp + 0x108]");
    *((rsp + 0x30)) = xmm6;
    __asm ("addsd xmm2, xmm1");
    __asm ("addsd xmm5, xmm0");
    *((rsp + 0x38)) = xmm2;
    *((rsp + 0x40)) = xmm5;
    if (edx <= 0) {
        goto label_78;
    }
    rbx = *((rsp + 0xf0));
    r15d = 0;
    rbx <<= 6;
    rbx += *((rsp + 0xa8));
    r14 = rbx;
    while (*((rsp + 8)) == 2) {
        xmm0 = *((r14 + 0x20));
        __asm ("ucomisd xmm0, qword [loc..LC1]");
        __asm ("jnp 0x800a140");
label_18:
        xmm1 = *(loc..LC58);
        __asm ("comisd xmm1, xmm0");
        if (rbx <= 0) {
            goto label_79;
        }
        rax = *(reloc.term);
        if ((*((rax + 0xa9)) & 2) != 0) {
            goto label_79;
        }
label_9:
        r15d++;
        r14 += 0x40;
        if (*((rsp + 0x10)) == r15d) {
            goto label_80;
        }
    }
label_79:
    xmm0 = 0;
    xmm2 = *((rsp + 0x58));
    r13d = 0;
    xmm7 = *((rsp + 0x70));
    __asm ("cvtsi2sd xmm0, r15d");
    xmm1 = *((rsp + 0x60));
    xmm6 = *((rsp + 0x78));
    rbp = rsp + 0x1b0;
    __asm ("movapd xmm5, xmm7");
    rax = rbp;
    xmm13 = *((rsp + 0x80));
    xmm14 = *((rsp + 0x88));
    esi = *(reloc.splot_map);
    r12 = rsp + 0x210;
    xmm15 = *((rsp + 0x90));
    xmm10 = *((rsp + 0x98));
    __asm ("mulsd xmm2, xmm0");
    __asm ("addsd xmm2, qword [rsp + 0x30]");
    __asm ("mulsd xmm1, xmm0");
    __asm ("addsd xmm1, qword [rsp + 0x38]");
    __asm ("mulsd xmm0, qword [rsp + 0x68]");
    __asm ("addsd xmm0, qword [rsp + 0x40]");
    *((rsp + 0x120)) = xmm2;
    __asm ("addsd xmm5, xmm2");
    *((rsp + 0x128)) = xmm1;
    *((rsp + 0x1b0)) = xmm5;
    __asm ("movapd xmm5, xmm6");
    __asm ("addsd xmm5, xmm1");
    *((rsp + 0x1b8)) = xmm5;
    __asm ("movapd xmm5, xmm13");
    __asm ("addsd xmm5, xmm0");
    *((rsp + 0x1c0)) = xmm5;
    __asm ("movapd xmm5, xmm14");
    __asm ("addsd xmm5, xmm2");
    *((rsp + 0x1c8)) = xmm5;
    __asm ("movapd xmm5, xmm15");
    __asm ("addsd xmm5, xmm1");
    *((rsp + 0x1d0)) = xmm5;
    __asm ("movapd xmm5, xmm10");
    __asm ("addsd xmm5, xmm0");
    *((rsp + 0x1d8)) = xmm5;
    __asm ("movapd xmm5, xmm2");
    __asm ("subsd xmm2, xmm14");
    __asm ("subsd xmm5, xmm7");
    *((rsp + 0x1f8)) = xmm2;
    xmm2 = *((rsp + 0x48));
    *((rsp + 0x1e0)) = xmm5;
    __asm ("movapd xmm5, xmm1");
    __asm ("subsd xmm1, xmm15");
    __asm ("subsd xmm5, xmm6");
    *((rsp + 0x200)) = xmm1;
    xmm1 = *((rsp + 0x50));
    *((rsp + 0x1e8)) = xmm5;
    __asm ("movapd xmm5, xmm0");
    __asm ("subsd xmm0, xmm10");
    __asm ("subsd xmm5, xmm13");
    *((rsp + 0x208)) = xmm0;
    *((rsp + 0x1f0)) = xmm5;
    do {
        __asm ("comisd xmm4, xmm3");
        xmm0 = *(rax);
        if (*((rsp + 8)) <= 2) {
            goto label_81;
        }
        __asm ("comisd xmm0, xmm3");
        if (*((rsp + 8)) >= 2) {
            __asm ("comisd xmm4, xmm0");
            if (*((rsp + 8)) < 2) {
                goto label_12;
            }
            __asm ("comisd xmm2, xmm1");
            xmm0 = *((rax + 8));
            if (*((rsp + 8)) <= 2) {
                goto label_82;
            }
label_13:
            __asm ("comisd xmm0, xmm1");
            if (*((rsp + 8)) < 2) {
                goto label_12;
            }
            __asm ("comisd xmm2, xmm0");
            if (*((rsp + 8)) < 2) {
                goto label_12;
            }
label_14:
            xmm6 = *((rsp + 0x18));
            xmm7 = *((rsp + 0x20));
            xmm0 = *((rax + 0x10));
            __asm ("comisd xmm6, xmm7");
            if (*((rsp + 8)) <= 2) {
                goto label_83;
            }
            __asm ("comisd xmm0, xmm7");
            if (*((rsp + 8)) >= 2) {
                __asm ("comisd xmm6, xmm0");
                if (*((rsp + 8)) >= 2) {
                    goto label_17;
                }
            }
label_16:
            if (*((rsp + 0x28)) != 0) {
                if (sil == 0) {
                    goto label_12;
                }
            }
label_17:
            r13d++;
        }
label_12:
        rax += 0x18;
    } while (r12 != rax);
    if (r13d == 0) {
        goto label_9;
    }
    rax = rsp + 0x170;
    *((rsp + 0xd0)) = r15d;
    ebx = *((rsp + 0xb8));
    r15 = rbp;
    *((rsp + 0x178)) = 3;
    ebp = *((rsp + 0x28));
    *((rsp + 0xe0)) = rax;
    *((rsp + 0xd8)) = r14;
    r14 = rax;
    *((rsp + 0xc0)) = xmm3;
    *((rsp + 0xc8)) = xmm4;
label_10:
    if (bpl == 0) {
        goto label_84;
    }
    rsi = *((rsp + 0xb0));
    xmm2 = *((r15 + 0x10));
    rdi = rsp + 0x120;
    xmm1 = *((r15 + 8));
    xmm0 = *(r15);
    eax = eval_link_function ();
    __asm ("cvttsd2si eax, qword [rsp + 0x120]");
    *(r14) = eax;
    __asm ("cvttsd2si eax, qword [rsp + 0x128]");
    *((r14 + 4)) = eax;
label_15:
    if (bl == 0) {
        goto label_85;
    }
    rax = *(reloc.term);
    if (*((rax + 0xc0)) == 0) {
        goto label_85;
    }
    if (r13d > 3) {
        goto label_85;
    }
    rax = *(reloc.clip_area);
    if (rax == 0) {
        goto label_85;
    }
    esi = *(r14);
    edi = *(rax);
    if (esi < edi) {
        *(r14) = edi;
        esi = edi;
    }
    edi = *((rax + 4));
    if (edi >= esi) {
        void (*0x8009f09)() ();
    }
label_85:
    r15 += 0x18;
    r14 += 0xc;
    if (r12 != r15) {
        goto label_10;
    }
    r14 = *((rsp + 0xd8));
    eax = *((rsp + 8));
    xmm3 = *((rsp + 0xc0));
    r15d = *((rsp + 0xd0));
    xmm4 = *((rsp + 0xc8));
    xmm0 = *((r14 + 0x28));
    if (eax != 0) {
        goto label_86;
    }
    __asm ("ucomisd xmm0, xmm0");
    __asm ("jp 0x8009c28");
    goto label_9;
    *((rsp + 0xc8)) = xmm4;
    *((rsp + 0xc0)) = xmm3;
    eval_link_function ();
    eval_link_function ();
    rdx = *(reloc.term);
    xmm3 = *((rsp + 0xc0));
    xmm4 = *((rsp + 0xc8));
    if (*((rsp + 0xb8)) == 0) {
        goto label_87;
    }
    rax = *((rdx + 0xc0));
    if (rax == 0) {
        goto label_87;
    }
label_80:
    ecx = *((rsp + 0x10));
    *((rsp + 0xf0)) += ecx;
label_78:
    *((rsp + 0xa0))++;
    eax = *((rsp + 0xa0));
    if (*((rsp + 0xec)) == eax) {
        goto label_77;
    }
    rax = *((rsp + 0xa8));
    xmm2 = *((rax + 8));
    xmm1 = *((rax + 0x10));
    xmm0 = *((rax + 0x18));
    goto label_11;
label_81:
    __asm ("comisd xmm0, xmm4");
    if (*((rsp + 0xec)) < eax) {
        goto label_12;
    }
    __asm ("comisd xmm3, xmm0");
    if (*((rsp + 0xec)) < eax) {
        goto label_12;
    }
    __asm ("comisd xmm2, xmm1");
    xmm0 = *((rax + 8));
    if (*((rsp + 0xec)) > eax) {
        goto label_13;
    }
label_82:
    __asm ("comisd xmm0, xmm2");
    if (*((rsp + 0xec)) < eax) {
        goto label_12;
    }
    __asm ("comisd xmm1, xmm0");
    if (*((rsp + 0xec)) < eax) {
        goto label_12;
    }
    goto label_14;
label_84:
    xmm0 = *(r15);
    eax = eval_link_function ();
    xmm0 = *((r15 + 8));
    *(r14) = eax;
    eax = eval_link_function ();
    *((r14 + 4)) = eax;
    goto label_15;
label_83:
    __asm ("comisd xmm0, xmmword [rsp + 0x18]");
    if (*((rsp + 0xec)) < eax) {
        goto label_16;
    }
    xmm7 = *((rsp + 0x20));
    __asm ("comisd xmm7, xmm0");
    if (*((rsp + 0xec)) >= eax) {
        goto label_17;
    }
    goto label_16;
    if (*((rsp + 0xec)) == eax) {
        goto label_9;
    }
    goto label_18;
label_87:
    *((rsp + 0xc8)) = xmm4;
    rsi = *((rsp + 0xe0));
    edi = 4;
    *((rsp + 0xc0)) = xmm3;
    uint64_t (*rdx + 0xe8)() ();
    xmm4 = *((rsp + 0xc8));
    xmm3 = *((rsp + 0xc0));
    goto label_9;
label_86:
    xmm5 = .data;
    __asm ("ucomisd xmm5, qword [loc..LC44]");
    xmm1 = *((r14 + 0x30));
    xmm2 = *((r14 + 0x38));
    __asm ("jp 0x800a1b4");
    if (*((rsp + 0xec)) == eax) {
        goto label_88;
    }
    __asm ("mulsd xmm0, qword [loc..LC44]");
    __asm ("divsd xmm0, xmm5");
    __asm ("comisd xmm0, xmmword [loc..LC44]");
    if (*((rsp + 0xec)) <= eax) {
        goto label_89;
    }
    edi = 0xff0000;
    __asm ("mulsd xmm1, qword [loc..LC44]");
    __asm ("divsd xmm1, xmm5");
    __asm ("comisd xmm1, xmmword [loc..LC44]");
    if (*((rsp + 0xec)) > eax) {
        void (*0x800a37a)() ();
    }
label_88:
    __asm ("comisd xmm0, xmmword [loc..LC44]");
    edi = 0xff0000;
    if (*((rsp + 0xec)) > eax) {
        void (*0x800a358)() ();
    }
label_89:
    xmm6 = 0;
    __asm ("comisd xmm6, xmm0");
    if (*((rsp + 0xec)) <= eax) {
        void (*0x800a33d)() ();
    }
label_77:
    rax = *(reloc.term);
    edi = 0x14;
    uint64_t (*rax + 0x110)() ();
    goto label_6;
label_51:
    xmm7 = *((rax + r10 + 0x28));
    *((rsp + 0x48)) = xmm7;
    goto label_19;
label_50:
    xmm7 = *((r10 + 0x20));
    *((rsp + 0x50)) = xmm7;
    goto label_20;
label_49:
    xmm4 = *((rax + r10 + 0x28));
    goto label_21;
label_48:
    xmm3 = *((r10 + 0x20));
    goto label_22;
label_46:
    *((rsp + 0x50)) = ecx;
    *((rsp + 0x48)) = edx;
    *((rsp + 0x40)) = xmm1;
    *((rsp + 0x20)) = xmm2;
    *((rsp + 0x18)) = xmm5;
    *((rsp + 0x10)) = xmm6;
    eax = eval_link_function ();
    if (eax != 0) {
        goto label_6;
    }
    r9 = *(reloc.term);
    xmm6 = *((rsp + 0x10));
    xmm5 = *((rsp + 0x18));
    xmm2 = *((rsp + 0x20));
    xmm1 = *((rsp + 0x40));
    edx = *((rsp + 0x48));
    ecx = *((rsp + 0x50));
    goto label_23;
label_42:
    r12 = (int64_t) r9d;
    rbp = (int64_t) r13d;
    eax += eax;
    r15d = 0;
    r12 *= 0x2a8;
    xmm1 = 0;
    ecx = r14 + r14;
    rbp *= 0x2a8;
    xmm3 = 0;
    __asm ("cvtsi2sd xmm1, eax");
    rax = reloc_axis_array;
    r12 += rax;
    __asm ("cvtsi2sd xmm3, ecx");
    ecx = r14d;
    rbp += rax;
    *((rsp + 0x18)) = r12;
    r12 = *((rsp + 0xa8));
    eax = 0;
    r14 = rbp;
    ebx = r9d;
label_24:
    rax <<= 6;
    rdx = (int64_t) edx;
    *((rsp + 0x11c)) = 0;
    rax += r12;
    rdx <<= 6;
    xmm6 = *((rax + 8));
    xmm5 = *((rax + 0x10));
    rax = (int64_t) ecx;
    rdx += r12;
    rax <<= 6;
    xmm2 = *((rdx + 8));
    rax += r12;
    __asm ("movapd xmm4, xmm5");
    __asm ("movapd xmm7, xmm6");
    xmm0 = *((rax + 0x10));
    __asm ("subsd xmm2, xmm6");
    __asm ("subsd xmm0, xmm5");
    __asm ("divsd xmm2, xmm1");
    __asm ("divsd xmm0, xmm3");
    __asm ("subsd xmm4, xmm0");
    xmm0 = *((rax + 8));
    __asm ("subsd xmm0, xmm6");
    __asm ("divsd xmm0, xmm3");
    __asm ("subsd xmm7, xmm0");
    __asm ("movapd xmm0, xmm7");
    __asm ("subsd xmm0, xmm2");
    *((rsp + 0x120)) = xmm0;
    __asm ("movapd xmm2, xmm0");
    xmm0 = *((rdx + 0x10));
    __asm ("subsd xmm0, xmm5");
    __asm ("divsd xmm0, xmm1");
    __asm ("subsd xmm4, xmm0");
    *((rsp + 0x128)) = xmm4;
    if (ebx != 0xfffffffe) {
        ecx = *((rbp + 0x2b));
        rdx = *((rsp + 0x18));
        __asm ("movapd xmm0, xmm2");
        rsi = rsp + 0x11c;
        rdi = rsp + 0x120;
        *((rsp + 0x10)) = xmm1;
        *((rsp + 8)) = xmm3;
        eax = eval_link_function ();
        xmm3 = *((rsp + 8));
        xmm1 = *((rsp + 0x10));
        if (eax != 2) {
            goto label_90;
        }
        rax = *(loc..LC40);
        *((rsp + 0x120)) = rax;
    }
label_90:
    *((rsp + 0x11c)) = 0;
    if (r13d != 0xfffffffe) {
        ecx = *((rbp + 0x2b));
        rsi = rsp + 0x11c;
        xmm0 = *((rsp + 0x128));
        rdi = rsp + 0x128;
        rdx = r14;
        *((rsp + 0x10)) = xmm1;
        *((rsp + 8)) = xmm3;
        eval_link_function ();
        xmm1 = *((rsp + 0x10));
        xmm3 = *((rsp + 8));
    }
    r15++;
    if (r15 == 4) {
        goto label_6;
    }
    edx = 5;
    rax = *((rsp + r15*4 + 0x160));
    edx -= r15d;
    edx &= 3;
    ecx = *((rsp + rdx*4 + 0x160));
    edx = r15 + 2;
    edx &= 3;
    edx = *((rsp + rdx*4 + 0x160));
    goto label_24;
label_61:
    *((rsp + 0xb8)) = 1;
    r12d = *((rbx + 0x164));
    goto label_5;
label_43:
    rcx = *(rbx);
    rbx = *((rsp + 0xa8));
    rdx = (int64_t) edx;
    eax += eax;
    xmm3 = 0;
    rdx <<= 6;
    xmm9 = 0;
    rdi = *((rcx + 0x1b0));
    rcx = (int64_t) r14d;
    xmm7 = *((rbx + 0x10));
    r14d += r14d;
    rcx <<= 6;
    xmm8 = *((rbx + 8));
    xmm6 = *((rbx + 0x18));
    rdx += rbx;
    rcx += rbx;
    __asm ("cvtsi2sd xmm3, r14d");
    xmm5 = *((rdx + 8));
    xmm4 = *((rdx + 0x10));
    xmm2 = *((rcx + 8));
    xmm1 = *((rcx + 0x10));
    __asm ("cvtsi2sd xmm9, eax");
    xmm0 = *((rcx + 0x18));
    __asm ("subsd xmm5, xmm8");
    __asm ("subsd xmm4, xmm7");
    rax = *((rdi + 0x10));
    __asm ("subsd xmm2, xmm8");
    __asm ("subsd xmm1, xmm7");
    rdi = *(rdi);
    __asm ("subsd xmm0, xmm6");
    __asm ("divsd xmm5, xmm9");
    rdi = *((rdi + 0x10));
    __asm ("divsd xmm2, xmm3");
    __asm ("divsd xmm1, xmm3");
    __asm ("subsd xmm8, xmm2");
    __asm ("subsd xmm8, xmm5");
    __asm ("divsd xmm0, xmm3");
    xmm3 = *((rdx + 0x18));
    *((rax + 8)) = xmm8;
    __asm ("subsd xmm3, xmm6");
    __asm ("subsd xmm7, xmm1");
    __asm ("divsd xmm3, xmm9");
    __asm ("subsd xmm6, xmm0");
    __asm ("divsd xmm4, xmm9");
    __asm ("subsd xmm6, xmm3");
    *((rax + 0x18)) = xmm6;
    xmm6 = *((rdx + 8));
    __asm ("subsd xmm6, xmm2");
    __asm ("addsd xmm6, xmm5");
    __asm ("subsd xmm7, xmm4");
    *((rax + 0x10)) = xmm7;
    *((rdi + 8)) = xmm6;
    xmm6 = *((rdx + 0x10));
    __asm ("subsd xmm6, xmm1");
    __asm ("addsd xmm6, xmm4");
    *((rdi + 0x10)) = xmm6;
    xmm6 = *((rdx + 0x18));
    __asm ("subsd xmm6, xmm0");
    __asm ("addsd xmm6, xmm3");
    *((rdi + 0x18)) = xmm6;
    xmm6 = *((rcx + 8));
    __asm ("addsd xmm6, xmm2");
    __asm ("subsd xmm6, xmm5");
    *((rax + 0x48)) = xmm6;
    xmm6 = *((rcx + 0x10));
    __asm ("addsd xmm6, xmm1");
    __asm ("subsd xmm6, xmm4");
    *((rax + 0x50)) = xmm6;
    xmm6 = *((rcx + 0x18));
    __asm ("addsd xmm6, xmm0");
    __asm ("subsd xmm6, xmm3");
    *((rax + 0x58)) = xmm6;
    rax = (int64_t) esi;
    rax <<= 6;
    rax += rbx;
    __asm ("addsd xmm2, qword [rax + 8]");
    __asm ("addsd xmm2, xmm5");
    *((rdi + 0x48)) = xmm2;
    __asm ("addsd xmm1, qword [rax + 0x10]");
    __asm ("addsd xmm0, qword [rax + 0x18]");
    __asm ("addsd xmm1, xmm4");
    __asm ("addsd xmm0, xmm3");
    *((rdi + 0x50)) = xmm1;
    *((rdi + 0x58)) = xmm0;
    goto label_6;
label_53:
    xmm7 = *((r10 + 0x10));
    *((rsp + 0x20)) = xmm7;
    goto label_25;
label_62:
    r12d = *((rbx + 0x164));
    goto label_26;
label_74:
    __asm ("comisd xmm8, xmmword [rsp + 0x48]");
    if (rax < 0) {
        goto label_91;
    }
    __asm ("comisd xmm11, xmm8");
    if (rax >= 0) {
        void (*0x8009940)() ();
    }
label_91:
    __asm ("comisd xmm1, xmmword [rsp + 0x48]");
    if (rax < 0) {
        goto label_8;
    }
label_72:
    __asm ("comisd xmm3, xmm0");
    if (rax < 0) {
        goto label_92;
    }
    __asm ("comisd xmm6, xmm3");
    if (rax >= 0) {
        goto label_27;
    }
label_92:
    __asm ("comisd xmm4, xmm0");
    if (rax < 0) {
        goto label_28;
    }
    __asm ("comisd xmm6, xmm4");
    if (rax < 0) {
        goto label_28;
    }
label_54:
    xmm7 = *((rax + rbx + 0x28));
    *((rsp + 0x18)) = xmm7;
    goto label_29;
label_66:
    xmm1 = *((rsp + 0x70));
    xmm0 = *((rsp + 0x30));
    __asm ("mulsd xmm1, qword [rsp + 0x100]");
    __asm ("mulsd xmm0, qword [rsp + 0xf8]");
    __asm ("comisd xmm1, xmm11");
    if (rax <= 0) {
        goto label_93;
    }
    __asm ("comisd xmm0, xmm11");
    ebx = rbp - 1;
    if (rax <= 0) {
        goto label_94;
    }
    do {
        *((rsp + 0x10)) = ebp;
        eax = r11d;
        eax = -eax;
label_34:
        esi = 0;
        __asm ("ucomisd xmm0, xmm11");
        sil = (rax <= 0) ? 1 : 0;
        eax = rax + rsi*2 - 1;
        *((rsp + 0x60)) = eax;
        goto label_30;
label_65:
        xmm7 = *(loc..LC9);
        xmm11 = 0;
        *((rsp + 0xf8)) = xmm7;
        *((rsp + 0x100)) = xmm7;
        goto label_31;
label_68:
        r11d = r11 * 3;
        goto label_32;
label_67:
        *((rsp + 0x10)) = 0xffffffff;
        ebx--;
        eax = ebp;
        goto label_33;
label_93:
        __asm ("comisd xmm0, xmm11");
        eax = 1;
        ebx = r11d;
        if (ebx <= 0) {
            eax = ebp;
        }
label_35:
        ebx -= eax;
        __asm ("comisd xmm1, xmm11");
    } while (ebx > 0);
    ebp = -ebp;
    eax = r11d;
    *((rsp + 0x10)) = ebp;
    goto label_34;
label_94:
    ebx = ebp;
    eax = ebp;
    goto label_35;
label_69:
    rsi = "Could not allocate memory for image.";
    edi = 0xffffffff;
    eax = 0;
    eax = eval_link_function ();
    goto label_6;
    rsi = "image coordinates undefined";
    edi |= 0xffffffff;
    eax = 0;
    eax = eval_link_function ();
label_73:
    rsi = "Unexpected line of data in matrix encountered";
    edi |= 0xffffffff;
    eax = 0;
    eval_link_function ();
label_59:
    eax = eval_link_function ();
label_76:
    rsi = "This terminal does not support filled polygons";
    edi |= 0xffffffff;
    eax = 0;
    eval_link_function ();
label_58:
    /* [09] -r-x section size 2 named .text.unlikely */
label_57:
    __asm ("ud2");
}








void sym.place_arrows(int64_t arg1, double *placeholder_1, undefined8 placeholder_2, int64_t arg4)
{
    int64_t *arg1_00;
    undefined4 uVar1;
    undefined4 uVar2;
    undefined4 uVar3;
    undefined8 uVar4;
    undefined8 *puVar5;
    char *arg4_00;
    uint64_t uVar6;
    int64_t *piVar7;
    code *pcVar8;
    undefined8 *puVar9;
    int64_t in_FS_OFFSET;
    uint8_t uVar10;
    double dVar11;
    double dStack88;
    double dStack80;
    double dStack72;
    double dStack64;
    double dStack56;
    double dStack48;
    double dStack40;
    int64_t iStack32;
    
    uVar4 = _reloc.clip_area;
    uVar10 = 0;
    iStack32 = *(int64_t *)(in_FS_OFFSET + 0x28);
    _reloc.clip_area = reloc.canvas;
    if ((*(uint8_t *)(_reloc.term + 0xa8) & 0x80) != 0) {
        _reloc.clip_area = (code *)0x0;
    }
    arg4_00 = (char *)arg4;
    piVar7 = _reloc.first_arrow;
    if (_reloc.first_arrow != (int64_t *)0x0) {
        do {
            dStack72 = 0.00000000;
            dStack64 = 0.00000000;
            dStack56 = 0.00000000;
            dStack48 = 0.00000000;
            if ((*(int32_t *)((int64_t)piVar7 + 0x6c) == (int32_t)arg1) && (*(int32_t *)((int64_t)piVar7 + 0xc) != 3)) {
                sym.map_position_double.isra.0
                          ((int64_t)(piVar7 + 2), (int64_t)&dStack72, (int64_t)&dStack64, (int64_t)arg4_00);
                arg1_00 = piVar7 + 7;
                if (*(int32_t *)((int64_t)piVar7 + 0xc) == 1) {
                    placeholder_1 = &dStack56;
                    arg4_00 = "arrow";
                    func_0x080921db(arg1_00, placeholder_1, &dStack48);
                    dStack56 = dStack56 + dStack72;
                    dStack48 = dStack48 + dStack64;
                } else {
                    if (*(int32_t *)((int64_t)piVar7 + 0xc) == 2) {
                        arg4_00 = "arrow";
                        dVar11 = (double)(uint64_t)*(uint32_t *)(_reloc.term + 0x20) /
                                 (double)(uint64_t)*(uint32_t *)(_reloc.term + 0x24);
                        func_0x080921db((double)(uint64_t)*(uint32_t *)(_reloc.term + 0x24), dVar11, arg1_00, &dStack40
                                        , 0);
                        placeholder_1 = &dStack88;
                        func_0x080921db((double)piVar7[0xc] * _reloc..LC7, &dStack80);
                        dStack48 = dStack40 * dStack80 * dVar11 + dStack64;
                        dStack56 = dStack72 + dStack88 * dStack40;
                    } else {
                        placeholder_1 = &dStack56;
                        sym.map_position_double.isra.0
                                  ((int64_t)arg1_00, (int64_t)placeholder_1, (int64_t)&dStack48, (int64_t)arg4_00);
                    }
                }
                func_0x080921db(piVar7 + 0xe);
                func_0x080921db(piVar7 + 0xd);
                func_0x080921db(dStack72, dStack64, dStack56, dStack48, *(undefined4 *)(piVar7 + 0x1b));
            }
            piVar7 = (int64_t *)*piVar7;
        } while (piVar7 != (int64_t *)0x0);
    }
    pcVar8 = reloc.border_lp;
    func_0x080921db();
    if (iStack32 != *(int64_t *)(in_FS_OFFSET + 0x28)) {
        _reloc.clip_area = (code *)uVar4;
        func_0x080921db();
        if ("@"._0_8_ != 0) {
            func_0x080921db();
        }
        "@"._0_8_ = 0;
        if ((undefined8 *)pcVar8 != (undefined8 *)0x0) {
            *(undefined8 *)pcVar8 = _reloc.histogram_opts;
            *(undefined8 *)((int64_t)pcVar8 + 0x130) = _reloc.screen_ok;
            puVar5 = (undefined8 *)
                     ((int64_t)pcVar8 - (int64_t)(undefined8 *)((uint64_t)((int64_t)pcVar8 + 8) & 0xfffffffffffffff8));
            uVar6 = (uint64_t)((int32_t)puVar5 + 0x138U >> 3);
            puVar5 = (undefined8 *)(reloc.histogram_opts + -(int64_t)puVar5);
            puVar9 = (undefined8 *)((uint64_t)((int64_t)pcVar8 + 8) & 0xfffffffffffffff8);
            while (uVar6 != 0) {
                uVar6 = uVar6 - 1;
                *puVar9 = *puVar5;
                puVar5 = puVar5 + (uint64_t)uVar10 * 0x1ffffffffffffffe + 1;
                puVar9 = puVar9 + (uint64_t)uVar10 * 0x1ffffffffffffffe + 1;
            }
            uVar1 = *(undefined4 *)((int64_t)placeholder_1 + 4);
            uVar2 = *(undefined4 *)(placeholder_1 + 1);
            uVar3 = *(undefined4 *)((int64_t)placeholder_1 + 0xc);
            *(undefined4 *)((int64_t)pcVar8 + 0x38) = *(undefined4 *)placeholder_1;
            *(undefined4 *)((int64_t)pcVar8 + 0x3c) = uVar1;
            *(undefined4 *)((int64_t)pcVar8 + 0x40) = uVar2;
            *(undefined4 *)((int64_t)pcVar8 + 0x44) = uVar3;
            uVar1 = *(undefined4 *)((int64_t)placeholder_1 + 0x14);
            uVar2 = *(undefined4 *)(placeholder_1 + 3);
            uVar3 = *(undefined4 *)((int64_t)placeholder_1 + 0x1c);
            *(undefined4 *)((int64_t)pcVar8 + 0x48) = *(undefined4 *)(placeholder_1 + 2);
            *(undefined4 *)((int64_t)pcVar8 + 0x4c) = uVar1;
            *(undefined4 *)((int64_t)pcVar8 + 0x50) = uVar2;
            *(undefined4 *)((int64_t)pcVar8 + 0x54) = uVar3;
            uVar1 = *(undefined4 *)((int64_t)placeholder_1 + 0x24);
            uVar2 = *(undefined4 *)(placeholder_1 + 5);
            uVar3 = *(undefined4 *)((int64_t)placeholder_1 + 0x2c);
            *(undefined4 *)((int64_t)pcVar8 + 0x58) = *(undefined4 *)(placeholder_1 + 4);
            *(undefined4 *)((int64_t)pcVar8 + 0x5c) = uVar1;
            *(undefined4 *)((int64_t)pcVar8 + 0x60) = uVar2;
            *(undefined4 *)((int64_t)pcVar8 + 100) = uVar3;
            uVar1 = *(undefined4 *)((int64_t)placeholder_1 + 0x34);
            uVar2 = *(undefined4 *)(placeholder_1 + 7);
            uVar3 = *(undefined4 *)((int64_t)placeholder_1 + 0x3c);
            *(undefined4 *)((int64_t)pcVar8 + 0x68) = *(undefined4 *)(placeholder_1 + 6);
            *(undefined4 *)((int64_t)pcVar8 + 0x6c) = uVar1;
            *(undefined4 *)((int64_t)pcVar8 + 0x70) = uVar2;
            *(undefined4 *)((int64_t)pcVar8 + 0x74) = uVar3;
            uVar1 = *(undefined4 *)((int64_t)placeholder_1 + 0x44);
            uVar2 = *(undefined4 *)(placeholder_1 + 9);
            uVar3 = *(undefined4 *)((int64_t)placeholder_1 + 0x4c);
            *(undefined4 *)((int64_t)pcVar8 + 0x78) = *(undefined4 *)(placeholder_1 + 8);
            *(undefined4 *)((int64_t)pcVar8 + 0x7c) = uVar1;
            *(undefined4 *)((int64_t)pcVar8 + 0x80) = uVar2;
            *(undefined4 *)((int64_t)pcVar8 + 0x84) = uVar3;
            uVar1 = *(undefined4 *)((int64_t)placeholder_1 + 0x54);
            uVar2 = *(undefined4 *)(placeholder_1 + 0xb);
            uVar3 = *(undefined4 *)((int64_t)placeholder_1 + 0x5c);
            *(undefined4 *)((int64_t)pcVar8 + 0x88) = *(undefined4 *)(placeholder_1 + 10);
            *(undefined4 *)((int64_t)pcVar8 + 0x8c) = uVar1;
            *(undefined4 *)((int64_t)pcVar8 + 0x90) = uVar2;
            *(undefined4 *)((int64_t)pcVar8 + 0x94) = uVar3;
            uVar1 = *(undefined4 *)((int64_t)placeholder_1 + 100);
            uVar2 = *(undefined4 *)(placeholder_1 + 0xd);
            uVar3 = *(undefined4 *)((int64_t)placeholder_1 + 0x6c);
            *(undefined4 *)((int64_t)pcVar8 + 0x98) = *(undefined4 *)(placeholder_1 + 0xc);
            *(undefined4 *)((int64_t)pcVar8 + 0x9c) = uVar1;
            *(undefined4 *)((int64_t)pcVar8 + 0xa0) = uVar2;
            *(undefined4 *)((int64_t)pcVar8 + 0xa4) = uVar3;
            uVar1 = *(undefined4 *)((int64_t)placeholder_1 + 0x74);
            uVar2 = *(undefined4 *)(placeholder_1 + 0xf);
            uVar3 = *(undefined4 *)((int64_t)placeholder_1 + 0x7c);
            *(undefined4 *)((int64_t)pcVar8 + 0xa8) = *(undefined4 *)(placeholder_1 + 0xe);
            *(undefined4 *)((int64_t)pcVar8 + 0xac) = uVar1;
            *(undefined4 *)((int64_t)pcVar8 + 0xb0) = uVar2;
            *(undefined4 *)((int64_t)pcVar8 + 0xb4) = uVar3;
            uVar1 = *(undefined4 *)((int64_t)placeholder_1 + 0x84);
            uVar2 = *(undefined4 *)(placeholder_1 + 0x11);
            uVar3 = *(undefined4 *)((int64_t)placeholder_1 + 0x8c);
            *(undefined4 *)((int64_t)pcVar8 + 0xb8) = *(undefined4 *)(placeholder_1 + 0x10);
            *(undefined4 *)((int64_t)pcVar8 + 0xbc) = uVar1;
            *(undefined4 *)((int64_t)pcVar8 + 0xc0) = uVar2;
            *(undefined4 *)((int64_t)pcVar8 + 0xc4) = uVar3;
            uVar1 = *(undefined4 *)((int64_t)placeholder_1 + 0x94);
            uVar2 = *(undefined4 *)(placeholder_1 + 0x13);
            uVar3 = *(undefined4 *)((int64_t)placeholder_1 + 0x9c);
            *(undefined4 *)((int64_t)pcVar8 + 200) = *(undefined4 *)(placeholder_1 + 0x12);
            *(undefined4 *)((int64_t)pcVar8 + 0xcc) = uVar1;
            *(undefined4 *)((int64_t)pcVar8 + 0xd0) = uVar2;
            *(undefined4 *)((int64_t)pcVar8 + 0xd4) = uVar3;
            uVar1 = *(undefined4 *)((int64_t)placeholder_1 + 0xa4);
            uVar2 = *(undefined4 *)(placeholder_1 + 0x15);
            uVar3 = *(undefined4 *)((int64_t)placeholder_1 + 0xac);
            *(undefined4 *)((int64_t)pcVar8 + 0xd8) = *(undefined4 *)(placeholder_1 + 0x14);
            *(undefined4 *)((int64_t)pcVar8 + 0xdc) = uVar1;
            *(undefined4 *)((int64_t)pcVar8 + 0xe0) = uVar2;
            *(undefined4 *)((int64_t)pcVar8 + 0xe4) = uVar3;
            uVar1 = *(undefined4 *)((int64_t)placeholder_1 + 0xb4);
            uVar2 = *(undefined4 *)(placeholder_1 + 0x17);
            uVar3 = *(undefined4 *)((int64_t)placeholder_1 + 0xbc);
            *(undefined4 *)((int64_t)pcVar8 + 0xe8) = *(undefined4 *)(placeholder_1 + 0x16);
            *(undefined4 *)((int64_t)pcVar8 + 0xec) = uVar1;
            *(undefined4 *)((int64_t)pcVar8 + 0xf0) = uVar2;
            *(undefined4 *)((int64_t)pcVar8 + 0xf4) = uVar3;
            uVar1 = *(undefined4 *)((int64_t)placeholder_1 + 0xc4);
            uVar2 = *(undefined4 *)(placeholder_1 + 0x19);
            uVar3 = *(undefined4 *)((int64_t)placeholder_1 + 0xcc);
            *(undefined4 *)((int64_t)pcVar8 + 0xf8) = *(undefined4 *)(placeholder_1 + 0x18);
            *(undefined4 *)((int64_t)pcVar8 + 0xfc) = uVar1;
            *(undefined4 *)((int64_t)pcVar8 + 0x100) = uVar2;
            *(undefined4 *)((int64_t)pcVar8 + 0x104) = uVar3;
            uVar1 = *(undefined4 *)((int64_t)placeholder_1 + 0xd4);
            uVar2 = *(undefined4 *)(placeholder_1 + 0x1b);
            uVar3 = *(undefined4 *)((int64_t)placeholder_1 + 0xdc);
            *(undefined4 *)((int64_t)pcVar8 + 0x108) = *(undefined4 *)(placeholder_1 + 0x1a);
            *(undefined4 *)((int64_t)pcVar8 + 0x10c) = uVar1;
            *(undefined4 *)((int64_t)pcVar8 + 0x110) = uVar2;
            *(undefined4 *)((int64_t)pcVar8 + 0x114) = uVar3;
            uVar1 = *(undefined4 *)((int64_t)placeholder_1 + 0xe4);
            uVar2 = *(undefined4 *)(placeholder_1 + 0x1d);
            uVar3 = *(undefined4 *)((int64_t)placeholder_1 + 0xec);
            *(undefined4 *)((int64_t)pcVar8 + 0x118) = *(undefined4 *)(placeholder_1 + 0x1c);
            *(undefined4 *)((int64_t)pcVar8 + 0x11c) = uVar1;
            *(undefined4 *)((int64_t)pcVar8 + 0x120) = uVar2;
            *(undefined4 *)((int64_t)pcVar8 + 0x124) = uVar3;
            uVar1 = *(undefined4 *)((int64_t)placeholder_1 + 0xf4);
            uVar2 = *(undefined4 *)(placeholder_1 + 0x1f);
            uVar3 = *(undefined4 *)((int64_t)placeholder_1 + 0xfc);
            *(undefined4 *)((int64_t)pcVar8 + 0x128) = *(undefined4 *)(placeholder_1 + 0x1e);
            *(undefined4 *)((int64_t)pcVar8 + 300) = uVar1;
            *(undefined4 *)((int64_t)pcVar8 + 0x130) = uVar2;
            *(undefined4 *)((int64_t)pcVar8 + 0x134) = uVar3;
            *placeholder_1 = 0.00000000;
            placeholder_1[0x1f] = 0.00000000;
            uVar6 = (uint64_t)
                    (((int32_t)placeholder_1 -
                     (int32_t)(undefined8 *)((uint64_t)(placeholder_1 + 1) & 0xfffffffffffffff8)) + 0x100U >> 3);
            puVar5 = (undefined8 *)((uint64_t)(placeholder_1 + 1) & 0xfffffffffffffff8);
            while (_reloc.default_rectangle = (undefined8 *)pcVar8, uVar6 != 0) {
                uVar6 = uVar6 - 1;
                *puVar5 = 0;
                puVar5 = puVar5 + (uint64_t)uVar10 * 0x1ffffffffffffffe + 1;
            }
        }
        return;
    }
    _reloc.clip_area = (code *)uVar4;
    return;
}


// WARNING: Control flow encountered bad instruction data
// WARNING: Possible PIC construction at 0x0800649f: Changing call to branch
// WARNING: Possible PIC construction at 0x0800651d: Changing call to branch
// WARNING: Possible PIC construction at 0x08006579: Changing call to branch
// WARNING: Possible PIC construction at 0x080065c1: Changing call to branch
// WARNING: Possible PIC construction at 0x0800662a: Changing call to branch
// WARNING: Possible PIC construction at 0x080066e9: Changing call to branch
// WARNING: Possible PIC construction at 0x0800671d: Changing call to branch
// WARNING: Possible PIC construction at 0x08006776: Changing call to branch
// WARNING: Possible PIC construction at 0x08006814: Changing call to branch
// WARNING: Possible PIC construction at 0x08006920: Changing call to branch
// WARNING: Possible PIC construction at 0x08006b15: Changing call to branch
// WARNING: Possible PIC construction at 0x08006b7d: Changing call to branch
// WARNING: Possible PIC construction at 0x0800696a: Changing call to branch
// WARNING: Possible PIC construction at 0x08006a0d: Changing call to branch
// WARNING: Possible PIC construction at 0x08006a56: Changing call to branch
// WARNING: Possible PIC construction at 0x08006b28: Changing call to branch
// WARNING: Possible PIC construction at 0x08006a88: Changing call to branch
// WARNING: Removing unreachable block (ram,0x08006b2d)
// WARNING: Removing unreachable block (ram,0x08006a5b)
// WARNING: Removing unreachable block (ram,0x0800662f)
// WARNING: Removing unreachable block (ram,0x08006638)
// WARNING: Removing unreachable block (ram,0x0800664c)
// WARNING: Removing unreachable block (ram,0x08006930)
// WARNING: Removing unreachable block (ram,0x0800693a)
// WARNING: Removing unreachable block (ram,0x08006665)
// WARNING: Removing unreachable block (ram,0x08006b60)
// WARNING: Removing unreachable block (ram,0x0800666f)
// WARNING: Removing unreachable block (ram,0x08006aa0)
// WARNING: Removing unreachable block (ram,0x08006a12)
// WARNING: Removing unreachable block (ram,0x08006a1a)
// WARNING: Removing unreachable block (ram,0x0800696f)
// WARNING: Removing unreachable block (ram,0x080069ea)
// WARNING: Removing unreachable block (ram,0x08006a05)
// WARNING: Removing unreachable block (ram,0x08006b82)
// WARNING: Removing unreachable block (ram,0x08006b1a)
// WARNING: Removing unreachable block (ram,0x08006925)
// WARNING: Removing unreachable block (ram,0x08006819)
// WARNING: Removing unreachable block (ram,0x0800677b)
// WARNING: Removing unreachable block (ram,0x08006920)
// WARNING: Removing unreachable block (ram,0x0800678f)
// WARNING: Removing unreachable block (ram,0x080067a9)
// WARNING: Removing unreachable block (ram,0x080067bd)
// WARNING: Removing unreachable block (ram,0x080067d3)
// WARNING: Removing unreachable block (ram,0x08006722)
// WARNING: Removing unreachable block (ram,0x0800673c)
// WARNING: Removing unreachable block (ram,0x0800673e)
// WARNING: Removing unreachable block (ram,0x08006768)
// WARNING: Removing unreachable block (ram,0x080066ee)
// WARNING: Removing unreachable block (ram,0x080065c6)
// WARNING: Removing unreachable block (ram,0x0800657e)
// WARNING: Removing unreachable block (ram,0x08006522)
// WARNING: Removing unreachable block (ram,0x08006556)
// WARNING: Removing unreachable block (ram,0x08006590)
// WARNING: Removing unreachable block (ram,0x08006a60)
// WARNING: Removing unreachable block (ram,0x0800659e)
// WARNING: Removing unreachable block (ram,0x08006558)
// WARNING: Removing unreachable block (ram,0x080064a4)
// WARNING: Removing unreachable block (ram,0x08006900)
// WARNING: Removing unreachable block (ram,0x0800690a)
// WARNING: Removing unreachable block (ram,0x080064df)
// WARNING: Removing unreachable block (ram,0x080064e9)
// WARNING: Removing unreachable block (ram,0x080064f0)
// WARNING: Removing unreachable block (ram,0x08006680)
// WARNING: Removing unreachable block (ram,0x080064f8)
// WARNING: Removing unreachable block (ram,0x08006a8d)
// WARNING: Removing unreachable block (ram,0x080065c9)
// WARNING: Removing unreachable block (ram,0x080065d4)
// WARNING: Removing unreachable block (ram,0x080065db)
// WARNING: Removing unreachable block (ram,0x080065ee)
// WARNING: Removing unreachable block (ram,0x08006b28)
// WARNING: Removing unreachable block (ram,0x08006602)
// WARNING: Removing unreachable block (ram,0x08006b38)
// WARNING: Removing unreachable block (ram,0x08006b4b)
// WARNING: Removing unreachable block (ram,0x08006610)
// WARNING: Removing unreachable block (ram,0x08006a50)
// WARNING: Removing unreachable block (ram,0x08006621)

void sym.plot_bars(int64_t arg1, undefined8 placeholder_1, undefined8 placeholder_2, int64_t arg4, int64_t arg5)
{
    double dVar1;
    double dVar2;
    uint32_t uVar3;
    uint32_t uVar4;
    uint8_t uVar5;
    char cVar6;
    uint32_t uVar7;
    int32_t *piVar8;
    int64_t iVar9;
    uint8_t *puVar10;
    uint32_t *puVar11;
    char *pcVar12;
    uint32_t uVar13;
    uint64_t unaff_RBX;
    uint64_t uVar14;
    char *pcVar15;
    int32_t iVar16;
    int64_t iVar17;
    double dVar18;
    
    uVar3 = *(uint32_t *)(arg1 + 0x10);
    pcVar15 = (char *)(uint64_t)uVar3;
    uVar7 = 0;
    if (3 < *(uint32_t *)(_reloc.term + 0x24)) {
        uVar7 = *(uint32_t *)(_reloc.term + 0x24) >> 1;
    }
    uVar13 = uVar3 & 0xffffffbf;
    uVar4 = (uint32_t)(arg4 & 0xffffffffffffff00U);
    uVar7 = uVar7 & 0xffffff00 | (uint32_t)(uVar3 == 0x289) | uVar4 | uVar3 == 0x608 | uVar4 | uVar3 == 0x549;
    puVar11 = (uint32_t *)(arg4 & 0xffffffffffffff00U | (uint64_t)(uVar13 == 0x186));
    uVar5 = (uint8_t)uVar7 | uVar13 == 0x186;
    piVar8 = (int32_t *)(uint64_t)(uVar7 & 0xffffff00 | (uint32_t)uVar5);
    if ((uVar5 != 0) || (uVar13 == 0x487)) {
        uVar14 = unaff_RBX;
        if (*(int32_t *)(arg1 + 0x1c8) < 1) goto code_r0x080921db;
        iVar17 = 0;
        do {
            piVar8 = (int32_t *)(*(int64_t *)(arg1 + 0x1e8) + iVar17 * 0x40);
            if (*piVar8 != 2) {
                dVar18 = *(double *)(piVar8 + 2);
                if (uVar3 == 0x608) {
                    iVar16 = *(int32_t *)(*(int64_t *)(arg1 + 0x1a8) + 8) + *(int32_t *)0x8092457;
                    puVar11 = (uint32_t *)(uint64_t)(*(int32_t *)0x8092457 - 1U);
                    dVar18 = _reloc..LC8 + *(double *)(*(int64_t *)(arg1 + 0x1a8) + 0x10) +
                             ((double)(*(int32_t *)0x8092457 - 1U) * _reloc..LC8 +
                             (double)((iVar16 + -1) * ((int32_t)iVar17 + -1) + *(int32_t *)(arg1 + 0x1b0)) + dVar18) /
                             (double)iVar16;
                }
                iVar9 = (int64_t)_reloc.x_axis * 0x2a8;
                piVar8 = (int32_t *)(reloc.axis_array + iVar9);
                dVar1 = *(double *)(reloc.clip_polygon + iVar9);
                dVar2 = *(double *)(reloc.style_from_fill + iVar9);
                if (dVar2 <= dVar1) {
                    if (dVar2 <= dVar18) {
                        piVar8 = (int32_t *)((uint64_t)piVar8 & 0xffffffffffffff00 | (uint64_t)(dVar1 < dVar18));
                        goto code_r0x0800648d;
                    }
                } else {
                    if (dVar1 <= dVar18) {
                        piVar8 = (int32_t *)((uint64_t)piVar8 & 0xffffffffffffff00 | (uint64_t)(dVar2 < dVar18));
code_r0x0800648d:
                        uVar14 = arg1;
                        if ((char)piVar8 == '\0') goto code_r0x080921db;
                    }
                }
            }
            iVar17 = iVar17 + 1;
        } while (*(int32_t *)(arg1 + 0x1c8) != (int32_t)iVar17 && (int32_t)iVar17 <= *(int32_t *)(arg1 + 0x1c8));
    }
    pcVar15 = (char *)((uint64_t)uVar3 & 0xffffffffffffff7f);
    if ((((int32_t)pcVar15 == 0x146) || (uVar14 = unaff_RBX, (int32_t)pcVar15 == 0x447)) &&
       (piVar8 = (int32_t *)(uint64_t)*(uint32_t *)(arg1 + 0x1c8), uVar14 = unaff_RBX,
       0 < (int32_t)*(uint32_t *)(arg1 + 0x1c8))) {
        iVar17 = 0;
        do {
            piVar8 = (int32_t *)(*(int64_t *)(arg1 + 0x1e8) + iVar17 * 0x40);
            if (*piVar8 != 2) {
                dVar18 = *(double *)(piVar8 + 4);
                iVar9 = (int64_t)_reloc.y_axis * 0x2a8;
                piVar8 = (int32_t *)(reloc.axis_array + iVar9);
                dVar1 = *(double *)(reloc.clip_polygon + iVar9);
                dVar2 = *(double *)(reloc.style_from_fill + iVar9);
                if (dVar1 < dVar2) {
                    if (dVar1 <= dVar18) {
                        piVar8 = (int32_t *)((uint64_t)piVar8 & 0xffffffffffffff00 | (uint64_t)(dVar2 < dVar18));
                        goto code_r0x080066e1;
                    }
                } else {
                    if (dVar2 <= dVar18) {
                        piVar8 = (int32_t *)((uint64_t)piVar8 & 0xffffffffffffff00 | (uint64_t)(dVar1 < dVar18));
code_r0x080066e1:
                        uVar14 = arg1;
                        if ((char)piVar8 == '\0') break;
                    }
                }
            }
            iVar17 = iVar17 + 1;
            uVar14 = unaff_RBX;
        } while (*(int32_t *)(arg1 + 0x1c8) != (int32_t)iVar17 && (int32_t)iVar17 <= *(int32_t *)(arg1 + 0x1c8));
    }
code_r0x080921db:
    cVar6 = (char)piVar8;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    *(char *)piVar8 = *(char *)piVar8 + cVar6;
    puVar10 = (uint8_t *)(uVar14 & 0xffffffff);
    pcVar12 = (char *)(uint64_t)((uint32_t)puVar11 & *puVar11);
    uVar5 = (uint8_t)puVar10;
    *puVar10 = *puVar10 | uVar5;
    *puVar10 = *puVar10 + uVar5;
    *puVar10 = *puVar10 + uVar5;
    *puVar10 = *puVar10 + uVar5;
    *puVar10 = *puVar10 + uVar5;
    *puVar10 = *puVar10 + uVar5;
    *pcVar15 = *pcVar15 + uVar5;
    *puVar10 = *puVar10 + uVar5;
    *puVar10 = *puVar10 + uVar5;
    *puVar10 = *puVar10 + uVar5;
    *pcVar12 = *pcVar12 + uVar5;
    *puVar10 = *puVar10 + uVar5;
    *puVar10 = *puVar10 + uVar5;
    *puVar10 = *puVar10 + uVar5;
    *puVar10 = *puVar10 + uVar5;
    *puVar10 = *puVar10 + uVar5;
    *puVar10 = *puVar10 + uVar5;
    *puVar10 = *puVar10 + uVar5;
    *puVar10 = *puVar10 + uVar5;
    *puVar10 = *puVar10 + uVar5;
    // WARNING: Bad instruction - Truncating control flow here
    halt_baddata();
}


// WARNING: [r2ghidra] Failed to match type signed int64_t for variable var_1ch to Decompiler type: Unknown type
// identifier signed
// WARNING: [r2ghidra] Failed to match type signed int64_t for variable arg_84h to Decompiler type: Unknown type
// identifier signed
// WARNING: [r2ghidra] Var arg_84h is stack pointer based, which is not supported for decompilation.
// WARNING: [r2ghidra] Var arg_80h is stack pointer based, which is not supported for decompilation.
// WARNING: [r2ghidra] Failed to match type signed int64_t for variable arg_64h to Decompiler type: Unknown type
// identifier signed
// WARNING: [r2ghidra] Var arg_64h is stack pointer based, which is not supported for decompilation.

void sym.place_grid(int64_t arg1)
{
    double dVar1;
    int64_t iVar2;
    undefined8 uVar3;
    undefined4 uVar4;
    undefined4 uVar5;
    int32_t iVar6;
    undefined4 uVar7;
    undefined4 uVar8;
    undefined4 uVar9;
    undefined4 uVar10;
    double extraout_XMM0_Qa;
    double extraout_XMM0_Qa_00;
    double dVar11;
    undefined auVar12 [16];
    double dVar13;
    double dStack72;
    uint64_t auStack64 [2];
    
    uVar5 = *(undefined4 *)0x8092297;
    uVar4 = *(undefined4 *)0x809228f;
    uVar3 = _reloc.clip_area;
    iVar2 = _reloc.term;
    func_0x080921db();
    _obj.largest_polar_circle = 0.00000000;
    if ((int32_t)arg1 == 2) {
        *(undefined4 *)0x8092297 = 0xfffffffd;
        *(undefined4 *)0x809228f = 0xfffffffd;
    } else {
        if (reloc.grid_tics_in_front != (code)0x0) goto code_r0x08000b4c;
    }
    _reloc.x_axis = 2;
    _reloc.y_axis = 1;
    func_0x080921db(1, reloc.ytic_x, 2, sym.ytick2d_callback);
    func_0x080921db(2, reloc.xtic_y, 1, sym.xtick2d_callback);
    _reloc.x_axis = 6;
    _reloc.y_axis = 5;
    func_0x080921db(5, reloc.y2tic_x, 6, sym.ytick2d_callback);
    func_0x080921db(6, reloc.x2tic_y, 5, sym.xtick2d_callback);
code_r0x08000b4c:
    _reloc.x_axis = 2;
    _reloc.y_axis = 1;
    _reloc.clip_area = reloc.plot_bounds;
    if ((*(int32_t *)0x809353b != 0) && ((reloc.raxis != (code)0x0 || (reloc.polar != (code)0x0)))) {
        _reloc.tic_start = func_0x080921db(0);
        _reloc.tic_text = _reloc.tic_start - *(int32_t *)(iVar2 + 0x18);
        _reloc.rotate_tics = *(int32_t *)0x80935bb;
        _reloc.tic_mirror = _reloc.tic_start;
        if (*(int32_t *)0x80935bb == 0) {
            _reloc.tic_hjust = 1;
        } else {
            iVar6 = (**(code **)(iVar2 + 0x78))();
            if (iVar6 != 0) {
                _reloc.tic_hjust = (uint32_t)(_reloc.rotate_tics == -0x10e) * 2;
            }
        }
        if (*(char *)0x8093713 != '\0') {
            _reloc.tic_hjust = *(int32_t *)0x80935bf;
        }
        _reloc.tic_direction = 1;
        func_0x080921db(0x8093483, sym.xtick2d_callback);
        (**(code **)(iVar2 + 0x78))(0);
    }
    if (0.00000000 < _reloc.polar_grid_angle) {
        uVar7 = func_0x080921db(0);
        uVar8 = func_0x080921db(0);
        (**(code **)(_reloc.term + 0x110))(5);
        func_0x080921db(reloc.grid_lp);
        if (_obj.largest_polar_circle <= 0.00000000) {
            func_0x080921db(*(undefined8 *)0x809349b);
            _obj.largest_polar_circle = extraout_XMM0_Qa;
        }
        auVar12 = (undefined  [16])0x0;
        dVar11 = 0.00000000;
        dVar13 = _obj.largest_polar_circle;
        dVar1 = _reloc..LC9;
        while( true ) {
            uVar9 = func_0x080921db(dVar1 * dVar13, dVar11, SUB168(auVar12, 0));
            uVar10 = func_0x080921db(SUB168(auVar12, 0) * _obj.largest_polar_circle);
            func_0x080921db(uVar7, uVar8, uVar9, uVar10);
            dVar13 = _obj.largest_polar_circle;
            dVar11 = dVar11 + _reloc.polar_grid_angle;
            if (_reloc..LC10 <= dVar11) break;
            func_0x080921db(dVar11, auStack64, &dStack72);
            auVar12 = ZEXT816(auStack64[0]);
            dVar1 = dStack72;
        }
        (**(code **)(_reloc.term + 0x110))(6);
    }
    if (_reloc.setup_tics != 0) {
        func_0x080921db(reloc.border_lp);
        if (_obj.largest_polar_circle <= 0.00000000) {
            func_0x080921db(*(undefined8 *)0x809349b);
            _obj.largest_polar_circle = extraout_XMM0_Qa_00;
        }
        func_0x080921db(reloc.THETA_AXIS);
        func_0x080921db(reloc.THETA_AXIS, sym.ttick_callback);
        (**(code **)(_reloc.term + 0x78))(0);
    }
    _reloc.clip_area = (code *)uVar3;
    *(undefined4 *)0x809228f = uVar4;
    *(undefined4 *)0x8092297 = uVar5;
    return;
}


