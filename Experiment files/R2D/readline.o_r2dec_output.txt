/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/readline.o @ 0x8000040 */
#include <stdint.h>
 
int32_t mbwidth (uint32_t arg1) {
    rdi = arg1;
    /* [01] -r-x section size 7336 named .text */
    eax = *(reloc.encoding);
    if (eax != 0xf) {
        r8d = 1;
        if (eax == 0x10) {
            r8d = 1;
            if (*(rdi) > 0xe2) {
                goto label_0;
            }
        }
        eax = r8d;
        return eax;
    }
    edi = *(rdi);
    al = encoding ();
    r8d = 1;
    while (1) {
        eax = r8d;
        return eax;
label_0:
        r8d = 2;
        eax = 2;
        return eax;
        r8d = 2;
    }
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/readline.o @ 0x80000b0 */
#include <stdint.h>
 
int64_t backspace (void) {
    eax = *(reloc.encoding);
    rcx = cur_pos;
    if (eax != 0xf) {
        if (eax == 0x10) {
            goto label_4;
        }
        rsi = *(reloc.stderr);
        rcx--;
        edi = 8;
        r12d = 1;
        *(obj.cur_pos) = rcx;
        encoding ();
label_0:
        eax = r12d;
        return eax;
    }
    ebx = 0;
    eax = 0;
    rdx = 0xffffffffffffffff;
    r12d = 1;
    if (rcx == 0) {
        goto label_5;
    }
    do {
        rdx = cur_line;
        r12d = 0;
        edi = *((rdx + rax));
        al = encoding ();
        rdx = cur_pos;
        r12b = (al != 0) ? 1 : 0;
        r12d++;
        ebx += r12d;
        rax = (int64_t) ebx;
    } while (rax < rdx);
    rax = (int64_t) r12d;
    rdx -= rax;
label_5:
    rsi = *(reloc.stderr);
    edi = 8;
    *(obj.cur_pos) = rdx;
    encoding ();
    rdi = cur_pos;
    rdi += *(obj.cur_line);
    eax = _text ();
    if (eax <= 1) {
        goto label_0;
    }
label_1:
    rsi = *(reloc.stderr);
    edi = 8;
    encoding ();
    eax = r12d;
    return rax;
label_4:
    rdx = cur_line;
    rax = rcx - 1;
    while (esi != 0xc0) {
        rsi = rax - 1;
        if (bl >= 0) {
            goto label_6;
        }
        if (rax == 0) {
            goto label_6;
        }
        rax = rsi;
        ebx = *((rdx + rax));
        r12d = ecx;
        rbp = rdx + rax;
        r12d -= eax;
        esi = ebx;
        esi &= 0xc0;
    }
    *(obj.cur_pos) = rax;
label_2:
    rsi = *(reloc.stderr);
    edi = 8;
    encoding ();
    rbp = cur_pos;
    rbp += *(obj.cur_line);
label_3:
    rdi = rbp;
    eax = _text ();
    if (eax > 1) {
        goto label_1;
    }
    eax = r12d;
    return rax;
label_6:
    *(obj.cur_pos) = rax;
    rax = encoding ();
    rax = *(rax);
    if ((*((rax + rbx*2 + 1)) & 0x40) != 0) {
        goto label_2;
    }
    goto label_3;
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/readline.o @ 0x8000240 */
#include <stdint.h>
 
int64_t redraw_line (void) {
    rsi = *(reloc.stderr);
    encoding (rbx);
    rsi = *(reloc.stderr);
    rdi = cur_line;
    encoding ();
    rbx = cur_pos;
    rax = max_pos;
    *(obj.cur_pos) = rax;
    if (rax <= rbx) {
        goto label_0;
    }
    do {
        backspace ();
    } while (*(obj.cur_pos) > rbx);
label_0:
    return rax;
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/readline.o @ 0x8000290 */
#include <stdint.h>
 
int64_t fix_line (void) {
    rbx = cur_pos;
    if (rbx >= *(obj.max_pos)) {
        goto label_0;
    }
    do {
        rax = cur_line;
        rsi = *(reloc.stderr);
        edi = *((rax + rbx));
        rbx++;
        encoding ();
    } while (*(obj.max_pos) > rbx);
label_0:
    rsi = *(reloc.stderr);
    edi = 0x20;
    encoding ();
    rsi = *(reloc.stderr);
    edi = 0x20;
    encoding ();
    if (*(obj.search_mode) == 0) {
        goto label_1;
    }
    eax = search_result_width;
    if (eax == 0) {
        goto label_1;
    }
    ebx = 0;
    do {
        rsi = *(reloc.stderr);
        edi = 0x20;
        rbx++;
        encoding ();
        rdx = *(obj.search_result_width);
    } while (rdx > rbx);
    if (edx == 0) {
        goto label_1;
    }
    ebx = 0;
    do {
        rsi = *(reloc.stderr);
        edi = 8;
        rbx++;
        encoding ();
        rax = *(obj.search_result_width);
    } while (rax > rbx);
label_1:
    rsi = *(reloc.stderr);
    edi = 8;
    encoding ();
    rsi = *(reloc.stderr);
    edi = 8;
    encoding ();
    rbx = cur_pos;
    rax = max_pos;
    *(obj.cur_pos) = rax;
    if (rax <= rbx) {
        goto label_2;
    }
    do {
        backspace ();
    } while (*(obj.cur_pos) > rbx);
label_2:
    return rax;
}




/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/readline.o @ 0x80005b0 */
#include <stdint.h>
 
uint64_t do_search (int64_t arg1) {
    rdi = arg1;
    esi = edi;
    rdi = cur_line;
    eax = encoding (r12);
    rdi = search_result;
    r12d = eax;
    if (eax != 0xffffffff) {
        rax = encoding ();
        *(obj.search_result) = rax;
        rdi = rax;
    }
    print_search_result ();
    eax = r12d;
    return rax;
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/readline.o @ 0x80005f0 */
#include <stdint.h>
 
int64_t char_seqlen (void) {
    edx = *(reloc.encoding);
    if (edx == 0xf) {
        goto label_0;
    }
    eax = 1;
    if (edx != 0x10) {
        goto label_1;
    }
    r8 = cur_pos;
    rsi = cur_line;
    rdi = max_pos;
    eax = r8 + 1;
    rax = (int64_t) eax;
    while (ecx != 0xc0) {
        if (dl >= 0) {
            goto label_2;
        }
        rdx = rax + 1;
        if (rdi <= rax) {
            goto label_2;
        }
        rax = rdx;
        edx = *((rsi + rax));
        ecx = edx;
        ecx &= 0xc0;
    }
label_2:
    eax -= r8d;
    return rax;
label_1:
    return rax;
label_0:
    rdx = cur_line;
    rax = cur_pos;
    edi = *((rdx + rax));
    al = encoding ();
    al = (al != 0) ? 1 : 0;
    eax = (int32_t) al;
    eax++;
    return rax;
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/readline.o @ 0x8000690 */
#include <stdint.h>
 
uint64_t clear_line (int64_t arg1) {
    rdi = arg1;
    rsi = *(reloc.stderr);
    edi = 0xd;
    encoding ();
    rsi = *(reloc.stderr);
    rdi = rbp;
    rax = encoding ();
    *(obj.cur_pos) = 0;
    if (*(obj.max_pos) == 0) {
        goto label_0;
    }
    do {
        rsi = *(reloc.stderr);
        edi = 0x20;
        encoding ();
        rdi = cur_pos;
        rdi += *(obj.cur_line);
        eax = _text ();
        if (eax > 1) {
            rsi = *(reloc.stderr);
            edi = 0x20;
            encoding ();
        }
        rax = char_seqlen ();
        rdx = max_pos;
        rax = (int64_t) eax;
        rax += *(obj.cur_pos);
        *(obj.cur_pos) = rax;
    } while (rax < rdx);
    if (rdx == 0) {
        goto label_0;
    }
    rcx = cur_line;
    rax = rcx + rdx - 1;
    do {
        rdx = rax;
        *(rax) = 0;
        rax--;
    } while (rdx != rcx);
    *(obj.max_pos) = 0;
label_0:
    rsi = *(reloc.stderr);
    edi = 0xd;
    encoding ();
    rsi = *(reloc.stderr);
    rdi = rbp;
    encoding ();
    *(obj.cur_pos) = 0;
    return rax;
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/readline.o @ 0x8000790 */
#include <stdint.h>
 
int64_t switch_prompt (int64_t arg1, int64_t arg2) {
    rdi = arg1;
    rsi = arg2;
    r12 = rsi;
    if (*(obj.search_mode) == 0) {
        goto label_0;
    }
    if (*(obj.search_result_width) == 0xfffffffd) {
        goto label_0;
    }
    ebx = 0;
    do {
        rsi = *(reloc.stderr);
        edi = 0x20;
        rbx++;
        encoding ();
        rax = *(obj.search_result_width);
        rdx = rax + 3;
    } while (rdx > rbx);
    if (rax == 0xfffffffffffffffd) {
        goto label_0;
    }
    ebx = 0;
    do {
        rsi = *(reloc.stderr);
        edi = 8;
        rbx++;
        encoding ();
        rax = *(obj.search_result_width);
        rax += 3;
    } while (rax > rbx);
label_0:
    rdi = rbp;
    clear_line ();
    rsi = *(reloc.stderr);
    edi = 0xd;
    encoding ();
    rsi = *(reloc.stderr);
    rdi = r12;
    encoding ();
    rdi = rbp;
    *(obj.cur_pos) = 0;
    rax = encoding ();
    rdi = r12;
    rbx = rax;
    eax = encoding ();
    ecx = ebx;
    ecx -= eax;
    __asm ("cmovns ebp, ecx");
    ebx = 0;
    if (ecx <= 0) {
        goto label_1;
    }
    do {
        rsi = *(reloc.stderr);
        edi = 0x20;
        ebx++;
        encoding ();
    } while (ebx < ebp);
    ebx = 0;
    do {
        rsi = *(reloc.stderr);
        edi = 8;
        ebx++;
        encoding ();
    } while (ebx < ebp);
label_1:
    return rax;
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/readline.o @ 0x80008a0 */
#include <stdint.h>
 
int64_t delete_previous_word (void) {
    rbx = cur_pos;
    r12 = cur_pos;
    if (rbx != 0) {
        goto label_2;
    }
    goto label_3;
    do {
        backspace ();
        rbx = cur_pos;
        if (rbx == 0) {
            goto label_4;
        }
label_2:
        r14 = cur_line;
    } while (*((r14 + rbx - 1)) == 0x20);
    if (rbx != 0) {
        goto label_5;
    }
    goto label_6;
    do {
        backspace ();
        rbx = cur_pos;
        if (rbx == 0) {
            goto label_4;
        }
        r14 = cur_line;
label_5:
    } while (*((r14 + rbx - 1)) != 0x20);
    if (r12 == rbx) {
label_3:
        return;
    }
label_4:
    rax = max_pos;
    r13 = rax;
    r13 -= r12;
    if (rax <= rbx) {
        goto label_7;
    }
    do {
label_0:
        rsi = *(reloc.stderr);
        edi = 0x20;
        encoding ();
        rdi = cur_pos;
        rdi += *(obj.cur_line);
        eax = _text ();
        if (eax > 1) {
            rsi = *(reloc.stderr);
            edi = 0x20;
            encoding ();
        }
        eax = char_seqlen ();
        rbp = (int64_t) eax;
        rbp += *(obj.cur_pos);
        *(obj.cur_pos) = rbp;
    } while (rbp < *(obj.max_pos));
label_7:
    if (rbx >= rbp) {
        goto label_8;
    }
    do {
        backspace ();
        rbp = cur_pos;
    } while (rbp > rbx);
label_8:
    r14 = cur_line;
label_1:
    rsi = r14 + r12;
    rdi = r14 + rbp;
    rdx = r13;
    r13 += rbp;
    encoding ();
    rdx = r12;
    rdi = r14 + r13;
    esi = 0;
    rdx -= rbp;
    encoding ();
    *(obj.max_pos) = r13;
    void (*0x8000290)() ();
label_6:
    rax = max_pos;
    ebp = 0;
    r13 = rax;
    r13 -= r12;
    if (rbx < rax) {
        goto label_0;
    }
    goto label_1;
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/readline.o @ 0x8000a10 */
#include <stdint.h>
 
int32_t set_termio_part_0 (int64_t arg9, int64_t arg8, int64_t arg7) {
    xmm2 = arg9;
    xmm1 = arg8;
    xmm0 = arg7;
    rdx = obj_orig_termio;
    edi = 0;
    eax = 0;
    esi = 0x5401;
    encoding ();
    eax = orig_termio;
    edi = 0;
    __asm ("movdqa xmm0, xmmword [obj.orig_termio]");
    __asm ("movdqa xmm1, xmmword [0x08001f90]");
    rdx = *(0x08001fb0);
    esi = 0x5403;
    eax &= 0xffffe9e5;
    *(obj.rl_termio) = xmm0;
    __asm ("movdqa xmm2, xmmword [0x08001fa0]");
    eax |= 5;
    *(0x08001f50) = xmm1;
    *(obj.rl_termio) = eax;
    eax = *(0x08001f4c);
    *(0x08001f70) = rdx;
    edx = *(0x08001fb8);
    al &= 5;
    *(0x08001f5b) = 0;
    eax |= 1;
    *(0x08001f78) = edx;
    rdx = obj_rl_termio;
    *(0x08001f4c) = eax;
    eax = 0x100;
    *(0x08001f56) = ax;
    eax = *(0x08001f95);
    *(0x08001f60) = xmm2;
    *(0x08001f24) = al;
    eax = *(0x08001f93);
    *(0x08001f22) = ax;
    eax = *(0x08001f9f);
    *(0x08001f2e) = al;
    eax = *(0x08001f9d);
    *(0x08001f2c) = al;
    eax = *(0x08001f9b);
    *(0x08001f2a) = al;
    eax = 0;
    encoding ();
    *(obj.term_set) = 1;
    return eax;
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/readline.o @ 0x8000b10 */
#include <stdint.h>
 
int32_t reset_termio_part_0 (void) {
    rdx = obj_orig_termio;
    edi = 0;
    eax = 0;
    esi = 0x5403;
    encoding ();
    *(obj.term_set) = 0;
    return eax;
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/readline.o @ 0x8000b40 */
#include <stdint.h>
 
int64_t extend_cur_line (void) {
    rax = line_len;
    rdi = cur_line;
    edx = 0;
    rsi = rax + 0x400;
    rax = encoding ();
    if (rax != 0) {
        *(obj.line_len) += 0x400;
        *(obj.cur_line) = rax;
        return rax;
    }
    while (1) {
        rsi = "Can't extend readline length";
        edi |= 0xffffffff;
        eax = 0;
        encoding ();
        reset_termio_part_0 ();
    }
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/readline.o @ 0x8000ba0 */
#include <stdint.h>
 
uint64_t copy_line (int64_t arg1) {
    rdi = arg1;
    while (rdx > *(obj.line_len)) {
        extend_cur_line ();
        rdi = rbp;
        encoding ();
        rdx = rax + 1;
    }
    rdi = cur_line;
    rsi = rbp;
    rax = encoding ();
    rsi = *(reloc.stderr);
    rdi = rax;
    encoding ();
    rdi = cur_line;
    rax = encoding ();
    *(obj.max_pos) = rax;
    *(obj.cur_pos) = rax;
    return rax;
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/readline.o @ 0x8000c10 */
#include <stdint.h>
 
uint64_t delete_forward_part_0 (void) {
    rax = char_seqlen ();
    rdi = max_pos;
    rdx = cur_pos;
    rax = (int64_t) eax;
    r8 = cur_line;
    rdi -= rax;
    *(obj.max_pos) = rdi;
    if (rdi <= rdx) {
        goto label_0;
    }
    rdx += r8;
    rsi = r8 + rdi;
    do {
        ecx = *((rdx + rax));
        rdx++;
        *((rdx - 1)) = cl;
    } while (rdx != rsi);
label_0:
    *((r8 + rdi)) = 0;
    return fix_line ();
}


/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/readline.o @ 0x8000c70 */
#include <stdint.h>
 
uint64_t delete_backward_part_0 (void) {
    rax = backspace ();
    rdi = max_pos;
    rdx = cur_pos;
    rax = (int64_t) eax;
    r8 = cur_line;
    rdi -= rax;
    *(obj.max_pos) = rdi;
    if (rdi <= rdx) {
        goto label_0;
    }
    rdx += r8;
    rsi = r8 + rdi;
    do {
        ecx = *((rdx + rax));
        rdx++;
        *((rdx - 1)) = cl;
    } while (rdx != rsi);
label_0:
    *((r8 + rdi)) = 0;
    return fix_line ();
}




