

/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/misc.o @ 0x8000040 */
#include <stdint.h>
 
int64_t prepare_call (int64_t arg10, int64_t arg9, int64_t arg7, uint32_t arg1) {
    int64_t var_sp_8h;
    uint32_t var_17h;
    int64_t var_sp_18h;
    int64_t var_20h;
    int64_t var_sp_24h;
    int64_t var_sp_28h;
    int64_t var_30h_2;
    int64_t var_sp_38h;
    signed int64_t var_4h;
    int64_t var_sp_10h;
    int64_t var_20h_2;
    int64_t var_30h;
    int64_t var_108h;
    int64_t var_110h;
    int64_t var_138h;
    xmm3 = arg10;
    xmm2 = arg9;
    xmm0 = arg7;
    rdi = arg1;
    /* [01] -r-x section size 14504 named .text */
label_15:
    rax = *(fs:0x28);
    *((rsp + 0x138)) = rax;
    eax = 0;
    rbp = rsp + 0x30;
    rdx = rsp + 0x108;
    rax = rbp;
    do {
        *(rax) = 7;
        rax += 0x18;
    } while (rax != rdx);
    if (edi == 2) {
        goto label_33;
    }
    if (edi == 5) {
        goto label_34;
    }
    *(obj.call_argc) = 0;
label_1:
    rdi = loc__LC8;
    r14d = 9;
    add_udv_by_name ();
    rsi = *(obj.call_argc);
    rdi = rax + 0x10;
    add_udv_by_name ();
    rdi = loc__LC9;
    add_udv_by_name ();
    rbp = rax + 0x10;
    rdi = rbp;
    add_udv_by_name ();
    rax = *(obj.lf_head);
    rdi = *((rax + 8));
    rax = add_udv_by_name ();
    rdi = rbp;
    rsi = rax;
    add_udv_by_name ();
    rdi = loc__LC10;
    rax = add_udv_by_name ();
    rdi = rax + 0x10;
    rbx = rax;
    add_udv_by_name ();
    if (*(obj.call_argc) <= 9) {
        r14d = *(obj.call_argc);
    }
    *((rbx + 0x10)) = 5;
    rsi = loc__LC11;
    eax = r14 + 1;
    *((rsp + 4)) = r14d;
    rax = (int64_t) eax;
    rdi = rax * 3;
    rdi <<= 3;
    rax = add_udv_by_name ();
    rdi = "ARG1";
    *((rbx + 0x18)) = rax;
    r13 = rax;
    rax = (int64_t) r14d;
    ebx = 1;
    *((r13 + 8)) = rax;
    *(r13) = 7;
    while (r14 != 0) {
        rdi = r14;
        rax = add_udv_by_name ();
        rsi = rax;
label_0:
        rdi = r15;
        add_udv_by_name ();
        if (*((rsp + 4)) >= ebx) {
            rax = rsp + rbp + 0x18;
            r8 = r13 + rbp;
            if (*(rax) == 7) {
                goto label_35;
            }
            __asm ("movdqu xmm2, xmmword [rax]");
            __asm ("movups xmmword [r13 + rbp], xmm2");
            rax = *((rax + 0x10));
            *((r13 + rbp + 0x10)) = rax;
        }
        rbx++;
        rbp += 0x18;
        if (rbx == 0xa) {
            goto label_36;
        }
label_2:
        rax = obj_argname;
        rdi = *((rax + rbx*8));
        rax = 0x08003918;
        r14 = *((rax + rbx*8));
        rax = add_udv_by_name ();
        r15 = rax + 0x10;
        r12 = rax;
        rdi = r15;
        add_udv_by_name ();
    }
    rdi = loc__LC12;
    rax = add_udv_by_name ();
    rsi = rax;
    goto label_0;
label_34:
    rdx = *(obj.lf_head);
    eax = 0;
    rsi = obj_call_args;
    do {
        rcx = *((rdx + rax + 0x58));
        *((rsi + rax)) = rcx;
        *((rdx + rax + 0x58)) = 0;
        rax += 8;
    } while (rax != 0x50);
    goto label_1;
label_35:
    rdi = *((r12 + 0x18));
    *((rsp + 8)) = r8;
    rbx++;
    rbp += 0x18;
    rax = add_udv_by_name ();
    r8 = *((rsp + 8));
    rsi = rax;
    rdi = r8;
    rax = add_udv_by_name ();
    if (rbx != 0xa) {
        goto label_2;
    }
label_36:
    rax = *((rsp + 0x138));
    rax ^= *(fs:0x28);
    if (rbx != 0xa) {
        goto label_37;
    }
    return rax;
label_33:
    *(obj.call_argc) = 0;
    edi = *(reloc.c_token);
    if (edi >= *(reloc.num_tokens)) {
        goto label_38;
    }
    rbx = obj_call_args;
    r13 = rsp + 0x10;
    r12 = rsp + 0x110;
    while (*((rbx + rdx*8)) != 0) {
label_3:
        edi = *(reloc.c_token);
label_4:
        eax++;
        *(obj.call_argc) = eax;
        if (*(reloc.num_tokens) <= edi) {
            goto label_38;
        }
        rsi = loc__LC6;
        eax = add_udv_by_name ();
        if (eax != 0) {
            goto label_39;
        }
        r14 = *(obj.call_argc);
        if (r14d > 8) {
            goto label_39;
        }
        rax = add_udv_by_name ();
        rdx = *(obj.call_argc);
        *((rbx + r14*8)) = rax;
        rax = rdx;
    }
    r14d = *(reloc.c_token);
    edi = *(reloc.c_token);
    eax = add_udv_by_name ();
    if (eax != 3) {
        edi = *(reloc.c_token);
        rsi = loc__LC1;
        eax = add_udv_by_name ();
        if (eax == 0) {
            edi = *(reloc.c_token);
            eax = add_udv_by_name ();
            if (eax != 1) {
                goto label_40;
            }
        }
label_5:
        rdi = r13;
        add_udv_by_name ();
        __asm ("movdqa xmm3, xmmword [rsp + 0x10]");
        rdx = *((rsp + 0x20));
        rax = *(obj.call_argc);
        rax *= 3;
        rax <<= 3;
        *((rsp + rax + 0x40)) = rdx;
        __asm ("movups xmmword [rsp + rax + 0x30], xmm3");
        eax = *((rsp + 0x10));
        if (eax == 1) {
            goto label_41;
        }
        if (eax != 2) {
            goto label_42;
        }
        xmm0 = *((rsp + 0x18));
        rcx = loc__LC2;
        edx = 0x20;
        rdi = r12;
        esi = 1;
        eax = 1;
        add_udv_by_name ();
        r14 = *(obj.call_argc);
        rdi = r12;
        rax = add_udv_by_name ();
        *((rbx + r14*8)) = rax;
label_6:
        eax = misc.c;
        goto label_3;
    }
    edi = *(reloc.c_token);
    add_udv_by_name ();
    r14 = *(obj.call_argc);
    rdi = *((rax + 0x18));
    rax = add_udv_by_name ();
    *((rbx + r14*8)) = rax;
    eax = *(reloc.c_token);
    edi = rax + 1;
    eax = misc.c;
    *(reloc.c_token) = edi;
    goto label_4;
label_39:
    edi = *(reloc.c_token);
    rax = *(obj.lf_head);
    *((rax + 0x44)) = edi;
    if (edi >= *(reloc.num_tokens)) {
        goto label_1;
    }
    rsi = loc__LC6;
    eax = add_udv_by_name ();
    if (eax != 0) {
        goto label_1;
    }
    eax = *(reloc.c_token);
    rsi = "too many arguments for 'call <file>';
    edi = rax + 1;
    eax = 0;
    *(reloc.c_token) = edi;
    rax = add_udv_by_name ();
label_41:
    r8 = *((rsp + 0x18));
    edx = 0x20;
    rdi = r12;
    eax = 0;
    rcx = loc__LC4;
    esi = 1;
    add_udv_by_name ();
    r14 = *(obj.call_argc);
    rdi = r12;
    rax = add_udv_by_name ();
    *((rbx + r14*8)) = rax;
    eax = misc.c;
    goto label_3;
label_40:
    edi = *(reloc.c_token);
    eax = add_udv_by_name ();
    if (eax == 2) {
        goto label_5;
    }
    esi = *(reloc.c_token);
    rax = *(obj.call_argc);
    edx = esi;
    rdi = rbx + rax*8;
    add_udv_by_name ();
    rax = *(obj.call_argc);
    rsi = r13;
    *(reloc.c_token)++;
    rdi = *((rbx + rax*8));
    add_udv_by_name ();
    rcx = *(obj.call_argc);
    rdx = *((rsp + 0x10));
    rax = rcx;
    if (*((rbx + rcx*8)) == rdx) {
        goto label_3;
    }
    if (*(rdx) != 0) {
        goto label_3;
    }
    rax = rcx * 3;
    xmm1 = 0;
    rdi = rbp + rax*8;
    add_udv_by_name ();
    goto label_6;
label_38:
    rax = *(obj.lf_head);
    *((rax + 0x44)) = edi;
    goto label_1;
label_37:
    eax = add_udv_by_name ();
label_42:
    rsi = "Unrecognized argument type";
    edi = r14d;
    eax = 0;
    add_udv_by_name ();
    __asm ("endbr64");
    if (edi == 0x24) {
        goto label_43;
    }
    if (edi != 0x23) {
        edx = rdi - 0x30;
        if (edx > 9) {
            goto label_44;
        }
        rax = loc__LC12;
        if (*(obj.call_argc) > edx) {
            rdx = (int64_t) edx;
            rax = obj_call_args;
            rax = *((rax + rdx*8));
        }
        return rax;
    }
    r8d = misc.c;
    if (r8d > 9) {
        goto label_45;
    }
    rcx = loc__LC16;
    do {
        edx = 3;
        esi = 1;
        rdi = obj_numstr_12095;
        eax = 0;
        add_udv_by_name ();
        rax = obj_numstr_12095;
        return rax;
label_43:
        rax = loc__LC13;
        return rax;
label_44:
        r8d = edi;
        rcx = loc__LC17;
    } while (1);
label_45:
    rdx = "call_argc >= 0 && call_argc <= 9";
    rsi = "Assertion failed: %s";
    edi |= 0xffffffff;
    eax = 0;
    add_udv_by_name ();
label_21:
    __asm ("endbr64");
    rbp = *(obj.lf_head);
    if (rbp == 0) {
        goto label_46;
    }
    rdi = *(rbp);
    if (rdi != 0) {
        if (rdi == *(reloc.stdin)) {
            goto label_11;
        }
        rax = *((rbp + 8));
        if (rax != 0) {
            if (*(rax) == 0x3c) {
                goto label_47;
            }
        }
        add_udv_by_name ();
    }
label_11:
    if (*((rbp + 0x10)) != 0) {
label_9:
        rbx = *((rbp + 0x1c));
        eax = *((rbp + 0x18));
        rdi = "GPVAL_LINENO";
        *(reloc.interactive) = al;
        *(reloc.inline_num) = ebx;
        add_udv_by_name ();
        rsi = *((rbp + 0x38));
        *((rax + 0x18)) = rbx;
        eax = *((rbp + 0x24));
        *(reloc.if_depth) = eax;
        eax = *((rbp + 0x29));
        *(reloc.if_condition) = al;
        eax = *((rbp + 0x28));
        *(reloc.if_open_for_else) = al;
        if (rsi != 0) {
            eax = *((rbp + 0x40));
            edx = *((rbp + 0x44));
            *(reloc.num_tokens) = eax;
            *(reloc.c_token) = edx;
            if (eax >= *(reloc.token_table_size)) {
                goto label_48;
            }
            eax++;
            rdi = *(reloc.token);
            rax = (int64_t) eax;
            rdx = rax * 5;
            rdx <<= 3;
            add_udv_by_name ();
            rdi = *((rbp + 0x38));
            add_udv_by_name ();
        }
        rsi = *((rbp + 0x30));
        if (rsi != 0) {
            rdi = *(reloc.gp_input_line);
            add_udv_by_name ();
            rdi = *((rbp + 0x30));
            add_udv_by_name ();
        }
        rdi = *((rbp + 8));
        add_udv_by_name ();
        rdi = *((rbp + 0x10));
        add_udv_by_name ();
        rax = *((rbp + 0x48));
        rdi = rbp;
        *(obj.lf_head) = rax;
        add_udv_by_name ();
        eax = 1;
        return rax;
    }
    r13 = obj_call_args;
    r12 = rbp + 0x58;
    r14 = r13 + 0x50;
    rbx = r13;
    do {
        rdi = *(rbx);
        if (rdi != 0) {
            add_udv_by_name ();
        }
        rax = *(r12);
        rbx += 8;
        r12 += 8;
        *((rbx - 8)) = rax;
    } while (r14 != rbx);
    eax = *((rbp + 0x50));
    rdi = loc__LC8;
    *(obj.call_argc) = eax;
    rax = add_udv_by_name ();
    if (rax != 0) {
        rsi = *(obj.call_argc);
        rdi = rax + 0x10;
        add_udv_by_name ();
    }
    rdi = loc__LC9;
    rax = add_udv_by_name ();
    if (rax != 0) {
        r12 = rax + 0x10;
        rdi = r12;
        add_udv_by_name ();
        rax = *((rbp + 0x48));
        if (rax == 0) {
            goto label_49;
        }
        rdi = *((rax + 8));
        if (rdi == 0) {
            goto label_49;
        }
label_10:
        rax = add_udv_by_name ();
        rdi = r12;
        rsi = rax;
        add_udv_by_name ();
    }
    r12 = str_ARG2;
    rdi = "ARG1";
    r14 = r12 + 0x40;
    goto label_50;
label_7:
    rax = add_udv_by_name ();
    rdi = r15;
    rsi = rax;
    add_udv_by_name ();
    do {
        r13 += 8;
        if (r12 == r14) {
            goto label_51;
        }
label_8:
        rdi = *(r12);
        r12 += 8;
label_50:
        rax = add_udv_by_name ();
        rbx = rax;
    } while (rax == 0);
    r15 = rax + 0x10;
    rdi = r15;
    add_udv_by_name ();
    rdi = *(r13);
    if (rdi != 0) {
        goto label_7;
    }
    *((rbx + 0x10)) = 7;
    r13 += 8;
    if (r12 != r14) {
        goto label_8;
    }
label_51:
    rdi = loc__LC10;
    rax = add_udv_by_name ();
    rbx = rax;
    if (rax == 0) {
        goto label_9;
    }
    if (*((rax + 0x10)) != 5) {
        goto label_9;
    }
    r12 = *((rbp + 0xb0));
    rdi = rax + 0x10;
    add_udv_by_name ();
    *((rbx + 0x10)) = 5;
    rsi = loc__LC11;
    eax = r12 + 1;
    rax = (int64_t) eax;
    rdi = rax * 3;
    rdi <<= 3;
    rax = add_udv_by_name ();
    *((rbx + 0x18)) = rax;
    if (r12d < 0) {
        goto label_9;
    }
    edx = 0;
    rsi = r12 * 3;
    rsi <<= 3;
    do {
        __asm ("movdqu xmm0, xmmword [rbp + rdx + 0xa8]");
        __asm ("movups xmmword [rax + rdx], xmm0");
        rcx = *((rbp + rdx + 0xb8));
        *((rax + rdx + 0x10)) = rcx;
        rdx += 0x18;
    } while (rdx != rsi);
    goto label_9;
label_46:
    eax = 0;
    return rax;
label_49:
    rdi = loc__LC12;
    goto label_10;
label_47:
    eax = add_udv_by_name ();
    goto label_11;
label_48:
    rdx = "token_table_size >= lf->num_tokens+1";
    rsi = "Assertion failed: %s";
    edi |= 0xffffffff;
    eax = 0;
    add_udv_by_name ();
    __asm ("endbr64");
    r13 = rsi;
    esi = 0;
    r12 = rdi;
    edi = 0x198;
    rax = add_udv_by_name (rbx, rbp, r12);
    if (rax == 0) {
        goto label_52;
    }
    *(rax) = r12;
    rbx = rax;
    *((rax + 8)) = r13;
    *((rax + 0x10)) = rbp;
    eax = *(reloc.interactive);
    *((rbx + 0x18)) = al;
    eax = *(reloc.inline_num);
    *((rbx + 0x1c)) = eax;
    eax = misc.c;
    *((rbx + 0x50)) = eax;
    if (rbp != 0) {
label_12:
        rax = *(obj.lf_head);
        if (rax == 0) {
            goto label_53;
        }
        eax = *((rax + 0x20));
        eax++;
        *((rbx + 0x20)) = eax;
        if (eax > 0xfa) {
            goto label_54;
        }
label_14:
        eax = *(reloc.if_depth);
        rsi = "lf tokens";
        *((rbx + 0x24)) = eax;
        eax = *(reloc.if_open_for_else);
        *((rbx + 0x28)) = al;
        eax = *(reloc.if_condition);
        *((rbx + 0x29)) = al;
        eax = *(reloc.c_token);
        *((rbx + 0x44)) = eax;
        eax = *(reloc.num_tokens);
        *((rbx + 0x40)) = eax;
        eax++;
        rax = (int64_t) eax;
        rdi = rax * 5;
        rdi <<= 3;
        rax = add_udv_by_name ();
        rsi = *(reloc.token);
        *((rbx + 0x38)) = rax;
        rdi = rax;
        eax = *(reloc.num_tokens);
        edx = rax + 1;
        rdx = (int64_t) edx;
        rdx *= 5;
        rdx <<= 3;
        add_udv_by_name ();
        rdi = *(reloc.gp_input_line);
        rax = add_udv_by_name ();
        *((rbx + 0x30)) = rax;
        rax = *(obj.lf_head);
        *(obj.lf_head) = rbx;
        *((rbx + 0x48)) = rax;
        return rax;
    }
    rax = obj_call_args;
    rdx = rbx + 0x58;
    rsi = rax + 0x50;
    do {
        rcx = *(rax);
        rax += 8;
        rdx += 8;
        *((rdx - 8)) = rcx;
        *((rax - 8)) = 0;
    } while (rax != rsi);
    *((rbx + 0xb0)) = 0;
    rdi = loc__LC10;
    *((rbx + 0xa8)) = 7;
    rax = add_udv_by_name ();
    r12 = rax;
    if (rax == 0) {
        goto label_12;
    }
    if (*((rax + 0x10)) != 5) {
        goto label_12;
    }
    eax = misc.c;
    if (eax < 0) {
        goto label_12;
    }
    ebp = 0;
    r13d = 0;
    goto label_55;
label_13:
    r13d++;
    rbp += 0x18;
    if (*(obj.call_argc) < r13d) {
        goto label_12;
    }
label_55:
    rax = *((r12 + 0x18));
    __asm ("movdqu xmm0, xmmword [rax + rbp]");
    __asm ("movups xmmword [rbx + rbp + 0xa8], xmm0");
    rax = *((rax + rbp + 0x10));
    *((rbx + rbp + 0xb8)) = rax;
    if (*((rbx + rbp + 0xa8)) != 3) {
        goto label_13;
    }
    rdi = *((rbx + rbp + 0xb0));
    rax = add_udv_by_name ();
    *((rbx + rbp + 0xb0)) = rax;
    goto label_13;
label_53:
    *((rbx + 0x20)) = 0;
    goto label_14;
label_54:
    rsi = "load/eval nested too deeply";
    edi |= 0xffffffff;
    eax = 0;
    add_udv_by_name ();
label_52:
    if (r12 != 0) {
        rdi = r12;
        eax = add_udv_by_name ();
    }
    edi = *(reloc.c_token);
    rsi = "not enough memory to load file";
    eax = 0;
    add_udv_by_name ();
    __asm ("endbr64");
    rax = rdi;
    r13d = 0;
    r12 = rdi;
    *((rsp + 0x20)) = edx;
    if (edx == 6) {
        goto label_56;
    }
label_31:
    if (rax == 0) {
        goto label_57;
    }
    rdi = "GPVAL_LINENO";
    rax = add_udv_by_name ();
    esi = 0;
    rdi = rax + 0x10;
    *((rsp + 8)) = rax;
    add_udv_by_name ();
    edx = 0;
    rsi = rbp;
    rdi = r12;
    add_udv_by_name ();
    if (*(reloc.stdin) == r12) {
        goto label_58;
    }
    edi = *((rsp + 0x20));
    rsp + 0x17 = (r12 == 0) ? 1 : 0;
    rax = _text ();
    goto label_15;
    *(reloc.interactive) = 0;
    *(reloc.inline_num) = 0;
label_19:
    rdx = *(reloc.gp_input_line);
label_20:
    r15d = *(reloc.gp_input_line_len);
    rbx = rdx;
    r14d = 0;
    do {
label_24:
        if (r12 == 0) {
            goto label_59;
        }
label_16:
        rbp = (int64_t) r14d;
        rdx = r12;
        esi = r15d;
        rdi = rbx + rbp;
        rax = add_udv_by_name ();
        if (rax == 0) {
            goto label_60;
        }
label_18:
        rbx = *(reloc.gp_input_line);
label_17:
        eax = *(reloc.inline_num);
        rcx = *((rsp + 8));
        rdi = rbx;
        eax++;
        *(reloc.inline_num) = eax;
        rax = (int64_t) eax;
        *((rcx + 0x18)) = rax;
        rax = add_udv_by_name ();
    } while (eax == 0);
    r14d = rax - 1;
    rcx = (int64_t) r14d;
    rdx = rbx + rcx;
    eax = *(rdx);
    if (al == 0xa) {
        goto label_61;
    }
    edx = rbp + 1;
    if (edx >= r15d) {
        goto label_62;
    }
label_22:
    if (al != 0x5c) {
        goto label_63;
    }
    r15d = *(reloc.gp_input_line_len);
    r15d -= r14d;
    if (r12 != 0) {
        goto label_16;
    }
label_59:
    if (r13 == 0) {
        goto label_17;
    }
    if (*((rsp + 0x17)) == 0) {
        goto label_17;
    }
    rsi = *(r13);
    rdi = (int64_t) r14d;
    rdi += rbx;
    if (rsi == 0) {
        goto label_64;
    }
    rdx = (int64_t) r15d;
    r13 += 8;
    add_udv_by_name ();
    goto label_18;
label_60:
    rax = *(reloc.gp_input_line);
    *((rax + rbp)) = 0;
label_23:
    al = add_udv_by_name ();
    if (al != 0) {
        goto label_30;
    }
    rdi = *(reloc.gp_input_line);
    if (*(rdi) == 0) {
        goto label_30;
    }
    r15d = 1;
    goto label_65;
label_63:
    add_udv_by_name ();
    rsi = reloc_gp_input_line_len;
    rdi = reloc_gp_input_line;
    eax = add_udv_by_name ();
    rdx = *(reloc.token);
    *(reloc.num_tokens) = eax;
    rax = (int64_t) eax;
    rax *= 5;
    rax = rdx + rax*8;
    rax = *((rax + 0x20));
    rax += *(reloc.gp_input_line);
    if (*(rax) == 0x23) {
        *(rax) = 0;
    }
    r15d = *(reloc.curly_brace_count);
    if (r15d < 0) {
        goto label_66;
    }
    if (r15d != 0) {
        goto label_67;
    }
    al = add_udv_by_name ();
    if (al != 0) {
        goto label_19;
    }
    rdx = *(reloc.gp_input_line);
    rdi = rdx;
    if (*(rdx) == 0) {
        goto label_20;
    }
label_65:
    eax = *((rsp + 0x20));
    if (eax == 2) {
        goto label_68;
    }
    if (eax == 5) {
        goto label_68;
    }
label_27:
    *(reloc.screen_ok) = 0;
    eax = add_udv_by_name ();
    if (eax != 0) {
        goto label_30;
    }
    if (r15d == 0) {
        goto label_19;
    }
label_30:
    goto label_21;
label_61:
    *(rdx) = 0;
    if (r14d <= 0) {
        goto label_69;
    }
    rbx = *(reloc.gp_input_line);
    r14d = rbp - 2;
    rcx = (int64_t) r14d;
    rdx = rbx + rcx;
    eax = *(rdx);
    if (al != 0xd) {
        goto label_22;
    }
    *(rdx) = 0;
    if (r14d <= 0) {
        goto label_70;
    }
    rbx = *(reloc.gp_input_line);
    r14d = rbp - 3;
    rax = (int64_t) r14d;
    eax = *((rbx + rax));
    goto label_22;
label_64:
    *(rdi) = 0;
    goto label_23;
label_67:
    r14d += 4;
    r14 = (int64_t) r14d;
    if (r14 > *(reloc.gp_input_line_len)) {
        goto label_71;
    }
label_25:
    rbx = *(reloc.gp_input_line);
    rdi = *(reloc.gp_input_line);
    rax = add_udv_by_name ();
    rbx += rax;
    eax = 0xa3b;
    *(rbx) = ax;
    *((rbx + 2)) = 0;
    rbx = *(reloc.gp_input_line);
    rdi = *(reloc.gp_input_line);
    eax = add_udv_by_name ();
    r15d = *(reloc.gp_input_line_len);
    r14d = eax;
    r15d -= eax;
    goto label_24;
label_69:
    rbx = *(reloc.gp_input_line);
    rdx = rbx + rcx;
    eax = *(rdx);
    if (al != 0xd) {
        goto label_22;
    }
    *(rdx) = 0;
label_70:
    rbx = *(reloc.gp_input_line);
    eax = *((rbx + rcx));
    goto label_22;
label_62:
    add_udv_by_name ();
    r15d = *(reloc.gp_input_line_len);
    r14d = ~r14d;
    rbx = *(reloc.gp_input_line);
    r15d += r14d;
    r14d = ebp;
    goto label_24;
label_71:
    add_udv_by_name ();
    goto label_25;
label_68:
    rax = add_udv_by_name ();
    r8 = rax;
    *((rsp + 0x18)) = rax;
    rax = *(reloc.gp_input_line);
    *(rax) = 0;
    eax = *(r8);
    if (al == 0) {
        goto label_72;
    }
    r10d = 0;
    edx = 0;
    *((rsp + 0x24)) = r15d;
    *((rsp + 0x28)) = r13;
    r15 = rdx;
    r13d = r10d;
    *((rsp + 0x30)) = r12;
    r12 = r8;
    while (r15 <= *(reloc.gp_input_line_len)) {
label_26:
        esi = *(r12);
        rax = *(reloc.gp_input_line);
        *((rax + rbx)) = sil;
        rax = r14;
        r14 = r12;
        r12 = rax;
label_28:
        eax = *((r14 + 1));
        if (al == 0) {
            goto label_73;
        }
        r14 = r12 + 1;
        rbx = r15;
        if (al == 0x24) {
            goto label_74;
        }
        r13d++;
        r15 = (int64_t) r13d;
    }
    add_udv_by_name ();
    goto label_26;
label_73:
    r10d = r13d;
    r15d = *((rsp + 0x24));
    r13 = *((rsp + 0x28));
    eax = r10 + 1;
    r12 = *((rsp + 0x30));
    rax = (int64_t) eax;
label_32:
    if (rax > *(reloc.gp_input_line_len)) {
        goto label_75;
    }
label_29:
    rax = *(reloc.gp_input_line);
    rdi = *((rsp + 0x18));
    *((rax + rbp)) = 0;
    add_udv_by_name ();
    goto label_27;
label_74:
    edi = *((r12 + 1));
    rax = add_udv_by_name ();
    rdi = rax;
    rax = add_udv_by_name ();
    ebx = rax + 1;
    *((rsp + 0x38)) = rax;
    rax = *(reloc.gp_input_line_len);
    rbx = (int64_t) ebx;
    rax -= r15;
    if (rbx <= rax) {
        goto label_76;
    }
    do {
        add_udv_by_name ();
        rax = *(reloc.gp_input_line_len);
        rax -= r15;
    } while (rbx > rax);
label_76:
    rdi = *(reloc.gp_input_line);
    rsi = rbp;
    r12 += 2;
    rdi += r15;
    add_udv_by_name ();
    r13d += *((rsp + 0x38));
    r15 = (int64_t) r13d;
    goto label_28;
label_75:
    add_udv_by_name ();
    goto label_29;
label_58:
    *(reloc.interactive) = 1;
    do {
        eax = add_udv_by_name ();
    } while (eax == 0);
    goto label_30;
label_56:
    rdi = rsi;
    rax = add_udv_by_name ();
    r13 = rax;
    rax |= r12;
    goto label_31;
label_72:
    ebp = 0;
    eax = 1;
    goto label_32;
label_66:
    rsi = "Unexpected }";
    edi = 0xffffffff;
    eax = 0;
    add_udv_by_name ();
label_57:
    rdx = rbp;
    rsi = "Cannot load input from '%s';
    edi |= 0xffffffff;
    rax = add_udv_by_name ();
    __asm ("endbr64");
    rax = *(obj.lf_head);
    if (rax != 0) {
        rax = *(rax);
    }
    return rax;
}
   p p pd pd pdg pdg pdg  pdg  pdg @ pdg @ pdg @  pdg @  pdg @ s pdg @ s pdg @ sy pdg @ sy pdg @ sym pdg @ sym pdg @ sym. pdg @ sym. pdg @ sym.l pdg @ sym.l pdg @ sym.lo pdg @ sym.lo pdg @ sym.loa pdg @ sym.loa pdg @ sym.load pdg @ sym.load pdg @ sym.load_ pdg @ sym.load_ pdg @ sym.load_f pdg @ sym.load_f pdg @ sym.load_fi pdg @ sym.load_fi pdg @ sym.load_fil pdg @ sym.load_fil pdg @ sym.load_file pdg @ sym.load_file pdg @ sym.load_file_ pdg @ sym.load_file_ pdg @ sym.load_file_e pdg @ sym.load_file_e pdg @ sym.load_file_er pdg @ sym.load_file_er pdg @ sym.load_file_err pdg @ sym.load_file_err pdg @ sym.load_file_erro pdg @ sym.load_file_erro pdg @ sym.load_file_error pdg @ sym.load_file_error
void sym.load_file_error(void)
{
    char cVar1;
    
    do {
        cVar1 = func_0x0802c869();
    } while (cVar1 != '\0');
    return;
}
   p p pd pd pdd pdd pdd  pdd  pdd @ pdd @ pdd @  pdd @  pdd @ s pdd @ s pdd @ sy pdd @ sy pdd @ sym pdd @ sym pdd @ sym. pdd @ sym. pdd @ sym.l pdd @ sym.l pdd @ sym.lo pdd @ sym.lo pdd @ sym.loa pdd @ sym.loa pdd @ sym.load pdd @ sym.load pdd @ sym.load_ pdd @ sym.load_ pdd @ sym.load_f pdd @ sym.load_f pdd @ sym.load_fi pdd @ sym.load_fi pdd @ sym.load_fil pdd @ sym.load_fil pdd @ sym.load_file pdd @ sym.load_file pdd @ sym.load_file_ pdd @ sym.load_file_ pdd @ sym.load_file_e pdd @ sym.load_file_e pdd @ sym.load_file_er pdd @ sym.load_file_er pdd @ sym.load_file_err pdd @ sym.load_file_err pdd @ sym.load_file_erro pdd @ sym.load_file_erro pdd @ sym.load_file_error pdd @ sym.load_file_error/* r2dec pseudo code output */
/* /home/jmov/PycharmProjects/RadareQUI/Specimens/ObjFiles/misc.o @ 0x8001120 */
#include <stdint.h>
 
uint8_t load_file_error (void) {
    __asm ("endbr64");
    do {
        al = add_udv_by_name ();
    } while (al != 0);
    return al;
}



















